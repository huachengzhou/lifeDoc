<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python 插件学习 on 所悟所想</title>
    <link>https://huachengzhou.github.io/life/docs/python/install/</link>
    <description>Recent content in python 插件学习 on 所悟所想</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 15 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://huachengzhou.github.io/life/docs/python/install/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python pyinstaller </title>
      <link>https://huachengzhou.github.io/life/docs/python/install/pyinstaller/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/python/install/pyinstaller/</guid>
      <description>pyinstaller#安装# 安装  pip install pyinstaller  验证安装  C:\Users\noatn&amp;gt;pyinstaller -v 5.8.0  更新PyInstaller  pip install --upgrade pyinstaller  下载PyInstaller开发版本   如果你认为当前发行版本无法满足你的要求，或者你发现了bug的话，可以尝试用一下最新的开发版本
 pip install https://github.com/pyinstaller/pyinstaller/tarball/develop 打包#打包为单文件# 平时我们见到很多便携的单文件程序，假如我们写了一个小脚本，寥寥数行代码，打包成一个文件夹显然不合适，这就可使用Pyinstaller打包成一个exe
 # 将 xx.py 打包为 xx.exe pyinstaller -F xx.py 打包为单文件 并且去掉命令行界面## 将 xx.py 打包为 xx.exe pyinstaller -F -w xx.py 打包资源文件夹## 将 xx.py 打包 pyinstaller xx.</description>
    </item>
    
    <item>
      <title>python pyecharts  </title>
      <link>https://huachengzhou.github.io/life/docs/python/install/pyecharts/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/python/install/pyecharts/</guid>
      <description>pyecharts# Python可视化神器之pyechart
 参考1 参考2</description>
    </item>
    
    <item>
      <title>python NumPy  </title>
      <link>https://huachengzhou.github.io/life/docs/python/install/NumPy/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/python/install/NumPy/</guid>
      <description>NumPy#什么是 NumPy#NumPy 是用于处理数组的 python 库。
它还拥有在线性代数、傅立叶变换和矩阵领域中工作的函数。
NumPy 由 Travis Oliphant 于 2005 年创建。它是一个开源项目，您可以自由使用它。
NumPy 指的是数值 Python（Numerical Python）
为何使用 NumPy？#在 Python 中，我们有满足数组功能的列表，但是处理起来很慢。
NumPy 旨在提供一个比传统 Python 列表快 50 倍的数组对象。
NumPy 中的数组对象称为 ndarray，它提供了许多支持函数，使得利用 ndarray 非常容易。
数组在数据科学中非常常用，因为速度和资源非常重要。
数据科学：计算机科学的一个分支，研究如何存储、使用和分析数据以从中获取信息。</description>
    </item>
    
    <item>
      <title>python pyqt5</title>
      <link>https://huachengzhou.github.io/life/docs/python/install/pyqt5/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/python/install/pyqt5/</guid>
      <description>pyqt5#基本结构## 导入需要的包 from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QPushButton) import sys as sysUtils # 创建一个应用程序 app = QApplication(sysUtils.argv) # 控件也可以作为一个容器(承载其他的控件) # 控件操作 start window = QWidget() window.setWindowTitle( &amp;#34;燕雀安知鸿鹄之志哉&amp;#34;) window.resize(600, 600) window.move(200, 200) # window 相当于是构建器 label = QLabel(window) label.setText( &amp;#34;第一眼就看上的衣服往往你买不起，第一眼就心动的人往往他不会喜欢你。你真正喜欢想要的，没有一样是可以轻易得到的。这就是努力的理由&amp;#34;) label.move(100,100) # show方法 不要放在前面了 window.show() # 控件操作 end # 开始执行应用程序，并进入消息循环 # 让整个程序开始执行,并且进入到消息循环(无限循环) # 检测整个程序所接收到的用户的交互信息 # sysUtils.exit(app.exec()) sysUtils.exit(app.exec_()) # sysUtils.exit(1) # while True: # pass 表格# QTableWidget常用方法     方法 描述     setRowCount(rows) 设置QTableWidget表格控件的行数   setColumnCount(columns) 设置QTableWidget表格控件的列数   setHorizontalHeaderLabels(labels) 设置QTableWidget表格控件的水平标签   setVerticalHeaderLabels(labels) 设置QTableWidget表格控件的垂直标签   setRowHeight(row) 设置单元格行的高度   setColumnWidth(column) 设置单元格列的宽度   setItem(row,column,item) 设置QTableWidgetItem给指定的行和列   insertRow(row) 在行索引处插入行   insertColumn(column) 在列索引处插入列   removeRow(row) 在行索引处删除行   removeColumn(column) 在列索引处删除列   findItems(text,flags) 使用给定的标志查找文本与字符串文本匹配的项目   setCellWidget(row,column,widget) 给指定行和列的单元格设置组件   removeCellWidget(row,column) 删除指定行和列的单元格的组件   item(row,column) 返回给定行和列的项目（如果已设置）；否则返回None   row(item) 返回该表格项的行索引   column(item) 返回该表格项的列索引   rowCount() 返回表格的所有行数   columnCount() 返回表格的所有列数   currentItem() 返回当前的表格项   currentRow() 返回当前表格项的行索引   currentColumn() 返回当前表格项的列索引   selectedItems() 返回所有选定表格项的列表   horizontalHeader().</description>
    </item>
    
    <item>
      <title>python pyqt5 介绍</title>
      <link>https://huachengzhou.github.io/life/docs/python/install/pyqt5_note/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/python/install/pyqt5_note/</guid>
      <description>关于 PyQt5#PyQt5 是Digia的一套Qt5应用框架与python的结合，同时支持2.x和3.x。本教程使用的是3.x。Qt库由Riverbank Computing开发，是最强大的GUI库之一 ，官方网站：www.riverbankcomputing.co.uk/news。
PyQt5是由一系列Python模块组成。超过620个类，6000函数和方法。能在诸如Unix、Windows和Mac OS等主流操作系统上运行。PyQt5有两种证书，GPL和商业证书。
PyQt5类分为很多模块，主要模块有：
 QtCore 包含了核心的非GUI的功能。主要和时间、文件与文件夹、各种数据、流、URLs、mime类文件、进程与线程一起使用。 QtGui 包含了窗口系统、事件处理、2D图像、基本绘画、字体和文字类。 QtWidgets QtMultimedia QtBluetooth QtNetwork QtPositioning Enginio QtWebSockets QtWebKit QtWebKitWidgets QtXml QtSvg QtSql QtTest  QtWidgets类包含了一系列创建桌面应用的UI元素。 QtMultimedia包含了处理多媒体的内容和调用摄像头API的类。 QtBluetooth模块包含了查找和连接蓝牙的类。 QtNetwork包含了网络编程的类，这些工具能让TCP/IP和UDP开发变得更加方便和可靠。 QtPositioning包含了定位的类，可以使用卫星、WiFi甚至文本。 Engine包含了通过客户端进入和管理Qt Cloud的类。 QtWebSockets包含了WebSocket协议的类。 QtWebKit包含了一个基WebKit2的web浏览器。 QtWebKitWidgets包含了基于QtWidgets的WebKit1的类。 QtXml包含了处理xml的类，提供了SAX和DOM API的工具。 QtSvg提供了显示SVG内容的类，Scalable Vector Graphics (SVG)是一种是一种基于可扩展标记语言（XML），用于描述二维矢量图形的图形格式（这句话来自于维基百科）。 QtSql提供了处理数据库的工具。 QtTest提供了测试PyQt5应用的工具。
PyQt4和PyQt5的区别#PyQt5不兼容PyQt4。PyQt5有一些巨大的改进。但是，迁移并不是很难，两者的区别如下：
 重新组合模块，一些模块已经被废弃(QtScript)，有些被分为两个子模块(QtGui, QtWebKit)。 添加了新的模块，比如QtBluetooth, QtPositioning，和Enginio。 废弃了SINGAL()和SLOT()的调用方式，使用了新的信号和xx处理方式。 不再支持被标记为废弃的或不建议使用的API。  安装#pip3 install PyQt5 -i https://pypi.douban.com/simple pip3 install PyQt5-tools -i https://pypi.</description>
    </item>
    
    <item>
      <title>python pyqt5 layout</title>
      <link>https://huachengzhou.github.io/life/docs/python/install/pyqt_layout/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/python/install/pyqt_layout/</guid>
      <description>layout (布局管理)#QLayout#QBoxLayout#QHNoxLayout#QVBoxLayout#QGridLayout#QStackedLayout#QFormLayout#参考1</description>
    </item>
    
    <item>
      <title>python pyqt5 皮肤和图标</title>
      <link>https://huachengzhou.github.io/life/docs/python/install/pyqt_resources/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/python/install/pyqt_resources/</guid>
      <description>皮肤选择#QDarkStyleSheet# 最完整的深色/浅色Qt主题
 pip install qdarkstyle  例子  # PyQt5 使用例子 import sys import qdarkstyle from PyQt5 import QtWidgets # create the application and the main window app = QtWidgets.QApplication(sys.argv) window = QtWidgets.QMainWindow() # setup stylesheet app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5()) # or in new API app.setStyleSheet(qdarkstyle.load_stylesheet(qt_api=&amp;#39;pyqt5&amp;#39;)) # run window.show() app.exec_() Qt-Material# 一个仿Material的样式，适用于PySide6, PySide2以及PyQt5
 pip install qt-material  例子  # 使用例子 import sys # from PySide6 import QtWidgets # from PySide2 import QtWidgets from PyQt5 import QtWidgets from qt_material import apply_stylesheet # create the application and the main window app = QtWidgets.</description>
    </item>
    
    <item>
      <title>python 机器学习  </title>
      <link>https://huachengzhou.github.io/life/docs/python/install/python_ml_getting_started/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/python/install/python_ml_getting_started/</guid>
      <description>机器学习#</description>
    </item>
    
  </channel>
</rss>
