<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>groovy 学习与使用  on 所悟所想</title>
    <link>https://huachengzhou.github.io/life/docs/javadir/groovy/</link>
    <description>Recent content in groovy 学习与使用  on 所悟所想</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 15 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://huachengzhou.github.io/life/docs/javadir/groovy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title> Groovy 概述 </title>
      <link>https://huachengzhou.github.io/life/docs/javadir/groovy/groovy%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/javadir/groovy/groovy%E5%AD%A6%E4%B9%A0/</guid>
      <description>Groovy 概述# Groovy是一种基于Java平台的面向对象语言。 Groovy 1.0于2007年1月2日发布，其中Groovy 2.4是当前的主要版本。 Groovy通过Apache License v 2.0发布。  Groovy的特点# 同时支持静态和动态类型。 支持运算符重载。 本地语法列表和关联数组。 对正则表达式的本地支持。 各种标记语言，如XML和HTML原生支持。 Groovy对于Java开发人员来说很简单，因为Java和Groovy的语法非常相似。 您可以使用现有的Java库。 Groovy扩展了java.lang.Object。  groovy-脚本和类#  在groovy中定义类和java中是一样的。类的方法可以是static，也可以是非static的
  groovy中的方法可以是public, protected, private，同时也支持java中的修饰符，比如synchronized
  groovy自动导入的包有以下这些
   groovy.lang.* groovy.util.* java.lang.* java.util.* java.net.* java.io.* import java.math.BigInteger import java.math.BigDecimal    在groovy和java中不同的一点就是，groovy默认是public的
  每一个groovy类，在JVM层级，都是字节码形式的java code，所以在java代码中可以调用groovy中申明的方法，反之亦然
  你可以指定方法的参数和返回值，以便他们能够更好的和java代码相互调用。当然你也可以实现接口或者重载方法。但是需要你没有指定方法后者属性的类型的话，那么在JVM层级的字节码中，他们将会是 java.lang.Object 类型
  例如 Callee.</description>
    </item>
    
    <item>
      <title>groovy 基本概念 </title>
      <link>https://huachengzhou.github.io/life/docs/javadir/groovy/groovy%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/javadir/groovy/groovy%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>groovy 基本概念#1、基本概念# Groovy是一种面向对象的动态类型语言，跟Java一样运行在JVM上。
（注：给Java静态世界带来动态能力的语言）
   与Java不同的语言特性：
  a) 函数字面值
  b) 对集合的一等支持
  c) 对正则表达式的一等支持
  d) 对XML处理的一等支持
  （注：所谓“一等”指的是内置到语言的语法中，不需要调用类库。）
  2:Groovy能解决包括：#  快速Web开发
  原型设计
  脚本处理
  等问题，这些使用Java不是解决动态层问题的理想语言。
  例如:
System.out.println(&amp;quot;It&#39;s a Groovy baby, yeah!&amp;quot;);def writer = new StringWriter();def xml = new groovy.xml.MarkupBuilder(writer);xml.person(id:2){name &#39;kobicc&#39;age 1}println writer.</description>
    </item>
    
    <item>
      <title>groovy 数据类型 </title>
      <link>https://huachengzhou.github.io/life/docs/javadir/groovy/groovy%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/javadir/groovy/groovy%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>Groovy 数据类型# 在任何编程语言中，需要使用各种变量来存储各种类型的信息。变量只是保留值的存储位置,这意味着，当你创建一个变量，你保留在内存中的一些空间来存储与变量相关的值。
  您可能喜欢存储各种数据类型的信息，如字符串，字符，宽字符，整数，浮点数，布尔值等。基于变量的数据类型，操作系统分配内存并决定什么可以存储在保留的存储器中。
 内置数据类型# byte -这是用来表示字节值。例如2。 short -这是用来表示一个短整型。例如10。 int -这是用来表示整数。例如1234。 long -这是用来表示一个长整型。例如10000090。 float -这是用来表示32位浮点数。例如12.34。 double -这是用来表示64位浮点数，这些数字是有时可能需要的更长的十进制数表示。例如12.3456565。 char -这定义了单个字符文字。例如“A”。 Boolean -这表示一个布尔值，可以是true或false。 String -这些是以字符串的形式表示的文本。例如，“Hello World”的  绑定值#   类型 值     byte -128到127   short -32,768到32,767   int 2,147,483,648 到,147,483,647   long -9,223,372,036,854,775,808到+9,223,372,036,854,775,807   float 1.40129846432481707e-45到3.40282346638528860e + 38   double 4.</description>
    </item>
    
    <item>
      <title> groovy变量和数据类型 </title>
      <link>https://huachengzhou.github.io/life/docs/javadir/groovy/groovy%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8A%A0%E5%BC%BA/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/javadir/groovy/groovy%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8A%A0%E5%BC%BA/</guid>
      <description>groovy 变量和数据类型#groovy类型自动推断# 先看有一段代码  def a = 12;def int a1 = 12;def a_type = a instanceof Integer ;def a1_type = a1 instanceof Integer ;println(a_type) ;println(a1_type) ;//打印结果如下truetrue 从上面我们可以看出a和a1实际推导出的类型是一样的,但是有哪些不同呢 接着我把上面的例子改了  def a = 12;def int a1 = 12;def a_type = a instanceof Integer ;def a1_type = a1 instanceof Integer ;println(a_type) ;println(a1_type) ;a = 52253.</description>
    </item>
    
    <item>
      <title> groovy变量值获取 </title>
      <link>https://huachengzhou.github.io/life/docs/javadir/groovy/%E5%A6%82%E4%BD%95%E5%9C%A8groovy%E4%B8%AD%E8%8E%B7%E5%8F%96%E4%BB%A5%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E7%9A%84%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/javadir/groovy/%E5%A6%82%E4%BD%95%E5%9C%A8groovy%E4%B8%AD%E8%8E%B7%E5%8F%96%E4%BB%A5%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E7%9A%84%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/</guid>
      <description>groovy变量值获取#`
https://www.codenong.com/34288451/
`
回到上一级#</description>
    </item>
    
    <item>
      <title> groovy对象比较以及空判断 </title>
      <link>https://huachengzhou.github.io/life/docs/javadir/groovy/groovy%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AF%94%E8%BE%83%E4%BB%A5%E5%8F%8A%E9%9D%9E%E7%A9%BA%E5%88%A4%E6%96%AD/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/javadir/groovy/groovy%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AF%94%E8%BE%83%E4%BB%A5%E5%8F%8A%E9%9D%9E%E7%A9%BA%E5%88%A4%E6%96%AD/</guid>
      <description>groovy 对象比较以及空判断# 目前测试得知 groovy的比较貌似很多直接可以使用==来比较
 groovy对象的比较#1.字符串比较#def str1 = &amp;quot;Hello World1&amp;quot;if (&amp;quot;Hello World&amp;quot; == str1) {println &amp;quot;Hello World&amp;quot;} else {println &amp;quot;不匹配&amp;quot;}2.map集合的比较（list集合也可以这样比较）#	def m1=[&amp;quot;name&amp;quot;:&amp;quot;李明&amp;quot;,&amp;quot;age&amp;quot;:20]def m2=[&amp;quot;name&amp;quot;:&amp;quot;李明&amp;quot;,&amp;quot;age&amp;quot;:21]def m3=[&amp;quot;name&amp;quot;:&amp;quot;李明&amp;quot;,&amp;quot;age&amp;quot;:21]if(m1==m2){println &amp;quot;m1和m2匹配&amp;quot;}else{println &amp;quot;m1和m2不匹配&amp;quot;}  特别是字符串的比较，是不是比java要简洁的多呢
  如果要比较两个对象的引用是否相同在groovy中可以使用is
  def list1 = []def list2 = [1,2,3,4]boolean check = list1.</description>
    </item>
    
    <item>
      <title> groovy使用场景 </title>
      <link>https://huachengzhou.github.io/life/docs/javadir/groovy/groovy%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/javadir/groovy/groovy%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</guid>
      <description>groovy 使用场景#Groovy可以用于多种情况。比如#  1、作为shell脚本语言完成数据处理和文件操作任务。
  2、在Java或者Java EE应用程序中嵌入Groovy，实现Java和Groovy的集成。（这样有助于编写和集中处理经常变化的业务逻辑，或者给应用程序架构提供可编程的配置管理能力。）
  Groovy是增强Java平台的唯一的脚本语言。# 它提供了类似于Java的语法，内置映射（Map）、列表（List）、方法、类、闭包（closure）以及生成器。  脚本语言与系统编程语言：# 脚本语言不会替代系统编程语言，两者是相互补充的。
 系统编程语言的目的：#  开发复杂的算法或者数据结构
  实现计算密集型应用
  操作大型数据集
  实现定义良好的、变更缓慢的需求
  脚本语言应用的目的：#  连接已有的组件
  处理经常变化的多种类型的实体
  具有图形化用户界面
  拥有快速变化的功能
  Java编译器会产生可以在Java虚拟机上运行的字节码。#Groovy类和Java是二进制兼容的。#Groovy编译器产生的字节码与Java编译器产生的字节码是完全一样的。#——对于JVM而言，Groovy和Java是完全一样的。#因此，Groovy能够完全使用各种Java API。#Groovy是一门面向对象的语言。也就是说，Groovy中每一个事物最终都会被当做某些类 的一个实例对象。#回到上一级#</description>
    </item>
    
    <item>
      <title></title>
      <link>https://huachengzhou.github.io/life/docs/javadir/groovy/groovy%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/life/docs/javadir/groovy/groovy%E5%8F%98%E9%87%8F/</guid>
      <description>Groovy 变量# Groovy中的变量可以通过两种方式定义 - 使用数据类型的本地语法，或者使用def关键字。对于变量定义，必须明确提供类型名称或在替换中使用“def”。这是Groovy解析器需要的。
   byte - 这用于表示字节值。例如2。
  short - 用于表示一个短数。例如10。
  int - 这用于表示整数。 例如1234。
  long - 这用于表示一个长数。例如10000090。
  float - 用于表示32位浮点数。例如12.34。
  double - 这用于表示64位浮点数。例如12.3456565。
  char - 这定义了单个字符文字。例如&amp;rsquo;a&#39;。
  Boolean - 这表示一个布尔值，可以是true或false。
  String - 这是以字符串形式表示的文本。 例如“Hello World”。
  Groovy还允许其他类型的变量，如数组，结构和类
  变量声明# title: &amp;quot; groovy变量 &amp;quot; date: 2021-04-15 draft: false weight: 3#  变量声明告诉编译器为变量创建存储的位置和大小。</description>
    </item>
    
  </channel>
</rss>
