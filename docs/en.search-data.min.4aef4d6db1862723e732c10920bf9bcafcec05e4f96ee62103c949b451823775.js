'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/confident/','title':"如何提升自信",'section':"自信",'content':"case1 #  相信很多兄弟，多多少少都有点自卑，那么我们又应该如何去掉这些自卑，从而变得自信起来呢？\n在你想要变得自信之前，首先我们要知道自卑是什么。\n精神学家阿尔弗雷德·阿德勒在《自卑与超越》里曾经说过，人的自卑根源都来源于三个点：身体缺陷，骄纵，忽略。\n自卑的定义是什么？阿德勒提出：当一个人面对一个需要解决的问题的时候，他无能为力，一点办法都没有，这个时候他所出现的情绪就是自卑。\n换句话来说就是：自卑其实只是一种情绪。\n回头想想我们的过往经历，的确在很多场景中也出现过这样的情绪，比如：\n在面对比自己优秀的人的时候，比如看到一个非常漂亮的女生的时候，自己连正眼都不敢看向她。\n在重要场合中，比如职场中需要上台说话，会变得异常紧张，手心冒汗。\n在日常生活中，比如我们用的手机没有别人的贵，就会不好意思拿出手机来玩。\n这些都是比较大众化的，在这里，我来给兄弟们讲讲我的故事。\n昨天的文章也有写到，我原本出生在一个极其贫困的农村里，如果我后面没有走出来城市，我可能永远都不会因为觉得自己家太穷而自卑。\n农村的孩子一般都长不高，在出来城市里，面对着这些从小就经常运动的同学们，我的身高只能坐在课堂的前两排。\n因为前面的两个点，导致了我自卑的情绪从童年开始就一直伴随着我，人就会变得不爱说话，不喜欢和别人交往，长久以来，我就开始变得越来越内向，甚至是自闭。\n从小几乎就没有朋友，因为经常孤单只影，同学们也喜欢欺负我，撕烂我的书本，零用钱被抢，放学经常被人打。\n因为童年的这些阴影，包括家庭条件，个人条件（身高，性格），导致了我出来了社会之后还是一如既往的自卑。\n那个时候我已经放弃挣扎了，就像变成了一条死鱼，翻着白眼随着江水一直漂啊漂啊\u0026hellip;\n我的自卑到底来源于哪里？我总结过，你也可以看看你有没有。\n1，身体有缺陷\n可能很多兄弟都和我一样，觉得自己不够高，不够帅，不够壮，脸上有痘痘或者痘印痘坑之类的，或者其他的缺陷。\n比如像我在六年级的时候，因为被人追着打，把门牙摔崩了一颗，导致了我从小就不爱笑，因为一笑，就会露出我崩掉的门牙，从而导致了我对自己的身体很自卑。\n2，童年有阴影\n成绩差，同学的欺负，父母的离异，异性的拒绝，青春期的生理变化（青春痘，声音变化），这些情况都会导致了你性格内向，不爱说话，不喜欢与人交流等等习惯。\n3，他人的眼光\n自己眼里的自己，和别人眼里的自己，都会呈现出不同的版本。\n我们小时候要活给父母看，我们要做乖孩子。\n读书的时候要活给老师同学看，我们要有好成绩。\n出来职场后要活给同事看，我们需要好业绩。\n生活中要活给亲朋好友看，我们要过上好生活。\n对于这种现象，我们都已经习以为常了，因为从小就在这样的环境下成长，需要得到别人的认同，我们才能够确认到自己的价值所在。\n万一我们出现的现实和别人的期望值相差太远，我们就会开始自卑。\n4，生活的挫折\n比如我们在学习的时候成绩比不过别人，在职场上待遇没有别人好，求爱的时候频频遇到拒绝，包括家庭背景，住的房子，有没有车，开得什么车，日常的生活等等挫折。\n这些都是我们自卑的根源。\n当我们知道了自卑的根源和背后形成的原因之后，我们就能“对症下药”，逐步的解决问题。\n如何解决呢？\n我在线下课程的时候，针对自信这节课，就说过一句话：所有的不自信都是源于你有自卑点，想要变得自信，那你必须要把这些自卑点一个个的找出来，然后逐个的去掉它们，再不断的加强，这样的话你就能够变得自信起来了。\n解决自卑有一个公式：现实生活与心理预期差距太大——变得自卑——接受不能改变的，改变能改变的——产生优越感——不断强化——变得自信\n具体变得自信的方法是：\n1，独立\n活在父母庇护下的孩子永远长不大，所以我们的第一步就是要学会独立，不再依赖任何人。\n如果你能够独立起来，那你就能够有一个“不再活在别人眼里”的环境，再也不会受到别人的否定，嫌弃等等评价。\n以及你会拥有一个新的“自我评价”，我们的心理在没有完全成熟之前，会更多的依赖到别人的评价来确认自己的价值，但是一旦独立了，我们的心理就会逐步的成熟起来，这个时候的我们会更加的相信自我评价。\n2，减低期望\n人生最大的悲剧是：不甘于现状，但是能力又撑不起自己的野心，可是你又很努力，这种落差就是，你配不上自己的野心，也辜负了所受的苦。\n对自己的期望，要求，要跟实际情况相应的改变一下，就像你跟我说，今年想赚100万，可是你现在连一份工作都没有的，太过于不切实际。\n所以我建议兄弟们，我们在期望，在设定目标的时候，不需要想得太过于长远，不如想想下一个小时要做什么，明天要做什么。\n内心有着一个终极目标就行了，不需要时时刻刻都想着要完成它，因为可能这个目标距离你非常遥远，所以你需要做的，就是先把计划划分好，再提前计划好你每一天要做的事情。\n比如：你在下午的5点到7点，计划好要做什么，8点到10点计划好要做什么，然后按照你的计划去执行就是了。\n而你要去做这些“小时”的计划的时候，切记是要提前做，不要到了时间段才做，比如你要求自己在9点到10点的时候认真的看一本书，那你在晚上7点前就要计划好。\n而你每完成一次你的目标，就能够获得一次优越感，完成的次数多了，你自然就会越来越自信。\n3，接受\n有很多东西，我们再怎么努力可能都没有办法改变，那就要学会坦然的接受它，比如我们的容貌，我们的身高等等。\n而有些东西在短时间内并不能改变的，那就暂时接受它，比如没什么钱，阅历不够，情商不够，经验不够，不够成熟等等。\n4，改变\n当我们清楚了我们的自卑点是什么了之后，我们就要想出办法逐个解决。\n比如：\n我身高一直都是我的自卑点，那我想尽了一切的办法，比如穿了一双内增高6厘米的鞋子，把头发梳成大背头，用风筒吹上去一点，发型可以为我的身高增加3厘米左右，这样的话我164的身高看起来也会有172左右，有了这样的身高之后，我再也没有为我的身高而感到自卑过。\n比如：\n我以前走路经常会弯腰驼背，后面意识到了这一点之后开始慢慢的改正，但是很难很难，我去问了健身教练，他告诉我说只要你坚持的去做俯卧撑你就能不再弯腰驼背了，后来我每天都要做100个左右的俯卧撑，我现在走路腰板都是很直的。\n比如：\n我觉得我口才不行，一点都不会说话，即使和亲戚朋友之间都是没什么话题可聊，那我就开始去看书，去看课程，看相关的教程，再逐步的锻炼，现在我不能说我口才有多么的好，但是基本上的人际交往都不会有什么压力。\n比如：\n我一直都觉得我比较穷，那我就开始想办法赚钱，我列出了所有我能够做的工作，再一个个的排除，最终从一个小小的厨师一个月收入1700，变成了一个古典家具的师傅，一个月有7000左右，后来自己创业，收入越来越高。\n我们缺了什么，就去补充什么，也许和别人比，我们还是不够优秀，但是和昨天的自己比，那我又进步了一点，这样长久下去，即使我还是不够自信，但是我绝对也不会自卑了。\n5，强化\n当你开始不自卑的时候，你想要获得真正的自信，那你就需要有拿得出手的东西。\n比如你通过努力了之后变得有点钱，或者说变得有点情商，有点阅历，口才有点好等等；\n但是这也是远远不够的，因为你只是做了你应该做的，真正的自信，你需要做到的不是“有点”，而是“很有”，或者“非常有”，你就会变得真真正正的自信起来了。\n自卑是一种情绪，但是自信就是一种能力！\n我一直都坚信，锻炼自信就像锻炼我们的肌肉一样，知道问题的根源，然后逐个的解决，再逐步的强化，你就会有一身的“肌肉”。\n所以兄弟们应该清楚，想要变得自信，没有任何的捷径。\ncase2 #   如何增强自信（15方法）  自信，就是对自己能够达到某种目标的乐观、充分估计。美国作家爱默生说：“自信是成功的第一秘诀。”可以说，拥有自信就拥有无限机会。那么如何增强自信呢？\n增强自信的第一个方法：关注自己的优点。在纸上列下十个优点，不论是哪方面（细心、眼睛好看等等，多多益善），在从事各种活动时，想想这些优点，并告诉自己有什么优点。这样有助你提升从事这些活动的自信，这叫做“自信的蔓延效应”。这一效应对提升自信效果很好。\n增强自信的第二个方法：与自信的人多接触。“近朱者赤，近墨者黑”这一点对增强自信同样有效。\n增强自信的第三个方法：自我心理暗示，不断对自己进行正面心理强化，避免对自己进行负面强化。一旦自己有所进步（不论多小）就对自己说：“我能行！”、“我很棒！”、“我能做得更好！”等等，这将不断提升自己的信心。\n增强自信的第四个方法：树立自信的外部形象。首先，保持整洁、得体的仪表，有利于增强一个人的自信；其次，举止自信，如行路目视前方等，刚开始可能不习惯，但过一段时间后就会有发自内心的自信；另外，注意锻炼、保持健美的体形对增强自信也很有帮助。\n增强自信的第五个方法：.不可谦虚过度。谦虚是必要的，但不可过度，过分贬低自己对自信心的培养是极为不利的。\n增强自信的第六个方法：学会微笑。微笑会增加幸福感，进而增强自信。\n增强自信的第七个方法：扬长避短。在学习、生活、工作中，抓住机会展现自己的优势、特长，同时注意弥补自己的不足，不断进步，肯定能增强自信。\n增强自信的第八个方法：阅读名人传记，因为很多知名人士成名前的自身资质、外部环境并不好，如果多看一些这方面的材料有助于提升自信心。\n增强自信的第九个方法：做好充分准备。从事某项活动前如果能做好充分准备，那么，在从事这项活动时，必然较为自信，而且这利于顺利完成活动并增强整体自信心。\n增强自信的第十个方法：给自己定恰当的目标，并且在目标达成后，定更高的目标。目标不能太高，否则不易达到，如果达不到，对自信心会有所破坏。\n增强自信的第十一个方法：冒一次险。当你做了以前不敢做的事以后，你会发现：原来作这事并没有什么了不起！这对提升自信心很有帮助。\n增强自信的第十二个方法：排除压力。过重的压力会使自己意志消沉，对自身产生怀疑，从而破坏自信心，学会排除压力对保持原有自信帮助很大。\n增强自信的第十三个方法：做自己喜欢做的事。对自己喜欢做的事，因为比较投入，容易取得成功，继而产生成就感，这非常有利于自信心的提高。\n增强自信的第十四个方法：保持健康。注意全面的营养、保证身体锻炼、保持快乐的心境，良好的生理、心理状况会使自己产生幸福感，进而产生自信心。\n增强自信的第十五个方法：尽量依靠自己。有事尽量依靠自己解决，能不断激发自身的潜力，并且通过一次次的成功，不断提升自信水平。\n自信是成功的第一要诀，有志于成才、成功的人请培养你的自信\ncase 3 #  收集信息，主动发言松浦弥太郎认为在有机会发言的场合不发言，会给别人留下负面影响。\n不发言就不容易被别人了解，也不容易被别人想起，也就容易错过很多机会。\n越不发言，就越不敢发言，时间久了，自信也会越来越低。\n不管在哪，都要主动发言，养成主动和人说话的习惯，越主动和人说话，信心就越强。\n为了有话可聊，可以收集一些可以闲聊的段子，或者可以表演的东西，一首歌，一个有趣的故事或者魔术等等，能让你在任何场合、别人提出任何要求都能应付自如。\n这样自己也更有底气。\ncase 4 #  1.建立牢靠的知识基础自信心是从各个方面体现的，良好的自信心可以提高在各个方面的能力，让你可以更加顺利的完成任务。 成功的人大多都是充满自信的。他们自信的来源不一定是成功带来的优越感，而是自己本身对自己知识的储备量有信心，多读书可以开阔眼界，提升自己的精神境界。 丰富自己的知识积累，提升解决问题的能力，是塑造自信的一个基础策略。\n2.完成每天给自己设定的小目标自信心来源的是不断去超越自己，在不断的超越过程中，内心体验一种满足感和优越感。 行为上的成就能够让人们体验到积极的情绪，因此可以每天去完成给自己设定的小目标，每天不断的去超越自己，树立自信心。\n3.盘点个人的优势和成就成就可以是任何你作为主要角色参与完成的重要事件。在列优势清单的时候，不要太谦虚。 成就和优势清单，会帮助你增加自我欣赏。4.敢于挑战自己，敢于表现自己当你对世界说不怕的时候世界也会给你让步。 一个无所畏惧的人总是值得信任的，一个自信满满的人总是会创造奇迹。\n5.鼓励和赞美自己每个人都喜欢听赞美的话语，从心理学家班杜拉的自我效能的观点来看，言语上的鼓励和赞美能够增加自我效能感，也就是增加对自己的自信心。 他人的赞美不一定总是会遇到，但是自己每天可以鼓励自己和赞美自己，要想他人欣赏你，首先你自己要学会欣赏自己。\n6.克服害羞，正视他人自卑的人常常喜欢躲在人群中，躲在角落里，害羞心理影响了基本的社会交往，而想要克服自卑获得自信，就要克服自己内心的懦弱和恐惧。 首先在与人交往时正视他人，与他人能够有眼神的交流，不要闪躲，其次锻炼自己在公众场合说话的能力，练就强大的内心。\n7.使用积极的自我暗示积极自我暗示，就是对自己说一些关于自己的积极的事情。 当自己感到紧张或者自卑的时候，在心里暗示自己“我可以的”。 回想一些自己成功克服困难的时刻，在心里告诉自己“这么难的事，我不也做到了吗，没什么好怕的”，然后，抬头挺胸，勇往直前。\n8.从挫折和窘境中恢复过来克服一些困境，不但可以建立自信，还能让人得到长时间的良好生存状态。 有研究表明，经历过一些不利事件的人，他们的心理健康和幸福水平要高于没有经历不幸的人。所以当遇到挫折和困境时，请相信自己可以战胜眼前的困难，因为克服困难后，你会变得更强大\ncase 5 #  1、做事前，告诉自己，这件事肯定没问题，老子天下第一。“假装自信”太简单了，时间长了，装久了，就成真的了。\n2、关我P事。别人多看你一眼，你就觉得自己说错话了； 别人开个玩笑，你就觉得话里有话。 揣摩别人的想法会引起连锁反应，一点点消磨自信心。 每当我们揣摩其他人对我们的看法时，我们可以想出100万个。但那些声音和你又有什么关系呢？他们的话是他们的观点，如果你过分在意，就变成了可以伤害你的武器。\n3、一个人不自信来自两方面：要么长得丑，要么一事无成，比这更扎心的是两者都有。 但是努力让自己拥有了一技之长，一定能让你脱胎换骨，人生开挂。 脱单了，不一定能脱贫，但你脱贫了，脱单是迟早的事，更何况自卑都不是个事儿。\n4、把万一改成就算。也许你会问： 万一我去和喜欢的人表白，对方拒绝了我怎么办？ 万一我面试被刷，没拿到offer怎么办？ 这些想法都会让你还没开始做，就先退缩了。 试着把万一改成就算，你看问题的角度会有很大的不同。就算我被喜欢的人拒绝了又怎样？不试试我怎么知道对方是不是也喜欢我。就算我面试被刷又怎样？吸取经验下一次就拿下offer！ 用「就算」来替代「万一」的时候，你会勇敢地踏出自己的舒适区，而只有踏出舒适区，你才能成长。\n5、如果你真的很生气，不妨写下来。 想象你要给一个自卑的人写一封信，告诉她怎么摆脱自卑？用什么方法可以让自己不自卑？最好能代入你的遭遇，然后告诉她，你是怎么克服的。 其实写的过程，就是你自我疗愈的开始，往往开始很难，但开始了就不难了。\n6、找个榜样。 想一个活得自信，自在洒脱的人，把ta当做榜样。遇到不自信、手足无措的情况，想想ta会怎么做？\n7、接受自己无法改变的缺陷。 人们总会为各种各样的事情而自卑。 有些方面无法改变，比如身高、骨相，对于这些无法改变的缺陷，就学着接受。毕竟不是每个人都完美的。你追的爱豆长得高，但皮肤没你好呀。\n8、解决不自信的最好方法就是成功一次，再成功一次，接着一直成功下去。当你把一件事情做成，再做成另一件，那么每一次好的反馈，都将是你告别不自信最有用的方式。\n9、拒绝那些让你不爽的人和事情。 如果你有朋友因为你的拒绝而和你翻脸，说明这个人从来就不是你真正的朋友，明知道会让你为难，却还来为难你，趁早离开越好。 多拒绝几次，你又不会损失什么，甚至还能把那些低质量的朋友筛出去，从而把时间和空间留给真正对你好的人。\n10、精进自己的专业。与其纠结内向、外向的性格，还不如努力提高自己的业务实力，拓宽自己在专业领域的知识面，掌握更高的技能水平，让自己成为业内高手或行家。 这样无论你时内向还是外向，都会有足够的底气去面对任何客户。\n11、别让不好意思害了你。 总觉得不好意思，那你不好意思的事情就跟你没有半毛钱关系。 你不好意思表白的人，会成为别人的新娘新郎。 你不好意思争取的机会，会成为别人的机会。 你越不好意思，总有人会好意思，如果你不想失去，那就别不好意思。\n12、赚钱才是治愈一切伤口最佳的方式。不管你认不认可，你手里的存款越多，你面对生活的底气就越足。 人没钱的时候不如鬼，想去的地方去不了，想买的东西买不起，但是当你有了一定存款时，想拒绝就拒绝，想买啥就买啥，想去哪就去哪。 如果还有人嘲讽你，你就跟他说:“您配吗，我需要你在这逼逼赖赖的”。\n当你没钱的时候，只能去路边摊找最便宜的盖饭，还不敢点套餐。 遇见喜欢的人，本能就会觉得自己没钱，配不上对方，怎么会自信呢？ 没有积蓄，做什么事情都会畏畏缩缩，不敢放手一搏。 挣钱和攒钱才是你底气的最大来源。全民超前消费的时代，真的危机来临，谁在裸泳，一目了然。\n13、开始说「不」。 不敢说不的人，内心都是戏精： 我拒绝了会不会有什么后果？ 别人一定会对我说三道四 说不别人会讨厌我吧？ 我可做不到！ 内心戏充足的同学，一定要对某些事说「不」，因为那些事会让你不堪重负，与自己的目标渐行渐远，一定要想清楚。\n14、多去见一些人、一些事。不一定要和别人深入交流，让自己多去看看就好。不自信的人，常常会因为害怕失去「仅有的」，而把自己放在很低的位置。爱情中，无底线付出；工作上，不敢拒绝同事的任何要求；家庭里，父母说的都是对的，他们永远不敢说一句不。牺牲自己，讨好对方，是他们避免失去的常用方式。但往往越是这样，对方就越是不重视，而他们也就越感受不到自己的重要性，越发自卑。想要突破这一心态，最关键的就是让你自己——拥有更多。走出房间，去周边逛逛，去医院福利院走走，去书店看看，去参加一些小活动，去创造更丰富的经历、更多的回忆、更广的阅历\u0026hellip;\n15、宁可自大，也不要自卑。一个自大的人，可以得到本不该属于他的机会，而一个自卑的人，会失去本该属于他的机会。 别太在意别人的怎么看你，每个人都在埋头赶路，你怎么样，其实在别人眼里并不重要。\n变得自信，并不代表就成了刻薄自私的人，它给了我们更多选择，让我们可以在对别人好的基础上，听从自己的意志，也只有这样，才能收获真正地理解和尊重。\ncase 6 #  “不是我不行，而是我暂时没有找到适合我发挥的环境”。这种想法会有助于提高我们的自信。\n因为人和人的天赋，才能，兴趣点是不一样的，彼之所长，很可能是己之所短。 那么，如果人处在一直无法发挥出自己能力的环境中，反复受到打压，很可能就会觉得自己干啥都不行，进而对生活丧失希望，自暴自弃。 所以这个时候，不妨干一些其他的事情，可以是你感兴趣的事情，干着干着，你会像孩子一样去重新探索这个世界，看到不一样的东西， 看到你是可以做成一些事情的，看到你也是可以有成就的！那么就要把外界纳入到你自己的体系里来，不要跟着外界的节奏走， 按自己的旋律来，如果发生了一些冲突，就想办法解决，但尽量不要随便妥协，而是开动脑筋想各种方法。 这样的经历多了，其实你也会发现自己真正擅长做的事情，从而扬长避短，越来越阳光自信，同时也能做出实际的东西。 一开始的时候，机械也不是啥都能干，但工匠们还是反复尝试，寻找机械的应用场合，了解实际需求，最终让机械在欧洲顺利发展起来了。\ncase 7 #  自信是一个人做事情能不能取得成功的关键，因为是否自信决定着你是否敢去做某些事。 如果没有这份自信，你就不会开始去做；而如果不动手去做，就什么也不会发生。 只有开始才有机会。今天看了刘润一个回答如何变得自信。 刘润把自信成为死而复生者的文身，自信不是盲目自大或乐观，而是做一些自己觉得不可能完成的事，还把他完成了。 通过这样一次次不断的训练出来的。简而言之，自信的提升来源于成功经验的积累。 那如何去积累呢，这里就要利用自我暗示，比较被大家推崇的《小狗钱钱》中小狗钱钱给吉亚的方法：成功日记。 成功日记非常简单，只需要两步 1.最好每天记录 2.至少写五项成果刚写时候可能会有些吃力，可能搜肠刮肚也想不出来几项，当你在犹豫这种应该不应该算的时候，那就写上。 当你积累了非常多的成功经验后，对自己的自信也会越来越足。当我们心生怯意时，打开我们的成功日记，就会充满力量。现在开始，记录成功日记吧！\ncase 8 #  1、无条件相信自己，你自己都不相信你自己，谁还会相信你？\n2、多读书，多学习，广泛涉猎，海量阅读，保持持续性学习能力，当你懂的东西非常多的时候，你的自信心自然会非常强。\n3、多跟比你差的人比较，在比你差的人身上找到自信。（虽然有点像在骗自己）\n4、用你成功的案例证明自己，寻找到自信。\n5、多提升自己的实力，多提升自己的能力，当你非常有实力的时候，当你非常有能力的时候，你的自信心自然会非常强。\n6、多去做好一些事情，当你能做好一些事情的时候，你就会慢慢地增强你的自信心。\n7、寻找自己的优点，优势，长处，给予自己自信。\ncase 8 #  “成功的公式就是思索让你高兴的想法，做出让你高兴的事，采取让你高兴的行动。”——摘自《生命的重建》作者露易丝.海作者的原生家庭并不美好，但是她通过改变自己的观念和想法，找到了平和的心态。在她得知自己得了癌症后，她并没有就此被打败丧失信心。她找到了营养师和心理咨询师，从生活习惯上和心态上让自己的身心康复。原生家庭不好要怎样避免让自己成为自己不喜欢的样子。首先，我们不要让自己变成受害者，怨天尤人。每天给自己心理暗示，让自己更爱自己，让自己的内心更加强大。找到让你受伤的人或事，直面问题。然后，尽量扭转局面，如果无法改变，那就选择漠视。先强大了内心，我们就会更加自信。\ncase 9 #  一、调整自我认识自卑的人总是错误的认识自己，或者总是以他人的眼光评价来认为自己就是这个样子的，在别人过低的评价下，对自己没有了信心。鉴于这种情况，自己要不断的暗示自己，不要太在乎他人的评价，要对自己有一个全面的合理的认知，接受自身的不足，并努力改正。\n二、积极弥补不足自卑的人有时候确实是因为某一个方面比不上别人而产生自卑感，只不过他们比较的方式以及处理这些劣势的方式不对。自卑的人应该通过认识到自身的劣势和缺点、短处，把这种差距感转化为激励自己奋发向上的动力，并且认真分析自己落后的原因，对症下药，不断的追赶自己的目标，而不是自暴自弃。\n三、参与社会交往自卑的人大多比较孤僻、内向，这是因为他们不敢面对人群，怕出丑、怕自己比不上别人，但是不与人交流会使他们的心理活动变得片面和极端，进而加重他们的自卑感。所以，自卑的人不应该把自己封闭起来，反而应该走出自己的小圈子，广泛交友，释放压力、了解别人的生活，慢慢的让自己变得开朗。\n四、改变自身形象自卑的人想提高自己的信心，就要从言谈举止上都加以改变。改变以前说话声音小，不敢说话，走路低头的习惯，让自己穿的时尚一点，多练习说话，大声说话，抬起头来走路。\n五、坦然面对失败自卑的人对自己的评价过低，因而特别害怕失败，面对失败的时候会把失败带来的消极影响无限放大，导致自己遭受失败后意志消沉，并且加重自己的自卑感。所以，在面对失败的时候要客观的分析自己的处境以及主客观条件，而不是一味的把失败归结于自身原因，有些时候客观原因导致的失败是谁也无法阻止的。\n六、和朋友相互鼓励物以类聚，人以群分，和自己关系好的人，一起相互鼓励，一起进步，自卑心理也能得到很大的缓解。每个人都会有自己的圈子，在圈子里总会有几个关系要好的人，大家可以做一个约定互相鼓励、帮助对方，这样能够大大改善你的自卑心态，让你变成一个态度坚定，性格要强的自信之人。\n七、积极的心理暗示想要克服自卑心理，最好的方法就是给自己一个积极的心理暗示，平时一定要不断的提醒自己，我能行，我可以的，让自己有一个好的心态。做任何事情，都要实实在在的付出，认认真真的完成，争取让每件事都能获得良好的结果，这种心态会帮你击败“自卑”，重构自信。\n八、用长处比短处自卑的人总是不会比较，总是和比自己优秀的人比较，或者拿自己的短处和别人的长处比较，这会让你更感觉自卑。想提高自信，就要学会拿自己的长处和别人的短处比较，学会自我安慰，这样就会逐渐消除自卑心理了。\ncase 10 #  1、培养耐心，自信确实需要培养，所谓的培养，即是说并非朝夕可达。\n2、习得并精通一种技能，具备学习能力的人通常都很自信，反过来也一样，真正自信的人通常是因为相信自己的学习能力。\n3、有意识地选择与那些性格开朗、乐观、热情、善良、尊重和关心别人的人进行交往，正确自我评价。\n4、相信积累的力量，通过学习培养耐心，运用耐心去等待长期积累之后可以获得的难以想象的好处与力量。\ncase 11 #  增强自信的第一个方法：关注自己的优点。在纸上列下十个优点，不论是哪方面（细心、眼睛好看等等，多多益善），在从事各种活动时，想想这些优点，并告诉自己有什么优点。这样有助你提升从事这些活动的自信，这叫做“自信的蔓延效应”。这一效应对提升自信效果很好。\n增强自信的第二个方法：与自信的人多接触。“近朱者赤，近墨者黑”这一点对增强自信同样有效。\n增强自信的第三个方法：自我心理暗示，不断对自己进行正面心理强化，避免对自己进行负面强化。一旦自己有所进步（不论多小）就对自己说：“我能行！”、“我很棒！”、“我能做得更好！”等等，这将不断提升自己的信心。\n增强自信的第四个方法：树立自信的外部形象。首先，保持整洁、得体的仪表，有利于增强一个人的自信；其次，举止自信，如行路目视前方等，刚开始可能不习惯，但过一段时间后就会有发自内心的自信；另外，注意锻炼、保持健美的体形对增强自信也很有帮助。增强自信的第五个方法：.不可谦虚过度。谦虚是必要的，但不可过度，过分贬低自己对自信心的培养是极为不利的。\n增强自信的第六个方法：学会微笑。微笑会增加幸福感，进而增强自信。\n增强自信的第七个方法：扬长避短。在学习、生活、工作中，抓住机会展现自己的优势、特长，同时注意弥补自己的不足，不断进步，肯定能增强自信。\n增强自信的第八个方法：肯定自己的能力。每天找出3件自己做成功的事。不要把“成功”看成登上月球那么大的事，成功可以是顺利跟医生约了治疗时间，上班交通一路畅顺，处理的 文件档案没出一次错等等，日常生活工作都可以有“成功”与“挫折”之分，一日至少顺利地做了3件事，又怎能说“一事无成”、“一无是处”呢？知道能把事情 做好，等于对自己的能力的肯定，你可振作精神。\n增强自信的第九个方法：做好充分准备。从事某项活动前如果能做好充分准备，那么，在从事这项活动时，必然较为自信，而且这利于顺利完成活动并增强整体自信心。\n增强自信的第十个方法：给自己定恰当的目标，并且在目标达成后，定更高的目标。目标不能太高，否则不易达到，如果达不到，对自信心会有所破坏。\ncase 12 #  从外观上进行改变服装是女性武装自己外观的的强大武器，它可以瞬间让人看起来很有吸引力，当参加一些重要会议时，应该穿得漂亮点。\n多和他人眼神交流平时不要总是低头，不仅会让你觉得自己不自信，甚至觉得自己很虚弱，勇敢地看着对方的眼睛是尊重和自信的表现。\n敢于尝试新事物尝试一些新事物和新的体验，独自去一个陌生的地方吃饭，在不熟悉的地方学习一些课程，在新的竞争中测试自己的能力，不断发现如何依靠自己的好方法。\n试图做一些决定无论是工作、还是约会男朋友，都要主动做那个表达想法的人，比如如何做好工作可以快速而好，今天去看电影或吃什么，不要总说随意、什么都好。\n坚持自己的信念当提出一些新的挑战时，要坚持下去，信心不是别人可以给的东西。 真正的自信源于一种坚定的信念，即无论结果如何，都以自己的行动以实施计划。 第六、勇敢提出一些自己的看法在工作上、一些研讨会中、或是俱乐部活动等，在一些集体参与的活动中，可以勇敢提出一些自己的看法，不要担心会说错话，年轻就是资本，因为年轻，领导会明白、会引导，而领导者只有在看到你的进步时才会看到惊喜。\n第七、多丰富自己的知识量在空闲时间里，很多女孩会选择看电视剧、看电影、或K歌来打发时间，过多的娱乐会让人懒惰，而且会习惯享受并忽略自己的生活理想、职业目标。所以，空闲时，可以多看一些书籍，可以从书本中积累更多的知识，知识就是个人能力和自信的体现。\ncase 13 #  自信就是这样来！\n你可不完美，但一定要有自信！\n1.相信自己，肯定自己这点很重要，如果你做什么事情，第一反应就是我不行、我不会。\n当好运偶然来临时，也只会因为你没信心、没准备，好运和你擦肩而过，也因你连自己都不相信！当然这里并不是要贬低你，让你继续沉沦下去。\n想要让别人相信你，信任你，首先就是你一定得相信自己。\n不要觉得自己不行，这害怕，那担忧的，就像没有人一生下来就会走路，都是在后天跌跌撞撞中慢慢学会的。 每个人生下来有着同一个起点，从走路、说话，慢慢走向社会，既然如此何必给自己内心添堵，给自己的人设设限呢？\n2.把事情想的简单点不要在事情还没发生或者还不确定的情况下，就开始脑补很多未知的事情，这是一种内耗，对自己一点好处也没有。未来本身就充满了无尽的未知，我能做到的就是 面对问题 、解决问题 。\n3.多做自己擅长的事产生自卑的原因有很多，普遍是因为觉得自己哪哪都不如别人，原生家庭等原因。 如果你不想让自己一直退缩下去，那就多做自己擅长能够让你开心的事，来获得他人赞赏的目光，从而获得更多的自我认知来提高你的自信心\n4.注意自己的精神状态通过一个细微的表情，语气。随时都可以向外界传递你的状态。如果你表现的总是给人一种萎靡不振的样子，别人就会莫名的想要远离你，自然也很难相信你。\n不信你可以观察下，那些脸上总是洋溢着笑容，表现的自信从容的人。其实好的相处是互相传递的，宝贝们！5.学会和自己和解世界那么大，每个人都有自己的长处和不足。\n唯有正确的认识自己，接纳自己的不足，发挥自己的优势，你就是最棒的那个仔。\n"});index.add({'id':1,'href':'/life/docs/http/teywty5qnc/','title':"跨域问题",'section':"http知识 ",'content':"跨域 #  介绍 #   跨域，指的是从一个域名去请求另外一个域名的资源，即跨域名请求。跨域时，浏览器不能执行其他域名网站的脚本，这是由浏览器的同源策略造成的，是浏览器施加的安全限制， 跨域限制访问，其实是浏览器的限制。\n  同源策略是浏览器最核心也最基本的安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源 ，这是一个用于隔离潜在恶意文件的重要安全机制。所以跨域问题只在浏览器中出现，如果客户端是APP的话，那跨域问题就不存在了。 PS：IE端口除外，IE对同源策略的定义有略微的不同，具体可以查看文末给出的同源策略的链接。\n 为什么会跨域 #  说到跨域不得不谈的就是浏览器的同源策略，跨域也是因为浏览器这个机制引起的，这个机制的存在还是在于安全\n1.什么是源 #   Web内容的源由用于访问它的URL 的方案(协议)，主机(域名)和端口定义。只有当方案，主机和端口都匹配时，两个对象具有相同的起源。\n  所谓同源是指：域名，协议，端口相同，即两个资源具有相同的源。 只要三者之间有一个不同，就是跨域（跨源） 同源不同源一句话就可以判断：就是url中 scheme host port 都相同即为同源。 下面认识下url 结构中的这三个部分  2. URL结构 #   URL 代表着是统一资源定位符（Uniform Resource Locator）。URL 无非就是一个给定的独特资源在 Web 上的地址。\n   URL有如下结构组成：\n  Schme 或者 Protocol\n   Domain Name 也叫做host域名   port 端口号   Parameters参数   Anchor 锚点，一般用于定位位置  3. 同源不同源举例 #  举一下同源不同源的例子，便于理解\n 同源例子     例子 原因     http://example.com/app1/index.html \u0026lt;==\u0026gt; http://example.com/app2/index.html 相同的 scheme http 和host   http://Example.com:80 \u0026lt;==\u0026gt; http://example.com http 默认80端口所以同源     不同源例子     例子 原因     http://example.com/app1 \u0026lt;==\u0026gt; https://example.com/app2 不同的协议   http://example.com \u0026lt;==\u0026gt; http://myapp.example.com 不同的host   http://example.com \u0026lt;==\u0026gt; http://example.com:8080 不同的端口    4. 浏览器为什么需要同源策略 #  同源策略是一个重要的安全策略，它用于限制一个origin的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。\n5. 常规前端请求跨域 #  在没有前后端分离的时候，跨域问题往往是很少的。因为前后端都部署到一起。现在前后端分离不管vue /react 面临跨域请求的问题。\n下面是引用官网描述的一张图来解释跨域：\n跨源域资源共享（CORS）机制允许 Web 应用服务器进行跨源访问控制，从而使跨源数据传输得以安全进行。现代浏览器支持在 API 容器中（例如 XMLHttpRequest 或 Fetch）使用 CORS，以降低跨源 HTTP 请求所带来的风险\n二、前端解决方案 #   jsonp   JSONP的原理非常简单，就是HTML标签中，很多带src属性的标签都可以跨域请求内容，比如我们熟悉的img图片标签。同理，script标签也可以，可以利用script标签来执行跨域的javascript代码。通过这些代码，我们就能实现前端跨域请求数据。\n  jsonp 可以在前端解决跨域问题，但是只是针对于get请求。实现方式可以引用一些npm 第三方库实现，jquery 也是带的。\n  可以在npm 搜下jsonp 库实现，非常简单。\n jsonp原理 #   我个人理解jsonp实际上是钻了空子然后利用这个空子来间接的实现了 get方式的跨域请求逻辑 以载入脚本方式去请求数据然后把脚本响应的数据包在回调脚本函数的参数里面 回调函数一执行就拿到了数据\n jsonp原理参考\n  首先我们需要明白，在页面上直接发起一个跨域的ajax请求是不可以的，但是，在页面上引入不同域上的js脚本却是可以的，就像你可以在自己的页面上使用标签来随意显示某个域上的图片一样\n  比如我在8080端口的页面上请求一个9090端口的图片：可以看到直接通过src跨域请求是可以的\n  那么看下如何使用来完成一个跨域请求：\n当点击\u0026quot;跨域获取数据\u0026quot;的按钮时，添加一个标签，用于发起跨域请求；注意看请求地址后面带了一个callback=showData的参数；\n　showData即是回调函数名称，传到后台，用于包裹数据。数据返回到前端后，就是showData(result)的形式，因为是script脚本，所以自动调用showData函数，而result就是showData的参数。\n　至此，我们算是跨域把数据请求回来了，但是比较麻烦，需要自己写脚本发起请求，然后写个回调函数处理数据，不是很方便。\n页面\n\u0026lt;%@ page pageEncoding=\u0026#34;utf-8\u0026#34; contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;跨域测试\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;js/jquery-1.7.2.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; //回调函数  function showData (result) { var data = JSON.stringify(result); //json对象转成字符串  $(\u0026#34;#text\u0026#34;).val(data); } $(document).ready(function () { $(\u0026#34;#btn\u0026#34;).click(function () { //向头部输入一个脚本，该脚本发起一个跨域请求  $(\u0026#34;head\u0026#34;).append(\u0026#34;\u0026lt;script src=\u0026#39;http://localhost:9090/student?callback=showData\u0026#39;\u0026gt;\u0026lt;\\/script\u0026gt;\u0026#34;); }); }); \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;input id=\u0026#34;btn\u0026#34; type=\u0026#34;button\u0026#34; value=\u0026#34;跨域获取数据\u0026#34; /\u0026gt; \u0026lt;textarea id=\u0026#34;text\u0026#34; style=\u0026#34;width: 400px; height: 100px;\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 服务端\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.setCharacterEncoding(\u0026#34;UTF-8\u0026#34;); response.setContentType(\u0026#34;text/html;charset=UTF-8\u0026#34;); //数据  List\u0026lt;Student\u0026gt; studentList = getStudentList(); JSONArray jsonArray = JSONArray.fromObject(studentList); String result = jsonArray.toString(); //前端传过来的回调函数名称  String callback = request.getParameter(\u0026#34;callback\u0026#34;); //用回调函数名称包裹返回数据，这样，返回数据就作为回调函数的参数传回去了  result = callback + \u0026#34;(\u0026#34; + result + \u0026#34;)\u0026#34;; response.getWriter().write(result); } 结果\n再来看jquery的jsonp方式跨域请求： 服务端代码不变，js代码如下：最简单的方式，只需配置一个dataType:\u0026lsquo;jsonp\u0026rsquo;，就可以发起一个跨域请求。jsonp指定服务器返回的数据类型为jsonp格式，可以看发起的请求路径，自动带了一个callback=xxx，xxx是jquery随机生成的一个回调函数名称。\n这里的success就跟上面的showData一样，如果有success函数则默认success()作为回调函数。 说白了 jquery只不过也是按照那个空子然后做了中间处理\n\u0026lt;%@ page pageEncoding=\u0026#34;utf-8\u0026#34; contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;跨域测试\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;js/jquery-1.7.2.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; $(document).ready(function () { $(\u0026#34;#btn\u0026#34;).click(function () { $.ajax({ url: \u0026#34;http://localhost:9090/student\u0026#34;, type: \u0026#34;GET\u0026#34;, dataType: \u0026#34;jsonp\u0026#34;, //指定服务器返回的数据类型  success: function (data) { var result = JSON.stringify(data); //json对象转成字符串  $(\u0026#34;#text\u0026#34;).val(result); } }); }); }); \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;input id=\u0026#34;btn\u0026#34; type=\u0026#34;button\u0026#34; value=\u0026#34;跨域获取数据\u0026#34; /\u0026gt; \u0026lt;textarea id=\u0026#34;text\u0026#34; style=\u0026#34;width: 400px; height: 100px;\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 结果\n代理方式 #  代理原理 #   代理服务器是介于前端和后端之间的中间服务层，前端向代理服务器发送请求时，代理服务器是允许跨域请求的，而代理服务器在收到前端的ajax请求时，会通过changeOrigin的方式，将前端请求的接口，转发给target所指向的目标服务器，从而以相同的域向目标服务器发送请求，由于代理服务器和目标服务器之间的域是相同的，因此不会出现跨域问题，从而代理服务器会收到目标服务器的响应，再将响应转发给前端即可\n 平常我们经常遇到的跨域问题就是，不同域名下的跨域。 那么问题来了，是怎么判断你与服务器不在一个域名下呢？\n通过chrome，我们发现原来我们的地址跟数据来源都是浏览器告诉我们的，然后它会判断是否同源，同源就正常访问。那么我们想解决问题就要从此处入手 代理解决跨域原理 通过一些方法设置代理，在请求发送(接收)之前加入中间层，\n将不同的域名转换成相同的\n就解决了跨域的问题\n客户端发送请求时\n不直接到服务器\n而是先到代理的中间层\n在这里将localhost：8088的这个域名装换为192.168.0.67:8061，\n再将请求发送到服务器\n这样在服务器端收到的请求就是使用的192.168.0.67:8061域名\n同理，当服务器返回数据的时候，也是先到代理的中间层\n将192.168.0.67:8061转换成localhos：8088；\n这样在客户端也是在相同域名下访问的了\n代理配置 #  如:webpack-dev-server 配置代理 (假如前端构建工具压根不是webpack你别傻乎乎的用这个来配置比如新一代的vite) 前端无论是vue项目还是react 项目大多数都会以webpack-dev-server 来运行，webpack-dev-server 可以设置代理，前端可以在开发环境设置代理解决跨域问题。\nproxy: { \u0026#39;/api\u0026#39;: { target: \u0026#39;http://localhost:3000\u0026#39;, pathRewrite: { \u0026#39;^/api\u0026#39;: \u0026#39;\u0026#39; }, changeOrigin: true, }, } vue-cli、create-react-app、umi 等脚手架找到webpack devserver配置位置配上即可\n注意： 只限在开发环境，生产环境需要web 服务器同样原理代即可。 生产环境一般可以用nginx 大概是 前端请求 -\u0026gt; nginx这 nginx -\u0026gt; 具体的后端服务器 毕竟nginx可以做防盗链,负载均衡等 这些嘛\ndocument.domain 方式 #   由于JavaScript同源策略的限制，脚本只能读取和所属文档来源相同的窗口和文档的属性。\n  对于已经有成熟产品体系的公司来说，不同的页面可能放在不同的服务器上，这些服务器域名不同，但是拥有相同的上级域名，比如id.qq.com、www.qq.com、user.qzone.qq.com，它们都有公共的上级域名qq.com。这些服务器上的页面之间的跨域访问可以通过document.domain来进行。\n  默认情况下，document.domain存放的是载入文档的服务器的主机名，可以手动设置这个属性，不过是有限制的，只能设置成当前域名或者上级的域名，并且必须要包含一个.号，也就是说不能直接设置成顶级域名。例如：id.qq.com，可以设置成qq.com，但是不能设置成com\n  访问同源页面例子  打开https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cookie ，在f12控制台里window.open页面：https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers，访问返回的window对象的document属性，发现能够访问成功\n  具体设置例子\n  www.a.com上的a.html 具有相同上级域名\n  document.domain = \u0026#39;a.com\u0026#39;; var ifr = document.createElement(\u0026#39;iframe\u0026#39;); ifr.src = \u0026#39;http://script.a.com/b.html\u0026#39;; ifr.style.display = \u0026#39;none\u0026#39;; document.body.appendChild(ifr); ifr.onload = function(){ var doc = ifr.contentDocument || ifr.contentWindow.document; // 在这里操纵b.html  alert(doc.getElementsByTagName(\u0026#34;h1\u0026#34;)[0].childNodes[0].nodeValue); };  script.a.com上的b.html 具有相同上级域名  document.domain = \u0026#39;a.com\u0026#39;; 三、服务端解决方案 #   后端框架也很多，实现原理差不多，都是修改下相应http头。以常用的Java SpringCloud springMvc 和nodejs koa 框架为例。\n Http 协议CORS头\n跨域其实也是http层面上可以解决的问题，后端解决也是比较简单的，也是项目常见的解决手法\nCORS （Cross-Origin Resource Sharing，跨域资源共享）是一个系统，它由一系列传输的HTTP头组成，这些HTTP头决定浏览器是否阻止前端 JavaScript 代码获取跨域请求的响应。\n同源安全策略 默认阻止“跨域”获取资源。但是 CORS 给了web服务器这样的权限，即服务器可以选择，允许跨域请求访问到它们的资源。\n   代码字段 描述     Access-Control-Allow-Origin 指示请求的资源能共享给哪些域   Access-Control-Allow-Credentials 指示当请求的凭证标记为 true 时，是否响应该请求   Access-Control-Allow-Headers 用在对预请求的响应中，指示实际的请求中可以使用哪些 HTTP 头   Access-Control-Allow-Methods 指定对预请求的响应中，哪些 HTTP 方法允许访问请求的资源   Access-Control-Expose-Headers 指示哪些 HTTP 头的名称能在响应中列出   Access-Control-Max-Age 指示预请求的结果能被缓存多久   Access-Control-Request-Headers 用于发起一个预请求，告知服务器正式请求会使用那些 HTTP 头   Access-Control-Request-Method 用于发起一个预请求，告知服务器正式请求会使用哪一种 HTTP 请求方法   Origin 指示获取资源的请求是从什么域发起的     SpringCloud设置跨域 在跨域过滤器里配置一下跨域头部，* 是通配符即允许所有  @Configuration public class GatewayCorsConfiguation { @Bean public CorsFilter corsFilter(){ // 初始化cors配置对象  CorsConfiguration configuration = new CorsConfiguration(); configuration.setAllowCredentials(true); // 允许使用cookie，但是使用cookie是addAllowedOrigin必须是具体的地址，不能是* // configuration.addAllowedOrigin(\u0026#34;*\u0026#34;);  configuration.addAllowedOrigin(\u0026#34;http://manage.leyou.com\u0026#34;); configuration.addAllowedMethod(\u0026#34;*\u0026#34;); //允许的请求方式,get,put,post,delete  configuration.addAllowedHeader(\u0026#34;*\u0026#34;);//允许的头信息  //初始化cors的源对象配置  UrlBasedCorsConfigurationSource corsConfigurationSource = new UrlBasedCorsConfigurationSource(); corsConfigurationSource.registerCorsConfiguration(\u0026#34;/**\u0026#34;,configuration); //3.返回新的CorsFilter.  return new CorsFilter(corsConfigurationSource); } }  Koa设置跨域  koa 是插件机制，设置更简单，使用跨域插件即可\nimport cors from \u0026#34;koa2-cors\u0026#34;; app.use(cors());  springmvc  import lombok.extern.log4j.Log4j; import org.springframework.web.bind.annotation.*; @RestController @RequestMapping(\u0026#34;/app.test\u0026#34;) @Log4j public class TestController { @CrossOrigin(origins = \u0026#34;*\u0026#34;) @PostMapping(value = \u0026#34;/test\u0026#34;, name = \u0026#34;test\u0026#34;) @CheckRequestSign public HttpResult test(@RequestBody TestParam testParam){ try { return HttpResult.newCorrectResult(testParam); } catch (Exception ex) { log.error(\u0026#34;异常\u0026#34;, ex); return HttpResult.newErrorResult(ex); } } } 四、运维解决方案 #   还是利用代理方式解决,代理方式可选的方案非常之多\n   选择nginx\n  我理解的步骤\n  前端和运维商量好协议路径代理规则，比如/api 代表域名\n  前端配置webpack -dev -server 代理 到nginx层\n  利用ngnix 配置相同转发代理到真正的服务器\n  这里的webpack 服务器那似乎可以直接到真正的服务器 但是大多数都不是那么做的 我理解的是首先如果前端直接到后端服务器 那么后端必须要做负载均衡 防盗链等等 还不如前端直接到nginx层(这里的nginx层可能是集群或者单机假如是集群)去nginx可以做负载均衡等\n ngnix 配置代理解决跨域配置  ... location /api { proxy_pass https://b.test.com; # 设置代理服务器的协议和地址 } ... CORS参考 Origin参考 CORS参考\n"});index.add({'id':2,'href':'/life/docs/javadir/thread/tool/thread_local/','title':"ThreadLocal",'section':"并发工具 ",'content':"一:介绍 #   ThreadLocal直译为线程局部变量，或许将它命名为ThreadLocalVariable更为合适。其主要作用就是实现线程本地存储功能，通过线程本地资源隔离，解决多线程并发场景下线程安全问题\n  类ThreadLocal 主要解决的就是每个线程绑定自己的值,可以将ThreadLocal类比喻成全局存放数据的盒子,盒子中可以存放每个线程 的私有数据\n 二:用法举例 #  public class ToolsThreadLocal { public static ThreadLocal t1 = new ThreadLocal(); } public class ThreadLocalA extends Thread { @Override public void run() { for (int i = 0; i \u0026lt; 50; i++) { ToolsThreadLocal.t1.set(\u0026#34;thread a \u0026#34;+i); System.out.println(ToolsThreadLocal.t1.get()); } } } public class ThreadLocalB extends Thread { @Override public void run() { for (int i = 0; i \u0026lt; 50; i++) { ToolsThreadLocal.t1.set(\u0026#34;thread b \u0026#34;+i); System.out.println(ToolsThreadLocal.t1.get()); } } } public class ThreadLocalRun { public static void main(String[] args) { ThreadLocalA threadLocalA = new ThreadLocalA(); threadLocalA.start(); ThreadLocalB threadLocalB = new ThreadLocalB(); threadLocalB.start(); for (int i = 0; i \u0026lt; 50; i++) { ToolsThreadLocal.t1.set(\u0026#34;thread main \u0026#34;+i); System.out.println(ToolsThreadLocal.t1.get()); } } } 三:应用场景 #   针对ThreadLocal而言，由于其适合隔离、线程本地存储等特性，因此天然的适合一些Web应用场景，比如下面所列举的例子：\n  代替参数显式传递(很少使用) 存储全局用户登录信息 存储数据库连接，以及Session等信息 Spring事务处理方案  四:api #   get  public T get() { // 获取当前操作线程  Thread t = Thread.currentThread(); // 调用getMap方法，返回当前线程的实例变量threadLocals值  ThreadLocalMap map = getMap(t); // 如果返回map不为空，返回map中所存储的以当前ThreadLocal对象为key的值  if (map != null) { ThreadLocalMap.Entry e = map.getEntry(this); if (e != null) { @SuppressWarnings(\u0026#34;unchecked\u0026#34;) T result = (T)e.value; return result; } } // 如果map为空进行map值的初始化  return setInitialValue(); } ThreadLocalMap getMap(Thread t) { // 返回传入线程(当前线程)中成员变量的threadLocals值  return t.threadLocals; } private T setInitialValue() { // 调用initialValue()方法设置初始值，默认不设置任何值，可以在创建ThreadLocal  // 对象时被重写进行初始化，只会进行一次初始化。  T value = initialValue(); Thread t = Thread.currentThread(); ThreadLocalMap map = getMap(t); if (map != null) map.set(this, value); else createMap(t, value); return value; } void createMap(Thread t, T firstValue) { // 初始化当前线程对象实例变量threadLocals的值，Map所对应的key为当前ThreadLocal对象  t.threadLocals = new ThreadLocalMap(this, firstValue); }  set  public void set(T value) { // 获取当前线程对象  Thread t = Thread.currentThread(); // 调用getMap方法，传入当前对象的值，获取当前线程的实例变量threadLocals值  ThreadLocalMap map = getMap(t); if (map != null) map.set(this, value); else // 如果map为空，创建ThreadLocalMap  createMap(t, value); } "});index.add({'id':3,'href':'/life/docs/%E8%84%9A%E6%9C%AC/javascript/es6/','title':"ECMAScript 6",'section':"javascript ",'content':" ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。  Module 的语法 #  概述 #  历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的require、Python 的import，甚至就连 CSS 都有@import，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。\n在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。\nES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。\n// CommonJS模块\rlet { stat, exists, readFile } = require('fs');\r// 等同于\rlet _fs = require('fs');\rlet stat = _fs.stat;\rlet exists = _fs.exists;\rlet readfile = _fs.readfile;\r上面代码的实质是整体加载fs模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取3个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。\nES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。\n// ES6模块\rimport { stat, exists, readFile } from 'fs';\r 严格模式  ES6 的模块自动采用严格模式，不管你有没有在模块头部加上\u0026quot;use strict\u0026quot;;。\n export 命令  模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。\n一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。下面是一个 JS 文件，里面使用export命令输出变量。\n// profile.js\rexport var firstName = 'Michael';\rexport var lastName = 'Jackson';\rexport var year = 1958;\r上面代码是profile.js文件，保存了用户信息。ES6 将其视为一个模块，里面用export命令对外部输出了三个变量。\nexport的写法，除了像上面这样，还有另外一种。\n/ profile.js\rvar firstName = 'Michael';\rvar lastName = 'Jackson';\rvar year = 1958;\rexport {firstName, lastName, year}; //优秀导出写法\r上面代码在export命令后面，使用大括号指定所要输出的一组变量。它与前一种写法（直接放置在var语句前）是等价的，但是应该优先考虑使用这种写法。因为这样就可以在脚本尾部，一眼看清楚输出了哪些变量。\nexport命令除了输出变量，还可以输出函数或类（class）。\nexport function multiply(x, y) {\rreturn x * y;\r};\r上面代码对外输出一个函数multiply。\n通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名。\nfunction v1() { ... }\rfunction v2() { ... }\rexport {\rv1 as streamV1,\rv2 as streamV2,\rv2 as streamLatestVersion\r};\r需要特别注意的是，export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。\n// 报错\rexport 1;\r// 报错\rvar m = 1;\rexport m;\r上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出1，第二种写法通过变量m，还是直接输出1。1只是一个值，不是接口。正确的写法是下面这样。\n// 写法一\rexport var m = 1;\r// 写法二\rvar m = 1;\rexport {m};\r// 写法三\rvar n = 1;\rexport {n as m};\r上面三种写法都是正确的，规定了对外的接口m。其他脚本可以通过这个接口，取到值1。它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。\n同样的，function和class的输出，也必须遵守这样的写法。\n// 报错\rfunction f() {}\rexport f;\r// 正确\rexport function f() {};\r// 正确\rfunction f() {}\rexport {f};\r上面代码输出变量foo，值为bar，500毫秒之后变成baz。\n这一点与 CommonJS 规范完全不同。CommonJS 模块输出的是值的缓存，不存在动态更新，详见下文《ES6模块加载的实质》一节。\n最后，export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下一节的import命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了ES6模块的设计初衷。\n  总结 export 导出的是接口 ,并且必须是模块顶层 不能是块级作用域\n  import 命令\n  使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。\n// main.js\rimport {firstName, lastName, year} from './profile';\r//使用\rfunction setName(element) {\relement.textContent = firstName + ' ' + lastName;\r}\r如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。\nimport { lastName as surname } from './profile';\nimport后面的from指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js路径可以省略。如果只是模块名，不带有路径，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。\nimport {myMethod} from 'util';\n上面代码中，util是模块文件名，由于不带有路径，必须通过配置，告诉引擎怎么取到这个模块。\n注意，import命令具有提升效果，会提升到整个模块的头部，首先执行。\n如果多次重复执行同一句import语句，那么只会执行一次，而不会执行多次。\nimport 'lodash';\rimport 'lodash';\rimport { foo } from 'my_module';\rimport { bar } from 'my_module';\r// 等同于\rimport { foo, bar } from 'my_module';\r整体加载一个js中所有模块\nimport * as circle from './circle';\rconsole.log('圆面积：' + circle.area(4));\rconsole.log('圆周长：' + circle.circumference(14));\r需要注意的是 circle.method 调用导入模块\r export default 命令   export default命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此export default命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应export default命令\n // modules.js\rfunction add(x, y) {\rreturn x * y;\r}\rexport {add as default};\r// 等同于\r// export default add;\r// app.js\rimport { default as foo } from 'modules';\r// 等同于\r// import foo from 'modules';\r//上面import foo from 'modules'; 只有 export default add; 才能这样\r"});index.add({'id':4,'href':'/life/docs/%E8%84%9A%E6%9C%AC/nodejs/','title':"node js ",'section':"脚本",'content':"node js #   Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时\n Linux 上安装 Node.js #   直接使用已编译好的包 Node 官网已经把 linux 下载版本更改为已编译好的版本了，我们可以直接下载解压后使用：  # wget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz // 下载 # tar xf node-v10.9.0-linux-x64.tar.xz // 解压 # cd node-v10.9.0-linux-x64/ // 进入解压目录 # ./bin/node -v // 执行node命令 查看版本 v10.9.0  解压文件的 bin 目录底下包含了 node、npm 等命令，我们可以使用 ln 命令来设置软连接：  ln -s /usr/software/nodejs/bin/npm /usr/local/bin/ ln -s /usr/software/nodejs/bin/node /usr/local/bin/  Ubuntu 源码安装 Node.js   以下部分我们将介绍在 Ubuntu Linux 下使用源码安装 Node.js 。 其他的 Linux 系统，如 Centos 等类似如下安装步骤。\n  在 Github 上获取 Node.js 源码：  $ sudo git clone https://github.com/nodejs/node.git\rCloning into 'node'...\r 修改目录权限：  $ sudo chmod -R 755 node  使用 ./configure 创建编译文件，并按照：  $ cd node $ sudo ./configure $ sudo make $ sudo make install 查看 node 版本：\n$ node --version v0.10.25  Ubuntu apt-get命令安装 命令格式如下：  sudo apt-get install nodejs sudo apt-get install npm  CentOS 下源码安装 Node.js   1、下载源码，你需要在https://nodejs.org/en/download/下载最新的Nodejs版本，本文以v0.10.24为例:\n cd /usr/local/src/ wget http://nodejs.org/dist/v0.10.24/node-v0.10.24.tar.gz  2、解压源码\n tar zxvf node-v0.10.24.tar.gz  3、 编译安装\n cd node-v0.10.24 ./configure --prefix=/usr/local/node/0.10.24 make make install  4、 配置NODE_HOME，进入profile编辑环境变量\n vim /etc/profile  设置 nodejs 环境变量，在 export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL 一行的上面添加如下内容:  #set for nodejs export NODE_HOME=/usr/local/node/0.10.24 export PATH=$NODE_HOME/bin:$PATH  :wq保存并退出，编译/etc/profile 使配置生效  source /etc/profile  验证是否安装配置成功  node -v 输出 v0.10.24 表示配置成功  npm模块安装路径  /usr/local/node/0.10.24/lib/node_modules/ windows 上安装 Node.js #    地址\n  选择zip格式 如图所示\n   解压zip格式 如图所示   配置环境变量 如图所示   检验安装  Microsoft Windows [版本 10.0.19043.1052]\r(c) Microsoft Corporation。保留所有权利。\rC:\\Users\\dell\u0026gt;node -v\rv14.17.2\rC:\\Users\\dell\u0026gt;npm -v\r6.14.13\rC:\\Users\\dell\u0026gt;npm root -g\rD:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\rC:\\Users\\dell\u0026gt;\rwindows 下 修改全局依赖包下载路径 #   默认情况下，我们在执行npm install -g XXXX下载全局包时，这个包的默认存放路径位C:\\Users\\用户名\\AppData\\Roaming\\npm\\node_modules下，可以通过CMD指令npm root -g查看  C:\\Users\\liaijie\\AppData\\Roaming\\npm\\node_modules\r 但是有时候我们不想让全局包放在这里，我们可以自定义存放目录,在CMD窗口执行以下两条命令修改默认路径：  npm config set prefix \u0026quot;C:\\node\\node_global\u0026quot;\rnpm config set cache \u0026quot;C:\\node\\node_cache\u0026quot;\r 或者打开c:\\node\\node_modules\\npm.npmrc文件，修改如下：  prefix =C:\\node\\node_global\rcache = C:\\node\\node_cache\r  以上操作表示，修改全局包下载目录为C:\\node\\node_global,缓存目录为C:\\node\\node_cache,并会自动创建node_global目录，而node_cache目录是缓存目录，会在你下载全局包时自动创建\nhttps://www.jianshu.com/p/13f45e24b1de\n  "});index.add({'id':5,'href':'/life/docs/javadir/groovy/groovy%E5%AD%A6%E4%B9%A0/','title':" Groovy 概述 ",'section':"groovy 学习与使用 ",'content':"Groovy 概述 #   Groovy是一种基于Java平台的面向对象语言。 Groovy 1.0于2007年1月2日发布，其中Groovy 2.4是当前的主要版本。 Groovy通过Apache License v 2.0发布。  Groovy的特点 #   同时支持静态和动态类型。 支持运算符重载。 本地语法列表和关联数组。 对正则表达式的本地支持。 各种标记语言，如XML和HTML原生支持。 Groovy对于Java开发人员来说很简单，因为Java和Groovy的语法非常相似。 您可以使用现有的Java库。 Groovy扩展了java.lang.Object。  groovy-脚本和类 #    在groovy中定义类和java中是一样的。类的方法可以是static，也可以是非static的\n  groovy中的方法可以是public, protected, private，同时也支持java中的修饰符，比如synchronized\n  groovy自动导入的包有以下这些\n   groovy.lang.* groovy.util.* java.lang.* java.util.* java.net.* java.io.* import java.math.BigInteger import java.math.BigDecimal    在groovy和java中不同的一点就是，groovy默认是public的\n  每一个groovy类，在JVM层级，都是字节码形式的java code，所以在java代码中可以调用groovy中申明的方法，反之亦然\n  你可以指定方法的参数和返回值，以便他们能够更好的和java代码相互调用。当然你也可以实现接口或者重载方法。但是需要你没有指定方法后者属性的类型的话，那么在JVM层级的字节码中，他们将会是 java.lang.Object 类型\n  例如 Callee.groovy\n  class Callee{\rvoid hello(){\rprintln \u0026quot;hello, world\u0026quot; ;\r}\r}\rc = new Callee() ;\rc.hello();\r 创建你的第一个 Hello World 程序  class Example1 {\rpublic static void main(String[] args) {\rprintln(\u0026quot;你好,世界 !\u0026quot;) ;\r}\r}\r你好,世界 !\n 当然你也可以不定义一个类 因为groovy中行得通  println(\u0026quot;你好,世界 !\u0026quot;) ;同样可以打印出字符串  在 Groovy 中导入语句 #   import 语句可以用来导入，可以让你的代码使用其他库的功能。这是通过使用在 Import 关键字完成。 下面的示例演示了如何使用 MarkupBuilder 的类，它可能是最常用的创建 HTML 或 XML 标记的类之一。  import groovy.xml.MarkupBuilder def xml = new MarkupBuilder() Groovy 令牌 #    令牌可以是一个关键字，一个标识符，常量，字符串文字或符号。 println(“Hello World”);\n  在上面的代码行中，有两个令牌，首先是关键词的 println 而接下来就是字符串的“Hello World”。\n  Groovy 注释 #   在您的代码中使用注释。Groovy 的注释可以是单行或多行。单行注释使用 // 在该行的任何位置来识别。一个例子如下所示 -  class Example {\rstatic void main(String[] args) {\r// Using a simple println statement to print output to the console\rprintln('Hello World');\r}\r}\r分号 #   就像 Java 编程语言，它需要具有分号在 Groovy 定义多个语句之间进行区分。  class Example {\rstatic void main(String[] args) {\r// One can see the use of a semi-colon after each statement\rdef x = 5;\rprintln('Hello World'); }\r}\r身份标识 #   标识符被用来定义变量，函数或其他用户定义的变量。标识符以字母开头，美元或下划线。他们不能以数字开头。以下是有效标识符的一些例子  def employeename def student1 def student_name\r 其中**，DEF** 是在 Groovy 用来定义标识符的关键字。下面是一个如何在我们的 Hello World 程序中使用标识符的代码示例  class Example {\rstatic void main(String[] args) {\r// One can see the use of a semi-colon after each statement\rdef x = 5;\rprintln('Hello World'); }\r}\r// 在上述的例子中，变量 x 被用作标识符。\r关键词 #  空白 #    空白是在编程语言如 Java 和 Groovy 用来形容空格，制表符，换行符和注释术语。空格分隔从另一个声明的一部分，使编译器，其中一个元素标识的声明。\n  例如，在下面的代码示例，存在关键字 def 和变量 x 之间的空白。这是为了让编译器知道 DEF 是需要被使用，并且是 x 应该是需要被定义的变量名的关键字。\n  def x = 5;\r文字 #   文字是在 groovy 中表示固定值的符号。Groovy 语言有符号整数，浮点数，字符和字符串。下面是一些在 Groovy 编程语言文字的例子 -  12 1.45 ‘a’ “aa”\r"});index.add({'id':6,'href':'/life/docs/plan/dir/saxr6jwscz/','title':"2022-10-25计划",'section':"计划 ",'content':" 运动方面     星期一 星期二 星期三 星期四 星期五 星期六 星期天     在家做运动 在家做运动 在家做运动 在家做运动 外面跑步 外面跑步 外面跑步     朗读     星期一 星期二 星期三 星期四 星期五 星期六 星期天     每天十分钟 每天十分钟 每天十分钟 每天十分钟 每天十分钟 每天十分钟 每天十分钟    "});index.add({'id':7,'href':'/life/docs/operating_system/windows/dos_start/','title':"DOS命令 基本介绍 ",'section':"windows学习与使用 ",'content':"介绍 #   windows不区分大小写  C:\\Users\\noatn\u0026gt;echo \u0026#39;你好\u0026#39; \u0026#39;你好\u0026#39; C:\\Users\\noatn\u0026gt;ECHO \u0026#39;你好\u0026#39; \u0026#39;你好\u0026#39; 体验 #    体验1\n  @echo off 关闭原始盘符\n  C:\\Users\\noatn\u0026gt;echo \u0026#39;你好\u0026#39; \u0026#39;你好\u0026#39; C:\\Users\\noatn\u0026gt; C:\\Users\\noatn\u0026gt;@echo off Echo \u0026#39;hello world\u0026#39; \u0026#39;hello world\u0026#39;  pause 暂停  @echo off Echo \u0026#39;hello world\u0026#39; pause  查看ip地址  C:\\Users\\noatn\u0026gt;ipconfig Windows IP 配置 以太网适配器 以太网 2: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 以太网适配器 以太网: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 无线局域网适配器 本地连接* 1: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 无线局域网适配器 本地连接* 2: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 以太网适配器 VMware Network Adapter VMnet1: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::bc7f:faee:41f9:ecf7%18 IPv4 地址 . . . . . . . . . . . . : 192.168.79.1 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : 以太网适配器 VMware Network Adapter VMnet8: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::f508:71d3:56e1:6b30%10 IPv4 地址 . . . . . . . . . . . . : 192.168.12.1 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : 无线局域网适配器 WLAN: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::a855:ecd0:285d:352e%13 IPv4 地址 . . . . . . . . . . . . : 192.168.31.80 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : 192.168.31.1 以太网适配器 蓝牙网络连接: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 192.168.31.80 这就是本地ipv4版本地址  打开计算器  calc 算术运算 #   基本使用  C:\\Users\\noatn\u0026gt;set /a 2+5 7 C:\\Users\\noatn\u0026gt;set /a 4%3 1 C:\\Users\\noatn\u0026gt;set /a 2*3 6  编写批处理文件  @echo off set /a var_one = 3 * 7 echo %var_one% pause   %var_one% 相当于引用变量var_one值\n  有优先级的情况\n  @echo off set /a param_a = (2+3) *10 set /a param_b = (2+30-100) *10 echo %param_a% echo %param_b% pause 重定向运算 #   \u0026gt; 代表将结果存储到对应的位置  C:\\Users\\noatn\u0026gt;d: D:\\\u0026gt;cd D:\\data\\game D:\\data\\game\u0026gt;echo \u0026#39;你好\u0026#39; \u0026#39;你好\u0026#39; D:\\data\\game\u0026gt;echo \u0026#39;你好\u0026#39; \u0026gt; a.txt D:\\data\\game\u0026gt;dir 驱动器 D 中的卷没有标签。 卷的序列号是 60C3-1FDB D:\\data\\game 的目录 2022/10/23 15:51 \u0026lt;DIR\u0026gt; . 2022/10/23 15:51 \u0026lt;DIR\u0026gt; .. 2022/10/23 15:51 9 a.txt 1 个文件 9 字节 2 个目录 293,906,841,600 可用字节 D:\\data\\game\u0026gt;type a.txt \u0026#39;你好\u0026#39; D:\\data\\game\u0026gt;  \u0026gt;\u0026gt; 代表将结果追加并存储到对应的位置  D:\\data\\game\u0026gt;echo \u0026#39;你好\u0026#39; \u0026gt;\u0026gt; a.txt D:\\data\\game\u0026gt;type a.txt \u0026#39;你好\u0026#39; \u0026#39;你好\u0026#39;  \u0026lt; 读出命令或者文件内容  D:\\data\\game\u0026gt;sort \u0026lt; study.txt \u0026#39;好好学习\u0026#39; \u0026#39;天天向上\u0026#39;  type 文本文件内容查看  D:\\data\\game\u0026gt;echo \u0026#39;好好学习\u0026#39; \u0026gt; study.txt D:\\data\\game\u0026gt;echo \u0026#39;天天向上\u0026#39; \u0026gt;\u0026gt; study.txt D:\\data\\game\u0026gt;type study.txt \u0026#39;好好学习\u0026#39; \u0026#39;天天向上\u0026#39; 多命令运算 #   \u0026amp;\u0026amp; 具有短路 第一个命令错误不会执行第二个命令  D:\\data\\game\u0026gt;aaa \u0026amp;\u0026amp; ipconfig \u0026#39;aaa\u0026#39; 不是内部或外部命令，也不是可运行的程序 或批处理文件。 D:\\data\\game\u0026gt;net user \u0026amp;\u0026amp; ipconfig \\\\DESKTOP-CCD057N 的用户帐户 ------------------------------------------------------------------------------- Administrator DefaultAccount Guest noatn WDAGUtilityAccount 命令成功完成。 Windows IP 配置 以太网适配器 以太网 2: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 以太网适配器 以太网: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 无线局域网适配器 本地连接* 1: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 无线局域网适配器 本地连接* 2: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 以太网适配器 VMware Network Adapter VMnet1: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::bc7f:faee:41f9:ecf7%18 IPv4 地址 . . . . . . . . . . . . : 192.168.79.1 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : 以太网适配器 VMware Network Adapter VMnet8: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::f508:71d3:56e1:6b30%10 IPv4 地址 . . . . . . . . . . . . : 192.168.12.1 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : 无线局域网适配器 WLAN: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::a855:ecd0:285d:352e%13 IPv4 地址 . . . . . . . . . . . . : 192.168.31.80 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : 192.168.31.1 以太网适配器 蓝牙网络连接: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : D:\\data\\game\u0026gt;  || 第一个命令执行成功就不会执行第二个命令了  D:\\data\\game\u0026gt;dssdh || ipconfig \u0026#39;dssdh\u0026#39; 不是内部或外部命令，也不是可运行的程序 或批处理文件。 Windows IP 配置 以太网适配器 以太网 2: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 以太网适配器 以太网: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 无线局域网适配器 本地连接* 1: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 无线局域网适配器 本地连接* 2: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 以太网适配器 VMware Network Adapter VMnet1: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::bc7f:faee:41f9:ecf7%18 IPv4 地址 . . . . . . . . . . . . : 192.168.79.1 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : 以太网适配器 VMware Network Adapter VMnet8: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::f508:71d3:56e1:6b30%10 IPv4 地址 . . . . . . . . . . . . : 192.168.12.1 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : 无线局域网适配器 WLAN: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::a855:ecd0:285d:352e%13 IPv4 地址 . . . . . . . . . . . . : 192.168.31.80 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : 192.168.31.1 以太网适配器 蓝牙网络连接: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 管道符号 #   |  C:\\Users\\noatn\u0026gt;d: D:\\\u0026gt;cd D:\\data\\game D:\\data\\game\u0026gt;mkdir temp D:\\data\\game\u0026gt;cd temp D:\\data\\game\\temp\u0026gt;dir 驱动器 D 中的卷没有标签。 卷的序列号是 60C3-1FDB D:\\data\\game\\temp 的目录 2022/10/23 20:48 \u0026lt;DIR\u0026gt; . 2022/10/23 20:48 \u0026lt;DIR\u0026gt; .. 0 个文件 0 字节 2 个目录 293,937,827,840 可用字节 D:\\data\\game\\temp\u0026gt;echo \u0026#39;1\u0026#39; \u0026gt; 1.txt D:\\data\\game\\temp\u0026gt;echo \u0026#39;2\u0026#39; \u0026gt; 2.txt D:\\data\\game\\temp\u0026gt;echo \u0026#39;## markdown\u0026#39; \u0026gt; ok.md D:\\data\\game\\temp\u0026gt;dir 驱动器 D 中的卷没有标签。 卷的序列号是 60C3-1FDB D:\\data\\game\\temp 的目录 2022/10/23 20:49 \u0026lt;DIR\u0026gt; . 2022/10/23 20:49 \u0026lt;DIR\u0026gt; .. 2022/10/23 20:48 6 1.txt 2022/10/23 20:48 6 2.txt 2022/10/23 20:49 16 ok.md 3 个文件 28 字节 2 个目录 293,937,823,744 可用字节 D:\\data\\game\\temp\u0026gt;dir | find \u0026#34;.txt\u0026#34; 2022/10/23 20:48 6 1.txt 2022/10/23 20:48 6 2.txt D:\\data\\game\\temp\u0026gt;  使用find查找网络连接 netstat -an (查看所有网络连接)  D:\\data\\game\\temp\u0026gt;netstat -an 活动连接 协议 本地地址 外部地址 状态 TCP 0.0.0.0:135 0.0.0.0:0 LISTENING TCP 0.0.0.0:443 0.0.0.0:0 LISTENING TCP 0.0.0.0:445 0.0.0.0:0 LISTENING TCP 0.0.0.0:902 0.0.0.0:0 LISTENING TCP 0.0.0.0:912 0.0.0.0:0 LISTENING TCP 0.0.0.0:3306 0.0.0.0:0 LISTENING TCP 0.0.0.0:3307 0.0.0.0:0 LISTENING TCP 0.0.0.0:5040 0.0.0.0:0 LISTENING TCP 0.0.0.0:5500 0.0.0.0:0 LISTENING TCP 0.0.0.0:7680 0.0.0.0:0 LISTENING TCP 0.0.0.0:33060 0.0.0.0:0 LISTENING TCP 0.0.0.0:33060 0.0.0.0:0 LISTENING TCP 0.0.0.0:49664 0.0.0.0:0 LISTENING TCP 0.0.0.0:49665 0.0.0.0:0 LISTENING TCP 0.0.0.0:49666 0.0.0.0:0 LISTENING TCP 0.0.0.0:49667 0.0.0.0:0 LISTENING TCP 0.0.0.0:49668 0.0.0.0:0 LISTENING TCP 0.0.0.0:49681 0.0.0.0:0 LISTENING TCP 0.0.0.0:51600 0.0.0.0:0 LISTENING TCP 0.0.0.0:51602 0.0.0.0:0 LISTENING TCP 0.0.0.0:56686 0.0.0.0:0 LISTENING TCP 127.0.0.1:1313 0.0.0.0:0 LISTENING TCP 127.0.0.1:1313 127.0.0.1:59957 ESTABLISHED TCP 127.0.0.1:1313 127.0.0.1:60097 ESTABLISHED TCP 127.0.0.1:1521 0.0.0.0:0 LISTENING TCP 127.0.0.1:1521 127.0.0.1:56688 ESTABLISHED TCP 127.0.0.1:6942 0.0.0.0:0 LISTENING TCP 127.0.0.1:8307 0.0.0.0:0 LISTENING TCP 127.0.0.1:8680 0.0.0.0:0 LISTENING TCP 127.0.0.1:10000 0.0.0.0:0 LISTENING TCP 127.0.0.1:10242 0.0.0.0:0 LISTENING TCP 127.0.0.1:39085 0.0.0.0:0 LISTENING TCP 127.0.0.1:49691 127.0.0.1:49692 ESTABLISHED TCP 127.0.0.1:49692 127.0.0.1:49691 ESTABLISHED TCP 127.0.0.1:49693 127.0.0.1:49694 ESTABLISHED TCP 127.0.0.1:49694 127.0.0.1:49693 ESTABLISHED TCP 127.0.0.1:49698 127.0.0.1:49699 ESTABLISHED TCP 127.0.0.1:49699 127.0.0.1:49698 ESTABLISHED TCP 127.0.0.1:49700 127.0.0.1:49701 ESTABLISHED TCP 127.0.0.1:49701 127.0.0.1:49700 ESTABLISHED TCP 127.0.0.1:51569 127.0.0.1:51570 ESTABLISHED TCP 127.0.0.1:51570 127.0.0.1:51569 ESTABLISHED TCP 127.0.0.1:51571 127.0.0.1:51572 ESTABLISHED TCP 127.0.0.1:51572 127.0.0.1:51571 ESTABLISHED TCP 127.0.0.1:51602 127.0.0.1:60123 ESTABLISHED TCP 127.0.0.1:53000 0.0.0.0:0 LISTENING TCP 127.0.0.1:54530 0.0.0.0:0 LISTENING TCP 127.0.0.1:54533 0.0.0.0:0 LISTENING TCP 127.0.0.1:54533 127.0.0.1:59854 ESTABLISHED TCP 127.0.0.1:56688 127.0.0.1:1521 ESTABLISHED TCP 127.0.0.1:56751 0.0.0.0:0 LISTENING TCP 127.0.0.1:59854 127.0.0.1:54533 ESTABLISHED TCP 127.0.0.1:59855 127.0.0.1:59856 ESTABLISHED TCP 127.0.0.1:59856 127.0.0.1:59855 ESTABLISHED TCP 127.0.0.1:59957 127.0.0.1:1313 ESTABLISHED TCP 127.0.0.1:60058 127.0.0.1:51602 TIME_WAIT TCP 127.0.0.1:60064 127.0.0.1:51600 TIME_WAIT TCP 127.0.0.1:60076 127.0.0.1:1313 TIME_WAIT TCP 127.0.0.1:60078 127.0.0.1:51602 TIME_WAIT TCP 127.0.0.1:60086 127.0.0.1:51602 TIME_WAIT TCP 127.0.0.1:60097 127.0.0.1:1313 ESTABLISHED TCP 127.0.0.1:60106 127.0.0.1:51602 TIME_WAIT TCP 127.0.0.1:60114 127.0.0.1:51602 TIME_WAIT TCP 127.0.0.1:60123 127.0.0.1:51602 ESTABLISHED TCP 127.0.0.1:63342 0.0.0.0:0 LISTENING TCP 192.168.0.123:2030 0.0.0.0:0 LISTENING TCP 192.168.12.1:139 0.0.0.0:0 LISTENING TCP 192.168.12.1:2030 0.0.0.0:0 LISTENING TCP 192.168.31.80:139 0.0.0.0:0 LISTENING TCP 192.168.31.80:50211 20.197.71.89:443 ESTABLISHED TCP 192.168.31.80:51040 112.53.36.19:80 ESTABLISHED TCP 192.168.31.80:58542 112.45.122.108:443 ESTABLISHED TCP 192.168.31.80:59936 101.32.33.45:443 CLOSE_WAIT TCP 192.168.31.80:59938 101.32.33.45:443 CLOSE_WAIT TCP 192.168.31.80:59939 185.199.109.153:443 ESTABLISHED TCP 192.168.31.80:59945 172.105.220.19:80 CLOSE_WAIT TCP 192.168.31.80:59947 172.105.220.19:80 CLOSE_WAIT TCP 192.168.31.80:59948 172.105.220.19:80 CLOSE_WAIT TCP 192.168.31.80:59949 172.105.220.19:80 CLOSE_WAIT TCP 192.168.31.80:59950 172.105.220.19:80 CLOSE_WAIT TCP 192.168.31.80:59982 220.246.254.9:5228 CLOSE_WAIT TCP 192.168.31.80:60062 223.85.58.92:443 ESTABLISHED TCP 192.168.31.80:60089 223.87.182.189:443 TIME_WAIT TCP 192.168.31.80:60094 112.45.122.109:443 ESTABLISHED TCP 192.168.31.80:60095 112.45.122.108:443 ESTABLISHED TCP 192.168.31.80:60115 142.251.43.10:443 SYN_SENT TCP 192.168.31.80:60116 142.251.43.10:443 SYN_SENT TCP 192.168.31.80:60117 142.251.43.10:443 SYN_SENT TCP 192.168.31.80:60118 142.251.43.10:443 SYN_SENT TCP 192.168.31.80:60119 172.217.160.106:443 SYN_SENT TCP 192.168.31.80:60120 172.217.160.106:443 SYN_SENT TCP 192.168.31.80:60121 172.217.160.106:443 SYN_SENT TCP 192.168.31.80:60122 172.217.163.42:443 SYN_SENT TCP 192.168.79.1:139 0.0.0.0:0 LISTENING TCP 192.168.79.1:2030 0.0.0.0:0 LISTENING TCP [::]:135 [::]:0 LISTENING TCP [::]:443 [::]:0 LISTENING TCP [::]:445 [::]:0 LISTENING TCP [::]:3306 [::]:0 LISTENING TCP [::]:3307 [::]:0 LISTENING TCP [::]:5500 [::]:0 LISTENING TCP [::]:7680 [::]:0 LISTENING TCP [::]:33060 [::]:0 LISTENING TCP [::]:33060 [::]:0 LISTENING TCP [::]:49664 [::]:0 LISTENING TCP [::]:49665 [::]:0 LISTENING TCP [::]:49666 [::]:0 LISTENING TCP [::]:49667 [::]:0 LISTENING TCP [::]:49668 [::]:0 LISTENING TCP [::]:49681 [::]:0 LISTENING TCP [::]:51600 [::]:0 LISTENING TCP [::]:56686 [::]:0 LISTENING TCP [::1]:8307 [::]:0 LISTENING TCP [::1]:49669 [::]:0 LISTENING TCP [::1]:49680 [::]:0 LISTENING TCP [fe80::a855:ecd0:285d:352e%13]:2030 [::]:0 LISTENING TCP [fe80::bc7f:faee:41f9:ecf7%18]:2030 [::]:0 LISTENING TCP [fe80::f508:71d3:56e1:6b30%10]:2030 [::]:0 LISTENING UDP 0.0.0.0:5050 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5353 *:* UDP 0.0.0.0:5355 *:* UDP 0.0.0.0:54095 *:* UDP 0.0.0.0:61357 *:* UDP 127.0.0.1:1900 *:* UDP 127.0.0.1:40000 *:* UDP 127.0.0.1:52174 *:* UDP 127.0.0.1:53904 *:* UDP 192.168.12.1:137 *:* UDP 192.168.12.1:138 *:* UDP 192.168.12.1:1900 *:* UDP 192.168.12.1:52172 *:* UDP 192.168.31.80:137 *:* UDP 192.168.31.80:138 *:* UDP 192.168.31.80:1900 *:* UDP 192.168.31.80:52173 *:* UDP 192.168.79.1:137 *:* UDP 192.168.79.1:138 *:* UDP 192.168.79.1:1900 *:* UDP 192.168.79.1:52171 *:* UDP [::]:5353 *:* UDP [::]:5353 *:* UDP [::]:5353 *:* UDP [::]:5353 *:* UDP [::]:5353 *:* UDP [::]:5353 *:* UDP [::]:5353 *:* UDP [::]:5353 *:* UDP [::]:5353 *:* UDP [::]:5353 *:* UDP [::]:5355 *:* UDP [::1]:1900 *:* UDP [::1]:52170 *:* UDP [::1]:55220 *:* UDP [fe80::a855:ecd0:285d:352e%13]:1900 *:* UDP [fe80::a855:ecd0:285d:352e%13]:52169 *:* UDP [fe80::bc7f:faee:41f9:ecf7%18]:1900 *:* UDP [fe80::bc7f:faee:41f9:ecf7%18]:52167 *:* UDP [fe80::f508:71d3:56e1:6b30%10]:1900 *:* UDP [fe80::f508:71d3:56e1:6b30%10]:52168 *:*  查找当前主机与外部建立连接的网络  D:\\data\\game\\temp\u0026gt;netstat -an | find \u0026#34;ESTABLISHED\u0026#34; TCP 127.0.0.1:1313 127.0.0.1:59957 ESTABLISHED TCP 127.0.0.1:1313 127.0.0.1:60156 ESTABLISHED TCP 127.0.0.1:1521 127.0.0.1:56688 ESTABLISHED TCP 127.0.0.1:49691 127.0.0.1:49692 ESTABLISHED TCP 127.0.0.1:49692 127.0.0.1:49691 ESTABLISHED TCP 127.0.0.1:49693 127.0.0.1:49694 ESTABLISHED TCP 127.0.0.1:49694 127.0.0.1:49693 ESTABLISHED TCP 127.0.0.1:49698 127.0.0.1:49699 ESTABLISHED TCP 127.0.0.1:49699 127.0.0.1:49698 ESTABLISHED TCP 127.0.0.1:49700 127.0.0.1:49701 ESTABLISHED TCP 127.0.0.1:49701 127.0.0.1:49700 ESTABLISHED TCP 127.0.0.1:51569 127.0.0.1:51570 ESTABLISHED TCP 127.0.0.1:51570 127.0.0.1:51569 ESTABLISHED TCP 127.0.0.1:51571 127.0.0.1:51572 ESTABLISHED TCP 127.0.0.1:51572 127.0.0.1:51571 ESTABLISHED TCP 127.0.0.1:51600 127.0.0.1:60197 ESTABLISHED TCP 127.0.0.1:51602 127.0.0.1:60189 ESTABLISHED TCP 127.0.0.1:54533 127.0.0.1:59854 ESTABLISHED TCP 127.0.0.1:56688 127.0.0.1:1521 ESTABLISHED TCP 127.0.0.1:59854 127.0.0.1:54533 ESTABLISHED TCP 127.0.0.1:59855 127.0.0.1:59856 ESTABLISHED TCP 127.0.0.1:59856 127.0.0.1:59855 ESTABLISHED TCP 127.0.0.1:59957 127.0.0.1:1313 ESTABLISHED TCP 127.0.0.1:60156 127.0.0.1:1313 ESTABLISHED TCP 127.0.0.1:60189 127.0.0.1:51602 ESTABLISHED TCP 127.0.0.1:60197 127.0.0.1:51600 ESTABLISHED TCP 192.168.31.80:50211 20.197.71.89:443 ESTABLISHED TCP 192.168.31.80:51040 112.53.36.19:80 ESTABLISHED TCP 192.168.31.80:60192 223.85.58.92:443 ESTABLISHED "});index.add({'id':8,'href':'/life/docs/javadir/groovy/groovy%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/','title':"groovy 基本概念 ",'section':"groovy 学习与使用 ",'content':"groovy 基本概念 #  1、基本概念 #   Groovy是一种面向对象的动态类型语言，跟Java一样运行在JVM上。\n（注：给Java静态世界带来动态能力的语言）\n   与Java不同的语言特性：\n  a) 函数字面值\n  b) 对集合的一等支持\n  c) 对正则表达式的一等支持\n  d) 对XML处理的一等支持\n  （注：所谓“一等”指的是内置到语言的语法中，不需要调用类库。）\n  2:Groovy能解决包括： #    快速Web开发\n  原型设计\n  脚本处理\n  等问题，这些使用Java不是解决动态层问题的理想语言。\n  例如:\nSystem.out.println(\u0026quot;It's a Groovy baby, yeah!\u0026quot;);\rdef writer = new StringWriter();\rdef xml = new groovy.xml.MarkupBuilder(writer);\rxml.person(id:2){\rname 'kobicc'\rage 1\r}\rprintln writer.toString();\r"});index.add({'id':9,'href':'/life/docs/javadir/basedir/jsp_dir/java_%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6%E5%8E%9F%E7%90%86/','title':"java_监听事件原理 ",'section':"jsp 基础知识 ",'content':"接口回调法 #  模拟输出监听事件 #  第一步先定义事件接口 #  public interface PrintListener {\rpublic void print();\r}\r第二步自定义输出类 #  public class Out {\rPrintListener listener=null;\rpublic Out() {\r}\rpublic Out(PrintListener listener) {\rthis.listener=listener;\r}\rpublic void printlen(String s) {\rSystem.out.println(s);\rif(listener!=null) {\rlistener.print();\r}\r}\r}\r第三步实现监听事件接口 #  public class PrintListenerDemo implements PrintListener {\r@Override\rpublic void print() {\rSystem.out.println(\u0026quot;监听到输出事件\u0026quot;);\r}\r}\r测试 #  public class Test {\rpublic static void main(String[] args) {\r//新建一个默认输出类\rOut b=new Out();\rb.printlen(\u0026quot;这里不会被监听到输出事件\u0026quot;);\t//新建一个输出类,为输出类添加一个输出监听事件\rOut b1=new Out(new PrintListenerDemo());\rb1.printlen(\u0026quot;这里输出后会被监听到输出事件\u0026quot;);\r}\r}\r结果 #  监听事件使用 #   在javaweb中,不论与ServletContext,HttpSession,ServletRequest相关的监听接口\n  开发者只需要直接实现这些监听接口事件,其他的源码别人己经写好了,我们不用关心它是如何实现\n "});index.add({'id':10,'href':'/life/docs/javadir/basedir/','title':"Java基础知识 ",'section':" Java技术栈",'content':"目录 #   jsp  @Test public void mapTest() throws Exception { Map map = new HashMap(); map.put(\u0026#34;1\u0026#34;, UUID.randomUUID().toString()) ; map.put(\u0026#34;4\u0026#34;, UUID.randomUUID().toString()) ; Map\u0026lt;Integer ,String\u0026gt; integerStringMap = new HashMap\u0026lt;\u0026gt;() ; integerStringMap.put(1,UUID.randomUUID().toString()) ; // integerStringMap = map;  if (!integerStringMap.isEmpty()){ for ( Iterator\u0026lt;Map.Entry\u0026lt;Integer, String\u0026gt;\u0026gt; iterator = integerStringMap.entrySet().iterator();iterator.hasNext();){ Map.Entry\u0026lt;Integer, String\u0026gt; next = iterator.next(); System.out.println(next.getKey()+\u0026#34;-\u0026#34;+next.getValue()); System.out.println(next.getKey() instanceof Integer); System.out.println(next.getValue() instanceof String); } } //print result  /** * 1-aeec41b6-bb7c-4e77-a57c-70a416bc03eb * false * true * 4-e02bb587-9714-4873-9b6c-5e2d4494117f * false * true */ } "});index.add({'id':11,'href':'/life/docs/javadir/basedir/jsp_dir/','title':"jsp 基础知识 ",'section':"Java基础知识 ",'content':"目录 #  el表达式\n字符串el表达式\nJSTL_core标签库\nsession\n监听事件原理\n"});index.add({'id':12,'href':'/life/docs/operating_system/linux/','title':"linux学习与使用 ",'section':"操作系统 ",'content':" Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。\n 目录 #    linux基础命令\n  nginx学习与使用\n  host映射\n  Linux下设置和查看环境变量\n  Ubuntu清理系统垃圾\n  Notepad++安装\n  ubuntu 安装chmsee\n  ubuntu软件卸载\n  Ubuntu 16.04修改hosts\n  git命令\n  git配置\n  "});index.add({'id':13,'href':'/life/docs/python/base/','title':"python 基础学习",'section':" python",'content':"python 学习笔记 #    学习之前注意python版本区别,因为目前很多都是3.x版本了\n  本学习笔记基于3.x+\n  Python基础 #  输入和输出 #  输出 #   Python print() 函数  print(*objects, sep=\u0026#39; \u0026#39;, end=\u0026#39;\\n\u0026#39;, file=sys.stdout, flush=False) # objects -- 复数，表示可以一次输出多个对象。输出多个对象时，需要用 , 分隔 # sep -- 用来间隔多个对象，默认值是一个空格 # end -- 用来设定以什么结尾。默认值是换行符 \\n，我们可以换成其他字符串 # file -- 要写入的文件对象 # flush -- 输出是否被缓存通常决定于 file，但如果 flush 关键字参数为 True，流会被强制刷新 # 返回值 无  用print()在括号中加上字符串，就可以向屏幕上输出指定的文字  print(\u0026#39;hello world\u0026#39;)  print()函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出  print(\u0026#39;漫\u0026#39;,\u0026#39;步\u0026#39;,\u0026#39;人\u0026#39;,\u0026#39;生\u0026#39;)  print()也可以打印整数，或者计算结果  print(12) print(12 + 20)  设置间隔符  print(\u0026#34;美丽\u0026#34;,\u0026#34;人生\u0026#34;,sep=\u0026#34;-\u0026#34;) # 美丽-人生  多行内容  str = \u0026#39;\u0026#39;\u0026#39; ab cd \u0026#39;\u0026#39;\u0026#39; 输入 #   用户从电脑输入一些字符 Python提供了一个input()，可以让用户输入字符串，并存放到一个变量里  print(\u0026#34;请输入你的名字!\u0026#34;) myName =input() print(\u0026#34;你的名字是\u0026#34;,myName,\u0026#34;!\u0026#34;,sep=\u0026#34;\u0026#34;,end=\u0026#34;\u0026#34;) #请输入你的名字! #张三 #你的名字是张三! 数据类型和变量 #    任何编程语言都需要处理数据，比如数字、字符串、字符等，我们可以直接使用数据，也可以将数据保存到变量中，方便以后使用\n  变量（Variable）可以看成一个小箱子，专门用来“盛装”程序中的数据。每个变量都拥有独一无二的名字，通过变量的名字就能找到变量中的数据\n  在编程语言中，将数据放入变量的过程叫做赋值（Assignment）。Python 使用等号=作为赋值运算符，具体格式为：\n  name = \u0026#39;value\u0026#39; # name 表示变量名；value 表示值，也就是要存储的数据  变量是标识符的一种，它的名字不能随便起，要遵守 Python 标识符命名规范，还要避免和 Python 内置函数以及 Python 保留字重名  pi = 3.14 name = \u0026#34;blake\u0026#34; n = 20 n = \u0026#39;dsdh\u0026#39;  变量类型检测  print(type(\u0026#39;string\u0026#39;)) print(type(3.1415)) print(type(100)) print(type(\u0026#39;\u0026#39;)) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; # \u0026lt;class \u0026#39;float\u0026#39;\u0026gt; # \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; "});index.add({'id':14,'href':'/life/docs/operating_system/windows/','title':"windows学习与使用 ",'section':"操作系统 ",'content':"windows系统 #   MicrosoftWindows操作系统是美国微软公司研发的一套操作系统，它问世于1985年，起初仅仅是Microsoft-DOS模拟环境，后续的系统版本由于微软不断的更新升级，不但易用，也当前应用最广泛的操作系统。\n Microsoft公司从1983年开始研制Windows系统，最初的研制目标是在MS - DOS的基础上提供一个多任务的图形用户界面。第一个版本的Windows 1.0于1985年问世，它是一个具有图形用户界面的系统软件。1987年推出了Windows 2.0版，最明显的变化是采用了相互叠盖的多窗口界面形式。但这一切都没有引起人们的关注。直到1990年推出Windows 3.0成为一个重要的里程碑，它以压倒性的商业成功确定了Windows系统在PC领域的垄断地位。现今流行的Windows窗口界面的基本形式也是从Windows3.0开始基本确定的。1992年主要针对Windows 3.0的缺点推出了Windows 3.1，为程序开发提供了功能强大的窗口控制能力，使Windows和在其环境下运行的应用程序具有了风格统一、操纵灵活、使用简便的用户界面。Windows3.1在内存管理上也取得了突破性进展。它使应用程序可以超过常规内存空间限制，不仅支持16MB内存寻址，而且在80386及以上的硬件配置上通过虚拟存储方式可以支持几倍于实际物理存储器大小的地址空间。Windows 3.1还提供了一定程度的网络支持、多媒体管理、超文本形式的联机帮助设施等，对应用程序的开发有很大影响。 [3] 众所周知，Windows在个人计算机领域是普及度很高的操作系统。当计算机的体积不断变小，发展成掌上电脑的形态时，Windows系统自然电延伸到这类便携式产品的领域。然而，掌上电脑在续航能力、显示屏幕、输入界面等方面与普通的PC还是有很大差别的，考虑功耗和用户使用习惯等方面的因素，Windows系统针对手持设备的特点进行了多次调整和优化，先后形成了Windows CE，Windows Mobile，Windows Phone等移动版本的系统。 [4] 早期的Windows移动版本系统并未充分考虑智能手机的特点，更多的是从掌上电脑的角度在设计系统。例如，开始菜单虽然在PC上早已为人们所习惯和熟知，但将开始菜单放到手机屏幕上使用时，层层展开的菜单在狭小的屏幕上会让用户很难找到自己所需要的程序。因此，当微软充分认识到移动互联网的发展潜力后，Windows针对智能手机系统的各种设计才逐渐朝着扁平化的风格演变，其中一个特色就是动态磁贴的概念。 [4] 目前，虽然Windows Phone系统凭借Windows系统在桌面计算领域的优势，以及其办公软件Office多年培养起来的庞大用户群体和操作习惯，一直试图在移动计算领域扩大份额。然而，决定一个系统生命力的是应用程序的数量和质量，在这一点上，Windows Phone系统似乎起步太晚了，如何将开发者和用户从已经较为成熟的安卓和iOS系统吸引到这个平台上来是WP面临的最大挑战。 [4] Windows 10 Mobile是微软发发布的一个手机系统 [5] 。\rwindows问题 #  DOS基础 #  FTP #  DOS常用命令(文件) #  DOS常用命令(网络检测) #  "});index.add({'id':15,'href':'/life/docs/operating_system/one_chapter/','title':"第一章 操作系统概述 ",'section':"操作系统 ",'content':"操作系统概述 #  目录 #   操作系统的概念、功能 操作系统的特征 操作系统的发展与分类 操作系统的运行机制与体系结构 中断和异常 系统调用 操作系统的体系结构  "});index.add({'id':16,'href':'/life/docs/computer_network/network_architecture/','title':"网络体系结构",'section':"计算机网络 ",'content':"*[·-·]:注释内容\n计算机概念 组成 功能 分类 #  标准化工作及相关组织 #   法定标准 事实标准  分层参考模型 #  7层 , 4层 ,5层 #   计算机概念-组成-功能-分类 标准化工作及相关组织 速率相关的性能指标 分层结构 分层参考模型 模型层次详解  "});index.add({'id':17,'href':'/life/docs/computer_network/','title':"计算机网络 ",'section':"Docs",'content':"目录 #   网络体系结构 物理层 数据链路层 网络层 传输层 应用层  st=\u0026gt;start: 开始\rop=\u0026gt;operation: My Operation\rcond=\u0026gt;condition: Yes or No?\re=\u0026gt;end\rst-\u0026gt;op-\u0026gt;cond\rcond(yes)-\u0026gt;e\rcond(no)-\u0026gt;op\r\u0026amp;```\r"});index.add({'id':18,'href':'/life/docs/car_study/one/','title':"科目一",'section':"汽车教学",'content':"a部分视频\nb部分视频\nc部分视频\n"});index.add({'id':19,'href':'/life/docs/javadir/tooldoc/apache-common%E5%B7%A5%E5%85%B7%E5%8C%85/','title':"Apache Commons 工具类介绍及简单使用",'section':"Java公共库文档总结 ",'content':"Apache Commons 工具类介绍及简单使用 #     组件 功能介绍     BeanUtils Commons-BeanUtils 提供对 Java 反射和自省API的包装, 提供了对于JavaBean进行各种操作，克隆对象,属性等等.   Betwixt XML与Java对象之间相互转换.   Codec 处理常用的编码方法的工具类包 例如DES、SHA1、MD5、Base64等.   Collections java集合框架操作.   Compress java提供文件打包 压缩类库.   Configuration Commons-Configuration 工具对各种各式的配置和参考文件提供读取帮助,java应用程序的配置管理类库.   DBCP 提供数据库连接池服务.   DbUtils DbUtils 是一个 JDBC helper 类库，完成数据库任务的简单的资源清除代码,提供对jdbc 的操作封装来简化数据查询和记录读取操作   Email java发送邮件 对javamail的封装.   FileUpload 提供文件上传功能.   HttpClient 提供HTTP客户端与服务器的各种通讯操作. 现在已改成HttpComponents   Lang Java基本对象方法的工具类包 如：StringUtils,ArrayUtils等等.   Logging 提供的是一个Java 的日志接口.   Validator 提供了客户端和服务器端的数据验证框架.   Primitives Commons-Primitives提供了一个更小，更快和更易使用的对Java基本类型的支持。当前主要是针对基本类型的 collection。   Math Math 是一个轻量的，自包含的数学和统计组件，解决了许多非常通用但没有及时出现在Java标准语言中的实践问题   EL Commons-EL 提供在JSP2.0规范中定义的EL表达式的解释器.   Discovery Commons-Discovery 提供工具来定位资源 (包括类) ，通过使用各种模式来映射服务/引用名称和资源名称。   Digester Commons-Digester 是一个 XML-Java对象的映射工具，用于解析 XML配置文件.   Chain Chain 提供实现组织复杂的处理流程的“责任链模式”   Modeler Commons-Modeler 提供了建模兼容JMX规范的Mbean的机制.   Net Net 是一个网络工具集，基于 NetComponents 代码，包括 FTP 客户端等等    一:org.apache.commons.lang #   ArrayUtils – 用于对数组的操作，如添加、查找、删除、子数组、倒序、元素类型转换等；  ArrayUtils类\rArrayUtils.toString(array) 将数组转为为字符串，格式如：{2,4,8,16}\rArrayUtils.contains(array,8) 判断数组中是否包含数字8，（一维数组）\rArrayUtils.indexOf(array,8) 判断数组中第一个8的位置（一维数组）\rArrayUtils.lastIndexOf(array,8) 判断数组中最后一个8的位置。（一维数组）\rArrayUtils.clone(array) 给一个一维数组来个拷贝\rArrayUtils.reverse(array); 翻转该一维数组\rArrayUtils.toMap(array); 将一个二维数组转换为map，二维数组中至少与两列，第一列为key第二列为value == \u0026gt;注意的是传入toMap()中的二维数组必须是对象如Integer\r  BitField – 用于操作位元，提供了一些方便而安全的方法；\n  BooleanUtils – 用于操作和转换 boolean 或者 Boolean 及相应的数组；\n   boolean[] booleans = new boolean[]{true, false, true};\r//和，并且\rSystem.out.println(BooleanUtils.and(booleans));//false\r//或者\rSystem.out.println(BooleanUtils.or(booleans));//true\rProjectInfo projectInfo = null;\rif (projectInfo != null \u0026amp;\u0026amp; projectInfo.getId() != 0);\r//可以用上面的改为\rBooleanUtils.and(new boolean[]{projectInfo != null,projectInfo.getId() != 0});\rInteger integer = 0;\rSystem.out.println(BooleanUtils.toBooleanObject(integer));//false\r CharEncoding – 包含了 Java 环境支持的字符编码，提供是否支持某种编码的判断；  System.out.println(CharEncoding.ISO_8859_1);\rSystem.out.println(CharEncoding.US_ASCII);\rSystem.out.println(CharEncoding.UTF_8);\rSystem.out.println(CharEncoding.UTF_16);\rSystem.out.println(CharEncoding.UTF_16BE);\rSystem.out.println(CharEncoding.UTF_16LE);\r CharRange – 用于设定字符范围并做相应检查；  System.out.println(CharUtils.toChar(\u0026quot;hello\u0026quot;,'o'));\rint assii = CharUtils.toIntValue('2');//检查字符是否在0-9\rSystem.out.println(assii);\r CharSet – 用于设定一组字符作为范围并做相应检查；(我的理解是可以用作正则表达式的判断)  System.out.println(CharSet.ASCII_ALPHA.toString());//[a-z, A-Z]\rSystem.out.println(CharSet.ASCII_ALPHA.contains('B'));//判断char是否在这个范围内\rSystem.out.println(CharSet.ASCII_ALPHA_LOWER.contains('l'));//判断char是否在这个范围内\rSystem.out.println(CharSet.ASCII_NUMERIC.contains('8'));//判断char是否在这个范围内\rSystem.out.println(CharSet.getInstance(\u0026quot;s\u0026quot;));//[s]\r CharSetUtils – 用于操作 CharSet ；   /*这里面所以的输入字符串都会被拆成char[]来判定*/\r//删除指定的字符(假如删除的这个会重复那么也会被删除掉)\rSystem.out.println(CharSetUtils.delete(\u0026quot;hello World !\u0026quot;,\u0026quot; o\u0026quot;));//helloWorld! , hellWrld! ==\u0026gt; input [ o]和[o] 结果都不同\r//是否包含任意一个字符\rSystem.out.println(CharSetUtils.containsAny(\u0026quot;xudaollong\u0026quot;,\u0026quot;k\u0026quot;,\u0026quot;o\u0026quot;));\r//当有重复的时候只删除第一次的\rSystem.out.println(CharSetUtils.squeeze(\u0026quot;china dong kk a\u0026quot;,\u0026quot;k\u0026quot;));\r//保留指定的char 要注意的是指定的char,这虽然输入的是字符串dong,但是在判定的时候实际上是把这个字符串拆成char[]\rSystem.out.println(CharSetUtils.keep(\u0026quot;china g dong\u0026quot;,\u0026quot;dong\u0026quot;));\r//统计char出现的次数\rSystem.out.println(CharSetUtils.count(\u0026quot;hello world\u0026quot;, \u0026quot;o\u0026quot;));\r CharUtils – 用于操作 char 值和 Character 对象；  System.out.println(CharUtils.toChar(\u0026quot;hello\u0026quot;,'o'));\rint num = CharUtils.toIntValue('2');//获取int类型的char但是char必须在Ascii码中\rSystem.out.println(num);\rSystem.out.println(CharUtils.isAsciiNumeric('u'));//false\rSystem.out.println(CharUtils.isAsciiNumeric('7'));//true\rSystem.out.println(CharUtils.isAscii('h'));//判断是否在Ascii 128 范围类,是否属于Ascii\r ClassUtils – 用于对 Java 类的操作，不使用反射；  System.out.println(ClassUtils.getShortClassName(UserDO.class));//返回 UserDO\rSystem.out.println(ClassUtils.getName(UserDO.class));//返回 包名.UserDO\rSystem.out.println(ClassUtils.getPackageName(UserDO.class));//返回 包名\rSystem.out.println(ClassUtils.getShortCanonicalName(UserDO.class));//返回 UserDO\rSystem.out.println(ClassUtils.getSimpleName(UserDO.class));//返回 UserDO\rSystem.out.println(ClassUtils.getAbbreviatedName(UserDO.class,2));\rClassUtils.getAllSuperclasses(UserDO.class).stream().forEachOrdered(System.out::println);//获取父类\rClassUtils.getAllInterfaces(UserDO.class).stream().forEachOrdered(System.out::println);//获取接口\r ObjectUtils – 用于操作 Java 对象，提供 null 安全的访问和其他一些功能；  UserDO userDO = new UserDO(Zhou_Word.getEnglishName());\rUserDO userDO1 = ObjectUtils.clone(userDO);\ruserDO1 = null;\ruserDO = Preconditions.checkNotNull(userDO, \u0026quot;不能为null\u0026quot;);//不会抛出NullPointerException\r/**如果一个类没有重写toString方法本身，将会通过Object类的toString方法获取对象的字符串对象，*/\rSystem.out.println(ObjectUtils.identityToString(null));//null\rSystem.out.println(ObjectUtils.identityToString(\u0026quot;\u0026quot;));//java.lang.String@12843fce\rSystem.out.println(ObjectUtils.identityToString(Boolean.TRUE));//java.lang.Boolean@3dd3bcd\r/**\r* 累加对象产生的toString\r* 两个参数任意一个为null都会抛出空指针异常\r* buffer-要追加的缓冲区\r* object-要创建对象的toString\r*/\rStringBuffer buffer = new StringBuffer();\rObjectUtils.identityToString(buffer, \u0026quot;\u0026quot;);\rObjectUtils.identityToString(buffer, Boolean.TRUE);\rObjectUtils.identityToString(buffer, 12);\rSystem.out.println(buffer.toString());//java.lang.String@12843fcejava.lang.Boolean@3dd3bcdjava.lang.Integer@97e1986 调用了Object类的toString方法\r//封装类型的数字比较\rInteger a = 10, b = null, c = 15;\r//比较两个封装类型的数字,默认null为小\rObjectUtils.compare(a, b);\r//比较两个封装类型的数字,设置null为大\rObjectUtils.compare(a, b, true);\r//获取最大的值,默认null为最小\rObjectUtils.max(a, b);\r RandomStringUtils – 用于生成随机的字符串；  System.out.println(RandomStringUtils.random(4).length());\rSystem.out.println(RandomStringUtils.random(23));//生成指定长度任意的随机字符\rSystem.out.println(RandomStringUtils.randomNumeric(22));//生成数字组成的随机字符\rSystem.out.println(RandomStringUtils.randomAscii(22));//生成ascii 128内的随机字符\rSystem.out.println(RandomStringUtils.randomAlphabetic(21));//生成大写或者小写或者都有组成的随机字符\r  SerializationUtils – 用于处理对象序列化，提供比一般 Java 序列化更高级的处理能力；\n  StringEscapeUtils – 用于正确处理转义字符，产生正确的 Java 、 JavaScript 、 HTML 、 XML 和 SQL 代码；\n  String str = \u0026quot;thi is a test 这是一个测试\u0026quot;;\rString xml = \u0026quot;\u0026lt;?xml version=\\\u0026quot;1.0\\\u0026quot; encoding=\\\u0026quot;UTF-8\\\u0026quot;?\u0026gt;\\n\u0026quot; +\r\u0026quot;\u0026lt;persons\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;person id=\\\u0026quot;23\\\u0026quot;\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;name\u0026gt;张 三\u0026lt;/name\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;age\u0026gt;26\u0026lt;/age\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;/person\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;person id=\\\u0026quot;22\\\u0026quot;\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;name\u0026gt;李四\u0026lt;/name\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;age\u0026gt;25\u0026lt;/age\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;/person\u0026gt;\\n\u0026quot; +\r\u0026quot;\u0026lt;/persons\u0026gt;\u0026quot;;\rSystem.out.println(\u0026quot;用escapeJava方法转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.escapeJava(str));\rSystem.out.println(\u0026quot;用unescapeJava方法反转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.unescapeJava(org.apache.commons.lang.StringEscapeUtils.escapeJava(str)));\rSystem.out.println(\u0026quot;用escapeHtml方法转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.escapeHtml(str));\rSystem.out.println(\u0026quot;用unescapeHtml方法反转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.unescapeHtml(org.apache.commons.lang.StringEscapeUtils.escapeHtml(str)));\rSystem.out.println(\u0026quot;用escapeXml方法转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.escapeXml(xml));\rSystem.out.println(\u0026quot;用unescapeXml方法反转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.unescapeXml(org.apache.commons.lang.StringEscapeUtils.escapeXml(xml)));\rSystem.out.println(\u0026quot;用escapeJavaScript方法转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(str));\rSystem.out.println(\u0026quot;用unescapeJavaScript方法反转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.unescapeJavaScript(org.apache.commons.lang.StringEscapeUtils.unescapeJavaScript(str)));\r StringUtils – 处理 String 的核心类，提供了相当多的功能；  System.out.println(StringUtils.isNotEmpty(\u0026quot; \u0026quot;)); //true\rSystem.out.println(StringUtils.isNotBlank(\u0026quot; \u0026quot;));//这个方法里面字符串空白会删除空白 false\rSystem.out.println( StringUtils.repeat( \u0026quot;China \u0026quot;, 5));//将目标字符串累加5次\rSystem.out.println( StringUtils.center( \u0026quot;China\u0026quot;, 10,\u0026quot;*\u0026quot;));//**China*** size=10指的是得到的长度为10 将china用*前后包围然后目标长度截取为10\rSystem.out.println(StringUtils.countMatches( \u0026quot;Chinese People\u0026quot;, \u0026quot;e\u0026quot;));//取得某字符串在另一字符串中出现的次数\rString formatted = \u0026quot; 25 * (30,40) [50,60] | 30\u0026quot;;\rSystem.out.print(\u0026quot;N0: \u0026quot; + StringUtils.substringBeforeLast( formatted, \u0026quot;*\u0026quot; ) );//取得最后一个指定字符串之前的字符串\rSystem.out.print(\u0026quot;, N1: \u0026quot; + StringUtils.substringBetween( formatted, \u0026quot;(\u0026quot;, \u0026quot;,\u0026quot; ) );//取得两字符之间的字符串\rSystem.out.print(\u0026quot;, N2: \u0026quot; + StringUtils.substringBetween( formatted, \u0026quot;,\u0026quot;, \u0026quot;)\u0026quot; ) );\rSystem.out.print(\u0026quot;, N3: \u0026quot; + StringUtils.substringBetween( formatted, \u0026quot;[\u0026quot;, \u0026quot;,\u0026quot; ) );\rSystem.out.print(\u0026quot;, N4: \u0026quot; + StringUtils.substringBetween( formatted, \u0026quot;,\u0026quot;, \u0026quot;]\u0026quot; ) );\rSystem.out.print(\u0026quot;, N5: \u0026quot; + StringUtils.substringAfterLast( formatted, \u0026quot;|\u0026quot; ) );//取得最后一个指定字符串之后的字符串\rSystem.out.println( StringUtils.reverse(\u0026quot;ABCDE\u0026quot;));//颠倒字符串 EDCBA\r根据指定分隔符进行反转，分隔符之间的字符不进行反转\rStringUtils.reverseDelimited(\u0026quot;china\u0026quot;, ',')); // china\rStringUtils.reverseDelimited(\u0026quot;cxhinxa\u0026quot;, 'x')); // axhinxz\rStringUtils.reverseDelimited(\u0026quot;c.hin.a\u0026quot;, '.')); // a.hin.c\rStringUtils.reverseDelimited(\u0026quot;c.hina\u0026quot;, '.')); // hina.c\rSystem.out.println(StringUtils.capitalize(\u0026quot;hello\u0026quot;));//首字母大写\rSystem.out.println(StringUtils.uncapitalize(this.getClass().getSimpleName()));//首字母小写\rSystem.out.println(StringUtils.isAllUpperCase(this.getClass().getSimpleName()));//是否全是大写 false\rSystem.out.println(StringUtils.isAllLowerCase(this.getClass().getSimpleName()));//是否全是小写 false\rSystem.out.println(StringUtils.swapCase(\u0026quot;I am a-A*a\u0026quot;));//大小写转换，空格不动 i AM A-a*A\rSystem.out.println(StringUtils.join(new String[] {\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot; ,\u0026quot;c\u0026quot;},\u0026quot;,\u0026quot;));//分割字符串 a,b,c\r判断字符串中是否包含指定的字符或字符序列\r1:区分大小写\rStringUtils.contains(null, 'a'); // false StringUtils.contains(\u0026quot;china\u0026quot;, 'a');// true\r2:不区分大小写\rStringUtils.containsIgnoreCase(\u0026quot;china\u0026quot;, 'a');// true\rStringUtils.containsIgnoreCase(\u0026quot;china\u0026quot;, 'A');// true\r3:只需要包含任意一个字符即可 判断字符串中是否包含指定字符集合中或指定字符串中任一字符，区分大小写\rStringUtils.containsAny(\u0026quot;abc\u0026quot;, \u0026quot;ab\u0026quot;);// true\rStringUtils.containsAny(\u0026quot;abc\u0026quot;, \u0026quot;ax\u0026quot;);// true\rStringUtils.containsAny(\u0026quot;abc\u0026quot;, \u0026quot;xy\u0026quot;);// false\r4:判断字符串中是否不包含指定的字符或指定的字符串中的字符，区分大小写\rStringUtils.containsNone(null, 'a'); // true\rStringUtils.containsNone(\u0026quot;\u0026quot;, 'a'); // true 注意这里，空串总是返回true\rStringUtils.containsNone(\u0026quot;china\u0026quot;, ' '); // true 注意包含空白符为true\r从字符串中移除匹配的字符或字符序列，如果要移除的字符或字符序列在字符串中不存在，即无匹配，则不进行移除\r1:移除单个字符\rStringUtils.remove(null, 'a')); // null (注意此处及下一行为null)\rStringUtils.remove('china', null) // china StringUtils.remove(\u0026quot;china\u0026quot;, 'i')); // chna\rStringUtils.remove(\u0026quot;china\u0026quot;, 'b')); // china (如果要移除的字符不存在，则返回原字符串)\r2:移除指定字符序列\rStringUtils.remove(\u0026quot;china\u0026quot;, \u0026quot;in\u0026quot;)); // cha\rStringUtils.remove(\u0026quot;china\u0026quot;, \u0026quot;nin\u0026quot;)); // china\r3:移除开头匹配的字符序列\rStringUtils.removeStart(\u0026quot;china\u0026quot;, \u0026quot;ch\u0026quot;)); // ina\rStringUtils.removeStartIgnoreCase(\u0026quot;china\u0026quot;, \u0026quot;CHI\u0026quot;)); // na (忽略大小写)\r4:移除结尾匹配的字符序列\rStringUtils.removeEnd(\u0026quot;china\u0026quot;, \u0026quot;na\u0026quot;)); // chi\rStringUtils.removeEndIgnoreCase(\u0026quot;china\u0026quot;, \u0026quot;NA\u0026quot;)); // chi (忽略大小写)\r5:移除空白字符\rStringUtils.deleteWhitespace(null)); //null\rStringUtils.deleteWhitespace(\u0026quot; c h i\\tn\\ra\u0026quot;)); // china\r SystemUtils – 在 java.lang.System 基础上提供更方便的访问，如用户路径、 Java 版本、时区、操作系统等判断；  System.out.println(SystemUtils.getHostName());//DESKTOP-AS9FA6P\rSystem.out.println(SystemUtils.getUserDir().getPath());//E:\\IdeaProjects\\z-utils\rSystem.out.println(SystemUtils.getUserHome().getPath());//C:\\Users\\noatn\rSystem.out.println(SystemUtils.getJavaHome().getPath());//C:\\Program Files\\Java\\jdk1.8.0_181\\jre\rSystem.out.println(SystemUtils.getJavaIoTmpDir().getPath());//C:\\Users\\noatn\\AppData\\Local\\Temp\rSystem.out.println(SystemUtils.IS_JAVA_1_8);//true\rSystem.out.println(SystemUtils.IS_OS_WINDOWS);//true\rSystem.out.println(SystemUtils.IS_OS_WINDOWS_10);//true\rSystem.out.println(SystemUtils.USER_NAME);//noatn\rSystem.out.println(SystemUtils.USER_DIR);//E:\\IdeaProjects\\z-utils\rSystem.out.println(SystemUtils.USER_HOME);//C:\\Users\\noatn\r  Validate – 提供验证的操作，有点类似 assert 断言；\n  WordUtils – 用于处理单词大小写、换行等。\n  二:org.apache.commons.lang.math #   处理分数的Fraction类；  {\rFraction fraction = Fraction.getFraction(1,2);// first prams 分子 ,second params 分母\rSystem.out.println(fraction.doubleValue());//输出具体值 0.5\rSystem.out.println(fraction.toString());//输出具字符串值 1/2\rSystem.out.println(fraction.toProperString());//输出具字符串值 1/2\r}\r{\r//当第一个参数大于0的情况 (2*3+1) / 3\rFraction fraction = Fraction.getFraction(2,1,3);\rSystem.out.println(fraction.doubleValue());//输出具体值 2.3333333333333335\r//当第一个参数大于0的情况 (-2*3-1) / 3\rfraction = Fraction.getFraction(-2,1,3);\rSystem.out.println(fraction.doubleValue());\rfraction = Fraction.getFraction(\u0026quot;1/2\u0026quot;);//可以自动解析为分子1分母2\rSystem.out.println(fraction.doubleValue());\r}\r{\r//获取绝对值 即|-1| == 1\rSystem.out.println(Fraction.getFraction(-1, 2).abs());\r//两个分数相加\rSystem.out.println(Fraction.getFraction(1, 2).add(Fraction.getFraction(\u0026quot;1/2\u0026quot;)));\r//两个分数相减\rSystem.out.println(Fraction.getFraction(1, 2).subtract(\rFraction.getFraction(1, 2)));\r//两个分数相乘\rSystem.out.println(Fraction.getFraction(1, 2).multiplyBy(\rFraction.getFraction(1, 2)));\r//两个分数相除\rSystem.out.println(Fraction.getFraction(1, 2).divideBy(\rFraction.getFraction(1, 2)));\r//约数\rSystem.out.println(Fraction.getFraction(1, 2).pow(2));\r}\r 处理数值的NumberUtils和IEEE754rUtils类，这里IEEE745r代表的是IEEE 754的标准，是一种浮点数的处理标准。 处理随机数的JVMRandom和RandomUtils类。  // JVMRandom继承了java.util.Random类，其功能和Random差不多，只不过封装了返回不同数据类型的方法而已。而RandomUtils则把JVMRandom的方法静态化了。\rfor (int i = 0; i \u0026lt; 5; i++) {\rSystem.out.println(RandomUtils.nextInt(100));\r}\r 处理数值范围的Range, DoubleRange, FloatRange, IntRange, LangRange, NumberRange类   Range normalScoreRange = new DoubleRange(90, 120);\rdouble score1 = 102.5;\rdouble score2 = 79.9;\rSystem.out.println(\u0026quot;Normal score range is: \u0026quot; + normalScoreRange);//[90.0,120.0] 打印一个范围\rSystem.out.println(\u0026quot;Is \u0026quot; + score1 + \u0026quot; a normal score? \u0026quot; + normalScoreRange.containsDouble(score1));//是否在这个范围 true\rSystem.out.println(\u0026quot;Is \u0026quot; + score2 + \u0026quot; a normal score? \u0026quot; + normalScoreRange.containsDouble(score2));//是否在这个范围 false\rSystem.out.println(normalScoreRange.overlapsRange(new IntRange(92,119)));//此范围是否在我们预定的范围中 true\r三:Commons Collections #   CollectionUtils  org.apache.commons.collections4.CollectionUtils.isEqualCollection(java.util.Collection\u0026lt;?\u0026gt;, java.util.Collection\u0026lt;?\u0026gt;) 集合是否相等\rorg.apache.commons.collections4.CollectionUtils.union(Collection\u0026lt;?\u0026gt; a,Collection\u0026lt;?\u0026gt; b) 合集\rorg.apache.commons.collections4.CollectionUtils.subtract(java.lang.Iterable\u0026lt;? extends O\u0026gt;, java.lang.Iterable\u0026lt;? extends O\u0026gt;) 差集\rorg.apache.commons.collections4.CollectionUtils.intersection (Collection\u0026lt;?\u0026gt; a,Collection\u0026lt;?\u0026gt; b) 交集\rorg.apache.commons.collections4.CollectionUtils.isSubCollection(Collection\u0026lt;?\u0026gt; a,Collection\u0026lt;?\u0026gt; b) 集合包含\rorg.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable\u0026lt;? extends O\u0026gt;, java.lang.Iterable\u0026lt;? extends O\u0026gt;) 合并\rorg.apache.commons.collections4.CollectionUtils.isNotEmpty(Collection\u0026lt;?\u0026gt; a) 判断是否为null并且是否包含元素\rorg.apache.commons.collections4.CollectionUtils.addIgnoreNull(Collection\u0026lt;T\u0026gt; collection, final T object)添加非空的对象到集合中\r"});index.add({'id':20,'href':'/life/docs/operating_system/linux/git_introduction/','title':"git学习",'section':"linux学习与使用 ",'content':"git学习 #  git 区域概念 #   git分为工作区(我们自己的file)和版本库这其中版本库又包含暂存区(Stage)和分支区(master)    git add ********** 把文件添加到仓库\n  git reset README.md 取消提交到暂存区域\n  git commmit -m \u0026lsquo;xxxx\u0026rsquo; 提交到仓库\n  git diff 查看提交到仓库文件之后文件又被修改的变化\n  git status 查看状态\n  git rm -f gitS.md 强制删除\n  git log 显示从最近到最远的提交日志\n  git log \u0026ndash;pretty=oneline 只显示版本号\n  关于版本回退问题 #    git reset \u0026ndash;hard HEAD^ 版本重置为上一个版本\n  git 关于版本处理进行了设置\n  git reset \u0026ndash;hard HEAD^　重置为上一个版本\n   这里解释下HEAD表示当前版本 如最新提交的版本号:3a451d666e6c952e1588117ef18933be489beb18 zch, 上上一个版本就是HEAD^^ 那么假如是重置为上上一个版本那么命令就是git reset \u0026ndash;hard HEAD^^ 那么假如说有100个版本呢?当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100 如:git reset \u0026ndash;hard HEAD~50 往上５０个版本 当然了如果记得具体版本号当然更好了    git reset \u0026ndash;hard 3a451d666e6c952e1588117ef18933be489beb18 这样就可以了,对了这的版本号其实可以不用写全,因为是linux嘛\n  git reflog 记录一天的命令(当天)\n  a249f45 HEAD@{0}: reset: moving to HEAD^\r545bb20 HEAD@{1}: commit: 2018年 03月 12日 星期一 10:17:56\ra249f45 HEAD@{2}: commit: append GPL\r3a451d6 HEAD@{3}: commit (initial): zch\r 你可以发现这里面包含当天所有操作的版本号(因为回退到某个版本之后那个版本号你再用git log就查找不出来了)   git log可以查看提交历史，以便确定要回退到哪个版本 git reflog查看命令历史，以便确定要回到未来的哪个版本。   (假如在工作区的内容已经做了修改与暂存区之间相比有了变化,并且你想要要丢弃这种变化,那么你可以)   git checkout \u0026ndash; gitS.md 抛弃工作区所做的修改　那么工作区就被修改为与暂存区一样了 git checkout \u0026ndash; file命令中的\u0026ndash;很重要，没有\u0026ndash;，就变成了“切换到另一个分支”的命令   关于删除文件\n  假如说你删除了当前工作区的某一个文件比如gitS.md   如进行了这个操作 rm gitS.md(linux 下) 这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了(git status) 现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令(git rm gitS.md) (git commit -m \u0026lsquo;yes delete file\u0026rsquo;) 另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本 命令(git checkout \u0026ndash; gitS.md)\n 分支(重点) #   git checkout -b dev (创建dev分支，然后切换到dev分支)  git branch dev 创建分支dev\rgit checkout dev 切换到分支dev\r git branch命令查看当前分支   git branch命令会列出所有分支，当前分支前面会标一个*号\n * dev\rmaster\r 可以随便写点内容然后提交 git commit -m \u0026lsquo;branch test\u0026rsquo; 现在，dev分支的工作完成，我们就可以切换回master分支\n  git checkout master 切换到当前分支 (这时查看gitS.md刚刚随便写的内容并没有在file中)   　我们需要与当前分支合并\n  git merge dev (dev与master合并,master表示主分支)   cat gitS.md 就看到我们添加的内容了\n  再次查看当前分支 git branch (可以看到现在的分支已经是主分支了)   dev\r* master\r 删除dev分支(git branch -d dev) 再次查看 git branch (可以看到只是主分支master了)  * master\r分支小结 #  Git鼓励大量使用分支：\r查看分支：git branch\r创建分支：git branch \u0026lt;name\u0026gt;\r切换分支：git checkout \u0026lt;name\u0026gt;\r创建+切换分支：git checkout -b \u0026lt;name\u0026gt;\r合并某分支到当前分支：git merge \u0026lt;name\u0026gt;\r删除分支：git branch -d \u0026lt;name\u0026gt;\r分支冲突 #  当新创建了一个分支,并且修改内容提交之后,而后又转回到主分支并且又做了修改并且也提交之后,在这之后又进行了合并分支\r这里我们把新创建分支并且做修改的内容称为a,把转到主分支并且做修改的内容称为b,当且仅当a与b相同的时候,这时会发生冲突\r(因为这样在工作区的物理映射都一致了,ps因为都是由工作区提交到缓存区的嘛)\r这个时候我们需要手动解决冲突问题,只需要在把工作区的内容重新修改(这里是已经合并之后)当然不能和b一致有一点点区别即可\r然后重新提交就好\r分支管理策略 #  通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。\r如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。\r 新创建一个分支dev (git checkout -b dev)   (git add gitS.md) (git commit -m \u0026lsquo;add merge\u0026rsquo;) 在切换为主分支 (git checkout master)   合并分支 以前的方式(git merge dev),这种方式上面说了会丢失信息,因此不采用此种方式(git merge \u0026ndash;no-ff -m \u0026lsquo;merge with no-ff\u0026rsquo; dev)这样就留下了合并信息   (git log \u0026ndash;graph \u0026ndash;pretty=oneline \u0026ndash;abbrev-commit)合并信息如下:  * c41b6a7 merge with no-ff\r|\\ | * d93a2e5 add merge\r|/ * 8e4aa4c conflict fixed\r分支策略\r在实际开发中，我们应该按照几个基本原则进行分支管理：\r首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；\r那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，\rBug分支 #  软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，\r所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。\r当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交\r并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？\r幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作\r git stash (暂时保存未提交的状态) (git checkout -b issue-101) 说明:却换到此版本之后实际工作区的内容并没有你还没有提交的内容,因此你做出修改  承接上面,关于是否有冲突问题,冲突的原因是你在主分支(master)开发的同时又去修改了项目内容并且和修复bug的分支所做出的修改有相同的地方\r,这时就会产生冲突,在你把bug分支与主分支合并之后并且恰好产生冲突git是会提示的　git会标识出来 这个时侯bug修改的内容已经被添加到了主分支\r因此主分支中关于冲突的部分被git标识了,这个时候我们自己手动修改即可(重复的删除即可,然后在重新提交,检查无误之后删除bug分支)\r  修复完成之后提交 (git add gitS.md) (git commit -m \u0026lsquo;fix bug 101\u0026rsquo;)\n  切换到master分支 (git checkout master)\n  与bug分支合并(git merge \u0026ndash;no-ff -m \u0026ldquo;merged bug fix 101\u0026rdquo; issue-101) 删除issue-101 (git branch -d issue-101)\n  (检查是否有冲突,一般不会有)\n  回到工作的分支上去写代码,这时需要恢复 (git stash pop)||恢复的同时把stash内容也删了\n  注意:可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令git stash apply stash@{0}或者git stash pop stash@{0}\n  (检查是否有冲突 我自己检查是有冲突的, git给我把恢复的那行(原来的)给标识出来了,然后就删除多余的并且也把标识符也删除然后重新提交即可)\n  强行删除某个分支 (假如某个项目中的某个功能不需要了,并且这个功能还没有提交,那么需要强行删除这个分支)(git branch -D feature-xx)(只需把d改为大写即可) #  多人协作 #    要查看远程库的信息(git remote) origin ,远程仓库的默认名称是origin\n  查看详细信息(git remote -v)\n  origin\tgit@github.com:noatnu/docZCH.git (fetch)\rorigin\tgit@github.com:noatnu/docZCH.git (push)\rpsuh 推送地址,fetch抓取地址(当且仅当你有推送权限才会看到push地址)\r推送分支 #   推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上   假如推送本地的主分支 (git push origin master),假如不是主分支,例如要推送的分支是dev,那么 (git push origin dev)  抓取分支 #   多人协作时，大家都会往master和dev分支上推送各自的修改 A小伙伴 git clone git@github.com:noatnu/jkblue.git A小伙伴从远程库clone时，默认情况下，A小伙伴只能看到本地的master分支 现在，A小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支 (git checkout -b dev origin/dev) 相当于把远程仓库与新创建并且已经切换到dev的分支相关联起来 (git checkout -b dev)因为此命令表示创建并且切换,后面origin/dev表示关联起来  标签 #   在Git中打标签非常简单，首先，切换到需要打标签的分支上 (git checkout dev) 打标签 (git tag v1.1) 查看标签 git tag 还可以对具体的版本打标签,比如某某版本号是123456 (git tag v1.2 123456) 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字 (git tag -a v1.2 -m \u0026lsquo;打标签\u0026rsquo; 123456)  提交并推送 #  首先进入需要提交的那个项目\r将此项目下所有的文件添加到git版本管理系统下,假如你需要其它操作添加，直接正则表达式过滤添加\rgit add ./* 提交到 git 本地仓库\rgit commit -m '2020-01-20 下午推送一次'\r推送\rgit push -u origin master\r如果报错请检查一下推送的分支是否正确\rgit branch\r会这样显示\r----\r* dev\rmarster\r---\r表示当前分值在dev分支\r改为 git push -u origin dev\r看到推送的数据,以及没有出现error等就表示成功\r你可以git status查看下\r直接拉取并合并最新代码 #  $ git pull origin master // 拉取远端origin/master分支并合并到当前分支\r$ git pull origin dev // 拉取远端origin/dev分支并合并到当前分支\r$ git push origin master // 将当前分支提交到远端origin/master分支\rpush到GitHub的文件要求小于100M\r"});index.add({'id':21,'href':'/life/docs/operating_system/linux/gitub_config/','title':"git配置",'section':"linux学习与使用 ",'content':"zhou@zhou-Lenovo-Z480:~$ git version\rgit version 2.7.4\rzhou@zhou-Lenovo-Z480:~$ ssh -T git@github.com\rWarning: Permanently added the RSA host key for IP address '192.30.255.112' to the list of known hosts.\rPermission denied (publickey).\rzhou@zhou-Lenovo-Z480:~$ git config --global user.name \u0026quot;zhouchenhua\u0026quot;\rzhou@zhou-Lenovo-Z480:~$ git config --global user.email \u0026quot;noatnu@163.com\u0026quot;\rzhou@zhou-Lenovo-Z480:~$ git config --list\ruser.name=zhouchenhua\ruser.email=noatnu@163.com\rzhou@zhou-Lenovo-Z480:~$ ssh-keygen -C ‘noatnu@163.com’ -t rsa\rGenerating public/private rsa key pair.\rEnter file in which to save the key (/home/zhou/.ssh/id_rsa): america347191\rEnter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in america347191.\rYour public key has been saved in america347191.pub.\rThe key fingerprint is:\rSHA256:7WlMe5QL3eMrdG6b7BB/z66zSpwIOBRM0GTD4hK6BW4 ‘noatnu@163.com’\rThe key's randomart image is:\r+---[RSA 2048]----+\r| .B* |\r|. . ..+o |\r|.o o .. |\r|.Eo .. . . . o |\r|.o . o S + = o |\r|. . = B.*.. |\r| B.Boo .|\r| . o.o+=.|\r| .=O*+|\r+----[SHA256]-----+\rroot@zhou-Lenovo-Z480:/home/zhou# cd ~/.ssh\rroot@zhou-Lenovo-Z480:~/.ssh# ls -a\r. .. id_rsa id_rsa.pub\rroot@zhou-Lenovo-Z480:~/.ssh# gedit id_rsa.pub "});index.add({'id':22,'href':'/life/docs/operating_system/linux/host%E6%98%A0%E5%B0%84/','title':"host映射",'section':"linux学习与使用 ",'content':"sudo vi hosts\n127.0.0.1\tlocalhost 127.0.1.1\tzhou-Lenovo-Z480\nThe following lines are desirable for IPv6 capable hosts #  ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters\n#pmcc dev 127.0.0.1 dev.pmcc.com\n"});index.add({'id':23,'href':'/life/docs/operating_system/linux/linux%E4%B8%8B%E8%AE%BE%E7%BD%AE%E5%92%8C%E6%9F%A5%E7%9C%8B%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/','title':"Linux下设置和查看环境变量",'section':"linux学习与使用 ",'content':"Linux的变量种类 按变量的生存周期来划分，Linux变量可分为两类： 1 永久的：需要修改配置文件，变量永久生效。 2 临时的：使用export命令声明即可，变量在关闭shell时失效。\n设置变量的三种方法 1 在/etc/profile文件中添加变量【对所有用户生效(永久的)】 用VI在文件/etc/profile文件中增加变量，该变量将会对Linux下所有用户有效，并且是“永久的”。 例如：编辑/etc/profile文件，添加CLASSPATH变量\nvi /etc/profile #  export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib\n注：修改文件后要想马上生效还要运行# source /etc/profile不然只能在下次重进此用户时生效。\n2 在用户目录下的.bash_profile文件中增加变量【对单一用户生效(永久的)】 用VI在用户目录下的.bash_profile文件中增加变量，改变量仅会对当前用户有效，并且是“永久的”。 例如：编辑guok用户目录(/home/guok)下的.bash_profile $ vi /home/guok/.bash.profile 添加如下内容： export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib 注：修改文件后要想马上生效还要运行$ source /home/guok/.bash_profile不然只能在下次重进此用户时生效。\n3 直接运行export命令定义变量【只对当前shell(BASH)有效(临时的)】 在shell的命令行下直接使用[export 变量名=变量值] 定义变量，\n该变量只在当前的shell(BASH)或其子shell(BASH)下是有效的，\nshell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。\n环境变量的查看 1 使用echo命令查看单个环境变量。例如： echo $PATH 2 使用env查看所有环境变量。例如： env 3 使用set查看所有本地定义的环境变量。\n使用unset删除指定的环境变量 set可以设置某个环境变量的值。清除环境变量的值用unset命令。如果未指定值，则该变量值将被设为NULL。示例如下： $ export TEST=\u0026ldquo;Test\u0026hellip;\u0026rdquo; #增加一个环境变量TEST $ env|grep TEST #此命令有输入，证明环境变量TEST已经存在了 TEST=Test\u0026hellip; unset TEST #删除环境变量TEST $ env|grep TEST #此命令没有输出，证明环境变量TEST已经删除\n常用的环境变量 PATH 决定了shell将到哪些目录中寻找命令或程序 HOME 当前用户主目录 HISTSIZE　历史记录数 LOGNAME 当前用户的登录名 HOSTNAME　指主机的名称 SHELL 当前用户Shell类型 LANGUGE 语言相关的环境变量，多语言可以修改此环境变量 MAIL　当前用户的邮件存放目录 PS1　基本提示符，对于root用户是#，对于普通用户是$\n"});index.add({'id':24,'href':'/life/docs/operating_system/linux/linux%E5%91%BD%E4%BB%A4/','title':"linux命令",'section':"linux学习与使用 ",'content':"linux命令 #  文件管理 #  文件基本操作 #    less命令 (Q退出less命令)([pagedown]： 向下翻动一页)([pageup]： 向上翻动一页) less ss.md\n  cat命令 (cat -n ss.md \u0026gt; sdfsd.txt)把 ss.md 的文档内容加上行号后输入 sdfsd.txt 这个文档里, 这要注意假如sdfsd.txt先有文档会被清空,另外(cat ss.md)可以把消息打印到输出流中,cat 软盘功能暂时不予以考虑\n  ls命令 (ls -a)显示所有文件及目录包括隐藏文件,相当于la命令,ll显示具体信息\n  touch命令 主要用作创建文件如touch ss.md,(touch -m miss,touch -a miss)可以改变文件的读取时间,另外touch miss也可以改变文件的读取时间, 当且仅当miss不存在的时候会创建miss空文件\n  mkdir命令 主要用作创建文件目录;(mkdir dd)创建一个dd目录,(mkdir -p dd/ffg)在当前目录下建立一个dd目录并且在dd下创建一个ffg目录,假如dd不存在会自动创建的\n  mv命令 (mv missA miss.txt)把missA修改为miss.txt (mv sskg /home/zhou/fontconfig/dgsd/sdfg)把sskg移到sdfg目录 (mv ss.md ~)\n  file命令 (file -c ss.md)详细显示指令执行过程(file -v ss.md)显示版本信息 (tar zcvf ss.tar ss.md,file -z ss.tar)尝试去解读压缩文件的内容\n  find命令 (find . -type f)将目前目录其其下子目录中所有一般文件列出(find . -ctime -20)将目前目录及其子目录下所有最近 20 天内更新过的文件列出 (find /home/zhou/fontconfig -name \u0026lsquo;**.md\u0026rsquo;)任意的以md结尾的文件,-name改为-iname会忽略大小写(find /home/zhou/fontconfig -size 0)所有文件长度为0的普通文件\n  split命令 ( split -2 sdfsd.txt) 每隔２行分割成一个文件\u0026ndash;\u0026gt; 分割后:xaa xab xac xad xae xaf xag\n  pwd命令 (pwd)pwd命令用于显示工作目录\n  rm命令 删除操作 (rm xaa)删除单一文件xaa文本文件,这里也是可以用正则的如rm x** ,(rm -r dgsd)递归删除文件目录dgsd下的所有文件包括其本身; (rm -rf baba)加了一个f此命令表示即使原档案属性设为唯读，亦直接删除，无需逐一确认\n  cp命令 复制或者说是拷贝命令 (cp ss.md s1)注意是在同级目录下 (cp /home/zhou/fontconfig/s1/ss.md ~),将ss.md复制到主home下,这的~可以随便换为其它目录 (cp -a s1 /home/zhou/fontconfig/s2,cp -a s1 s2)当cp的是目录时要加上-a参数,当然如果加上-p就更好了,因为-p表示把file拥有的权限也一起复制 如:(cp -ap s1 /home/zhou/fontconfig/s2),(cp -ap ./* /home/zhou/fontconfig/s3)在某个目录把所有内容都复制到s3下\n  chmod 权限命令 Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。\n  u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。 r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行\n  (chmod ugo+r miss.txt)将文件miss.txt 设为所有人皆可读取;(chmod u+x ex1.py)将 ex1.py 设定为只有该文件拥有者可以执行;(chmod 777 file)chmod也可以用数字来表示权限如\n  文本操作 #   假如是ubuntu则可以直接使用gedit (sudo apt-get install gedit) vi命令 切换模式(i：光标处开始插入,l：光标所在行首开始插入,a：光标所在行尾开始插入,o：光标下插入新行) 进入编辑模式,当编辑完成时,在按Esc按键退出编辑模式,保存并退出：wq, 不保存退出： q！  备份与压缩 #   zip (zip -r cc.zip s*)-r递归处理，将指定目录下的所有文件和子目录一并处理 (zip -rP 123456 miss.zip miss.txt)-P加密压缩密码123456 解压 unzip miss.zip zip文件乱码问题 unzip -O cp936 xxx.zip tar (tar zcvf ss.tar.gz miss.txt)压缩 (tar zxvf ss.tar.gz)解压 rar (rar x xxx.rar)解压  系统操作 #   (shutdown -h now)立即关机 (shutdown +5 \u0026ldquo;system 5mine\u0026rdquo;)指定5分钟后关机 (export -p)列出所有的环境变量 uname -sr 内核版本查看 ubuntu (root密码修改 sudo passwd 输入两次就是root密码)  "});index.add({'id':25,'href':'/life/docs/operating_system/linux/nginx/','title':"nginx学习",'section':"linux学习与使用 ",'content':"nginx学习 #  基础操作 #   start ./sbin/nginx stop ./sbin/nginx -s stop quite ./sbin/nginx -s quit   启动成功标志\n Welcome to nginx!\r 默认监听的端口是80 也就是说访问此端口就可以得到启动成功的标识符号\n  简单的负载均衡配置    http 模块中配置  #配置开始 author zhou\rupstream myproject{\rserver 127.0.0.1:8000 weight=3;\rserver 127.0.0.1:8080 weight=10;\rserver 127.0.0.1:8090;\r}\r#配置结束 author zhou\r location模块配置  proxy_pass http://myproject;\r注意:这的myproject要和上面的name一致\r测试结果 (这的测试用到了session的唯一性)\n http://localhost/nginx_test/ sessionId=8D9C4ACEE65EB24301B1C0D9E4CF3A6E\rhttp://localhost:8080/nginx_test/ sessionId=8D9C4ACEE65EB24301B1C0D9E4CF3A6E\rhttp://localhost:8090/nginx_test/ sessionId=7539B2C4AFD433ECEFAC8F2B2EBCC411\r 由于配置了权重 因此大部分是8080端口\n参数解释 #    1）down\n表示单前的server暂时不参与负载\n  2）Weight\n默认为1.weight越大，负载的权重就越大。\n  3）max_fails\n允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误\n  4）fail_timeout\nmax_fails 次失败后，暂停的时间。\n  5）Backup\n其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。\n  service nginx start\rservice nginx stop\rnginx\r"});index.add({'id':26,'href':'/life/docs/operating_system/linux/notepad++%E5%AE%89%E8%A3%85/','title':"Notepad++ 学习与使用",'section':"linux学习与使用 ",'content':"Notepad++是一套非常有特色的自由软件的纯文字编辑器(许可证:GPL)。有完整的中文化接口及支持多国语言编写的功能(UTF8 技术)。 它的功能比 Windows 中的 Notepad(记事本)强大，除了可以用来制作一般的纯文字说明文件，也十分适合当作编写电脑程序的编辑器。 Notepad++ 不仅有语法高亮度显示，也有语法折叠功能，并且支持宏以及扩充基本功能的外挂模组。但是可惜的是Notepad++只能在Windows平台下使用。 工作中必须使用Windows时，Notepad++是众多程序员最喜爱的文本编辑器，在Ubuntu下是否能够使用到相同的软件呢？Notepadqq就是这样一款与Notepad++非常接近的编辑器，拥有几乎相同的功能。 如果您是一个Notepad++粉丝，我们推荐您尝试下Notepadqq。\n对于Ubuntu发行版本可以通过PPA安装，命令如下： sudo add-apt-repository ppa:notepadqq-team/notepadqq sudo apt-get update sudo apt-get install notepadqq 类似的，卸载命令如下：\nsudo apt-get remove notepadqq sudo add-apt-repository \u0026ndash;remove ppa:notepadqq-team/notepadqq\n"});index.add({'id':27,'href':'/life/docs/javadir/middleware/redis/','title':"Redis 学习与使用",'section':"中间件 ",'content':"一.Redis介绍 #  1.1引言 #   1:由于用户量大，请求了随之增大，数据压力过大。 2:多台服务器之间数据不同步 3:多台服务器之间的锁已经不存在互斥性了\n #  1.2 NOSQL #   redis就是nosql\n  非关系数据库 \u0026gt; not only sql\n 1:key-value redis 2:文档型 solr,Mongodb,ElasticSearch 3:面向列 Hbase(一般大数据) 4:图形化 Neo4j\n  1.3 redis介绍 #   Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 Redis是一款基于Key-Value的NOSQL，而且Redis是基于内存存储数据的,Redis还提供了多种持久化机制，Redis还提供了主从、哨兵以及集群的搭建方式，可以更方便的横向扩展以及垂直扩展\n  操作都是原子的\n 所有 Redis 的操作都是原子的，从而确保当两个客户同时访问 Redis 服务器时，得到的是更新后的值（最新值）。在需要高并发的场合可以考虑使用 Redis 的事务，处理一些需要锁的业务。\n  二.Redis安装 #  redis 注册服务 #  C:\\Users\\noatn\u0026gt;e:\rE:\\\u0026gt;cd E:\\CS\\Redis-x64-3.2.100\rE:\\CS\\Redis-x64-3.2.100\u0026gt;redis-server.exe service-install redis.windows.conf\r[18580] 27 Apr 09:09:52.679 # Fatal error, can't open config file 'service-install'\rE:\\CS\\Redis-x64-3.2.100\u0026gt;redis-server.exe --service-install redis.windows.conf\r[6244] 27 Apr 09:10:07.336 # Granting read/write access to 'NT AUTHORITY\\NetworkService' on: \u0026quot;E:\\CS\\Redis-x64-3.2.100\u0026quot; \u0026quot;E:\\CS\\Redis-x64-3.2.100\\\u0026quot;\r[6244] 27 Apr 09:10:07.337 # Redis successfully installed as a service.\rE:\\CS\\Redis-x64-3.2.100\u0026gt;\r三.Redis命令 #   keys * 获取所有的key\rclear 清除屏幕\rquit ,exit 退出\rset name blake 设置值\rsetex ip 5 192.1.1.168 设置值并且设置过期时长\rget name 取出值\rdel name 删除key所对应的值\rexists key 判断是否存在key\rmset key1,key2...设置多个值\rmget key1,key2...取出多个值\rappend age 1 追加key的value\rstrlen key 获取某个key的value的长度\rselect index 选择数据库 (注意redis一共16个数据库 并且从0开始)\rmove key db或者 move key index (redis一共16个数据库 move age 7) 将某个key移动到某个数据库中\rflushdb 清除当前数据库\rflushall 清除16个数据库\rtype key 获取数据类型 (type name == \u0026gt; string)\r3.1 redis存储数据结构 #   字符串列表 key-string 无序不重复的字符串集合 key-set 有序不重复的字符串集合 key-list 键、值都为字符串的哈希表 key-hash 有序集合 key-zset  3.2存储结构用处 #   key-string :最常用的，一般用于存储一个值 key-hash:存储一个对象数据的 key-list:使用list结构实现栈和队列结构 key-set: 交集、差集、并集操作 key-zset : 排行榜,积分存储  "});index.add({'id':28,'href':'/life/docs/operating_system/linux/ubuntu16.04%E4%BF%AE%E6%94%B9hosts/','title':"Ubuntu 16.04修改hosts",'section':"linux学习与使用 ",'content':"IntelliJ IDE运行Tomcat报错解决办法的相关资料,出现“Unable to ping server at localhost:1099”错误解决方法，需要的朋友可以参考下\nsudo gedit /etc/hosts\n"});index.add({'id':29,'href':'/life/docs/operating_system/linux/ubuntu%E5%AE%89%E8%A3%85chmsee/','title':"ubuntu安装chmsee",'section':"linux学习与使用 ",'content':"垃圾的ubuntu 14.04 又一次去掉一些特别好用的软件, 官方给的解释是怕破坏他们系统. 只想说一句 我去年买了个本.\n14.04 之前的版本,如13.10, 12.04 继续能够使用 sudo apt-get install chmsee 来安装.\n14.04 需要下载安装包来安装:\nsudo apt-get install libc6 libchm1 libgcrypt11 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk2.0-0 libpango1.0-0 libwebkitgtk-1.0-0 libxml2 安装依赖包\n(64位) sudo dpkg -i chmsee_1.3.0-2ubuntu2_amd64.deb 安装软件包,下载地址: http://kr.archive.ubuntu.com/ubuntu/pool/universe/c/chmsee/chmsee_1.3.0-2ubuntu2_amd64.deb Ubuntu的官方软件库放心下载.\n(32位) sudo dpkg -i chmsee_1.3.0-2ubuntu2_i386.deb 安装软件包,下载地址: http://kr.archive.ubuntu.com/ubuntu/pool/universe/c/chmsee/chmsee_1.3.0-2ubuntu2_i386.deb Ubuntu的官方软件库放心下载.\n"});index.add({'id':30,'href':'/life/docs/operating_system/linux/ubuntu%E6%B8%85%E7%90%86%E7%B3%BB%E7%BB%9F%E5%9E%83%E5%9C%BE/','title':"Ubuntu清理系统垃圾",'section':"linux学习与使用 ",'content':"1，非常有用的清理命令： sudo apt-get autoclean \u0026ndash;清理旧版本的软件缓存 www.2cto.com\nsudo apt-get clean\u0026ndash;清理所有软件缓存\nsudo apt-get autoremove\u0026ndash;删除系统不再使用的孤立软件\n这三个命令主要清理升级缓存以及无用包的。\n2，清理opera firefox的缓存文件： ls ~/.opera/cache4 ls ~/.mozilla/firefox/*.default/Cache\n3，清理Linux下孤立的包： 图形界面下我们可以用：gtkorphan sudo apt-get install gtkorphan -y 终端命令下我们可以用：deborphan sudo apt-get install deborphan -y\n4，卸载：tracker 这个东西一般我只要安装Ubuntu就会第一删掉tracker 他不仅会产生大量的cache文件而且还会影响开机速度。所以在新得利里面删掉就行。 www.2cto.com\n5，删除多余的内核：一定不要删错哦，切记！！ 打开终端敲命令：dpkg \u0026ndash;get-selections|grep linux 有image的就是内核文件 删除老的内核文件： sudo apt-get remove 内核文件名（例如：linux-image-2.6.27-2-generic） 内核删除，释放空间了，应该能释放130－140M空间。\n最后不要忘了看看当前内核：uname -a 附录： 包管理的临时文件目录: 包在 /var/cache/apt/archives 没有下载完的在 /var/cache/apt/archives/partial\n"});index.add({'id':31,'href':'/life/docs/operating_system/linux/ubuntu%E8%BD%AF%E4%BB%B6%E5%8D%B8%E8%BD%BD/','title':"ubuntu软件卸载",'section':"linux学习与使用 ",'content':"ubuntu软件卸载\n安装Synaptic\nsudo apt-get install synaptic\n"});index.add({'id':32,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/iqcs36rgjy/fdhcmhstpw/','title':"什么叫魅力",'section':"人际剖析",'content':"什么叫魅力 #  "});index.add({'id':33,'href':'/life/docs/javadir/thread/glossary/','title':"名词解释",'section':"多线程与并发 ",'content':"  FIFO队列 (先进先出队列)\n  jni 远程调用 编译器代码\n  LongAdder\n  "});index.add({'id':34,'href':'/life/docs/databases/postgresql/postgresql_create%E7%94%A8%E6%88%B7%E4%B8%8E%E6%9D%83%E9%99%90/','title':"权限",'section':"postgresql学习笔记",'content':"权限 #   系统权限 role和user都是用户,只不过role属性不能登录当然也可以指定 超级权限 不做权限检查(实际中是很危险的)\n Pg权限分为两部分，一部分是“系统权限”或者数据库用户的属性，可以授予role或user（两者区别在于login权限）；\r一部分为数据库对象上的操作权限。对超级用户不做权限检查，其它走acl。\r对于数据库对象，开始只有所有者和超级用户可以做任何操作，其它走acl。\r在pg里，对acl模型做了简化，组和角色都是role，用户和角色的区别是角色没有login权限。\r超级权限 #   创建超级用户(create user alice with superuser password \u0026lsquo;123456\u0026rsquo;;)系统不会做权限操作校验,仅仅是不能够创建用户与删除用户  系统权限 #    (create role blake password \u0026lsquo;123456\u0026rsquo;;)(create user bob password \u0026lsquo;123456\u0026rsquo;;)(create database testdb;)\n  (grant all on database testdb to bob;grant all on database testdb to blake;)\n  测试如下 用户bob可以登录而blake不能登录直接抛出了FATL:role blake is not \u0026lsquo;permitted to log in\u0026rsquo;\n  ( drop database testdb;drop role blake;drop user bob;)\n  (create user bob password \u0026lsquo;123456\u0026rsquo;;)(alter user bob set default_transaction_read_only=on;grant all on database testdb to bob;grant select on all tables in schema public to bob; )\n  (revoke all on database testdb from bob;revoke select on all tables in schema public from bob;)删除前撤销(drop user bob)\n  (grant DELETE,UPDATE,SELECT,INSERT on all tables in schema public to bob;)\n  查询 #   查询系统中用户的权限(SELECT * FROM pg_roles;) 显示用户和用户的用户属性(\\du) 查看全部可设置的管理权限(\\h)  删除 #   (drop user bob) (drop role bob)要注意在删除前必须把权限先删除,还有一种笨办法就是把数据库先备份然后在删除这时就可以删除用户了  系统登录 #   (sudo su postgres -c psql template1)(psql -U alice -d testdb -h localhost -W)参数含义: -U指定用户 -d要连接的数据库 -h要连接的主机 -W提示输入密码。  修改系统密码 #   (sudo passwd -d postgres)  sudo su postgres -c psql template1\r会出现 postgres=#\r输入postgres=# \\password\r输入２次密码\r然后输入(退出)\rpostgres=# \\q\r"});index.add({'id':35,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/talk_theme/girl/ytaerczr7w/','title':"追女生",'section':"聊天话题",'content':"男生圈子太小如何才能认识更多的女生 #  剧本杀 #   1 剧本杀圈子女多男少 2 剧本杀相处时间有好几个小时 3 剧本杀中你们会有很多东西可以聊 4 这是一位同玩剧本杀的漂亮小姐姐告诉我的答案 5 我是玩剧本杀找到我老婆的 PS 剧本杀出来前也有跑团和桌游（狼人杀）  陌生搭讪 #    认识女生最有效率的方式还是搭讪。但是很多男生一辈子都不敢搭讪女生，脸皮太薄注定会是单身狗。在路上看到喜欢的女生，也只敢远远的看一眼，连走近都不敢。\n  其实在搭讪之前，你可以给自己一个暗示，搭讪成功了就是一段美妙的回忆，失败了也不会就是几秒钟的尴尬。你大胆的走上去就说：“美女，你好。我今天和朋友在这里玩，远远的看到你感觉好有气质，我们能加个微信认识一下吗？”只要你的形象得体，举止大方，70%的女生都不会拒绝你。\n  找对象其实很简单，把自己打扮帅气一点，然后出去逛街，看到喜欢的类型女生就去要微信，别胆怯，一定要大胆上去加她好友\n  首先反观自省，反思自己有没有问题，有问题修正自己，让自己变得更优秀一点，然后试着去找一找，找到合适的，或者喜欢的可以去处一处，多试几次慢慢就会找到合适的对象\n  哪里女生多就去哪里！多参加各种活动！同时是你自己也要内外兼修！\n  1、平价女装商城。\n  2、网红打卡咖啡馆。\n  3、学校附近的商业街。\n  加入一个有趣的俱乐部\n  多参加聚会\n  培养兴趣爱好\n  出去运动和购物\n  图书馆吧\n  追女生必须注意细节 #  追女生要注意仪式感 #    和女生在交往中要时刻注意情绪 时刻注意她是否累了 是否饿了 是否渴了 是否情绪不对 语气一定要平和 总之时刻注意\n  第一次见面 假如帮女孩子买东西 不要说我帮你付钱 而要说 我来我来\n  必须经常打整 自己 和收拾自己的屋子\n  女人都是情绪动物 #  "});index.add({'id':36,'href':'/life/docs/operating_system/one_chapter/1_1_/','title':"操作系统的概念、功能",'section':"第一章 操作系统概述 ",'content':"一:大家熟悉的操作系统 #  二:知识总览 #   1:操作系统的概念（定义）   操作系统（Operating System， OS）是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调 度计算机的工作和资源的分配；以提供给用户和其他软件方便的接口和环境；它是计算机系统中最基本 的系统软件。\n   直观的例子：打开 Windows 操作系统的“任务管理器”（快捷键：Ctrl+Alt+Del）\n  ①操作系统是系统资源的管理者\n  ②向上层提供方便易用的服务\n  ③是最接近硬件的一层软件\n  一台电脑的诞生~\rStep 1：厂家组装一台裸机\rStep 2：出售前安装操作系统\rStep 3：用户安装应用程序（eg：QQ）\rStep 4：使用 QQ 聊天\r 2:操作系统的功能和目标——作为系统资源的管理者   操作系统的功能和目标——向上层提供方便易用的服务  "});index.add({'id':37,'href':'/life/docs/computer_network/physical_layer/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/','title':"数据通信基础知识 ",'section':"物理层 ",'content':"典型的数据通信模型 #  数据通信相关术语 #   通信的目的是传送消息(消息:语音、文字、图像、视频等)。\n   信号:数据的电气/电磁的表现，是数据在传输过程中的存在形式。\n  数字信号/离散信号:代表消息的参数的取值是离散的\n   模拟信号/连续信号:代表消息的参数的取值是连续的   信源:产生和发送数据的源头。 信宿:接收数据的终点。 信道:信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。   信道  按传输信号分 模拟信道(传送模拟信号) 数字信道(传送数字信号) 按传输介质分 无线信道 有线信道    设计数据通信系统要考虑的三个问题 #  采用单工通信(只有一个方向)/半双工通信(回合制)/全双工通信(可以同时如擂台上拳击手打击) * #  采用串行通信/并行通信 #  采用同步通信/异步通信 #  串行传输\u0026amp;并行传输 #  同步传输\u0026amp;异步传输 #  "});index.add({'id':38,'href':'/life/docs/computer_network/physical_layer/%E7%89%A9%E7%90%86%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/','title':"物理层基本概念 ",'section':"物理层 ",'content':"物理层接口特性 #   物理层解决如何在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体。 物理层主要任务：确定与传输媒体接口有关的一些特性 ==\u0026gt; 定义标准\n  1.机械特性 定义物理连接的特性，规定物理连接时所采用的规格、接口形状、引线数目、引脚数量、排列情况  2.电器特性 规定传输二进制位时，线路上信号的电压范围、阻抗匹配、传输速率和距离限制。 某网络在物理层规定，信号的电平用+10V~+15V表示二进制0，用-10V~-15V表示二进制1，电线长度限于15m以内 3.功能特性 指明某条线上出现的某一电平表示何种意义，接口部件的信号线的用途。 描述一个物理层接口引脚处于高电平时的含义 4.过程特性 定义各条物理线路的工作规程和时序关系。  "});index.add({'id':39,'href':'/life/docs/computer_network/network_architecture/1.1.1%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E5%BF%B5-%E7%BB%84%E6%88%90-%E5%8A%9F%E8%83%BD-%E5%88%86%E7%B1%BB/','title':"计算机概念 组成 功能 分类 * ",'section':"网络体系结构",'content':"计算机网络 #  概念 #   计算机网络是互连的、自治的计算机集合。  组成 #   组成部分:硬件、软件、协议 1 工作方式:边缘部分、核心部分 2 功能组成:通信子网、资源子网  分类 #   1 分布范围:广域网、城域网、局域网、个人区域网 2 使用者: 公用网、专用网 3 交换技术:电路交换、报文交换、分组交换 4 拓扑结构:总线型、星型、环型、网状型 5 传输技术:广播式、点对点  功能 #   1:数据通信 2:资源共享 3:分布式处理、提高可靠性、负载均衡  "});index.add({'id':40,'href':'/life/docs/operating_system/two_chapter/2_1_1/','title':"进程的概念、组成、特征",'section':"第二章 进程管理 ",'content':""});index.add({'id':41,'href':'/life/docs/javadir/middleware/nginx/','title':"nginx 学习与使用",'section':"中间件 ",'content':"demo #  "});index.add({'id':42,'href':'/life/docs/javadir/basedir/dw7668daxw/','title':"java类型转换,构造,重要语法",'section':"Java基础知识 ",'content':"基本类型 #   八个基本类型:     基本类型 位数 字节 默认值 取值范围     byte 8 1 0 -128 ~ 127   short 16 2 0 -32768 ~ 32767   int 32 4 0 -2147483648 ~ 2147483647   long 64 8 0l -9223372036854775808 ~ 9223372036854775807   char 16 2 \u0026lsquo;u0000\u0026rsquo; 0 ~ 65535   float 32 4 0f 1.4E-45 ~ 3.4028235E38   double 64 8 0d 4.9E-324 ~ 1.7976931348623157E308   boolean 1  false true、false     基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成  Integer x = 2; // 装箱 int y = x; // 拆箱  缓存池  new Integer(123) 与 Integer.valueOf(123) 的区别在于:\n new Integer(123) 每次都会新建一个对象 Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。  Integer x = new Integer(123); Integer y = new Integer(123); System.out.println(x == y); // false Integer z = Integer.valueOf(123); Integer k = Integer.valueOf(123); System.out.println(z == k); // true valueOf() 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。\npublic static Integer valueOf(int i) { if (i \u0026gt;= IntegerCache.low \u0026amp;\u0026amp; i \u0026lt;= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i); } 在 Java 8 中，Integer 缓存池的大小默认为 -128~127。\nstatic final int low = -128; static final int high; static final Integer cache[]; static { // high value may be configured by property  int h = 127; String integerCacheHighPropValue = sun.misc.VM.getSavedProperty(\u0026#34;java.lang.Integer.IntegerCache.high\u0026#34;); if (integerCacheHighPropValue != null) { try { int i = parseInt(integerCacheHighPropValue); i = Math.max(i, 127); // Maximum array size is Integer.MAX_VALUE  h = Math.min(i, Integer.MAX_VALUE - (-low) -1); } catch( NumberFormatException nfe) { // If the property cannot be parsed into an int, ignore it.  } } high = h; cache = new Integer[(high - low) + 1]; int j = low; for(int k = 0; k \u0026lt; cache.length; k++) cache[k] = new Integer(j++); // range [-128, 127] must be interned (JLS7 5.1.7)  assert IntegerCache.high \u0026gt;= 127; } 编译器会在缓冲池范围内的基本类型自动装箱过程调用 valueOf() 方法，因此多个 Integer 实例使用自动装箱来创建并且值相同，那么就会引用相同的对象。\nInteger m = 123; Integer n = 123; System.out.println(m == n); // true 基本类型对应的缓冲池如下:\n boolean values true and false all byte values short values between -128 and 127 int values between -128 and 127 char in the range \\u0000 to \\u007F  在使用这些基本类型对应的包装类型时，就可以直接使用缓冲池中的对象。\n如果在缓冲池之外：\nInteger m = 323; Integer n = 323; System.out.println(m == n); // false 修饰符 #  final #   被修饰的元素其基本地址不能发生改变\n  1.数据  声明数据为常量，可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。\n对于基本类型，final 使数值不变； 对于引用类型，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。(引用类型都是对象 相当于对象的地址不能再发生改变)\nfinal int x = 1; // x = 2; // cannot assign value to final variable \u0026#39;x\u0026#39; final A y = new A(); y.a = 1;  2.方法  声明方法不能被子类重写。 private 方法隐式地被指定为 final，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。\n 3.类  声明类不允许被继承。\nstatic #   1.静态变量  静态变量: 又称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，可以直接通过类名来访问它；静态变量在内存中只存在一份。\n实例变量: 每创建一个实例就会产生一个实例变量，它与该实例同生共死。\npublic class A { private int x; // 实例变量  private static int y; // 静态变量  public static void main(String[] args) { // int x = A.x; // Non-static field \u0026#39;x\u0026#39; cannot be referenced from a static context  A a = new A(); int x = a.x; int y = A.y; } }  2.静态方法  静态方法在类加载的时候就存在了，它不依赖于任何实例。所以静态方法必须有实现，也就是说它不能是抽象方法(abstract)。\npublic abstract class A { public static void func1(){ } // public abstract static void func2(); // Illegal combination of modifiers: \u0026#39;abstract\u0026#39; and \u0026#39;static\u0026#39; } 只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字\npublic class A { private static int x; private int y; public static void func1(){ int a = x; // int b = y; // Non-static field \u0026#39;y\u0026#39; cannot be referenced from a static context  // int b = this.y; // \u0026#39;A.this\u0026#39; cannot be referenced from a static context  } } 接口 #  重要接口的妙处 #  "});index.add({'id':43,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/good_voice/','title':"如何说话好听",'section':"自信",'content':"case 1 #  那就说说大多数人都喜欢的温柔通透的声音怎么发吧\n第一你不要端着说话 像没有人自言自语一样放松的说话 声音像沉在腹部\n第二感觉是用声带靠前的位置在发声 找不到就说Mi这个音 熟悉了用这个声带感觉说所有字\n第三你发声时要感觉情绪上升 身体向外伸展 而身体内部是空的\n第四感觉你的声音打在眉心位置 出来 从腹部直接跳到眉心 声带和嘴被忽视 没有任何意识和力量\n第五说话时感觉字是竖起来的 不要咧嘴 要轻柔自然\n第六 学好普通话\u0026hellip;.方言大多数会阻碍唱歌音色很容易改变 发声位置结构改变音色就一定会变\n视频 建立自信 #  播音系师哥教你如何让“声音变得更加好听”，一学就会！一用就灵，不灵不要币\n表情管理｜变美干货｜纵向微笑vs横向微笑｜如何拥有上镜显瘦的微笑｜播音生\n下面的最靠谱 30天让你拥有好声音（完结）\n说话很累 #  ①憋气，气息不通当我们的气息不顺畅时，我们的传声就会收到阻碍，使得我们口腔里面的部位造成紧张，从而引发一些列的声音问题。\n②咬字器官紧张我们的咬字器官主要有唇、齿、舌、喉、牙等等\u0026hellip;，当我们在咬字的时候，如果出现唇部紧张或者说是舌根紧张等情况，会对我们的发声造成压力，使得我们的声音就会变得僵硬。\n③喉咙没打开，捏着嗓子说话。我们的声带在喉咙里面，如果我们的声带没有合适的工作空间，那么会大大影响声带的振动发声哦！\n④声音虚弱无力，声音漏气。当我们的声带漏气，我们的气息就会没办法高效利用起来，从而浪费掉，产生气息不够用等情况。\n"});index.add({'id':44,'href':'/life/docs/english_study/jkdy8dwywm/','title':"零基础如何开始着手学习英语",'section':"英语学习",'content':" 只要你坚持学 哪怕不能一次性通过考试 但是你的成绩一定会进步的\n  观点1  心态要做好准备，单词是学英语的基础，学一门语言是循序渐进的过程），见效慢，不要总想着一夜之间就能背下所有单词、一个月就能把英语说成母语。保持平常心。我说汉语这么多年，有时候还是会写错别字呀~\n1.这个视频只适合真英语零基础的朋友，向他们提供一个可执行的自学英语。（零基础：不认识音标、看不进语法书，单词量很少）\n2.学习的次序：先背单词，有一定单词量后（两三个月即可），再学语法（看语法书的同时，通过练习题或阅读文章巩固能力）。也有人边阅读边学单词，但在我不认识单词的时候，阅读效率很低；在有单词基础后，阅读效率更高。\n3.是否看网课：可以先看着试试，如果发觉自己无法理解老师的话，还是回归到最基础的单词，先积累单词才能更好地理解课程讲解。（我在背完单词，看了一点点语法书后，再在B站看了一些语法视频，感觉效果更好）\n4.零基础的学生：以12月的四级/六级考试为目标，设定150-200个/天的单词，坚持到考前，如果有收获就继续下去。\n5.不要因为“害怕自己学不好、背单词总是记不住”的焦虑影响自己学习，记住一个单词都是收获。\n6.遵循记忆的客观规律：遗忘是正常的，短时记忆的内容要通过反复编码才能存入长时记忆，所以坚持复习，不要轻易终止。（背单词难的不是“单词”，难的是坚持）\n单词软件：扇贝单词（墨墨、百词斩都还可以）\n语法书：《赖世雄经典语法》（我在16年买的，现在封面换了。这本书讲得很细，起点很低，但“缺点”也是太厚啦！）\n文章阅读软件：扇贝系列的软件都不错（我也没用过别的）\n方法没有好坏，每个人的认知风格都不同，没有优劣之分，适合自己的才是最好的。但学习有一个原则：任何方法，必须执行、坚持执行才可以见效。\n  观点3\n  新概念英语1 和新概念2 也是重复学习反复复习\n  观点2\n   着重点：从音标\u0026amp;单词开始； - 每天学习1~2小时； - 学习时常：1～2个月。  音标怎么练？  网上找音标视频or app； 熟悉音标，熟悉到看到一个陌生单词就能把它念出来。   词汇怎么练？  1.单独时间专门背单词；碎片化时间反复温习； 2.使用UP推荐的词根词缀去背单词 or 使用app背单词； 3.背单词时，最好边念边背，根据音节进行记忆，有辅助效果； 4.高频背单词(如一天复习个56次)，而不是长时间死磕在一个单词上； 5.生活中碰到不会的单词，记下来，拿回去背。身边软件改成英文版的。 6.推荐使用阅读记忆法。即可以巩固语法，也可巩固单词。        自己总结\n  不管什么方法都尽量去围绕 语音 单词 语法 这三个方面(前期)\n  大量的重复 一直坚持下去\n  不断的总结\n  第一步要么是强行被单词要么是把音标学得非常好 第二步要么是巩固单词要么巩固单词的基础上连带着巩固音标\n  "});index.add({'id':45,'href':'/life/docs/c-plus/','title':" c++",'section':"Docs",'content':"目录 #    基础语法\n  包管理/构建\n  "});index.add({'id':46,'href':'/life/docs/javadir/thread/tool/semaphore_exchanger/','title':"Semaphore和Exchanger",'section':"并发工具 ",'content':"Semaphore #  1、Semaphore 是什么 #   Semaphore 通常我们叫它信号量， 可以用来控制同时访问特定资源的线程数量，通过协调各个线程，以保证合理的使用资源\n  可以把它简单的理解成我们停车场入口立着的那个显示屏，每有一辆车进入停车场显示屏就会显示剩余车位减1，每有一辆车从停车场出去，显示屏上显示的剩余车辆就会加1，当显示屏上的剩余车位为0时，停车场入口的栏杆就不会再打开，车辆就无法进入停车场了，直到有一辆车从停车场出去为止\n 2、使用场景 #   通常用于那些资源有明确访问数量限制的场景，常用于限流\n  比如：数据库连接池，同时进行连接的线程有数量限制，连接不能超过一定的数量，当连接达到了限制数量后，后面的线程只能排队等前面的线程释放了数据库连接才能获得数据库连接。\n  比如：停车场场景，车位数量有限，同时只能容纳多少台车，车位满了之后只有等里面的车离开停车场外面的车才可以进入\n  20辆小轿车 3个车位 当车停入车位算抢占成功到释放出车位完成一个完整动作 锁定的位数 必然使用车位才合理 餐厅能够容纳16个人同时吃饭 但是吃饭的人总数有200个人 同意锁定的位数 也必然是16个餐位\n 3、Semaphore常用方法说明 #  acquire() 获取一个令牌，在获取到令牌、或者被其他线程调用中断之前线程一直处于阻塞状态。 ​ acquire(int permits) 从此信号量获取给定数目的令牌，在提供这些许可前一直将线程阻塞，或者线程已被中断。 acquireUninterruptibly() 获取一个令牌，在获取到令牌之前线程一直处于阻塞状态（忽略中断）。 tryAcquire() 尝试获得令牌，返回获取令牌成功或失败，不阻塞线程。 ​ tryAcquire(long timeout, TimeUnit unit) 尝试获得令牌，在超时时间内循环尝试获取，直到尝试获取成功或超时返回，不阻塞线程。 ​ release() 释放一个令牌，唤醒一个获取令牌不成功的阻塞线程。 ​release(int permits) 释放给定数目的令牌，将其返回到信号量。 hasQueuedThreads() 等待队列里是否还存在等待线程。 ​ getQueueLength() 获取等待队列里阻塞的线程数。 ​ drainPermits() 清空令牌把可用令牌数置为0，返回清空令牌的数量。 ​ availablePermits() 返回可用的令牌数量。 4、用semaphore 实现停车场提示牌功能 #   每个停车场入口都有一个提示牌，上面显示着停车场的剩余车位还有多少，当剩余车位为0时，不允许车辆进入停车场，直到停车场里面有车离开停车场，这时提示牌上会显示新的剩余车位数\n   业务场景 ：\n  1、停车场容纳总停车量10。\n  2、当一辆车进入停车场后，显示牌的剩余车位数响应的减1.\n  3、每有一辆车驶出停车场后，显示牌的剩余车位数响应的加1。\n  4、停车场剩余车位不足时，车辆只能在外面等待。\n  public class TestCar { ​ //停车场同时容纳的车辆10  private static Semaphore semaphore=new Semaphore(10); ​ public static void main(String[] args) { ​ //模拟100辆车进入停车场  for(int i=0;i\u0026lt;100;i++){ ​ Thread thread=new Thread(new Runnable() { public void run() { try { System.out.println(\u0026#34;====\u0026#34;+Thread.currentThread().getName()+\u0026#34;来到停车场\u0026#34;); if(semaphore.availablePermits()==0){ System.out.println(\u0026#34;车位不足，请耐心等待\u0026#34;); } semaphore.acquire();//获取令牌尝试进入停车场  System.out.println(Thread.currentThread().getName()+\u0026#34;成功进入停车场\u0026#34;); Thread.sleep(new Random().nextInt(10000));//模拟车辆在停车场停留的时间  System.out.println(Thread.currentThread().getName()+\u0026#34;驶出停车场\u0026#34;); semaphore.release();//释放令牌，腾出停车场车位  } catch (InterruptedException e) { e.printStackTrace(); } } },i+\u0026#34;号车\u0026#34;); ​ thread.start(); ​ } ​ } } ​ 5、Semaphore实现原理 #     Semaphore初始化    Semaphore semaphore=new Semaphore(2);   1、当调用new Semaphore(2) 方法时，默认会创建一个非公平的锁的同步阻塞队列。\n  2、把初始令牌数量赋值给同步队列的state状态，state的值就代表当前所剩余的令牌数量。\n  初始化完成后同步队列信息如下图：\n    获取令牌    semaphore.acquire();   1、当前线程会尝试去同步队列获取一个令牌，获取令牌的过程也就是使用原子的操作去修改同步队列的state ,获取一个令牌则修改为state=state-1。\n  2、 当计算出来的state\u0026lt;0，则代表令牌数量不足，此时会创建一个Node节点加入阻塞队列，挂起当前线程。\n  3、当计算出来的state\u0026gt;=0，则代表获取令牌成功。\n  源码：\n  /** * 获取1个令牌 */ public void acquire() throws InterruptedException { sync.acquireSharedInterruptibly(1); } /** * 共享模式下获取令牌，获取成功则返回，失败则加入阻塞队列，挂起线程 * @param arg * @throws InterruptedException */ public final void acquireSharedInterruptibly(int arg) throws InterruptedException { if (Thread.interrupted()) throw new InterruptedException(); //尝试获取令牌，arg为获取令牌个数，当可用令牌数减当前令牌数结果小于0,则创建一个节点加入阻塞队列，挂起当前线程。  if (tryAcquireShared(arg) \u0026lt; 0) doAcquireSharedInterruptibly(arg); } /** * 1、创建节点，加入阻塞队列， * 2、重双向链表的head，tail节点关系，清空无效节点 * 3、挂起当前节点线程 * @param arg * @throws InterruptedException */ private void doAcquireSharedInterruptibly(int arg) throws InterruptedException { //创建节点加入阻塞队列  final Node node = addWaiter(Node.SHARED); boolean failed = true; try { for (;;) { //获得当前节点pre节点  final Node p = node.predecessor(); if (p == head) { int r = tryAcquireShared(arg);//返回锁的state  if (r \u0026gt;= 0) { setHeadAndPropagate(node, r); p.next = null; // help GC  failed = false; return; } } //重组双向链表，清空无效节点，挂起当前线程  if (shouldParkAfterFailedAcquire(p, node) \u0026amp;\u0026amp; parkAndCheckInterrupt()) throw new InterruptedException(); } } finally { if (failed) cancelAcquire(node); } }  线程1、线程2、线程3、分别调用semaphore.acquire(),整个过程队列信息变化如下图：    释放令牌    semaphore.release();   当调用semaphore.release() 方法时\n  1、线程会尝试释放一个令牌，释放令牌的过程也就是把同步队列的state修改为state=state+1的过程\n  2、释放令牌成功之后，同时会唤醒同步队列中的一个线程。\n  3、被唤醒的节点会重新尝试去修改state=state-1 的操作，如果state\u0026gt;=0则获取令牌成功，否则重新进入阻塞队列，挂起线程。\n  源码：\n  /** * 释放令牌 */ public void release() { sync.releaseShared(1); } /** *释放共享锁，同时会唤醒同步队列中的一个线程。 * @param arg * @return */ public final boolean releaseShared(int arg) { //释放共享锁  if (tryReleaseShared(arg)) { //唤醒所有共享节点线程  doReleaseShared(); return true; } return false; } /** * 唤醒同步队列中的一个线程 */ private void doReleaseShared() { for (;;) { Node h = head; if (h != null \u0026amp;\u0026amp; h != tail) { int ws = h.waitStatus; if (ws == Node.SIGNAL) {//是否需要唤醒后继节点  if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))//修改状态为初始0  continue; unparkSuccessor(h);//唤醒h.nex节点线程  } else if (ws == 0 \u0026amp;\u0026amp; !compareAndSetWaitStatus(h, 0, Node.PROPAGATE)); } if (h == head) // loop if head changed  break; } }  继上面的图，当我们线程1调用semaphore.release(); 时候整个流程如下图  Exchanger #   类 Exchanger的功能可以使2个线程之间传输数据,它比生产者/消费者模式使用的wait/notify要更加方便\n 类定义 #  public class Exchanger\u0026lt;V\u0026gt; 类继承 #  java.lang.Object ↳ java.util.concurrent.Exchanger\u0026lt;V\u0026gt; 当一个线程调用exchange方法后将进入等待状态，直到另外一个线程调用exchange方法，双方完成数据交换后继续执行 #    exchange(v x)：阻塞当前线程，直到另外一个线程调用exchange方法或者当前线程被中断\n  exchange(v x, long timeout, timeunit unit)：阻塞当前线程，直到另外一个线程调用exchange方法或者当前线程被中断或者等待超时\n  举例\n  import java.util.concurrent.Exchanger; public class ExchangerDemo { public static void main(String[] args) { Exchanger\u0026lt;String\u0026gt; stringExchanger = new Exchanger\u0026lt;\u0026gt;(); ThreadA threadA = new ThreadA(stringExchanger, \u0026#34;线程A\u0026#34;); ThreadB threadB = new ThreadB(stringExchanger, \u0026#34;线程B\u0026#34;); threadA.start(); threadB.start(); } public static class ThreadA extends Thread { private Exchanger\u0026lt;String\u0026gt; stringExchanger; @Override public void run() { try { System.out.println(\u0026#34;当前线程\u0026#34; + getName() + \u0026#34;获取到\u0026#34; + stringExchanger.exchange(\u0026#34;a\u0026#34;)); } catch (InterruptedException e) { e.printStackTrace(); } } public Exchanger\u0026lt;String\u0026gt; getStringExchanger() { return stringExchanger; } public void setStringExchanger(Exchanger\u0026lt;String\u0026gt; stringExchanger) { this.stringExchanger = stringExchanger; } public ThreadA(Exchanger\u0026lt;String\u0026gt; stringExchanger, String name) { this.stringExchanger = stringExchanger; this.setName(name); } } public static class ThreadB extends Thread { private Exchanger\u0026lt;String\u0026gt; stringExchanger; @Override public void run() { try { System.out.println(\u0026#34;当前线程\u0026#34; + getName() + \u0026#34;获取到\u0026#34; + stringExchanger.exchange(\u0026#34;b\u0026#34;)); } catch (InterruptedException e) { e.printStackTrace(); } } public Exchanger\u0026lt;String\u0026gt; getStringExchanger() { return stringExchanger; } public void setStringExchanger(Exchanger\u0026lt;String\u0026gt; stringExchanger) { this.stringExchanger = stringExchanger; } public ThreadB(Exchanger\u0026lt;String\u0026gt; stringExchanger, String name) { this.stringExchanger = stringExchanger; this.setName(name); } } } //当前线程线程B获取到a //当前线程线程A获取到b  Exchanger在两个线程需要交换对象的时候非常好用  "});index.add({'id':47,'href':'/life/docs/%E8%84%9A%E6%9C%AC/npm%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85%E6%9C%BA%E5%88%B6%E7%AE%80%E4%BB%8B/','title':"node js - npm ",'section':"脚本",'content':" npm 是 Node 的模块管理器，功能极其强大。它是 Node 获得成功的重要原因之一\n  假如是nodejs 高版本 那么不需要再安装npm了因为node js已经包含了npm  一、从 npm install 说起 #   npm install 命令用来安装模块到node_modules目录。  $ npm install \u0026lt;packageName\u0026gt;   安装之前，npm install会先检查，node_modules目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。\n  如果你希望，一个模块不管是否安装过，npm 都要强制重新安装，可以使用-f 或 \u0026ndash;force 参数。\n  $ npm install \u0026lt;packageName\u0026gt; --force 二、npm update #   如果想更新已安装模块，就要用到npm update命令。  $ npm update \u0026lt;packageName\u0026gt;  它会先到远程仓库查询最新版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装。  三、registry #    npm update命令怎么知道每个模块的最新版本呢？\n  答案是 npm 模块仓库提供了一个查询服务，叫做 registry 。以 npmjs.org 为例，它的查询服务网址是 https://registry.npmjs.org/ 。\n  这个网址后面跟上模块名，就会得到一个 JSON 对象，里面是该模块所有版本的信息。比如，访问 https://registry.npmjs.org/react，就会看到 react 模块所有版本的信息。\n  它跟下面命令的效果是一样的。\n  $ npm view react # npm view 的别名 $ npm info react $ npm show react $ npm v react 四、缓存目录 #    npm install或npm update命令，从 registry 下载压缩包之后，都存放在本地的缓存目录。\n  这个缓存目录，在 Linux 或 Mac 默认是用户主目录下的.npm目录，在 Windows 默认是%AppData%/npm-cache。通过配置命令，可以查看这个目录的具体位置。\n  $ npm config get cache $HOME/.npm  你最好浏览一下这个目录。  $ ls ~/.npm # 或者 $ npm cache ls  你会看到里面存放着大量的模块，储存结构是{cache}/{name}/{version}。  $ npm cache ls react ~/.npm/react/react/0.14.6/ ~/.npm/react/react/0.14.6/package.tgz ~/.npm/react/react/0.14.6/package/ ~/.npm/react/react/0.14.6/package/package.json  .npm目录保存着大量文件，清空它的命令如下。  $ rm -rf ~/.npm/* # 或者 $ npm cache clean 五、模块的安装过程 #   总结一下，Node模块的安装过程是这样的。  1:发出npm install命令\r2:npm 向 registry 查询模块压缩包的网址\r3:下载压缩包，存放在~/.npm目录\r4:解压压缩包到当前项目的node_modules目录\r 注意，一个模块安装以后，本地其实保存了两份。一份是~/.npm目录下的压缩包，另一份是node_modules目录下解压后的代码。 但是，运行npm install的时候，只会检查node_modules目录，而不会检查~/.npm目录。也就是说，如果一个模块在～/.npm下有压缩包，但是没有安装在node_modules目录中，npm 依然会从远程仓库下载一次新的压缩包。 这种行为固然可以保证总是取得最新的代码，但有时并不是我们想要的。最大的问题是，它会极大地影响安装速度。即使某个模块的压缩包就在缓存目录中，也要去远程仓库下载，这怎么可能不慢呢？ 另外，有些场合没有网络（比如飞机上），但是你想安装的模块，明明就在缓存目录之中，这时也无法安装。\n "});index.add({'id':48,'href':'/life/docs/operating_system/windows/dos_basic/','title':"DOS基本命令 ",'section':"windows学习与使用 ",'content':"DOS基本命令 #   wing+r ==\u0026gt; cmd 进入dos控制台   打开屏幕键盘  C:\\Users\\noatn\u0026gt;osk;\r dos各种操作查看参数用法 command params ==? command /?  C:\\Users\\noatn\u0026gt;cd /?\r显示当前目录名或改变当前目录。\rCHDIR [/D] [drive:][path]\rCHDIR [..]\rCD [/D] [drive:][path]\rCD [..]\r.. 指定要改成父目录。\r键入 CD drive: 显示指定驱动器中的当前目录。\r不带参数只键入 CD，则显示当前驱动器和目录。\r使用 /D 开关，除了改变驱动器的当前目录之外，\r还可改变当前驱动器。\r如果命令扩展被启用，CHDIR 会如下改变:\r当前的目录字符串会被转换成使用磁盘名上的大小写。所以，\r如果磁盘上的大小写如此，CD C:\\TEMP 会将当前目录设为\rC:\\Temp。\rCHDIR 命令不把空格当作分隔符，因此有可能将目录名改为一个\r带有空格但不带有引号的子目录名。例如:\rcd \\winnt\\profiles\\username\\programs\\start menu\r与下列相同:\rcd \u0026quot;\\winnt\\profiles\\username\\programs\\start menu\u0026quot;\r在扩展停用的情况下，你必须键入以上命令。\r  显示文件夹列表 dir\n  改变目录 cd\n  返回上一级目录 cd ..\n  返回根目录 cd \\\n  创建子目录 md\n  删除目录 rd\n  清理屏幕 cls\n  cd s ==\u0026gt; 按住tab键切换\n  DOS窗口中创建用户并设定为管理员 #   查看本机用户数量 net user  PS E:\\\u0026gt; net user; \\\\DESKTOP-GN2SF7M 的用户帐户\r-------------------------------------------------------------------------------\rAdministrator DefaultAccount Guest\rWDAGUtilityAccount zch\r命令成功完成。\r 创建一个新用户 net user name password /add  PS E:\\\u0026gt; net user blake 123456 /add ; 命令成功完成。\r 提升到管理员权限 net localgroup administrators 用户名 /add  PS E:\\\u0026gt; net localgroup administrators blake /add; 命令成功完成。\rPS E:\\\u0026gt;  删除某个用户名 net user user1 /del  PS E:\\\u0026gt; net user alice /del 命令成功完成。\rPS E:\\\u0026gt;  修改用户密码 net user user1 （直接输入新密码）即可  PS E:\\\u0026gt; net user alice 000000 命令成功完成。\rPS E:\\\u0026gt;  dos备份磁盘   XCOPY D: E:\\backup /s/e/c/h/j/g\rPS E:\\\u0026gt; XCOPY D: E:\\kao /e/h/k/y/c\r"});index.add({'id':49,'href':'/life/docs/operating_system/windows/hksdjahjra/','title':"DOS基本命令 (新) ",'section':"windows学习与使用 ",'content':"命令格式 #    命令 子命令 参数 操作 选项\n  /? /help 获取详细的帮助信息\n  D:\\data\\game\\temp\u0026gt;net user /help 此命令的语法是: NET USER [username [password | *] [options]] [/DOMAIN] username {password | *} /ADD [options] [/DOMAIN] username [/DELETE] [/DOMAIN] username [/TIMES:{times | ALL}] username [/ACTIVE: {YES | NO}] NET USER 将创建并修改计算机上的用户帐户。在不使用命令开关的情况下， 将列出计算机的用户帐户。用户帐户信息存储在用户帐户数据库中。 username 为可添加、删除、修改或查看的用户帐户的名称。用户帐户名称 最多可以有 20 个字符。 password 指定或更改用户帐户的密码。密码的长度必须符合 NET ACCOUNTS 命令的 /MINPWLEN 选项所设置的最小长度。 最多可以有 14 个字符。 * 生成密码提示。在密码提示下键入密码时，将不会显示密码。 /DOMAIN 在当前域的域控制器上执行此操作。 /ADD 向用户帐户数据库添加用户帐户。 /DELETE 从用户帐户数据库删除用户帐户。 选项 如下所示: 选项 描述 -------------------------------------------------------------------- /ACTIVE:{YES | NO} 激活或取消激活帐户。如果该帐户处于非激活状态， 用户将无法访问服务器。默认设置为“YES”。 /COMMENT:\u0026#34;text\u0026#34; 提供有关用户帐户的描述性注释。请将文本用引号 括起来。 /COUNTRYCODE:nnn 使用操作系统国家/地区代码执行指定的语言文件， 以显示用户帮助和错误消息。值 0 表示使用默认 的国家/地区代码。 /EXPIRES:{date | NEVER} 如果设置了日期，可导致帐户过期。 NEVER 将帐户设置为无时间限制。 过期日期采用格式 mm/dd/yy(yy)。 月份可以是一个数字、完整字母拼写， 或使用三个字母的缩写。年份可以使用两位数字 或四位数字。使用斜线(/)(不留空格) 将日期的各个部分隔开。 /FULLNAME:\u0026#34;name\u0026#34; 用户的全名(而不是用户名)。请将该名称用引号 括起来。 /HOMEDIR:pathname 用户的主目录设置路径。该路径必须存在。 /PASSWORDCHG:{YES | NO} 指定用户是否可以更改其密码。默认设置 为“YES”。 /PASSWORDREQ:{YES | NO} 指定用户帐户是否必须拥有密码。 默认设置为“YES”。 /LOGONPASSWORDCHG:{YES|NO} 指定用户是否应在下次登录时更改其密码。 默认设置为“NO”。 /PROFILEPATH[:path] 为用户登录配置文件设置路径。 /SCRIPTPATH:pathname 用户登录脚本的位置。 /TIMES:{times | ALL} 登录小时数。TIMES 表示为 day[-day][,day[-day]],time[-time][,time [-time]]，增量限制为 1 小时。 日期可以是完整拼写，也可以是缩写。 小时可以是 12 或 24 小时表示法。对于 12 小时表示法，请使用 am、pm、a.m. 或 p.m。ALL 表示用户始终可以登录， 空白值表示用户始终不能登录。使用逗号将日期和时 间隔开，使用分号将多个日期和时间隔开。 /USERCOMMENT:\u0026#34;text\u0026#34; 允许管理员添加或更改帐户的用户注释。 /WORKSTATIONS:{computername[,...] | *} 列出用户可用于登录到网络的计算机，最多为八台。 如果 /WORKSTATIONS 没有列表，或其列表为 *， 则用户可以通过任何计算机登录到网络。 NET HELP 命令 | MORE 显示帮助内容，一次显示一屏。 批处理文件参数传递 #    .bat文件接受参数%num%\n  %1 %2 接收用户输入的数据绑定到参数中的位置\n  @cho off echo %1 echo %2 pause 依据上面命令创建 PbiMCTGrJW.bat D:\\IdeaProjects\\lifeDoc\\tool_java_fun_project\\source_dir\\content\\docs\\operating_system\\windows\\bat\u0026gt;PbiMCTGrJW.bat 11 22 11 22 @echo off rem 创建一个用户 net user %1 %2 /add pause 注释 #   rem 后面跟注释就是  启动新窗口 #  D:\\data\\game\\temp\u0026gt;start \u0026#34;my shell\u0026#34; 调用其它bat文件 #   call_fun.bat  ipconfig start \u0026#34;call window\u0026#34;  调用  @echo off rem 这次我们来编写批处理文件中调用其它批处理文件 call call_fun.bat pause 任务列表 #  tasklist tasklist /? TASKLIST [/S system [/U username [/P [password]]]] [/M [module] | /SVC | /V] [/FI filter] [/FO format] [/NH] 描述: 该工具显示在本地或远程机器上当前运行的进程列表。 参数列表: /S system 指定连接到的远程系统。 /U [domain\\]user 指定应该在哪个用户上下文执行这个命令。 /P [password] 为提供的用户上下文指定密码。如果省略，则 提示输入。 /M [module] 列出当前使用所给 exe/dll 名称的所有任务。 如果没有指定模块名称，显示所有加载的模块。 /SVC 显示每个进程中主持的服务。 /APPS 显示 Microsoft Store 应用及其关联的进程。 /V 显示详细任务信息。 /FI filter 显示一系列符合筛选器 指定条件的任务。 /FO format 指定输出格式。 有效值: \u0026#34;TABLE\u0026#34;、\u0026#34;LIST\u0026#34;、\u0026#34;CSV\u0026#34;。 /NH 指定列标题不应该 在输出中显示。 只对 \u0026#34;TABLE\u0026#34; 和 \u0026#34;CSV\u0026#34; 格式有效。 /? 显示此帮助消息。 筛选器: 筛选器名称 有效运算符 有效值 ----------- --------------- -------------------------- STATUS eq, ne RUNNING | SUSPENDED NOT RESPONDING | UNKNOWN IMAGENAME eq, ne 映像名称 PID eq, ne, gt, lt, ge, le PID 值 SESSION eq, ne, gt, lt, ge, le 会话编号 SESSIONNAME eq, ne 会话名称 CPUTIME eq, ne, gt, lt, ge, le CPU 时间，格式为 hh:mm:ss。 hh - 小时， mm - 分钟，ss - 秒 MEMUSAGE eq, ne, gt, lt, ge, le 内存使用(以 KB 为单位) USERNAME eq, ne 用户名，格式为 [域\\]用户 SERVICES eq, ne 服务名称 WINDOWTITLE eq, ne 窗口标题 模块 eq, ne DLL 名称 注意: 当查询远程计算机时，不支持 \u0026#34;WINDOWTITLE\u0026#34; 和 \u0026#34;STATUS\u0026#34; 筛选器。 Examples: TASKLIST TASKLIST /M TASKLIST /V /FO CSV TASKLIST /SVC /FO LIST TASKLIST /APPS /FI \u0026#34;STATUS eq RUNNING\u0026#34; TASKLIST /M wbem* TASKLIST /S system /FO LIST TASKLIST /S system /U 域\\用户名 /FO CSV /NH TASKLIST /S system /U username /P password /FO TABLE /NH TASKLIST /FI \u0026#34;USERNAME ne NT AUTHORITY\\SYSTEM\u0026#34; /FI \u0026#34;STATUS eq running\u0026#34; "});index.add({'id':50,'href':'/life/docs/javadir/basedir/jsp_dir/jsp_el%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/','title':"EL基础教程 ",'section':"jsp 基础知识 ",'content':"EL基础教程 #  El标签语法 #   ${参数名}\n EL标签的功能 #    可以访问JSP中不同的域的对象    可以访问JavaBean中的属性    可以访问集合元素    支持简单的运算操作   访问JSP中不同的域的对象 #  \u0026lt;%\rpageContext.setAttribute(\u0026quot;name1\u0026quot;, \u0026quot;zhangsan\u0026quot;);\rrequest.setAttribute(\u0026quot;name2\u0026quot;, \u0026quot;lisi\u0026quot;);\rsession.setAttribute(\u0026quot;name3\u0026quot;, \u0026quot;wangwu\u0026quot;);\rapplication.setAttribute(\u0026quot;name4\u0026quot;, \u0026quot;liuliu\u0026quot;);\r%\u0026gt;\r\u0026lt;!--范围.参数名 --\u0026gt;\r${pageScope.name1 } ${requestScope.name2 } ${sessionScope.name3 }\r${applicationScope.name4 }\r\u0026lt;br\u0026gt;\r\u0026lt;!-- 直接写参数名称 --\u0026gt;\r${name1 } ${name2 } ${name3 } ${name4 }\r 访问JavaBean中的属性 #  \u0026lt;%\rUser user=new User(\u0026quot;zhangsan\u0026quot;,20,\u0026quot;北京\u0026quot;);\rrequest.setAttribute(\u0026quot;user\u0026quot;, user);\r%\u0026gt;\ruser name:${user.name }\u0026lt;br\u0026gt; user age:${user.age }\u0026lt;br\u0026gt; user address:${user.address }\r 访问集合元素 #  \u0026lt;%\r//数组\rint[] array=new int[]{1,2,3};\r//列表\rList list=new ArrayList();\rlist.add(\u0026quot;list1\u0026quot;);\rlist.add(20);\rlist.add(true);\rpageContext.setAttribute(\u0026quot;array\u0026quot;, array);\rpageContext.setAttribute(\u0026quot;list\u0026quot;, list);\r%\u0026gt;\r数组:${array[0] },${array[1] },${array[2] }\u0026lt;br\u0026gt; List列表:${list }\u0026lt;br\u0026gt;\r 简单的运算操作 #  算术运算符:\n2+3=${2+3 }\r2-3=${2-3 }\r2*3=${2*3 }\r2/3=${2/3 }\r 逻辑运算符:\ntrue\u0026amp;\u0026amp;false=${true\u0026amp;\u0026amp;false }\ttrue||false=${true||false }\t!true=${!true }\t 关系运算符:\n2==5 ${2==5 }\r2!=5 ${2!=5 }\r2\u0026gt;5 ${2\u0026gt;5 }\r2\u0026lt;5 ${2\u0026lt;5 }\r2\u0026gt;=5 ${2\u0026gt;=5 }\r2\u0026lt;=5 ${2\u0026lt;=5 }\r 其他运算符:\n\u0026lt;%\rUser user=new User();\rUser user1=new User(\u0026quot;zhangsan\u0026quot;,20,\u0026quot;北京\u0026quot;);\rString arr=new String();\rString[] arr1=new String[]{\u0026quot;one\u0026quot;,\u0026quot;two\u0026quot;};\tpageContext.setAttribute(\u0026quot;user\u0026quot;, user);\rpageContext.setAttribute(\u0026quot;user1\u0026quot;, user1);\rpageContext.setAttribute(\u0026quot;arr\u0026quot;, arr);\tpageContext.setAttribute(\u0026quot;arr1\u0026quot;, arr1);\r%\u0026gt;\ruser 是否为空:${empty user }\rarr 是否为空:${empty arr }\ruser1 是否为空:${empty user1 }\rarr1 是否为空:${empty arr1 }\r三元目运算符2\u0026lt;5?yes:no:${2\u0026lt;5?\u0026quot;yes\u0026quot;:\u0026quot;no\u0026quot; }\ruser1.address:${user1.address }\rarr1[1]:${arr1[1] }\r EL标签的隐形变量 #    page \u0026lt;==============================\u0026gt; pageScope    request \u0026lt;============================\u0026gt; requestScope    session \u0026lt;============================\u0026gt; sessionScope    application \u0026lt;=========================\u0026gt; applicationScope    request.getParameter(String name) \u0026lt;=======\u0026gt; param   A.jsp\n\u0026lt;form action=\u0026quot;B.jsp\u0026quot; method=\u0026quot;get\u0026quot;\u0026gt;\r\u0026lt;input name=\u0026quot;name\u0026quot;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt;\r\u0026lt;/form\u0026gt;\r B.jsp\n${param.name }\r  request.getParameterValues(String name) \u0026lt;==\u0026gt; paramValues   A.jsp\n\u0026lt;form action=\u0026quot;B.jsp\u0026quot; method=\u0026quot;get\u0026quot;\u0026gt;\r\u0026lt;input name=\u0026quot;name\u0026quot;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input name=\u0026quot;name\u0026quot;\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt;\r\u0026lt;/form\u0026gt;\r B.jsp\n${paramValues.name[0] },${paramValues.name[1] }\r  request.getHeader(String name) \u0026lt;=========\u0026gt; header    request.getHeaderNames() \u0026lt;=============\u0026gt; headerValues    所有请求cookie \u0026lt;=====================\u0026gt; cookie    application.getInitParameter(String name) \u0026lt;==\u0026gt; initParam    pageContext   ${pageContext.request.queryString}\u0026lt;!-- 获取请求名参数 --\u0026gt;\r${pageContext.request.requestURL}\u0026lt;!-- 获取请求的URL --\u0026gt;\r${pageContext.request.contextPath }\u0026lt;!-- 获取服务应用的名称 --\u0026gt;\r${pageContext.request.method }\u0026lt;!-- 获取http提交方法 --\u0026gt;\r${pageContext.request.protocol }\u0026lt;!-- 获取使用的协议 --\u0026gt;\r${pageContext.request.remoteUser }\u0026lt;!-- 获取登录用户名 --\u0026gt;\r${pageContext.request.remoteAddr }\u0026lt;!-- 获取登录用户IP地址 --\u0026gt;\r${pageContext.session.id }\u0026lt;!-- 获取session的ID --\u0026gt;\r${pageContext.servletContext.serverInfo }\u0026lt;!-- 获取主机端的服务信息 --\u0026gt;\r "});index.add({'id':51,'href':'/life/docs/javadir/groovy/groovy%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/','title':"groovy 数据类型 ",'section':"groovy 学习与使用 ",'content':"Groovy 数据类型 #   在任何编程语言中，需要使用各种变量来存储各种类型的信息。变量只是保留值的存储位置,这意味着，当你创建一个变量，你保留在内存中的一些空间来存储与变量相关的值。\n  您可能喜欢存储各种数据类型的信息，如字符串，字符，宽字符，整数，浮点数，布尔值等。基于变量的数据类型，操作系统分配内存并决定什么可以存储在保留的存储器中。\n 内置数据类型 #   byte -这是用来表示字节值。例如2。 short -这是用来表示一个短整型。例如10。 int -这是用来表示整数。例如1234。 long -这是用来表示一个长整型。例如10000090。 float -这是用来表示32位浮点数。例如12.34。 double -这是用来表示64位浮点数，这些数字是有时可能需要的更长的十进制数表示。例如12.3456565。 char -这定义了单个字符文字。例如“A”。 Boolean -这表示一个布尔值，可以是true或false。 String -这些是以字符串的形式表示的文本。例如，“Hello World”的  绑定值 #     类型 值     byte -128到127   short -32,768到32,767   int 2,147,483,648 到,147,483,647   long -9,223,372,036,854,775,808到+9,223,372,036,854,775,807   float 1.40129846432481707e-45到3.40282346638528860e + 38   double 4.94065645841246544e-324d 到1.79769313486231570e + 308d    包装器类型 #   java.lang.Byte java.lang.Short java.lang.Integer java.lang.Long java.lang.Float java.lang.Double     名称 描述 例如     java.math.BigInteger 不可变的任意精度的有符号整数数字 30克   java.math.BigDecimal 不可变的任意精度的有符号十进制数 3.5克    package gr.h1\r//Example of a int datatype\rint x = 5;\r//Example of a long datatype\rlong y = 100L;\r//Example of a floating point datatype\rfloat a = 10.56f;\r//Example of a double datatype\rdouble b = 10.5e40;\r//Example of a BigInteger datatype\rBigInteger bi = 30g;\r//Example of a BigDecimal datatype\rBigDecimal bd = 3.5g; //加上这个g也没事的 这是groovy特有的如java中的double a = 3.232d\rBigDecimal bd2 = 235.2323552;\rprintln(x);\rprintln(y);\rprintln(a);\rprintln(b);\rprintln(bi);\rprintln(bd);\rprintln(bd2);\r5\r100\r10.56\r1.05E41\r30\r3.5\r235.2323552\r"});index.add({'id':52,'href':'/life/docs/javadir/thread/','title':"多线程与并发 ",'section':" Java技术栈",'content':"目录 #    名词解释\n  CAS简单模拟\n  关键名词解释\n  jol\n  Unsafe\n  ReentrantLock\n  java重复加锁\n  Park\n  线程最佳实践\n  "});index.add({'id':53,'href':'/life/docs/computer_network/physical_layer/','title':"物理层 ",'section':"计算机网络 ",'content':" 物理层基本概念 数据通信基础知识  "});index.add({'id':54,'href':'/life/docs/operating_system/two_chapter/','title':"第二章 进程管理 ",'section':"操作系统 ",'content':"进程管理 #  目录 #    2.1_1_进程的概念、组成、特征\n  2.1_2_进程的状态与转换\n  2.1_3_进程控制\n  2.1_4_进程通信\n  2.1_5_线程概念与多线程模型\n  2.2_1_处理机调度的概念、层次\n  2.2_2_进程调度的时机、切换与过程、方式\n  2.2_3_调度算法的评价指标\n  "});index.add({'id':55,'href':'/life/docs/databases/mysql/','title':"mysql学习笔记",'section':" 数据库",'content':"mysql学习笔记 #  windows下 Mysql安装 #  Win10一台电脑安装多个版本的Mysql #  windows下 Mysql安装的一些问题解决方法 #  centos7安装多个mysql #  mysql查询数据准备 #  mysql查询 #  mysql新查询 #  mysql视图 #  mysql触发器 #  mysql正则表达式 #  mysql事务 #  mysql函数 #  mysql存储过程 #  mysql存储函数 #  mysql用户与权限 #  mysql整理 #  mysql存储引擎 #  mysql运维 #  开发规范 #  数据库设计三范式 #  mysql索引 #  MySQL分库分表原理 #  mysql优化 #  "});index.add({'id':56,'href':'/life/docs/databases/postgresql/','title':"postgresql学习笔记",'section':" 数据库",'content':"postgresql学习笔记 #  postgresql用户与权限 #  "});index.add({'id':57,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/2021-04%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/','title':"学习计划",'section':"自我提升",'content':"  Java 消息中间件 RabbitMq 和 kafka (建议学习RabbitMq)\n  web socket or spring socket\n  springboot (spring cloud考虑)\n  redis (深入使用)\n  mysql 这次复习以往 突破 存储和锁 如行锁\n  java 并发(深入)\n  nio netty\n  "});index.add({'id':58,'href':'/life/docs/databases/mysql_163%E8%AF%BE%E5%A0%82/','title':"网易云课堂MySQL微专业学习笔记",'section':" 数据库",'content':"网易云课堂MySQL微专业学习笔记 #   但愿可以不弃坑。\n 目录 #   数据库基础  1.1-认识MySQL 1.2-轻松安装MySQL 1.3-MySQL数据库连接 1.4-SQL语言入门 1.5-认识DBA   MySQL数据库对象与应用  2.1-MySQL数据类型 2.2-MySQL数据对象 2.3-MySQL权限管理 2.4-SQL语言进阶 2.5-内置函数 2.6-触发器与存储过程 2.7-MySQL字符集 2.8程序连接MySQL 2.9-DAO框架的使用   MySQL事务与存储引擎  3.1-数据库事务 3.2-存储引擎概述 3.3-InnoDB存储引擎 3.4-InnoDB事务锁   MySQL应用优化  4.1-MySQL索引优化与设计 4.2-MySQL数据库设计 4.3-MySQL容量评估 4.4-MySQL性能测试   MySQL运维实践  5.1-MySQL日志系统 5.2-MySQL数据备份 5.3-MySQL数据恢复 5.4-MySQL线上部署 5.5-MySQL主从复制 5.6-MySQL日常运维 5.7-MySQL参数调优    "});index.add({'id':59,'href':'/life/docs/javadir/tooldoc/aspose/','title':"Aspose",'section':"Java公共库文档总结 ",'content':"Aspose.word组件介绍 #  1.基本介绍 #   Aspose.Words是一个商业.NET类库，可以使得应用程序处理大量的文件任务。Aspose.Words支持Doc，Docx，RTF，HTML，OpenDocument，PDF，XPS，EPUB和其他格式。使用Aspose.Words可以在不使用Microsoft.Word的情况下生成、修改、转换和打印文档。在项目中使用Aspose.Words可以有以下好处。\n 1.1丰富的功能集 #   其丰富的功能特性主要有以下4个方面:\n   格式转换。Aspose.Words具有高质量的文件格式转换功能，可以和Doc，OOXL，RTF，TXT等格式互相转换。\n  文档对象模型。通过丰富的API以编程方式访问所有的文档元素和格式，允许创建，修改，提取，复制，分割，加入，和替换文件内容。\n  文件渲染。可以在服务器端转换整个文档或者页面为PDF，XPS，SWF格式，同样可以转换文档页面为图像格式，或者.NET Graphics对象，这些功能和Microsoft.Word是一样的。\n  报表。可以从对象或者数据源填充模版生成文件。\n  1.2不需要Microsoft.Word #   Aspose.Words可以在没有安装Microsoft Office的机器上工作。所有的Aspose组件都是独立，不需要微软公司的授权。总之， Aspose.Words在安全性、稳定性、可扩展性、速度、价格和自动化功能方面，是一个很不错的选择。\n 1.3独立的平台 #   Aspose.Words可以运行在Windows，Linux和Mac OS操作系统上面。可以使用Aspose.Words去创建32位或者64位的.NET应用程序，包括Asp.NET、WCF、WinForm等等，还可以使用Com组件在Asp、Perl、PHP和Python语言中使用，同样可以在Mono平台上使用Aspose.Words建立.NET应用程序。\n 1.4性能和可伸缩性 #   Aspose.Words可以运行在服务器和客户端，它是一个独立的.NET程序集，可以被任何.NET应用程序复制和部署。使用Aspose.Words可以在短时间内产生成千上万的文档，可以打开文档，并修改格式和内容，填充数据并保存。Aspose.Words是多线程安全的，不同的线程在同一时间处理不同的文档。\n 1.5最小的学习曲线 #   虽然Aspose.Words拥有150多个公共类和枚举类型，但是Aspose.Words的学习曲线很小因为Aspose.Words的API是围绕下列目标精心设计的：\n   借鉴一些著名的API设计经验，如Microsoft Word。\n  借鉴.NET框架设计指南的经验。\n  提供易于使用的详细的文档元素操作文档。\n   以前在项目中使用Microsoft Word的开发者，可以在Aspose.Words中找到很多熟悉的类、方法和属性。\n 2.文档对象模型概述 #  2.1 DOM介绍 #   Aspose.Words的文档对象模型(以下简称DOM)是一个Word文档在内存中的映射，Aspose.Words的DOM可以编程读取、操作和修改Word文档的内容和格式。理解DOM的结构和相应的类型，是使用Aspose.Words灵活编程的基础，这一点非常重要。下面的一个Word文档例子和其结构如下图所示:\n 当上述文档被Aspose.Words的DOM读取时，会创建如下结构的树形对象:\n从上图的结构和对应的Word文档，我们可以看到大概的DOM中相关对象的结构，有了这些基本概念，就可以很流程的操作Word文档了。Document, Section, Paragraph, Table, Shape, Run 以及图中的其他椭圆形的都是Aspose.Words对象，这些对象具有树形的层级结构，图中的注释同样说明这些文档对象树中的对象具有多个属性。\nAspose.Words中的DOM有以下特点：\n  所有的节点(node)类最终都继承于Node类，它是Aspose.Words DOM的基本类型。\n  节点可以包含(嵌套)其他节点，例如Section和Paragraph都继承自CompositeNode类，而CompositeNode类来源与Node类。\n  2.2 Node类型 #  当Aspose.Words读取Word文档到内存中时，不同类型的文档元素被不同的类型对象来替代，每一个文本框的text, paragraph, table, section都是Node对象,甚至文档本身都是一个Node。Aspose.Words为每一种文档节点类型都定义了一个类。\n下面是一个UML类图，表示DOM中不同node类型之间的关系。抽象类的名字用斜体表示。注意，Aspose.Words DOM中同样包括了一些非节点类型的类，例如Style, PageSetup, Font等等，它们没有在这幅图里面显示。\n看看这些主要的类及作用\n   Aspose.Words类 类别 描述     Document Document Document对象是文档树的根节点，提供访问整个文档的入口   Section Document Section对象对应一个文档中的一节   Body Document 是一节中的主要文本容器   HeaderFooter Document 一节中的特殊页眉或者页脚容器   GlossaryDocument Document 代表一个Word文档中词汇表的根条目   BuildingBlock Document 代表一个词汇表文档，如构件，自动图文集或一个自动更正条目   Paragraph Text 一个文本段落，保护内联的节点   Run Text 一个格式一致的文本块   BookmarkStart Text 一个书签的起点标记   BookmarkEnd Text 一个书签的结束标记   FieldStart Text 一个特殊的字符指定一个单词字段的开始   FieldStart Text 一个特殊的字符指定一个单词字段的开始   FieldSeparator Text 单词字段的分隔符   FieldEnd Text 一个特殊的字符指定一个单词字段的结束   FormField Text 一个表单字段   SpecialChar Text 特殊字符类型，没有具体的   Table Tables Word文档中的表格   Row Tables 一个表格对象的行   Cell Tables 表格行的单元格   Shape Shapes Word文档中的图像，形状，文本框或者OLE对象   GroupShape Shapes 一组Shapes对象   DrawingML Shapes 一个文档中的Sharp或者图像，图表   Footnote Annotations 文档中包括文本的脚注或者尾注   Comment Annotations 文档中包含文本的注释   CommentRangeStart Annotations 一个相关的注释区域的开始   CommentRangeEnd Annotations 一个相关的注释区域的结束   SmartTag Markup 在一个段落内围绕一个或多个内嵌结构的智能标记   CustomXmlMarkup Markup 文档中的某些结构的自定义XML标记   StructuredDocumentTag Markup 文档中的一种结构化的文档标签（内容控制）   OfficeMath Math 代表Office的数学对象，如函数，方程或者矩阵    2.3组成模式 #  Aspose.Words文档的结构树非常重要，下面的设计吐可以更清晰的理解各个节点之间的包含关系。\n2.3.1 Document and Section #  文档和节：\n从上图可以看出：\n  一个Document有1个或者多个Section(节)节点；\n  Section有1个Body(正文)，没有或者有多个HeaderFooter节点；\n  Body和HeaderFooter可以包含多个块级节点；\n  1个Document能够有一个GlossaryDocument.1个Word文档包含1个或多个节，一个节可以定义自己的页码，边距，方向，以及页眉页脚的文字；一个节保护主要的问题，如页眉，页脚(首页，奇数页，偶数页)。\n  2.3.2 Block-level节点 #  Block-level节点的关系图如下所示：\n  Block-level元素可以出现在文档中的很多地方，如Body的子节点，脚注，评论，单元格其他元素。\n  最重要的Block-level节点是表格和段落；\n  1个表格有0行或者多行；\n  CustomXmlMarkup 和StructuredDocumentTag可以包含其他Block-level节点；\n2.3.3 Inline-level节点 #  从上面的图表可以看到下列关系：\n  Paragraph是最经常出现的Inline-level节点；\n  Paragraph可以包含不同的Run格式节点；也可以包含书签(bookmarks)和注释(annotations)\n  Paragraph还可以包含形状，图像，绘图对象等，以及智能标签；\n  2.3.4 表格行单元格 #  Table可以包含很多行，行可以包含单元格，单元格可以包括block-level节点。\n2.4 设计模式与导航 #  Aspose.Words将文档表示为一个有节点组成的树，因此就可以在节点之间互相切换。Aspose.Words提供了一个“文档浏览器”(DocumentExplorer)，这是一个项目例子Demo。如下图所示：\n可以通过Node类的ParentNode属性来访问上级节点，因此很方便获取父节点。文档对象模型是有大量的对象组合而成，他们的关系如下：\n  Node类是所有节点类的基类；\n  CompositeNode类是组合节点的基类；\n  Node类的中，没有子节点管理的接口，子节点管理的方法只出现在CompositeNode；\n  从Node类中移除子节点管理的方法，更干净，可以减少很多额外的转换；\n  3.参考 #   官方参考 网络来源重要 网络来源2 网络来源3 网络来源4 网络来源5 网络来源6相对重要 网络来源7相对重要 应用aspose.word破解版实现word转pdf github地址重要 github地址2 github地址3 github地址4 github地址5  "});index.add({'id':60,'href':'/life/docs/javadir/thread/essential_glossary/','title':"关键名词解释",'section':"多线程与并发 ",'content':"锁分类 #  轻量级锁 #   Displaced Mark Word(置换标记字)   线程在执行同步块之前,JVM会先在当前线程的栈帧中创建用于存储记录的空间,并将对象头中的Mark Word复制到锁记录中,官方称为Displaced Mark Word 。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功,当前线程获得锁,如果失败,表示其他线程竞争锁,当前线程便尝试 使用自旋来获取锁。\n 白话 #  在进入同步块之前JVM会在当前线程的\u0026#34;栈帧中申请并创建锁记录的空间,接着把对象头的标识符写到锁记录中\u0026#34; 然后使用CAS将当前线程的锁记录的地址(指针)替换掉锁对应的对象中的标识符,CAS操作成功表示获得锁CAS 操作失败尝试使用自旋(就是在当前进程并且执行代码块的线程内的时间片下空循环烧CPU反正现代计算机大多都是多核处理器在短时间内不会太影响其他任务处理)来获取锁 锁的撤销 #  要想撤销轻量级锁(解锁) 对象头中标识符必须设回为Displaced Mark Word 因此使用CAS操作将Displaced Mark Word替换回到对象头里面,成功那么撤销成功,失败说明有其它线程还在竞争此对象的锁这个时候 锁就会立即膨胀成重量级锁,后续的加锁和解锁都按照重量级锁的操作来 偏向锁 #   当一个线程访问同步块(部分文档和解释说也包括同步方法)并获取锁时,会在对象头和栈帧中的锁记录里存在存储偏向锁的线程ID, 以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁,只需要简单测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁 .如果测试成功,表示已经获取到了锁。如果测试失败,则需要再测试一下Mark word中偏向锁的标识符是否设置成1:如果没有设置,则使用CAS竞争锁; 如果设置了,则尝试使用CAS将对象头的偏向锁指向当前线程(实际就是在对象头锁记录存入线程标识的数据,当然顺带栈帧记录也得存入有关的锁记录数据)\n 白话 #  当只有一个线程或者多个线程中最先执行到同步块的时候 这个时候测试完没有偏向锁立即设置完对应的标识记录和锁记录就开始执行同步代码了, 假如下次再进入并且锁没有升级那么仅仅简单测试通过又继续执行了 在这最开始到结束全程没有各种加锁操作甚至连CAS都很有可能没有(是有可能有CASC操作的这涉及到偏向锁的撤销机制) 相比同步操作消耗很少 因此很划算的 当有多个线程竞争锁的时候 这个时候系统检测到了并且达到了锁升级的约束条件那么就会立即执行升级操作即便获得执行条件正在的线程 (当然必须等执行线程中的某个原子操作或者若干原子操作组成的原语)也要对锁记录进行升级然后才开始升级 优点: 把整个同步都消除掉，连CAS操作都不去做了，优于轻量级锁 缺点: 如果程序中大多数的锁都总是被多个不同的线程访问，那偏向锁就是多余的   偏向锁是JDK6时加入的一种锁优化机制\n  锁的撤销\n  偏向锁使用了一种等到竞争出现才释放锁的机制,所以当其他线程尝试竞争偏向锁时,持有偏向锁的线程才会释放锁。偏向锁的撤销, 需要等待全局安全点(在这个时间点上没有正在执行的字节码)。它会首先暂停拥有偏向锁的线程,然后检查持有偏向锁的线程是否活着, 如果线程不处于活动状态,则将对象头设置成无锁状态;如果线程仍然活着,拥有偏向锁的栈会被执行,遍历偏向对象的锁记录, 栈中的锁记录和对象头的mark word要么重新偏向于其它线程,要么恢复到无锁或者标记对象不适合作为偏向锁,最后唤醒暂停的线程。  关闭锁  可以考虑通过JVM参数关闭偏向锁 -XX:-UseBiasedLocking=false 重量级锁 #   重量级锁是一种称谓  synchronized是通过对象内部的一个叫做监视器锁 （monitor）来实现的，监视器锁本身依赖底层的操作系统的 Mutex Lock来实现。操 作系统实现线程的切换需要从用户态切换到核心态，成本非常高。这种依赖于操作系 统 Mutex Lock来实现的锁称为重量级锁。为了优化synchonized，引入了轻量级锁， 偏向锁  Java中的重量级锁： synchronized  自旋锁 || 适应性自旋锁 #   自旋是一种技术理念,使线程忙等待,只需要让线程执行一个忙循环(自旋)。 现在绝大多数的计算机都是多核处理器,如果物理机器有一个以上的处理器或者处理器核心, 能让两个或以上的线程同时并行执行,就可以让后面请求锁的那个线程\u0026quot;稍等一会\u0026quot;, 但不放弃处理器的执行时间,看看持有锁的线程是否很快就会释放锁。\n  自旋锁的优点  避免了线程切换的开销。挂起线程和恢复线程的操作都需要转入内核 态中完成，这些操作给Java虚拟机的并发性能带来了很大的压力。  自旋锁的缺点  占用处理器的时间，如果占用的时间很长，会白白消耗处理器资源， 而不会做任何有价值的工作，带来性能的浪费。因此自旋等待的时间必须有一定的限 度，如果自旋超过了限定的次数仍然没有成功获得锁，就应当使用传统的方式去挂起 线程。  自旋次数默认值  0次，可以使用参数-XX:PreBlockSpin来自行更改。  自适应自旋  自适应意味着自旋的时间不再是固定的，而是由前一次在同一个锁上的 自旋时间及锁的拥有者的状态来决定的。有了自适应自旋，随着程序运行时间的增长 及性能监控信息的不断完善，虚拟机对程序锁的状态预测就会越来越精准。  Java中的自旋锁： CAS操作中的比较操作失败后的自旋等待。  悲观锁 #   悲观锁是一种悲观思想，即认为写多读少，遇到并发写的可能性高，每次去拿数据的时候都认为其他线程会修改，所以每次读写数据都会认为其他线程会修改，所以每次读写数据时都会上锁。其他线程想要读写这个数据时，会被这个线程block，直到这个线程释放锁然后其他线程获取到锁。\n 白话 #  首先主观判断是需要写的操作高于读操作，因为你经常去写 假如你使用乐观锁那样烧cpu的方式进行那么非常浪费资源(计算机世界中CPU也是资源,甚至时间都是), 然后线程申请锁的时候要么被阻塞要么拿到锁(加锁成功) 拿到锁的继续执行没拿到的立即阻塞进入阻塞队列中等待 等待唤醒的时机 最后说下 悲观锁中如果存在数据库操作不管你是关系数据库,非关系数据库或者NOSQL这些 要小心数据处理的操作 特别是多个服务器对应到一个数据库或者多个服务器对应多个数据库等 要么你的数据处理在某个时刻只会运行在一台服务器上要么数据运行到多台服务器的时候在某个唯一服务器上进行唯一运行检验 实现例子 #   关系型数据库锁机制  行锁、表锁、读锁、写锁  Java 里面的同步 synchronized 关键字的实现  乐观锁 #   乐观锁是一种乐观思想，假定当前环境是读多写少，遇到并发写的概率比较低，读数据时认为别的线程不会正在进行修改（所以没有上锁）。写数据时，判断当前 与期望值是否相同，如果相同则进行更新（更新期间加锁，保证是原子性的）\n 白话 #  当以这种模式运行时 我们预估大多数都能够实现 那么就以烧CPU轮询方式进行 在 当前运行的进程内的并且运行的线程一直轮询 只要不被阻塞或者其他什么引起线程不执行了就一直轮训知道成功为止 稍微提一下 必须满足运行的当前进程被操作系统调度进入CPU运行 因为操作系统内核对所有进程有一套调度算法一个进程正在执行中即便没有执行完也有可能被暂停,如时间片已经用完 实现例子 #   CAS 实现  Java 中java.util.concurrent.atomic包下面的原子变量使用了乐观锁的一种 CAS 实现方式 CAS，比较并替换，比较当前值（主内存中的值），与预期值（当前线程中的值，主内存中值的一份拷贝）是否一样，一样则更新，否则继续进行CAS操作  版本号控制  般是在数据表中加上一个数据版本号 version 字段，表示数据被修改的次数。 当数据被修改时，version 值会 +1。当线程 A 要更新数据时，在读取数据的同时也会读取 version 值， 在提交更新时，若刚才读取到的 version 值与当前数据库中的 version 值相等时才更新，否则重试更新操作，直到更新成功 互斥锁 #   互斥锁与悲观锁、独占锁同义，表示某个资源只能被一个线程访问，其他线程不能访问\n  读-读互斥 读-写互斥 写-读互斥 写-写互斥  公平锁 #   公平锁是一种思想： 多个线程按照申请锁的顺序来获取锁。在并发环境中，每个线程 会先查看此锁维护的等待队列，如果当前等待队列为空，则占有锁，如果等待队列不 为空，则加入到等待队列的末尾，按照FIFO的原则从队列中拿到线程，然后占有锁。\n 非公平锁 #   非公平锁是一种思想： 线程尝试获取锁，如果获取不到，则再采用公平锁的方式。多 个线程获取锁的顺序，不是按照先到先得的顺序，有可能后申请锁的线程比先申请的 线程优先获取锁。\n  优点： 非公平锁的性能高于公平锁。 缺点： 有可能造成线程饥饿（某个线程很长一段时间获取不到锁） Java中的非公平锁：synchronized是非公平锁，ReentrantLock通过构造函数指定该锁是公平的还是非公平的，默认是非公平的。  分段锁 #   分段锁是一种机制： 最好的例子来说明分段锁是ConcurrentHashMap。\n  ConcurrentHashMap原理  它内部细分了若干个小的 HashMap，称之为段 (Segment)。 默认情况下一个 ConcurrentHashMap 被进一步细分为 16 个段，既 就是锁的并发度。如果需要在 ConcurrentHashMap 添加一项key-value，并不是将 整个 HashMap 加锁，而是首先根据 hashcode 得到该key-value应该存放在哪个段 中，然后对该段加锁，并完成 put 操作。在多线程环境中，如果多个线程同时进行 put操作，只要被加入的key-value不存放在同一个段中，则线程间可以做到真正的并 行。  线程安全  ：ConcurrentHashMap 是一个 Segment 数组， Segment 通过继承 ReentrantLock 来进行加锁，所以每次需要加锁的操作锁住的是一个 segment，这 样只要保证每个 Segment 是线程安全的，也就实现了全局的线程安全 读写锁 #   读写锁是一种技术  通过ReentrantReadWriteLock类来实现。为了提高性能， Java 提供了读写锁，在读的地方使用读锁，在写的地方使用写锁，灵活控制，如果没有写 锁的情况下，读是无阻塞的，在一定程度上提高了程序的执行效率。 读写锁分为读锁 和写锁，多个读锁不互斥，读锁与写锁互斥，这是由 jvm 自己控制的 读锁 #   允许多个线程获取读锁，同时访问同一个资源  写锁 #   只允许一个线程获取写锁，不允许同时访问同一个资源  如何使用  /* 创建一个读写锁* 它是一个读写融为一体的锁，在使用的时候，需要转换*/ private ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock(); /*获取读锁和释放读锁*/ //获取读锁 rwLock.readLock().lock(); // 释放读锁 rwLock.readLock().unlock(); /*获取写锁和释放写锁*/ //创建一个写锁 rwLock.writeLock().lock(); //写锁 释放 rwLock.writeLock().unlock(); 共享锁 #    共享锁是一种思想： 可以有多个线程获取读锁，以共享的方式持有锁。和乐观锁、读写锁同义。\n  Java中用到的共享锁：ReentrantReadWriteLock(读锁)\n  独占锁 #    独占锁是一种思想： 只能有一个线程获取锁，以独占的方式持有锁。和悲观锁、互斥锁同义\n  Java中用到的独占锁： synchronized，ReentrantLock\n  同步锁 #    同步锁与互斥锁同义，表示并发执行的多个线程，在同一时间内只允许一个线程访问共享数据\n  Java中的同步锁： synchronized\n  死锁 #   死锁是一种现象   如线程A持有资源x，线程B持有资源y，线程A等待线程B释放资源y，线程B等待线程A释放资源x，两个线程都不释放自己持有的资源，则两个线程都获取不到对方的资源，就会造成死锁\n  Java中的死锁不能自行打破，所以线程死锁后，线程不能进行响应。所以一定要注意程序的并发场景，避免造成死锁\n 锁粗化 #   锁粗化是一种优化技术  如果一系列的连续操作都对同一个对象反复加锁和解锁，甚\r至加锁操作都是出现在循环体体之中，就算真的没有线程竞争，频繁地进行互斥同步\r操作将会导致不必要的性能损耗，所以就采取了一种方案：把加锁的范围扩展（粗\r化）到整个操作序列的外部，这样加锁解锁的频率就会大大降低，从而减少了性能损\r耗。\r锁消除 #   锁消除是一种优化技术  就是把锁干掉。当Java虚拟机运行时发现有些共享数据不会\r被线程竞争时就可以进行锁消除。\r那如何判断共享数据不会被线程竞争？\r利用逃逸分析技术：分析对象的作用域，如果对象在A方法中定义后，被作为参数传递\r到B方法中，则称为方法逃逸；如果被其他线程访问，则称为线程逃逸。\r在堆上的某个数据不会逃逸出去被其他线程访问到，就可以把它当作栈上数据对待，\r认为它是线程私有的，同步加锁就不需要了\r获取锁的某些方式 #   仅仅是加锁过程中一个或者一些操作\n CAS #   lock cmpxchgq (比较并交换指令) java调用链 普通api =\u0026gt; java Unsafe =\u0026gt; native cpp =\u0026gt; 操作系统指令 这里要注意即使是c++也不是真正底层 实际是通过操作系统执行中央处理器并做一些处理后得到的结果   CAS，即Compare and Swap，是基于硬件级别的指令实现的同步原语，Java并发包java.utile.concurrent许多同步类基于CAS构建，因此可见CAS的重要性；\n 处理器（包括 Intel 和 Sparc 处理器）使用的最通用的方法是实现名为比较并转换或CAS的原语，在 Intel 处理器中， 比较并交换通过指令的 cmpxchg系列实现。CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。 如果内存位置的值V与预期原值A相匹配，那么处理器会自动将该位置值V更新为新值B，否则，处理器不做任何操作，整个操作保证了原子性，即在对比V==A后、 设置V=B之前不会有其他线程修改V的值。  Unsafe提供CAS操作的native方法  /** 拿对象o在内存偏移offset处的对象与expected比较，如果相等，则设置o.offset=x并返回true，否则返回false */ public final native boolean compareAndSwapObject(Object o, long offset, Object expected, Object x); /** 拿对象o在内存偏移offset处的long值与expected比较，如果相等则设置o.offset=x */ public final native boolean compareAndSwapLong(Object o, long offset, long expected, long x); /** 拿对象o在内存偏移offset处的int值与expected比较，如果相等则设置o.offset=x */ public final native boolean compareAndSwapInt(Object o, long offset, int expected, int x); /** 获取字段f的偏移量 */ public native long objectFieldOffset(Field f); /** 获取静态field在对象中的偏移量 */ public native long staticFieldOffset(Field f);   例子1\n  AbstractQueuedSynchronizer类中用到CAS实现state值的更新\n  long stateOffset = unsafe.objectFieldOffset (AbstractQueuedSynchronizer.class.getDeclaredField(\u0026#34;state\u0026#34;)); // CAS方式修改state字段的值 protected final boolean compareAndSetState(int expect, int update) { return unsafe.compareAndSwapInt(this, stateOffset, expect, update); }  Unsafe提供给atomic原子类调用的方法  public final int getAndAddInt(Object o, long offset, int delta) { int v; do { // 获取内存中的值  v = getIntVolatile(o, offset); } while (!compareAndSwapInt(o, offset, v, v + delta)); return v; } public final long getAndAddLong(Object o, long offset, long delta) public final int getAndSetInt(Object o, long offset, int newValue) public final long getAndSetLong(Object o, long offset, long newValue) public final Object getAndSetObject(Object o, long offset, Object newValue) 此外，Unsafe类还基于这几个native方法封装了几个给atomic原子类调用的方法： 拿getAndAddInt分析，首先取内存中的值，然后执行CAS操作，如果成功则返回修改前的值； 如果取完内存值后执行CAS失败，比如被其他线程修改了值，则重新取内存中的值，继续CAS，直到成功， 如果竞争比较激烈，可能会循环次数过多；这里可以引申出乐观锁悲观锁的含义， 比如某个线程要对变量进行add操作，悲观锁认为期间一定会有其他线程修改变量，于是会在整个修改期间加锁，比如synchronized； 而乐观锁认为不会有其他线程修改变量，getAndAddInt正是乐观锁，用CAS代替锁，如果出现竞争，则用自旋的方式等待；  CAS在原子类中的应用—AtomicInteger为例  // AtomicInteger可以理解为在并发场景下基于CAS乐观锁实现了int共享变量更新的线程安全，常见方法如下 public final int getAndSet(int newValue) { return unsafe.getAndSetInt(this, valueOffset, newValue); } public final boolean compareAndSet(int expect, int update) { return unsafe.compareAndSwapInt(this, valueOffset, expect, update); } public final int getAndIncrement() { return unsafe.getAndAddInt(this, valueOffset, 1); } public final int getAndDecrement() { return unsafe.getAndAddInt(this, valueOffset, -1); }  CAS存在的问题    1:效率问题：前面提到，如果存在多个线程竞争，可能导致CAS失败，此时可能需要循环（自旋）执行CAS，竞争激烈情况下会对性能有一定影响；\n  2:ABA问题：CAS过程中其他线程把变量从A改成B，然后又改回A，CAS判断值没变于是执行更新操作，但事实上值是被修改了的，与设计原语不符，atomic包引入AtomicStampReference类解决ABA问题，每次变量更新的时候，将变量的版本号+1，之前的ABA问题中，变量经过两次操作以后，变量的版本号就会由1变成3，也就是说只要线程对变量进行过操作，变量的版本号就会发生更改，从而解决了ABA问题；但实际应用中ABA问题如果对业务逻辑不会造成影响，可以忽略\n  AQS #   AQS全称AbstractQueuedSynchronizer，即抽象的队列同步器，是一种用来构建锁和同步器的框架\n 基于AQS构建同步器 #   ReentrantLock Semaphore CountDownLatch ReentrantReadWriteLock SynchronusQueue FutureTask  优势 #   AQS 解决了在实现同步器时涉及的大量细节问题，例如自定义标准同步状态、FIFO 同步队列。 基于AQS来构建同步器可以带来很多好处。它不仅能够极大地减少实现工作，而且也不必处理在多个位置上发生的竞争问题。  AQS核心知识 #  AQS核心思想 #  如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。 如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制， 这个机制AQS是用CLH队列锁实现的，即将暂时获取不到锁的线程加入到队列中。如图所示  Sync queue： 同步队列，是一个双向列表。包括head节点和tail节点。head节点主要用作后续的调度   Condition queue： 非必须，单向列表。当程序中存在cindition的时候才会存在此列表  AQS设计思想 #   1:AQS使用一个int成员变量来表示同步状态 2:使用Node实现FIFO队列，可以用于构建锁或者其他同步装置 3:AQS资源共享方式：独占Exclusive（排它锁模式）和共享Share（共享锁模式）   AQS它的所有子类中，要么实现并使用了它的独占功能的api，要么使用了共享锁的功能，而不会同时使用两套api，即便是最有名的子类ReentrantReadWriteLock也是通过两个内部类读锁和写锁分别实现了两套api来实现的\n state状态 #    state状态使用volatile int类型的变量，表示当前同步状态。state的访问方式有三种\n  getState()\n  setState()\n  compareAndSetState()\n  AQS中Node常量含义 #   CANCELLED  waitStatus值为1时表示该线程节点已释放（超时、中断），已取消的节点不会再阻塞  SIGNAL  waitStatus为-1时表示该线程的后续线程需要阻塞，即只要前置节点释放锁，就会通知标识为 SIGNAL 状态的后续节点的线程  CONDITION  waitStatus为-2时，表示该线程在condition队列中阻塞（Condition有使用）  PROPAGATE  waitStatus为-3时，表示该线程以及后续线程进行无条件传播（CountDownLatch中有使用）共享模式下， PROPAGATE 状态的线程处于可运行状态  同步队列为什么称为FIFO呢？  因为只有前驱节点是head节点的节点才能被首先唤醒去进行同步状态的获取。当该节点获取到同步状态时，它会清除自己的值，将自己作为head节点，以便唤醒下一个节点  Condition队列 (单向队列)   Condition队列也是FIFO。调用ConditionObject.signal()方法，能够唤醒firstWaiter节点，将其添加到同步队列末尾\n 除了同步队列之外，AQS中还存在Condition队列，这是一个单向队列。调用ConditionObject.await()方法， 能够将当前线程封装成Node加入到Condition队列的末尾，然后将获取的同步状态释放（即修改同步状态的值，唤醒在同步队列中的线程）  自定义同步器的实现   在构建自定义同步器时，只需要依赖AQS底层再实现共享资源state的获取与释放操作即可。自定义同步器实现时主要实现以下几种方法：\n  isHeldExclusively()：该线程是否正在独占资源。只有用到condition才需要去实现它。 tryAcquire(int)：独占方式。尝试获取资源，成功则返回true，失败则返回false。 tryRelease(int)：独占方式。尝试释放资源，成功则返回true，失败则返回false。 tryAcquireShared(int)：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。 tryReleaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false  AQS实现细节 #   线程首先尝试获取锁，如果失败就将当前线程及等待状态等信息包装成一个node节点加入到FIFO队列中。 接着会不断的循环尝试获取锁，条件是当前节点为head的直接后继才会尝试。如果失败就会阻塞自己直到自己被唤醒。而当持有锁的线程释放锁的时候，会唤醒队列中的后继线程。\n 独占模式下的AQS #   所谓独占模式，即只允许一个线程获取同步状态，当这个线程还没有释放同步状态时，其他线程是获取不了的，只能加入到同步队列，进行等待   很明显，我们可以将state的初始值设为0，表示空闲。当一个线程获取到同步状态时，利用CAS操作让state加1，表示非空闲，那么其他线程就只能等待了。释放同步状态时，不需要CAS操作，因为独占模式下只有一个线程能获取到同步状态。ReentrantLock、CyclicBarrier正是基于此设计的\n  例如,ReentrantLock，state初始化为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1    独占模式下的AQS是不响应中断的，指的是加入到同步队列中的线程，如果因为中断而被唤醒的话，不会立即返回，并且抛出InterruptedException。而是再次去判断其前驱节点是否为head节点，决定是否争抢同步状态。如果其前驱节点不是head节点或者争抢同步状态失败，那么再次挂起\n  独占模式获取资源-acquire方法\n  acquire以独占exclusive方式获取资源。如果获取到资源，线程直接返回，否则进入等待队列，直到获取到资源为止，且整个过程忽略中断的影响。源码如下\n  public final void acquire(int arg) { if (!tryAcquire(arg) \u0026amp;\u0026amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) selfInterrupt(); }  流程图    调用自定义同步器的tryAcquire()尝试直接去获取资源，如果成功则直接返回；\n  没成功，则addWaiter()将该线程加入等待队列的尾部，并标记为独占模式；\n  acquireQueued()使线程在等待队列中休息，有机会时（轮到自己，会被unpark()）会去尝试获取资源。获取到资源后才返回。如果在整个等待过程中被中断过，则返回true，否则返回false。\n  如果线程在等待过程中被中断过，它是不响应的。只是获取资源后才再进行自我中断selfInterrupt()，将中断补上\n  独占模式获取资源-tryAcquire方法\n  tryAcquire尝试以独占的方式获取资源，如果获取成功，则直接返回true，否则直接返回false，且具体实现由自定义AQS的同步器实现的\n  protected boolean tryAcquire(int arg) { throw new UnsupportedOperationException(); }   独占模式获取资源-addWaiter方法\n  根据不同模式(Node.EXCLUSIVE互斥模式、Node.SHARED共享模式)创建结点并以CAS的方式将当前线程节点加入到不为空的等待队列的末尾(通过compareAndSetTail()方法)。如果队列为空，通过enq(node)方法初始化一个等待队列，并返回当前节点\n  /** * 参数 * @param mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared * 返回值 * @return the new node */ private Node addWaiter(Node mode) { //将当前线程以指定的模式创建节点node  Node node = new Node(Thread.currentThread(), mode); // Try the fast path of enq; backup to full enq on failure  // 获取当前同队列的尾节点  Node pred = tail; //队列不为空，将新的node加入等待队列中  if (pred != null) { node.prev = pred; //CAS方式将当前节点尾插入队列中  if (compareAndSetTail(pred, node)) { pred.next = node; return node; } } //当队列为empty或者CAS失败时会调用enq方法处理  enq(node); return node; }  其中，队列为empty，使用enq(node)处理，将当前节点插入等待队列，如果队列为空，则初始化当前队列。所有操作都是CAS自旋的方式进行，直到成功加入队尾为止  private Node enq(final Node node) { //不断自旋  for (;;) { Node t = tail; //当前队列为empty  if (t == null) { // Must initialize  //完成队列初始化操作，头结点中不放数据，只是作为起始标记，lazy-load，在第一次用的时候new  if (compareAndSetHead(new Node())) tail = head; } else { node.prev = t; //不断将当前节点使用CAS尾插入队列中直到成功为止  if (compareAndSetTail(t, node)) { t.next = node; return t; } } } } }   独占模式获取资源-acquireQueued方法\n  acquireQueued用于已在队列中的线程以独占且不间断模式获取state状态，直到获取锁后返回。主要流程:\n  结点node进入队列尾部后，检查状态；\n  调用park()进入waiting状态，等待unpark()或interrupt()唤醒；\n   final boolean acquireQueued ( final Node node, int arg) { //是否已获取锁的标志，默认为true 即为尚未  boolean failed = true; try { boolean interrupted = false;//等待中是否被中断过的标记  for (;;) { final Node p = node.predecessor(); //获取前节点  // 如果当前节点已经成为头结点，尝试获取锁（tryAcquire）成功，然后返回 if (p == head \u0026amp;\u0026amp; tryAcquire(arg)) { setHead(node); p.next = null;  help GC failed = false; return interrupted; } shouldParkAfterFailedAcquire根据对当前节点的前一个节点的状态进行判断，对当前节点做出不同的操作 parkAndCheckInterrupt让线程进入等待状态，并检查当前线程是否被可以被中断 if (shouldParkAfterFailedAcquire(p, node) \u0026amp;\u0026amp; parkAndCheckInterrupt()) interrupted = true; } } finally { //将当前节点设置为取消状态；取消状态设置为1 if (failed) cancelAcquire(node); } }  }   独占模式释放资源-release方法\n  release方法是独占exclusive模式下线程释放共享资源的锁。它会调用tryRelease()释放同步资源，如果全部释放了同步状态为空闲（即state=0）,当同步状态为空闲时，它会唤醒等待队列里的其他线程来获取资源。这也正是unlock()的语义，当然不仅仅只限于unlock()\n  public final boolean release(int arg) { if (tryRelease(arg)) { Node h = head; if (h != null \u0026amp;\u0026amp; h.waitStatus != 0) unparkSuccessor(h); return true; } return false; }   独占模式释放资源-tryRelease方法\n  tryRelease()跟tryAcquire()一样实现都是由自定义定时器以独占exclusive模式实现的。因为其是独占模式，不需要考虑线程安全的问题去释放共享资源，直接减掉相应量的资源即可(state-=arg)。而且tryRelease()的返回值代表着该线程是否已经完成资源的释放，因此在自定义同步器的tryRelease()时，需要明确这条件，当已经彻底释放资源(state=0)，要返回true，否则返回false\n  protected boolean tryRelease(int arg) { throw new UnsupportedOperationException(); }  ReentrantReadWriteLock的实现  protected final boolean tryRelease(int releases) { if (!isHeldExclusively()) throw new IllegalMonitorStateException(); //减掉相应量的资源(state-=arg)  int nextc = getState() - releases; //是否完全释放资源  boolean free = exclusiveCount(nextc) == 0; if (free) setExclusiveOwnerThread(null); setState(nextc); return free; }   独占模式释放资源-unparkSuccessor\n  unparkSuccessor用unpark()唤醒等待队列中最前驱的那个未放弃线程，此线程并不一定是当前节点的next节点，而是下一个可以用来唤醒的线程，如果这个节点存在，调用unpark()方法唤醒\n  private void unparkSuccessor(Node node) { //当前线程所在的结点node  int ws = node.waitStatus; //置零当前线程所在的结点状态，允许失败  if (ws \u0026lt; 0) compareAndSetWaitStatus(node, ws, 0); //找到下一个需要唤醒的结点  Node s = node.next; if (s == null || s.waitStatus \u0026gt; 0) { s = null; // 从后向前找  for (Node t = tail; t != null \u0026amp;\u0026amp; t != node; t = t.prev) //从这里可以看出，\u0026lt;=0的结点，都是还有效的结点  if (t.waitStatus \u0026lt;= 0) s = t; } if (s != null) //唤醒  LockSupport.unpark(s.thread); }   共享模式下的AQS\n  共享模式，当然是允许多个线程同时获取到同步状态,共享模式下的AQS也是不响应中断的\n   很明显，我们可以将state的初始值设为N（N \u0026gt; 0），表示空闲。每当一个线程获取到同步状态时，就利用CAS操作让state减1，直到减到0表示非空闲，其他线程就只能加入到同步队列，进行等待。释放同步状态时，需要CAS操作，因为共享模式下，有多个线程能获取到同步状态。CountDownLatch、Semaphore正是基于此设计的\n  例如，CountDownLatch，任务分为N个子线程去执行，同步状态state也初始化为N（注意N要与线程个数一致）:     共享模式获取资源-acquireShared方法\n  acquireShared在共享模式下线程获取共享资源的顶层入口。它会获取指定量的资源，获取成功则直接返回，获取失败则进入等待队列，直到获取到资源为止，整个过程忽略中断\n  public final void acquireShared(int arg) { if (tryAcquireShared(arg) \u0026lt; 0) doAcquireShared(arg); }   流程：\n  先通过tryAcquireShared()尝试获取资源，成功则直接返回；\n  失败则通过doAcquireShared()中的park()进入等待队列，直到被unpark()/interrupt()并成功获取到资源才返回(整个等待过程也是忽略中断响应)。\n  共享模式获取资源-tryAcquireShared方法\n  tryAcquireShared()跟独占模式获取资源方法一样实现都是由自定义同步器去实现。但AQS规范中已定义好tryAcquireShared()的返回值：\n   负值代表获取失败； 0代表获取成功，但没有剩余资源；   正数表示获取成功，还有剩余资源，其他线程还可以去获取。  protected int tryAcquireShared(int arg) { throw new UnsupportedOperationException(); }   共享模式获取资源-doAcquireShared方法\n  doAcquireShared()用于将当前线程加入等待队列尾部休息，直到其他线程释放资源唤醒自己，自己成功拿到相应量的资源后才返回\n  private void doAcquireShared(int arg) { //加入队列尾部  final Node node = addWaiter(Node.SHARED); //是否成功标志  boolean failed = true; try { //等待过程中是否被中断过的标志  boolean interrupted = false; for (;;) { final Node p = node.predecessor();//获取前驱节点  if (p == head) {//如果到head的下一个，因为head是拿到资源的线程，此时node被唤醒，很可能是head用完资源来唤醒自己的  int r = tryAcquireShared(arg);//尝试获取资源  if (r \u0026gt;= 0) {//成功  setHeadAndPropagate(node, r);//将head指向自己，还有剩余资源可以再唤醒之后的线程  p.next = null; // help GC  if (interrupted)//如果等待过程中被打断过，此时将中断补上。  selfInterrupt(); failed = false; return; } } //判断状态，队列寻找一个适合位置，进入waiting状态，等着被unpark()或interrupt()  if (shouldParkAfterFailedAcquire(p, node) \u0026amp;\u0026amp; parkAndCheckInterrupt()) interrupted = true; } } finally { if (failed) cancelAcquire(node); } }   共享模式释放资源-releaseShared方法\n  releaseShared()用于共享模式下线程释放共享资源，释放指定量的资源，如果成功释放且允许唤醒等待线程，它会唤醒等待队列里的其他线程来获取资源\n  public final boolean releaseShared(int arg) { //尝试释放资源  if (tryReleaseShared(arg)) { //唤醒后继结点  doReleaseShared(); return true; } return false; }  独占模式下的tryRelease()在完全释放掉资源（state=0）后，才会返回true去唤醒其他线程，这主要是基于独占下可重入的考量；而共享模式下的releaseShared()则没有这种要求，共享模式实质就是控制一定量的线程并发执行，那么拥有资源的线程在释放掉部分资源时就可以唤醒后继等待结点。\n   共享模式释放资源-doReleaseShared方法\n  doReleaseShared()主要用于唤醒后继节点线程,当state为正数，去获取剩余共享资源；当state=0时去获取共享资源\n  private void doReleaseShared() { for (;;) { Node h = head; if (h != null \u0026amp;\u0026amp; h != tail) { int ws = h.waitStatus; if (ws == Node.SIGNAL) { if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0)) continue; //唤醒后继  unparkSuccessor(h); } else if (ws == 0 \u0026amp;\u0026amp; !compareAndSetWaitStatus(h, 0, Node.PROPAGATE)) continue; } // head发生变化  if (h == head) break; } } 其它 #  同步术语 #    volatile类型的变量\n  显示锁 Explicit Lock\n  原子变量\n  synchronized #    synchronized是Java中的关键字 用来修饰方法、对象实例。属于独占锁、悲观锁、 可重入锁、非公平锁。\n  1.作用于实例方法时，锁住的是对象的实例(this)；\n  2.当作用于静态方法时，锁住的是 Class类，相当于类的一个全局锁，会锁所有调用该方法的线程；\n  3.synchronized 作用于一个非 NULL的对象实例时，锁住的是所有以该对象为锁的代码块。 它有多个队列，当多个线程一起访问某个对象监视器的时候，对象监视器会将这些线程存储在不同的容器中。\n  每个对象都有个 monitor 对象， 加锁就是在竞争 monitor 对象，代码块加锁是在代码块前后分别加上 monitorenter 和 monitorexit 指令来实现的，方法加锁是通过一个标记位来判断的。\n  Lock和synchronized的区别 #  Lock： 是Java中的接口，可重入锁、悲观锁、独占锁、互斥锁、同步锁。 #   1.Lock需要手动获取锁和释放锁。就好比自动挡和手动挡的区别 2.Lock 是一个接口，而 synchronized 是 Java 中的关键字 synchronized 是内置的语言实现。 3.synchronized 在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而 Lock 在发生异常时，如果没有主动通过 unLock()去释放锁，则很可能造成死锁现象，因此使用 Lock 时需要在 finally 块中释放锁。 4.Lock 可以让等待锁的线程响应中断，而 synchronized 却不行，使用synchronized 时，等待的线程会一直等待下去，不能够响应中断。 5.通过 Lock 可以知道有没有成功获取锁，而 synchronized 却无法办到。 6.Lock 可以通过实现读写锁提高多个线程进行读操作的效率。  synchronized的优势： #   足够清晰简单，只需要基础的同步功能时，用synchronized。 Lock应该确保在finally块中释放锁。如果使用synchronized，JVM确保即 使出现异常，锁也能被自动释放。 使用Lock时，Java虚拟机很难得知哪些锁对象是由特定线程锁持有的。  ReentrantLock 和synchronized的区别 #   ReentrantLock是Java中的类 ： 继承了Lock类，可重入锁、悲观锁、独占锁、互斥锁、同步锁。  相同点 #   1.主要解决共享变量如何安全访问的问题 2.都是可重入锁，也叫做递归锁，同一线程可以多次获得同一个锁， 3.保证了线程安全的两大特性：可见性、原子性。  不同点 #   1.ReentrantLock 就像手动汽车，需要显示的调用lock和unlock方法，synchronized 隐式获得释放锁。 2.ReentrantLock 可响应中断， synchronized 是不可以响应中断的，ReentrantLock 为处理锁的不可用性提供了更高的灵活性 3.ReentrantLock 是 API 级别的， synchronized 是 JVM 级别的 4.ReentrantLock 可以实现公平锁、非公平锁，默认非公平锁，synchronized 是非公平锁，且不可更改。 5.ReentrantLock 通过 Condition 可以绑定多个条件  "});index.add({'id':61,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/iqcs36rgjy/j74dbsrtzw/','title':"我无所畏惧，因为",'section':"人际剖析",'content':"我无所畏惧，因为 #  "});index.add({'id':62,'href':'/life/docs/databases/','title':" 数据库",'section':"Docs",'content':" 数据库，简而言之可视为电子化的文件柜——存储电子文件的处所，用户可以对文件中的数据进行新增、查询、更新、删除等操作。\n 目录 #   数据库基础  1.1-认识MySQL 1.2-轻松安装MySQL 1.3-MySQL数据库连接 1.4-SQL语言入门 1.5-认识DBA   MySQL数据库对象与应用  2.1-MySQL数据类型 2.2-MySQL数据对象 2.3-MySQL权限管理 2.4-SQL语言进阶 2.5-内置函数 2.6-触发器与存储过程 2.7-MySQL字符集 2.8程序连接MySQL 2.9-DAO框架的使用   MySQL事务与存储引擎  3.1-数据库事务 3.2-存储引擎概述 3.3-InnoDB存储引擎 3.4-InnoDB事务锁   MySQL应用优化  4.1-MySQL索引优化与设计 4.2-MySQL数据库设计 4.3-MySQL容量评估 4.4-MySQL性能测试   MySQL运维实践  5.1-MySQL日志系统 5.2-MySQL数据备份 5.3-MySQL数据恢复 5.4-MySQL线上部署 5.5-MySQL主从复制 5.6-MySQL日常运维 5.7-MySQL参数调优    "});index.add({'id':63,'href':'/life/docs/operating_system/one_chapter/1_2_/','title':"操作系统的特征",'section':"第一章 操作系统概述 ",'content':"一:知识总览 #  二:分类描述 #   1:操作系统的特征——并发   2:操作系统的特征——共享   3:操作系统的特征——并发和共享的关系   4:操作系统的特征——虚拟   5:操作系统的特征——异步   总结  "});index.add({'id':64,'href':'/life/docs/computer_network/network_architecture/1.1.2%E6%A0%87%E5%87%86%E5%8C%96%E5%B7%A5%E4%BD%9C%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%BB%84%E7%BB%87/','title':"标准的分类",'section':"网络体系结构",'content':"标准的分类 #  法定标准 #   由权威机构制定的正式的、合法的标准 OSI  事实标准 #   某些公司的产品在竞争中占据了主流 ， TCP/IP 时间长了，这些产品中的协议和技术就成了标准  RFC #    因特网标准的形式 (4个阶段)\n  1:因特网草案\n  2:建议标准\n  3:草案标准\n  4:因特网标准\n  国际标准化组织 ISO (最重要) #  国际电信联盟 ITU #  国际电气电子工程协会 IEEE #  "});index.add({'id':65,'href':'/life/docs/operating_system/two_chapter/2_1_2/','title':"进程的状态与转换",'section':"第二章 进程管理 ",'content':""});index.add({'id':66,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/gsmgajphs7/','title':"看书看到大脑疲劳以后，应如何快速恢复大脑状态",'section':"自我提升",'content':" 看书看到大脑疲劳以后，应如何快速恢复大脑状态  参考1 #   很多工作狂人都希望能够不浪费生命里的每一分钟，但从神经生物学的角度这是不实际的，就和CPU在高速运转时会发热一样，大脑在学习思考的时候也会产生大量的代谢废物，这些有害的蛋白如果不被及时清理，想要继续高效工作就很困难，而脑脊液会在大脑中循环，通过和脑间液交换物质，把废物带走，但是这个过程在清醒时并不快，睡眠时会清理得更快\n   一些可行的建议\n  运动 有研究表明，运动会促进大脑和外围组织发生细胞自噬，就是说，运动可以促进神经元自己把废物给吞掉，然后降解，所以你可以在学习疲劳后运动一会儿再接着学习。\n  睡觉 之前说了，睡觉时清除代谢废物的速度是比醒着的时候快的，所以你可以小睡一会儿再接着学习。\n  营养 大脑是一个非常昂贵的器官，消耗大量能量，所以保证充足的营养也是高效学习的一个基本条件。\n  咖啡及类似的提高神经系统兴奋性的药物 咖啡因和腺嘌呤核苷类似，都可以和腺嘌呤核苷受体结合，而当腺嘌呤核苷与它的受体结合后可以减缓神经细胞的活动，一般在睡眠时两者结合。咖啡因与腺嘌呤核苷受体结合后不促使细胞活动降低，相反地，它阻止腺嘌呤核苷与它的接受器结合，其结果是神经细胞活动增高。不过它的作用很短暂，而且会对腺嘌呤核苷更加敏感，也就会越来越困，并不是持久之计。\n  参考2 #   大脑一直刻意地紧着一根弦看书，很累，并并不是专注地读书时进入的精神内敛的状态，用坏脑子，用坏眼睛。而大脑疲惫的时候，是需要通过脑脊液冲刷掉有害蛋白，去修复大脑\n 最常用的办法就是呼吸和冥想 ，我记得最重要的事：呼吸是正念的矛，不要评判自己，不要过度批判自己。\n静坐，步行冥想，这是解决自动运行状态的，仔细感受脚底与地面接触的感觉，试着感受走路身体的每一位的感觉，这种将注意力集中在自己身体每个部位，给自己做的每个动作贴标签，这是一种非常简单的脱离自动驾驶的办法，如果你要想养成一个习惯，给自己一个板机，我一洗澡就要睡觉，一戴上手表就学习，这是一种非常重要的办法\n学会睡觉，就寝和睡觉的时间要确定\n上床之前把一天的担心写在纸上，不然要一直记在心里，可以轻松很多\n早上起来要晒太阳，会很大程度解决你的疲劳感，中午可以睡觉，不要超过半小时，不然会进入深度睡眠区\n避免睡前一小时吃东西，不要在床上看手机看电脑，要让大脑记住床是睡觉的地方\n心里很烦睡不着觉，慈悲心正念能够有效地给变你跟别人的关系，先呼吸十分钟，想象自己要关心的人的对象，注意的感觉，感受你的心跳加速，希望你能避开风险，希望你幸福安心，希望你健健康康，你需要更多地观爱，这个办法很有效地放松大脑，有效地释放善意很有办法\n疲劳会以缺乏善意的方式来表现\n学会接触大自然，能够把自己从日常工作学习中解放出来，接触非人工产物\n接触美的事物\n压力呼吸化法。这是消解焦虑很好的办法。内心的反映，身体的变化，用一句话来描述压力的成因。像平常一样把注意力集中在呼吸上，你试着把集中在呼吸上的扩散出来，想象自己身体每个部位呼吸，无精打采，你的身体会撞到平常不会撞的地方，注意力不集中，治疗身体疲劳，终究是大脑和内心的恶问题\n参考\n"});index.add({'id':67,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/hw2jindwcd/','title':"100篇锻炼口才表达能力的绕口令（精选版）",'section':"自信",'content':"1、初入江湖：化肥会挥发\n2、小有名气：黑化肥发灰，灰化肥发黑\n3、名动一方：黑化肥发灰会挥发；灰化肥挥发会发黑\n4、天下闻名：黑化肥挥发发灰会花飞；灰化肥挥发发黑会飞花\n5、一代宗师：黑灰化肥会挥发发灰黑讳为花飞；灰黑化肥会挥发发黑灰为讳飞花\n6、超凡入圣：黑灰化肥灰会挥发发灰黑讳为黑灰花会飞；灰黑化肥会会挥发发黑灰为讳飞花化为灰　7、天外飞仙：黑化黑灰化肥灰会挥发发灰黑讳为黑灰花会回飞；灰化灰黑化肥会会挥发发黑灰为讳飞花回化为灰\n8、喇嘛和哑巴\n打南边来了个喇嘛，手里提拉着五斤鳎(tǎ) 目。打北边来了个哑巴，腰里别着个喇叭。\n南边提拉着鳎目的喇嘛要拿鳎目换北边别喇叭哑巴的喇叭。\n哑巴不愿意拿喇叭换喇嘛的鳎目，喇嘛非要换别喇叭哑巴的喇叭。\n喇嘛抡起鳎目抽了别喇叭哑巴一鳎目，哑巴摘下喇叭打了提拉着鳎目的喇嘛一喇叭。也不知是提拉着鳎目的喇嘛抽了别喇叭哑巴一鳎目，还是别喇叭哑巴打了提拉着鳎目的喇嘛一喇叭。\n喇嘛炖鳎目，哑巴嘀嘀哒哒吹喇叭。\n9、六十六头牛\n六十六岁的陆老头，盖了六十六间楼，买了六十六篓油，养了六十六头牛，栽了六十六棵垂杨柳。\n六十六篓油，堆在六十六间楼；六十六头牛，扣在六十六棵垂杨柳。\n忽然一阵狂风起，吹倒了六十六间楼，翻倒了六十六篓油，折断了六十六棵垂杨柳，砸死了六十六头牛，急煞了六十六岁的陆老头。\n10、老六放牛\n柳林镇有个六号楼，刘老六住在六号楼。\n有一天，来了牛老六，牵了六只猴；来了侯老六，拉了六头牛；来了仇老六，提了六篓油；来了尤老六，背了六匹绸。\n牛老六、侯老六、仇老六、尤老六，住上刘老六的六号楼，半夜里，牛抵猴，猴斗牛，撞倒了仇老六的油，油坏了尤老六的绸。\n牛老六帮仇老六收起油，侯老六帮尤老六洗掉绸上油，拴好牛，看好猴，一同上楼去喝酒。\n11、天上七颗星\n天上七颗星，地上七块冰，台上七盏灯，树上七只莺，墙上七枚钉。\n吭唷吭唷拔脱七枚钉。喔嘘喔嘘赶走七只莺。乒乒乓乓踏坏七块冰。一阵风来吹来七盏灯。一片乌云遮掉七颗星。\n12、连念七遍就聪明\n天上七颗星，地下七块冰，树上七只鹰，梁上七根钉，台上七盏灯。\n呼噜呼噜扇灭七盏灯，噯唷噯唷拔掉七根钉，呀嘘呀嘘赶走七只鹰，抬起一脚踢碎七块冰，飞来乌云盖没七颗星。一连念七遍就聪明。\n13、司小四和史小世\n司小四和史小世，四月十四日十四时四十上集市，司小四买了四十四斤四两西红柿，史小世买了十四斤四两细蚕丝。\n司小四要拿四十四斤四两西红柿换史小世十四斤四两细蚕丝。\n史小世十四斤四两细蚕丝不换司小四四十四斤四两西红柿。\n司小四说我四十四斤四两西红柿可以增加营养防近视，\n史小世说我十四斤四两细蚕丝可以织绸织缎又抽丝。\n14、酸枣子\n山上住着三老子，山下住着三小子，山腰住着三哥三嫂子。\n山下三小子，找山腰三哥三嫂子，借三斗三升酸枣子，\n山腰三哥三嫂子，借给山下三小子三斗三升酸枣子。\n山下三小子，又找山上三老子，借三斗三升酸枣子，\n山上三老子，还没有三斗三升酸枣子，\n只好到山腰找三哥三嫂子，给山下三小子借了三斗三升酸枣子。\n过年山下三小子打下酸枣子，还了山腰三哥三嫂子，两个三斗三升酸枣子。\n15、墙上一根钉\n墙上一根钉，钉上挂条绳，绳下吊个瓶，瓶下放盏灯。\n掉下墙上钉，脱掉钉上绳。滑落绳下瓶，打碎瓶下灯。\n瓶打灯，灯打瓶，瓶说灯，灯骂绳，瓶说绳，绳说钉，丁丁当当，乒乓乓乓。\n16、板凳与扁担\n板凳宽，扁担长。\n扁担没有板凳宽，\n板凳没有扁担长。\n扁担在绑在板凳上，\n板凳不让扁担绑在板凳上，\n扁担偏要扁担绑在板凳上。\n17、白老八\n白老八门前栽了八颗白果树，\n从北边飞来了八个白八哥儿不知在哪住。\n白老八拿了八个巴达棍儿要打八个白八哥儿，\n八个八哥儿飞上了八颗白果树，\n不知道白老八拿这八个巴达棍儿打着了八个白八哥儿，\n还是打着了八颗白果树。\n18、鹅和鸽\n天上一群大白鸽，河里一群大白鹅。\n白鸽尖尖红嘴壳，白鹅曲项向天歌。\n白鸽剪开云朵朵，白鹅拨开浪波波。\n鸽乐呵呵，鹅活泼波，\n白鹅白鸽碧波男天真快乐。\n19、水连天\n天连水，水连天，\n水天一色望无边，\n蓝蓝的天似绿水，\n绿绿的水如蓝天。\n到底是天连水，\n还是水连天？\n20、买菜\n小艾和小戴，一起去买菜。\n小艾把一斤菜给小戴，\n小戴有比小艾多一倍的菜；\n小戴把一斤菜给小艾，\n小艾、小戴就有一般多的菜。\n21、猫鼻子\n白猫黑鼻子，\n黑猫白鼻子；\n黑猫的白鼻子，\n碰破了白猫黑鼻子\n白猫的黑鼻子破了\n剥了秕谷壳儿补鼻子；\n黑猫的白鼻子不破\n不剥秕谷壳儿补鼻子。\n22、倒吊鸟\n梁上两对倒吊鸟，\n泥里两对鸟倒吊。\n可怜梁上的两对倒吊鸟，\n惦着泥里的两对鸟倒吊，\n可怜泥里的两对鸟倒吊，\n也惦着梁上的两对倒吊鸟。\n23、兜装豆\n兜里装豆，\n豆装满兜，\n兜破漏豆。\n倒出豆，补破兜，\n补好兜，又装豆，\n装满兜，不漏豆。\n24、两只鹅\n河边两只鹅，\n一同过了河；\n白鹅去拾草，\n黑鹅来搭窝。\n冬天北风刮，\n草窝真暖和，\n住在草窝里，\n哦哦唱支歌。\n25、四个头\n天上有日头，\n地下有石头，\n嘴里有舌头，\n瓶口有塞头。\n天上是日头不是石头，\n地下是石头不是日头，\n嘴里是舌头不是塞头，\n瓶中是塞头不是舌头。\n26、一个人\n这边一个人，\n挑了一挑瓶。\n那边一个人，\n担了一挑盆。\n瓶碰烂了盆，\n盆碰烂了瓶。\n卖瓶买盆来赔盆，\n卖盆买瓶来赔瓶。\n瓶不能赔盆，\n盆不能赔瓶。\n27、一场空\n抬头看，满天星，\n低头看，一道坑。\n坑里看，栽满葱，\n葱上看，冻着冰。\n屋里看，点着灯，\n墙上看，钉的钉。\n钉上看，挂的弓，\n弓上看，卧的鹰。\n寒冬天，刮大风，\n刮散了，满天星。\n28、学捏梨\n盘里放着一个梨，\n桌上放块橡皮泥。\n小丽用泥学捏梨，\n眼看着梨手捏泥，\n比比，真梨、假梨差不离。\n29、小花鼓\n一面小花鼓，\n鼓上画老虎。\n妈妈用布来补。\n到底是布补鼓，\n还是布补虎。\n30、分果果\n多多和哥哥，\n坐下分果果。\n哥哥让多多，\n多多让哥哥。\n都说要小个，\n外婆乐呵呵。\n31、嘴和腿\n嘴说腿，腿说嘴，\n嘴说腿爱跑腿，\n腿说嘴爱卖嘴。\n光动嘴不动腿，\n光动腿不动嘴，\n不如不长腿和嘴。\n32、瓦打马\n路上跑来马，\n撞上路边瓦，\n瓦打坏马，\n马踏碎瓦，\n瓦要马赔瓦，\n马要瓦赔马。\n33、画葫芦\n胡图用笔画葫芦，\n葫芦画得真糊涂，\n糊涂不能算葫芦，\n要画葫芦不糊涂，\n胡图决心不糊涂，\n画出一只大葫芦。\n34、好孩子\n张家有个小英子，\n王家有个小柱子。\n张家的小英子，\n自己穿衣洗袜子，\n天天扫地擦桌子，\n王家的小柱子，\n捡到一只皮夹子，\n还给后院大婶子。\n小英子，小柱子，\n他们都是好孩子。\n35、小牛赔油\n小牛放学去打球，\n踢倒老刘一瓶油，\n小牛回家取来油，\n向老刘道歉又赔油\n老刘不要小牛还油\n小牛硬要把油还给老刘，\n老刘夸小牛，\n小牛直摇头，\n你猜老刘让小牛还油，\n还是不让小牛还油。\n36、秃丫头\n从南来了个秃丫头\n胳膊上挎着个破笆斗，\n里头有堆羊骨头，\n伸手拿骨头，\n送在口里啃骨头。\n地下有块破砖头，\n绊倒了秃丫头，\n撒了羊骨头。\n37、补裤\n一块土粗布，\n一条粗布裤，\n哥哥屋里补布裤，\n飞针走线自己做。\n粗布裤上补粗布，\n土粗布补粗布裤，\n哥哥穿上粗布裤，\n艰苦朴素牢记住。\n38、藤绳挂风灯\n藤绳挂风灯，\n风更猛，\n风更增，\n灯碰藤绳藤碰灯。\n39、鸟和猫\n树上一只鸟，\n地上一只猫。\n地上的猫想咬树上的鸟，\n树上的鸟想啄猫的毛。\n40、送花\n华华有两朵红花\n红红有两朵黄花\n华华想要黄花，\n红红想要红花，\n华华送给红红一朵红花，\n红红送给华华一朵黄花。\n41、颠倒歌\n咬牛奶，喝面包，\n夹着火车上皮包。\n东西街，南北走，\n出门看见人咬狗。\n拿起狗来打砖头，\n又怕砖头咬我手。\n42、狗与猴\n树上卧只猴，\n树下蹲条狗。\n猴跳下来撞了狗，\n狗翻起来咬住猴，\n不知是猴咬狗，\n还是狗咬猴。\n43、白家伯伯\n北贫坡上白家有个伯伯，\n家里养着一百八十八只白鹅，\n门口种着一百八十八棵白果，\n树上住着一百八十八只八哥。\n八哥在白果树上吃白果，\n白鹅气得直叫：我饿！我饿！\n44、白石搭\n白石白又滑，\n搬来白石搭白塔。\n白石塔，\n白石塔，\n白石搭石塔，\n白塔白石搭。\n搭好白石塔，\n白塔白又滑。\n45、青龙洞\n青龙洞中龙做梦，\n青龙做梦出龙洞，\n做了千年万载梦，\n龙洞困龙在深洞。\n自从来了新愚公，\n愚公捅开青龙洞，\n青龙洞中涌出龙，\n龙去农田做农工。\n46、煤和灰\n东边一堆煤，\n西边一堆灰。\n先用车推煤，\n再用车推灰。\n烧煤变成灰，\n煤灰来自煤。\n煤堆变灰堆，\n灰堆赛煤堆。\n有煤就有灰，\n你说对不对？\n47、羊和狼\n东边来了一只小山羊，\n西边来了一只大灰狼，\n一起走到小桥上，\n小山羊不让大灰狼\n大灰狼不让小山羊\n小山羊叫大灰狼让小山羊，\n大灰狼叫小山羊让大灰狼，\n羊不让狼，\n狼不让羊，\n扑通一起掉到河中央。\n48、汤烫塔\n老唐端蛋汤，\n踏凳登宝塔，\n只因凳太滑，\n汤洒汤烫塔。\n49、小道上\n小王的姜撞翻老杨的缸，\n老杨的缸碰倒小王的姜。\n小王放下姜去扶老杨的缸，\n老杨放下缸去帮小王装姜。\n50、看豆豆\n小妞妞围个圆兜兜\n牛头沟边看豆豆，\n忽听沟前喊抓牛，\n妞妞怕牛牛踩豆豆\n紧紧抓住牛牛不松手。\n51、白果树\n我从伯伯门前过，\n看见伯爹伯妈门前种着白果树，\n白果树上站着百十百个白斑鸠，\n我就拣了百十百块白石头，\n打那百十百个白斑鸠。\n52、麻字谣\n麻家爷爷挑着一对麻叉口，\n走到麻家婆婆的家门口。\n麻家婆婆的一对麻花狗，\n咬破了麻家爷爷的麻叉口。\n麻家婆婆拿来麻针、麻线，\n来补麻家爷爷的麻叉口。\n53、盆和瓶\n桌上放个盆，\n盆里有个瓶，\n砰砰啪啪，\n啪啪砰砰，\n不知是瓶碰盆，\n还是盆碰瓶。\n54、老鼠嗅着油豆香\n油一缸，豆一筐，\n老鼠嗅着油豆香。\n爬上缸，跳进筐，\n偷油偷豆两头忙。\n又高兴，又慌张，\n脚一滑，身一晃，\n“扑通”一声跌进缸。\n55、造房子\n捡颗方石子，\n在地上画个方格子\n画好了格子造房子\n画个大方格子造个大房子，\n画个小方格子造个小房子，\n楼上的房子分给鸽子，\n楼下的房子分给小兔子。\n56、鹅过河\n哥哥弟弟坡前坐，\n坡上卧着一只鹅，\n坡下流着一条河，\n哥哥说：宽宽的河，\n弟弟说：白白的鹅。\n鹅要过河，\n河要渡鹅。\n不知是鹅过河，\n还是河渡鹅\n57、画狮子\n有个好孩子，\n拿张图画纸，\n来到石院子，\n学画石狮子。\n一天来画一次石狮子，\n十天来画十次石狮子。\n次次画石狮子，\n天天画石狮子，\n死狮子画成了“活狮子”。\n58、捉壁虎\n李虎捉壁虎，\n本是虎捉虎，\n李虎满屋转，\n壁虎不敢咬李虎，\n李虎也捉不住壁虎。\n59、比锤\n炉东有个锤快锤，\n炉西有个锤锤快，\n两人炉前来比赛，\n不知是锤快锤比锤锤快锤得快？\n还是锤锤快比锤快锤锤得快？\n60、换斑竹\n斑竹林里头有干斑竹，\n包谷林里头有干包谷。\n潘家三虎走进包谷林，\n掰了一担干包谷，\n回家路过斑竹林，\n换了三根干斑竹。\n61、斗放豆\n黑豆放在黑豆里，\n黑豆里边放黑豆，\n黑豆放黑豆，\n黑豆放黑豆，\n不知黑豆放黑豆，\n还是黑豆放黑豆。\n62、石榴树上结辣椒\n颠倒话，话颠倒，\n石榴树上结辣椒。\n东西大路南北走，\n碰见兔子去咬狗。\n拿住狗，打砖头，\n砖头咬住我的手。\n63、碰碰车\n碰碰车，车碰碰，\n坐着朋朋和平平。\n平平开车碰朋朋，\n朋朋开车碰平平，\n不知是平平碰朋朋，\n还是朋朋碰平平。\n64、小猪\n小猪扛锄头，\n吭哧吭哧走。\n小鸟唱枝头，\n小猪扭头瞅，\n锄头撞石头，\n石头砸猪头。\n小猪怨锄头，\n锄头怨猪头。\n65、捉兔子\n一位爷爷他姓顾，\n上街打醋又买布。\n买了布，打了醋，\n回头看见鹰抓兔。\n放下布，搁下醋，\n上前去追鹰和兔，\n飞了鹰，跑了兔。\n打翻醋，醋湿布。\n66、窝和锅\n树上一个窝，\n树下一口锅，\n我掉下来打着锅，\n窝和锅都破，\n锅要窝赔锅，\n窝要锅赔窝，\n闹了半天，\n不知该锅赔窝，\n还是窝赔锅。\n67、花鸭与彩霞\n水中映着彩霞，\n水面游着花鸭。\n霞是五彩霞，\n鸭是麻花鸭。\n麻花鸭游进五彩霞，\n五彩霞网住麻花鸭。\n乐坏了鸭，\n拍碎了霞，\n分不清是鸭还是霞。\n68、蚕和蝉\n这是蚕，\n那是蝉，\n蚕常在叶里藏，\n蝉常在林里唱。\n69、南南有个篮篮\n南南有个篮篮，篮篮装着盘盘，\n盘盘放着碗碗，碗碗盛着饭饭。\n南南翻了篮篮，篮篮扣了盘盘，\n盘盘打了碗碗，碗碗撒了饭饭。\n70、小三登山\n三月三，小三去登山；\n上山又下山，下山又上山；\n登了三次山，跑了三里三；\n出了一身汗，湿了三件衫；\n小三山上大声喊，离天只有三尺三。\n71、玻璃杯和白开水\n玻璃杯倒进白开水，\n白开水倒进玻璃杯。\n玻璃杯倒进白开水就成了装白开水的玻璃杯。\n装白开水的玻璃杯倒进白开水，\n白开水倒进装白开水的玻璃杯。\n72、小华和胖娃\n小华和胖娃，两人种花又种瓜，\n小华会种花不会种瓜，\n胖娃会种瓜不会种花，\n小华教胖娃种花，\n胖娃教小华种瓜。\n73、八十八岁公公\n八十八岁公公门前有八十八棵竹，\n八十八只八哥要到八十八岁公公门前的八十八棵竹上来借宿。\n八十八岁公公不许八十八只八哥到八十八棵竹上来借宿，\n八十八岁公公打发八十八个金弓银弹手去射杀八十八只八哥，\n不许八十八只八哥到八十八岁公公门前的八十八棵竹上来借宿\n74、教练和主力\n男教练是女教练，\n吕教练是男教练，\n男教练不是男教练，\n吕教练不是女教练。\n蓝南是男篮主力，\n吕楠是女篮主力，\n吕教练在男篮训练蓝南，\n蓝教练在女篮训练吕楠。\n75、石小四和史肖石\n石小四，史肖石，一同来到阅览室。\n石小四年十四，史肖石年四十。\n年十四的石小四爱看诗词，\n年四十的史肖石爱看报纸。\n年四十的史肖石发现了好诗词，\n忙递给年十四的石小四，\n年十四的石小四见了好报纸，\n忙递给年四十的史肖石。\n76、牛驮油\n九十九头牛，\n驮着九十九个篓。\n每篓装着九十九斤油。\n牛背油篓扭着走，\n油篓磨坏篓漏油，\n九十九斤一个篓，\n还剩六十六斤油。\n你说漏了几十几斤油？\n77、任命、人名\n任命是任命，\n人名是人名，\n任命人名不能错，\n错了人名错任命。\n78、六叔和六舅\n好六叔和好六舅，\n借给六斗\n六升绿绿豆。\n打罢秋，接住豆，\n再还六叔六舅六斗六升绿绿豆。\n79、王婆夸瓜又夸花\n王婆卖瓜又卖花，\n一边卖来一边夸，\n又夸花，又夸瓜，\n夸瓜大，大夸花，\n瓜大，花好，笑哈哈。\n80、九个酒迷喝醉酒\n九月九，九个酒迷喝醉酒。\n九个酒杯九杯酒，九个酒迷喝九口。\n喝罢九口酒，又倒九杯酒。\n九个酒迷端起酒，“咕咚、咕咚”又九口。\n九杯酒，酒九口，喝罢九个酒迷醉了酒。\n81、胡苏夫和吴夫苏\n胡庄有个胡苏夫，\n吴庄有个吴夫苏。\n胡庄的胡苏夫爱读诗书，\n吴庄的吴夫苏爱读古书，\n胡苏夫的书屋摆满了诗书，\n吴夫苏的书屋放满了古书。\n82、小秋和小牛\n小妞妞，叫小秋，梳着两个小抓鬏，\n小胖胖，叫小牛，穿着一个小兜兜。\n小秋帮着小牛记扣扣，\n小牛帮小秋剥豆豆，\n小秋、小牛手拉手，\n一块儿玩，一块儿走。\n83、数狮子\n公园有四排石狮子，\n每排是十四只大石狮子，\n每只大石狮子背上是一只小石狮子，\n每只大石狮子脚边是四只小石狮子，\n史老师领四十四个学生去数石狮子，\n你说共数出多少只大石狮子和多少只小石狮子？\n84、酒换油\n一葫芦酒九两六，\n一葫芦油六两九。\n六两九的油，\n要换九两六的酒，\n九两六的酒，\n不换六两九的油。\n85、多少罐\n一个半罐是半罐，\n两个半罐是一罐；\n三个半罐是一罐半，\n四个半罐是两罐；\n五个半罐是两罐半，\n六个半罐是三满罐；\n七个、八个、九个半罐，\n请你算算是多少罐。\n86、两个排\n营房里出来两个排，\n直奔正北菜园来，\n一排浇波菜，二排砍白菜。\n剩下八百八十八棵大白菜没有掰。\n一排浇完了波菜，\n又把八百八十八棵大白菜掰下来；\n二排砍完白菜，\n把一排掰下来的八百八十八棵大白菜背回来。\n87、补皮裤\n出西门走七步，\n扒鸡皮补皮裤，\n不知是皮裤补鸡皮，\n还是鸡皮补皮裤？\n88、蜂和蜜\n蜜蜂酿蜂蜜，\n蜂蜜养蜜蜂。\n蜜养蜜蜂蜂酿蜜，\n蜂酿蜂蜜蜜养蜂。\n89、小毛与花猫\n小毛抱着花猫，花猫用爪抓小毛，\n小毛用手拍花猫，花猫抓破了小毛，\n小毛打疼了花猫，小毛哭，花猫叫，\n小毛松开了花猫，花猫跑离了小毛。\n90、小花猫\n小花猫爱画画，先画一朵腊梅花，\n又画一个小喇叭，带着腊梅花，\n吹着小喇叭，回家去见妈妈，\n妈妈见了笑哈哈。\n91、铜勺铁勺舀油\n铜勺舀热油，铁勺舀凉油。\n铜勺舀了热油舀凉油，\n铁勺舀了凉油舀热油。\n一勺热油一勺凉油，\n热油凉油都是油。\n92、八座屋\n八只小白兔，\n住在八棱八角八座屋。\n八个小孩要逮八只小白兔，\n吓得小白兔，\n不敢再住八棱八角八座屋。\n93、小花猫\n小花猫爱画画，\n先画一朵腊梅花，\n又画一个小喇叭，\n带着腊梅花，\n吹着小喇叭，\n回家去见妈妈，\n妈妈见了笑哈哈。\n94、四和十\n四和十，十和四，十四和四十，\n四十和十四。\n说好四和十得靠舌头和牙齿，\n谁说四十是细席，\n他的舌头没用力；谁说十四是适时，\n他的舌头没伸直。认真学，常练习，\n十四、四十、四十四。\n95、黄狗咬我手\n清早上街走，走到周家大门口，\n门里跳出一只大黄狗，\n朝我哇啦哇啦吼。\n我拾起石头打黄狗，\n黄狗跳上来就咬我的手。\n也不知我手里的石头\n打没打着周家的大黄狗，\n周家的大黄狗咬没咬着我的手？\n96、藤萝花和喇叭花\n华华园里有一株藤萝花,\n佳佳园里有一株喇叭花。\n佳佳的喇叭花，\n绕住了华华的藤萝花，\n华华的藤萝花，\n缠住了佳佳的喇叭花。\n也不知道是藤萝花先绕住了喇叭花，\n还是喇叭花先缠住了藤萝花。\n97、花青蛙\n花青蛙，叫呱呱，\n西瓜地里看西瓜，\n西瓜夸青蛙背背花，\n青蛙夸西瓜长得大。\n98、蒜拌面\n蒜拌面，面拌蒜，\n吃蒜拌面算蒜瓣；\n面拌蒜，蒜拌面，\n蒜吃蒜瓣面拌蒜。\n99、白庙、白猫、白帽\n山顶有座白庙，\n白庙里有只白猫。\n白庙外有顶白帽，\n白猫看见了白猫，\n叨着白帽跑进了白庙。\n100、瘸子\n北边来了一个瘸子\n背着一捆橛子。\n南边来了一个瘸子\n背着一筐茄子。\n背橛子的瘸子打了背茄子的瘸子一橛子。\n背茄子的瘸子打了背橛子的瘸子一茄子。\n"});index.add({'id':68,'href':'/life/docs/javadir/basedir/java-basic-x-exception/','title':"异常机制详解",'section':"Java基础知识 ",'content':"demo #  "});index.add({'id':69,'href':'/life/docs/python/','title':" python",'section':"Docs",'content':"目录 #   基础  "});index.add({'id':70,'href':'/life/docs/javadir/thread/cas/','title':"cas",'section':"多线程与并发 ",'content':"概念 #   CAS即Compare and Swap，是基于硬件级别的指令实现的同步原语，Java并发包java.utile.concurrent许多同步类基于CAS构建，因此可见CAS的重要性  模拟 #   有安全问题的一段code  public class Demo1 { public static void main(String[] args) throws Exception { long startTime = System.currentTimeMillis(); Demo_B demo_b = new Demo_B(); final int len = 10000000; Thread t1 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; len; i++) { demo_b.increase(); } }); t1.start(); for (int i = 0; i \u0026lt; len; i++) { demo_b.increase(); } t1.join(); long endTime = System.currentTimeMillis(); System.out.println(demo_b.getNumber()); System.out.println(String.format(\u0026#34;time:%s\u0026#34;, (endTime - startTime))); } } class Demo_B { private int number = 0; public void increase() { number++; } public int getNumber() { return this.number; } }  run print result  14023046 time:58  在不改变代码顺序的情况下通过对Demo_B的实例方法进行同步加锁操作  class Demo_B { private int number = 0; public synchronized void increase() { number++; } public int getNumber() { return this.number; } }  run print result  20000000 time:615  通过 AtomicInteger 改造  class Demo_B { AtomicInteger atomicInteger = new AtomicInteger(0); public void increase() { atomicInteger.incrementAndGet(); } public int getNumber() { return atomicInteger.get(); } } 20000000 time:271  使用 AtomicInteger 自己实现incrementAndGet  class Demo_B { final AtomicInteger atomicInteger = new AtomicInteger(0); public void increase() { int oldValue = 0; do { oldValue = atomicInteger.get(); } while (!atomicInteger.compareAndSet(oldValue , oldValue+1)); } public int getNumber() { return atomicInteger.get(); } } 20000000 time:605 -- 自己搞的时间还多了些 我猜是AtomicInteger的incrementAndGet已经内置了以后 执行会比我目前的运行量少 虽然它也是调用compareAndSet  Unsafe 方法介绍  /** * @param var1: 那个对象 *@param var2: 对象中的域的位置 *@param var3 : 需要比较的值 *@param var4 : 设置之后的值 */ public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5) public final native boolean compareAndSwapObject(Object var1, long var2, Object var4, Object var5) public final native boolean compareAndSwapLong(Object var1, long var2, long var4, long var6) //var1：要修改的对象起始地址 如：0x00000111  //var2：需要修改的具体内存地址 如100 。0x0000011+100 = 0x0000111就是要修改的值的地址  //注意没有var3  //var4：期望内存中的值，拿这个值和0x0000111内存中的中值比较，如果为true，则修改，返回ture,否则返回false，等待下次修改。  //var5：如果上一步比较为ture，则把var5更新到0x0000111其实的内存中。  //原子操作，直接操作内存。  使用Unsafe 改造  class Demo_B2 { //jdk级别代码才能这样 因为这个级别的会涉及到绕过jvm所以得另寻出路  final Unsafe unsafe = Unsafe.getUnsafe(); private volatile int value = 0; public void increase() { int oldValue = 0; long valueOffset = 0l; do { try { valueOffset = unsafe.objectFieldOffset(this.getClass().getField(\u0026#34;value\u0026#34;)); } catch (NoSuchFieldException e) { e.printStackTrace(); } } while (!unsafe.compareAndSwapInt(this, valueOffset, oldValue, oldValue + 1)); } public int getNumber() { return value; } }  执行直接报错  Exception in thread \u0026#34;main\u0026#34; java.lang.SecurityException: Unsafe at sun.misc.Unsafe.getUnsafe(Unsafe.java:90) -- unsafe 提供了非常底层，操作内存，线程的方法,unsafe 对象不能直接获取，只能通过反射获取  使用Unsafe 改造(修正后)  class Demo_B2 { //jdk级别代码才能这样 因为这个级别的会涉及到绕过jvm所以得另寻出路  final static Unsafe unsafe = UnsafeAccessor.getUnsafe(); private volatile int value = 0; //内存偏移量地址(相对地址)  private long valueOffset = 0l; public void increase() { if (valueOffset == 0l) { try { valueOffset = unsafe.objectFieldOffset(Demo_B2.class.getDeclaredField(\u0026#34;value\u0026#34;)); } catch (NoSuchFieldException e) { e.printStackTrace(); } } int oldValue = 0; do { oldValue = value; } while (!unsafe.compareAndSwapInt(this, valueOffset, oldValue, oldValue + 1)); } public int getNumber() { return value; } } final class UnsafeAccessor { private static Unsafe unsafe; static { try { //这个名字是 theUnsafe 里面的不要随便写  Field unsafeFile = Unsafe.class.getDeclaredField(\u0026#34;theUnsafe\u0026#34;); unsafeFile.setAccessible(true); //因为是静态属性  unsafe = (Unsafe) unsafeFile.get(null); } catch (Exception e) { } } public static Unsafe getUnsafe() { return unsafe; } }  使用LongAdder 改造  //分段处理  /** * Adds the given value. * * @param x the value to add */ public void add(long x) { Cell[] as; long b, v; int m; Cell a; if ((as = cells) != null || !casBase(b = base, b + x)) { boolean uncontended = true; if (as == null || (m = as.length - 1) \u0026lt; 0 || (a = as[getProbe() \u0026amp; m]) == null || !(uncontended = a.cas(v = a.value, v + x))) longAccumulate(x, null, uncontended); } } import java.util.concurrent.atomic.LongAdder; public class Demo3 { public static void main(String[] args) throws Exception { long startTime = System.currentTimeMillis(); Demo_B3 demo_b = new Demo_B3(); final int len = 10000000; Thread t1 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; len; i++) { demo_b.increase(); } }); t1.start(); for (int i = 0; i \u0026lt; len; i++) { demo_b.increase(); } t1.join(); long endTime = System.currentTimeMillis(); System.out.println(demo_b.getNumber()); System.out.println(String.format(\u0026#34;time:%s\u0026#34;, (endTime - startTime))); } } class Demo_B3 { private volatile int value = 0; private LongAdder longAdder = new LongAdder() ; public void increase() { longAdder.increment(); } public int getNumber() { return longAdder.intValue(); } } "});index.add({'id':71,'href':'/life/docs/javadir/thread/tool/countdownlatch_cyclicbarrier/','title':"CountDownLatch 和 CyclicBarrier",'section':"并发工具 ",'content':" CountDownLatch是减法操作 CyclicBarrier具有CountDownLatch的所有功能\n CountDownLatch #    CountDownLatch中count down是倒数的意思，latch则是门闩的含义。整体含义可以理解为倒数的门栓,所以当门打开时,N个人是不能进屋的,也就是N个线程是不能继续向下运行的,支持这样的特性可以控制线程执行任务的时机,使线程以 \u0026ldquo;组团\u0026quot;的方式一起执行任务\n   CountDownLatch中count down是倒数的意思，latch则是门闩的含义。整体含义可以理解为倒数的门栓，似乎有一点“三二一，芝麻开门”的感觉。CountDownLatch的作用也是如此，在构造CountDownLatch的时候需要传入一个整数n，在这个整数“倒数”到0之前，主线程需要等待在门口，而这个“倒数”过程则是由各个执行线程驱动的，每个线程执行完一个任务“倒数”一次。总结来说，CountDownLatch的作用就是等待其他的线程都执行完任务，必要时可以对各个任务的执行结果进行汇总，然后主线程才继续往下执行\n   CountDownLatch主要有两个方法：countDown()和await()。countDown()方法用于使计数器减一，其一般是执行任务的线程调用，await()方法则使调用该方法的线程处于等待状态，其一般是主线程调用。这里需要注意的是，countDown()方法并没有规定一个线程只能调用一次，当同一个线程调用多次countDown()方法时，每次都会使计数器减一；另外，await()方法也并没有规定只能有一个线程执行该方法，如果多个线程同时执行await()方法，那么这几个线程都将处于等待状态，并且以共享模式享有同一个锁。\n   await()方法 一般是使用者或者主线程调用 countDown()方法 子任务线程组调用\n  第一个例子\n  import java.util.concurrent.CountDownLatch; public class CountDownLatchExample2 { public static class MyService { private CountDownLatch downLatch = new CountDownLatch(1) ; public void testMethod(){ try { System.out.println(\u0026#34;任务执行开始前!\u0026#34;); //await()方法则使调用该方法的线程处于等待状态，其一般是主线程调用  downLatch.await(); System.out.println(\u0026#34;任务执行结束!\u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); } } public void downMethod(){ System.out.println(\u0026#34;任务执行开始\u0026#34;); System.out.println(\u0026#34;MyService.downMethod\u0026#34;); //线程数器减一  downLatch.countDown(); } } public static class MyThread extends Thread { private MyService myService; public MyThread(MyService myService) { super(); this.myService = myService; } @Override public void run() { myService.testMethod(); } } public static void main(String[] args)throws InterruptedException { MyService myService = new MyService(); MyThread myThread = new MyThread(myService) ; myThread.start(); //暂停2秒钟  Thread.sleep(2000); //如果不调用 downMethod 方法 那么计数器就不会减一 那么主线程将一直处于等待状况  myService.downMethod(); } } /* 任务执行开始前! 任务执行开始 MyService.downMethod 任务执行结束! */  第二个例子 裁判员等待 所有运动员到场馆中  import java.util.Arrays; import java.util.concurrent.CountDownLatch; public class CountDownLatchExample3 { public static void main(String[] args) { String[] names = new String[]{\u0026#34;姚明\u0026#34;, \u0026#34;易建联\u0026#34;, \u0026#34;李宁\u0026#34;, \u0026#34;邓亚萍\u0026#34;}; new Referee(names).start(); } //裁判员  public static class Referee extends Thread { private String[] names; public Referee(String[] names) { this.names = names; } @Override public void run() { try { System.out.println(\u0026#34;运动员名单\u0026#34; + Arrays.toString(names)); CountDownLatch countDownLatch = new CountDownLatch(names.length); for (String name : names) { Athletes athletes = new Athletes(countDownLatch, name); athletes.start(); } countDownLatch.await(); System.out.println(\u0026#34;所有运动员都已经到齐了!\u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); } } } //运动员  public static class Athletes extends Thread { private CountDownLatch countDownLatch; private String name; public Athletes(CountDownLatch countDownLatch, String name) { this.countDownLatch = countDownLatch; this.name = name; } @Override public void run() { System.out.println(\u0026#34;运动员\u0026#34; + this.name + \u0026#34;到了\u0026#34;); this.countDownLatch.countDown(); } } } /* 运动员名单[姚明, 易建联, 李宁, 邓亚萍] 运动员姚明到了 运动员易建联到了 运动员李宁到了 运动员邓亚萍到了 所有运动员都已经到齐了! * */  第三个例子是对第二个例子的改进 假如某个运动员超过了比赛的时间那么我们就取消该运动员的此次比赛资格  import java.util.Arrays; import java.util.concurrent.CountDownLatch; import java.util.concurrent.TimeUnit; public class CountDownLatchExample4 { public static void main(String[] args) { String[] names = new String[]{\u0026#34;姚明\u0026#34;, \u0026#34;易建联\u0026#34;, \u0026#34;李宁\u0026#34;, \u0026#34;邓亚萍\u0026#34;}; new Referee(names).start(); } //裁判员  public static class Referee extends Thread { private String[] names; public Referee(String[] names) { this.names = names; } @Override public void run() { try { System.out.println(\u0026#34;运动员名单\u0026#34; + Arrays.toString(names)); CountDownLatch countDownLatch = new CountDownLatch(names.length); for (String name : names) { Athletes athletes = new Athletes(countDownLatch, name); athletes.start(); } countDownLatch.await(2, TimeUnit.SECONDS); System.out.println(\u0026#34;比赛开始!\u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); } } } //运动员  public static class Athletes extends Thread { private CountDownLatch countDownLatch; private String sportsName; public Athletes(CountDownLatch countDownLatch, String name) { this.countDownLatch = countDownLatch; this.sportsName = name; } @Override public void run() { if (\u0026#34;李宁\u0026#34;.equals(this.sportsName)) { System.out.println(\u0026#34;运动员\u0026#34; + this.sportsName + \u0026#34;路上堵车不能按时到达\u0026#34;); try { Thread.sleep(4000); } catch (InterruptedException e) { e.printStackTrace(); } } System.out.println(\u0026#34;运动员\u0026#34; + this.sportsName + \u0026#34;到了\u0026#34;); this.countDownLatch.countDown(); } } } /* 运动员名单[姚明, 易建联, 李宁, 邓亚萍] 运动员姚明到了 运动员易建联到了 运动员邓亚萍到了 运动员李宁路上堵车不能按时到达 比赛开始! 运动员李宁到了 * */ CyclicBarrier(sai k li c bai ri er 赛克利克百瑞尔) #   类CyclicBarrier 不仅有 CountDownLatch 所具有的功能 ,还可以实现屏障等待功能(阶段性同步),它在使用上的意义在于可以循环地实现线程要一起做任务的目标,而不仅仅像类CountDownLatch一样仅仅支持一次线程与同步阻塞的特性\n  第一个例子 美国往事 中 有四个年轻人 他们在一个存钱箱里存放他们所有的积蓄 当用钱的时候必须四个人都在场 才能打开  import java.util.concurrent.BrokenBarrierException; import java.util.concurrent.CyclicBarrier; public class CyclicBarrierDemo1 { public static void main(String[] args) { String[] nameList = new String[]{\u0026#34;面条\u0026#34;, \u0026#34;麦克斯\u0026#34;, \u0026#34;吉米\u0026#34;, \u0026#34;Teenager\u0026#34;}; CyclicBarrier keyObj = new CyclicBarrier(4, (() -\u0026gt; { System.out.println(\u0026#34;所有人到齐打开存钱箱\u0026#34;); })); for (String name : nameList) { new AmericaMan(keyObj, name).start(); } } public static class AmericaMan extends Thread { private CyclicBarrier keyObj; private String firstName; public AmericaMan(CyclicBarrier keyObj, String firstName) { this.keyObj = keyObj; this.firstName = firstName; } @Override public void run() { try { double v = Math.random() * 3000; Thread.sleep((long) v); System.out.println(this.firstName + \u0026#34;已经到现场了\u0026#34;); this.keyObj.await(); } catch (InterruptedException e) { e.printStackTrace(); } catch (BrokenBarrierException e) { e.printStackTrace(); } } } } /* 吉米已经到现场了 面条已经到现场了 麦克斯已经到现场了 Teenager已经到现场了 所有人到齐打开存钱箱 * */  第二个例子 有一些工人要去附件一家餐厅吃饭 但是餐厅不单独接待个人 至少需要4个人才能接待 因此 工人得互相凑对  import java.util.Arrays; import java.util.concurrent.BrokenBarrierException; import java.util.concurrent.ConcurrentLinkedQueue; import java.util.concurrent.CyclicBarrier; import java.util.concurrent.atomic.AtomicInteger; public class CyclicBarrierDemo2 { private static ConcurrentLinkedQueue\u0026lt;String\u0026gt; linkedQueue = new ConcurrentLinkedQueue\u0026lt;\u0026gt;(); public static void main(String[] args) { String[] names = new String[]{\u0026#34;小罗伯特·唐尼\u0026#34;, \u0026#34;艾玛·沃特森\u0026#34;, \u0026#34;艾玛·斯通\u0026#34;, \u0026#34;斯嘉丽·约翰逊\u0026#34;, \u0026#34;艾薇儿\u0026#34;, \u0026#34;阿兰·德龙\u0026#34;, \u0026#34;布雷特·道顿\u0026#34;, \u0026#34;莫蕾娜·巴卡林\u0026#34;, \u0026#34;费尔南达·塔瓦雷\u0026#34;, \u0026#34;杰夫·高布伦\u0026#34;, \u0026#34;纳帅尼尔·布佐尼\u0026#34;, \u0026#34;爱丽丝\u0026#34;}; AtomicInteger atomicInteger = new AtomicInteger(0); CyclicBarrier cyclicBarrier = new CyclicBarrier(4, () -\u0026gt; { System.out.println(\u0026#34;接待第\u0026#34; + atomicInteger.incrementAndGet() + \u0026#34;桌\u0026#34;); System.out.println(\u0026#34;人员:\u0026#34;+Arrays.toString(linkedQueue.toArray())); linkedQueue.clear(); }); for (String name : names) { // try { // //这里一定延迟一下 // Thread.sleep(1); // } catch (InterruptedException e) { // e.printStackTrace(); // } // new Worker(name, cyclicBarrier).start();  Worker worker = new Worker(name, cyclicBarrier); worker.start(); try { worker.join(10); } catch (InterruptedException e) { e.printStackTrace(); } } } public static class Worker extends Thread { private String firstName; private CyclicBarrier objKey; public Worker(String firstName, CyclicBarrier objKey) { this.firstName = firstName; this.objKey = objKey; this.setName(firstName); } @Override public void run() { try { System.out.println(this.firstName + \u0026#34;就位\u0026#34;); linkedQueue.add(this.firstName); //到达 屏障点  this.objKey.await(); //屏障点 结束  System.out.println(this.firstName + \u0026#34;开始就餐\u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); } catch (BrokenBarrierException e) { e.printStackTrace(); } } } } /* 小罗伯特·唐尼就位 艾玛·沃特森就位 艾玛·斯通就位 斯嘉丽·约翰逊就位 接待第1桌 人员:[小罗伯特·唐尼, 艾玛·沃特森, 艾玛·斯通, 斯嘉丽·约翰逊] 斯嘉丽·约翰逊开始就餐 小罗伯特·唐尼开始就餐 艾玛·沃特森开始就餐 艾玛·斯通开始就餐 艾薇儿就位 阿兰·德龙就位 布雷特·道顿就位 莫蕾娜·巴卡林就位 接待第2桌 人员:[艾薇儿, 阿兰·德龙, 布雷特·道顿, 莫蕾娜·巴卡林] 莫蕾娜·巴卡林开始就餐 艾薇儿开始就餐 阿兰·德龙开始就餐 布雷特·道顿开始就餐 费尔南达·塔瓦雷就位 杰夫·高布伦就位 纳帅尼尔·布佐尼就位 爱丽丝就位 接待第3桌 人员:[费尔南达·塔瓦雷, 杰夫·高布伦, 纳帅尼尔·布佐尼, 爱丽丝] 爱丽丝开始就餐 费尔南达·塔瓦雷开始就餐 纳帅尼尔·布佐尼开始就餐 杰夫·高布伦开始就餐 * */  重要解释  Thread.sleep(1); worker.join(10); 是为了 让线程打印执行连续 把上面的取消 你会发现就不再连续了 但是每一个名字还是 会在屏障点 出现一次 并且 依然是4个线程执行后触发动作 只是名字出现不再连贯了 CountDownLatch 和 CyclicBarrier 的比较 #  CountDownLatch 是线程组之间的等待，即一个(或多个)线程等待N个线程完成某件事情之后再执行；而 CyclicBarrier 则是线程组内的等待，即每个线程相互等待，即N个线程都被拦截之后，然后依次执行。\nCountDownLatch 是减计数方式，而 CyclicBarrier 是加计数方式。\nCountDownLatch 计数为0无法重置，而 CyclicBarrier 计数达到初始值，则可以重置。\nCountDownLatch 不可以复用，而 CyclicBarrier 可以复用。\n"});index.add({'id':72,'href':'/life/docs/operating_system/windows/dos_file/','title':"DOS基本文件操作命令 ",'section':"windows学习与使用 ",'content':"DOS基本文件操作命令 #    wing+r ==\u0026gt; cmd 进入dos控制台\n  D:\n  进入D盘\r cd命令  CD命令是更改目录命令 如果要进入D盘不用这个命令直接输入 D: 回车 即可\r例如:\rC:\\Users\\HP\u0026gt;D:\rD:\\\u0026gt;\rD:\\\u0026gt;dir\r驱动器 D 中的卷是 新加卷\r卷的序列号是 DAB4-11FE\rD:\\ 的目录\r2019-10-10 14:15 \u0026lt;DIR\u0026gt; 360极速浏览器下载\r2020-01-13 13:47 \u0026lt;DIR\u0026gt; BaiduNetdiskDownload\r2020-01-20 13:59 \u0026lt;DIR\u0026gt; CS\r2019-12-13 16:53 \u0026lt;DIR\u0026gt; data\r2020-02-10 15:55 \u0026lt;DIR\u0026gt; IdeaProjects\r2019-12-06 15:01 \u0026lt;DIR\u0026gt; log\r2019-10-23 10:40 \u0026lt;DIR\u0026gt; MailMasterData\r2019-09-29 10:43 \u0026lt;DIR\u0026gt; output\r2020-01-13 13:40 \u0026lt;DIR\u0026gt; soft\r2020-02-04 17:43 \u0026lt;DIR\u0026gt; temp\r2020-01-15 18:05 \u0026lt;DIR\u0026gt; ultraeditWork\r2019-12-10 09:47 \u0026lt;DIR\u0026gt; workspace\r0 个文件 0 字节\r12 个目录 463,738,040,320 可用字节\rD:\\\u0026gt;cd CS\rD:\\CS\u0026gt; /*进入了CS目录**/\r cd .. (进入当前磁盘的上一级)  \r类似于 linux 下的cd ~\rzch@zch MINGW64 /d/data\r$ cd ~\r已经在某个磁盘下的情况下可以用cd 进入目录\rC:\\Users\\noatn\u0026gt;cd d:\\tencent\rC:\\Users\\noatn\u0026gt;cd C:\\Users\\noatn\\.android\rC:\\Users\\noatn\\.android\u0026gt;\r这里进入d盘失败但是成功进入了C盘预计的目录\r 创建文件 echo \u0026gt;fileName或者 echo [this content] \u0026gt; fileName  \recho \u0026gt;d.txt;\r============\u0026gt;\rE:\\temp\u0026gt;echo \u0026gt;d.txt;\rE:\\temp\u0026gt;dir\r驱动器 E 中的卷是 新加卷\r卷的序列号是 64E8-4ABF\rE:\\temp 的目录\r2020/02/14 18:56 \u0026lt;DIR\u0026gt; .\r2020/02/14 18:56 \u0026lt;DIR\u0026gt; ..\r2020/02/14 18:56 3 d.txt\r1 个文件 3 字节\r2 个目录 264,645,689,344 可用字节\r 查看文件内容 type fileName  E:\\temp\u0026gt;type d.txt\rthis is a text file\r 创建目录 md pathName  E:\\temp\u0026gt;md cc\rE:\\temp\u0026gt;dir\r驱动器 E 中的卷是 新加卷\r卷的序列号是 64E8-4ABF\rE:\\temp 的目录\r2020/02/14 19:02 \u0026lt;DIR\u0026gt; .\r2020/02/14 19:02 \u0026lt;DIR\u0026gt; ..\r2020/02/14 19:02 \u0026lt;DIR\u0026gt; cc\r2020/02/14 18:59 19 d.txt\r1 个文件 19 字节\r3 个目录 264,645,689,344 可用字节\r 复制文件 copy fileName path+fileName  E:\\temp\u0026gt;copy d.txt E:\\temp\\cc;\r已复制 1 个文件。\r 深复制 XCOPY  H:\\\u0026gt;xcopy /?\r复制文件和目录树。\rXCOPY source [destination] [/A | /M] [/D[:date]] [/P] [/S [/E]] [/V] [/W]\r[/C] [/I] [/Q] [/F] [/L] [/G] [/H] [/R] [/T] [/U]\r[/K] [/N] [/O] [/X] [/Y] [/-Y] [/Z] [/B] [/J]\r[/EXCLUDE:file1[+file2][+file3]...]\rsource 指定要复制的文件。\rdestination 指定新文件的位置和/或名称。\r/A 仅复制有存档属性集的文件，\r但不更改属性。\r/M 仅复制有存档属性集的文件，\r并关闭存档属性。\r/D:m-d-y 复制在指定日期或指定日期以后更改的文件。\r如果没有提供日期，只复制那些\r源时间比目标时间新的文件。\r/EXCLUDE:file1[+file2][+file3]...\r指定含有字符串的文件列表。每个字符串\r在文件中应位于单独的一行。如果任何\r字符串与复制文件的绝对路径的任何部分相符，\r则排除复制该文件。例如，\r指定如 \\obj\\ 或 .obj 的字符串会分别\r排除目录 obj 下面的所有文件或带有\r.obj 扩展名的所有文件。\r/P 创建每个目标文件之前提示你。\r/S 复制目录和子目录，不包括空目录。\r/E 复制目录和子目录，包括空目录。\r与 /S /E 相同。可以用来修改 /T。\r/V 验证每个新文件的大小。\r/W 提示你在复制前按键。\r/C 即使有错误，也继续复制。\r/I 如果目标不存在，且要复制多个文件，\r则假定目标必须是目录。\r/Q 复制时不显示文件名。\r/F 复制时显示完整的源文件名和目标文件名。\r/L 显示要复制的文件。\r/G 允许将加密文件复制到\r不支持加密的目标。\r/H 也复制隐藏文件和系统文件。\r/R 覆盖只读文件。\r/T 创建目录结构，但不复制文件。不\r包括空目录或子目录。/T /E 包括\r空目录和子目录。\r/U 只复制已经存在于目标中的文件。\r/K 复制属性。一般的 Xcopy 会重置只读属性。\r/N 用生成的短名称复制。\r/O 复制文件所有权和 ACL 信息。\r/X 复制文件审核设置(隐含 /O)。\r/Y 取消提示以确认要覆盖\r现有目标文件。\r/-Y 要提示以确认要覆盖\r现有目标文件。\r/Z 在可重新启动模式下复制网络文件。\r/B 复制符号链接本身与链接目标。\r/J 复制时不使用缓冲的 I/O。推荐复制大文件时使用。\r开关 /Y 可以预先在 COPYCMD 环境变量中设置。\r这可能被命令行上的 /-Y 覆盖。\r 深复制 案例  \rH:\\\u0026gt;XCOPY Java学习相关电子书籍 E:\\temp\\mess\r不加参数只是复制了文件，并没有复制要复制的文件夹里的文件夹\r接下来复制一个包含子文件夹的案例\rH:\\\u0026gt;XCOPY Java学习相关电子书籍 E:\\temp\\aess /s/e\r目标 E:\\temp\\aess 是文件名\r还是目录名\r(F = 文件，D = 目录)? d\rJava学习相关电子书籍\\Algorithms 4th Edition.pdf\rJava学习相关电子书籍\\Core Java. Volume II. Advanced Features, 8th Edition.pdf\rJava学习相关电子书籍\\Core.Java.Volume.I.Fundamentals,8th.Edition.pdf\rJava学习相关电子书籍\\Effective.Enterprise.Java.pdf\rJava学习相关电子书籍\\Flex+白皮书.pdf\rJava学习相关电子书籍\\Flex3高级图表开发指南.pdf\rJava学习相关电子书籍\\Google笔试题.pdf\rJava学习相关电子书籍\\head first javascript中文版.pdf\rJava学习相关电子书籍\\Head First Java中文版(深入浅出Java)[零基础推荐].pdf\rJava学习相关电子书籍\\Head First Servlet JSP(清晰中文版).PDF\rJava学习相关电子书籍\\Head First 设计模式.pdf\rJava学习相关电子书籍\\HttpClient入门.pdf\rJava学习相关电子书籍\\ibatis开发指南.pdf\rJava学习相关电子书籍\\J2EE反模式.pdf\rJava学习相关电子书籍\\Java Collections中的Fail Fast机制.pdf\rJava学习相关电子书籍\\Java Network Programming.pdf\rJava学习相关电子书籍\\Java Web动态图表编程.pdf\rJava学习相关电子书籍\\Java Web开发典型模块大全.pdf\rJava学习相关电子书籍\\Java 编程思想 -- 面向对象逻辑思维.pdf\rJava学习相关电子书籍\\Java.Rules中文版.pdf\rJava学习相关电子书籍\\Java.Web服务开发.pdf\rJava学习相关电子书籍\\JAVA2核心技术第1卷.基础知识7th.pdf\rJava学习相关电子书籍\\Java2网络协议技术内幕.pdf\rJava学习相关电子书籍\\JavaScript王者归来.pdf\rJava学习相关电子书籍\\JavaScript高级程序设计（第3版）中文 高清 完整 (1).pdf\rJava学习相关电子书籍\\JAVA与XML.pdf\rJava学习相关电子书籍\\JAVA优化编程.pdf\rJava学习相关电子书籍\\java入门到详解[推荐].pdf\rJava学习相关电子书籍\\java华为面试题.pdf\rJava学习相关电子书籍\\Java基础与案例开发详解.pdf\rJava学习相关电子书籍\\java基础教程(强烈推荐).pdf\rJava学习相关电子书籍\\Java夜未眠_程序员的心声.pdf\rJava学习相关电子书籍\\java实例详解.pdf\rJava学习相关电子书籍\\Java并发程序设计教程.pdf\rJava学习相关电子书籍\\Java开发利器Myeclipse全面详解.pdf\rJava学习相关电子书籍\\Java开发实战经典.pdf\rJava学习相关电子书籍\\Java数据结构和算法.pdf\rJava学习相关电子书籍\\Java数据结构和算法中文第二版[jb51.net].pdf\rJava学习相关电子书籍\\Java最著名的开源项目.pdf\rJava学习相关电子书籍\\Java核心技术 卷1 基础知识 原书第9版.pdf\rJava学习相关电子书籍\\JAVA核心技术卷2：高级特征.pdf\rJava学习相关电子书籍\\java核心技术，完整中文版.pdf\rJava学习相关电子书籍\\Java线程.pdf\rJava学习相关电子书籍\\Java经典问题答案.pdf\rJava学习相关电子书籍\\Java经典问题答案（带书签）.pdf\rJava学习相关电子书籍\\Java编程及相关书籍.O\u0026amp;#39;Reilly.Creating.Effective.Javahelp.pdf\rJava学习相关电子书籍\\Java编程指南.pdf\rJava学习相关电子书籍\\Java编程规范.pdf\rJava学习相关电子书籍\\Java编辑思想（第四版）..pdf\rJava学习相关电子书籍\\Java网络socket编程详解.pdf\rJava学习相关电子书籍\\Java网络编程技术与实践.pdf\rJava学习相关电子书籍\\Java虚拟机规范（Java SE 7）.pdf\rJava学习相关电子书籍\\Java解惑(中文).pdf\rJava学习相关电子书籍\\Java设计模式之抽象工厂模式.pdf\rJava学习相关电子书籍\\Java语言导学(第3版)CN.pdf\rJava学习相关电子书籍\\Java语言规范中文版(第三版).pdf\rJava学习相关电子书籍\\JAVA面向对象编程(孙卫琴).pdf\rJava学习相关电子书籍\\Java项目开发案例全程实录_第二版_.pdf\rJava学习相关电子书籍\\JDK1.5的泛型实现.pdf\rJava学习相关电子书籍\\jQuery基础教程第四版 (2).pdf\rJava学习相关电子书籍\\jQuery技术内幕：深入解析jQuery架构设计与实现原理.pdf\rJava学习相关电子书籍\\JSTL标签.pdf\rJava学习相关电子书籍\\Oracle与SQLServe..pdf\rJava学习相关电子书籍\\oracle存储过程超详细使用手册..pdf\rJava学习相关电子书籍\\Oracle数据库性能优化.pdf\rJava学习相关电子书籍\\Python Programming With The Java Class Libraries - A Tutorial For Building Web And Enterprise Applications With Jython..pdf\rJava学习相关电子书籍\\Spring.2.0核心技术与最佳实践.廖雪峰.扫描版.pdf\rJava学习相关电子书籍\\Spring基础教程.pdf\rJava学习相关电子书籍\\SPRING开发指南.pdf\rJava学习相关电子书籍\\SSH基础知识 常用命令 配置实例.pdf\rJava学习相关电子书籍\\Struts 2 in Action.pdf\rJava学习相关电子书籍\\Struts中文手册.pdf\rJava学习相关电子书籍\\The Java Virtual Machine Specification, Java SE 7 Edition.pdf\rJava学习相关电子书籍\\Thinking.In.Java(中文版).pdf\rJava学习相关电子书籍\\Windows API开发详解 函数、接口、编程实例.pdf\rJava学习相关电子书籍\\[21天学通Java.6(第5版)].Rogers.Cadenhead\u0026amp;Laura.Lemay.扫描版.pdf\rJava学习相关电子书籍\\[Flex.3实战].（美）艾哈迈德，（美）赫希，（美）阿比德.扫描版.pdf\rJava学习相关电子书籍\\[Java并发编程实践].(Java.Concurrency.in.Practice).Brian.Goetz.文字版(1).pdf\rJava学习相关电子书籍\\[JAVA消息服务].（美）Mark.Richards,.Richard.Monson-Haefel,.David.A.Chappell.文字版.pdf\rJava学习相关电子书籍\\[Java编程及相关书籍].O\u0026amp;#39;Reilly.Creating.Effective.Javahelp.pdf\rJava学习相关电子书籍\\[Java网络编程(第3版,2004)].(Java.Network.Programming).Elliotte.Rusty.Harold.文字版.pdf\rJava学习相关电子书籍\\[Java语言程序设计].(Introduction.to.Java.Programming,.Brief.Version,.8ed),.Liang,.文字版.pdf\rJava学习相关电子书籍\\[代码大全2中文版(完整清晰版)].pdf\rJava学习相关电子书籍\\《Effective JavaScript》扫描版（中文） (3).pdf\rJava学习相关电子书籍\\《SQL查询的艺术》.(张权,郭天娇).[PDF]@jb51.net.pdf\rJava学习相关电子书籍\\《经典JavaEE企业应用实战》 (1).pdf\rJava学习相关电子书籍\\中兴面试题.pdf\rJava学习相关电子书籍\\初学者第1章 对象入门.pdf..pdf\rJava学习相关电子书籍\\北京中软笔试题.pdf\rJava学习相关电子书籍\\华为试题.pdf\rJava学习相关电子书籍\\基于MVC的JavaScript Web富应用开发(完整版).pdf\rJava学习相关电子书籍\\大话数据结构.pdf\rJava学习相关电子书籍\\大话设计模式(1).pdf\rJava学习相关电子书籍\\大话设计模式.pdf\rJava学习相关电子书籍\\实用J2EE设计模式编程指南.pdf\rJava学习相关电子书籍\\实用算法基础教程.pdf\rJava学习相关电子书籍\\广东北电面试题.pdf\rJava学习相关电子书籍\\快速软件开发..pdf\rJava学习相关电子书籍\\排序算法汇总.pdf\rJava学习相关电子书籍\\新手学Java 7编程（第5版）.pdf\rJava学习相关电子书籍\\深入JAVA虚拟机.pdf\rJava学习相关电子书籍\\深入JAVA虚拟机第二版.pdf\rJava学习相关电子书籍\\深入体验Java Web开发内幕——核心基础.pdf\rJava学习相关电子书籍\\深入体验Javaweb开发内幕（高级特性）.pdf\rJava学习相关电子书籍\\深入学习：JFC SWING—JAVA 基础类组件集.pdf\rJava学习相关电子书籍\\王牌1 Java SE 类库查询手册.pdf\rJava学习相关电子书籍\\王牌2 学习成果检测——【练一练】答案.pdf\rJava学习相关电子书籍\\王牌3 Eclipse常用快捷键.pdf\rJava学习相关电子书籍\\王牌4 Eclipse提示与技巧.pdf\rJava学习相关电子书籍\\王牌5 Java程序员职业规划.pdf\rJava学习相关电子书籍\\王牌6 Java程序员面试技巧.pdf\rJava学习相关电子书籍\\王牌7 Java常见面试题.pdf\rJava学习相关电子书籍\\王牌8 扫雷英雄榜——Java常见错误及解决方案.pdf\rJava学习相关电子书籍\\王牌9 优秀程序员之路——Java开发经验及技巧大汇总.pdf\rJava学习相关电子书籍\\百度试题.pdf\rJava学习相关电子书籍\\第10章 Java IO系统.pdf\rJava学习相关电子书籍\\第11章 运行期类型鉴定.pdf\rJava学习相关电子书籍\\第12章 传递和返回对象.pdf\rJava学习相关电子书籍\\第13章 创建窗口和程序片.pdf\rJava学习相关电子书籍\\第14章 多线程.pdf\rJava学习相关电子书籍\\第15章 网络编程(1).pdf\rJava学习相关电子书籍\\第16章 设计范式.pdf\rJava学习相关电子书籍\\第17章 项目.pdf\rJava学习相关电子书籍\\第2章 一切都是对象.pdf\rJava学习相关电子书籍\\第3章 控制程序流程.pdf\rJava学习相关电子书籍\\第4章 初始化和清除.pdf\rJava学习相关电子书籍\\第5章 隐藏实施过程.pdf\rJava学习相关电子书籍\\第6章 类再生.pdf\rJava学习相关电子书籍\\第7章 多形性.pdf\rJava学习相关电子书籍\\第8章 对象的容纳.pdf\rJava学习相关电子书籍\\第9章 异常差错控制.pdf\rJava学习相关电子书籍\\算法与数据结构-实用算法基础教程.pdf\rJava学习相关电子书籍\\算法导论.pdf\rJava学习相关电子书籍\\精通JavaScript动态网页编程(实例版).pdf\rJava学习相关电子书籍\\精通JavaScript（中文清晰优化版）.pdf\rJava学习相关电子书籍\\精通spring - Mastering Spring.pdf\rJava学习相关电子书籍\\精通Struts基于MVC的Java Web设计与开发(1).pdf\rJava学习相关电子书籍\\精通Struts基于MVC的Java Web设计与开发.pdf\rJava学习相关电子书籍\\经典查询练手.pdf\rJava学习相关电子书籍\\编程之美-完整版.pdf\rJava学习相关电子书籍\\网易笔试题.pdf\rJava学习相关电子书籍\\网站开发前台后台技术指南.pdf\rJava学习相关电子书籍\\罗时飞.精通spring.pdf\rJava学习相关电子书籍\\腾讯试题.pdf\rJava学习相关电子书籍\\解析Java虚拟机器开发：权衡优化、高效和安全的最优方案.pdf\rJava学习相关电子书籍\\计算机导论与JavaScript编程(第3版).pdf\rJava学习相关电子书籍\\设计模式：Java语言中的应用.pdf\rJava学习相关电子书籍\\迅雷笔试题.pdf\rJava学习相关电子书籍\\重构-改善既有代码的设计.pdf\rJava学习相关电子书籍\\重构_改善既有代码的设计[高清版]..pdf\rJava学习相关电子书籍\\附录A 使用非JAVA代码.pdf\rJava学习相关电子书籍\\附录B 对比C++和java.pdf\rJava学习相关电子书籍\\附录C Java编程规则.pdf\rJava学习相关电子书籍\\附录D 性能.pdf\rJava学习相关电子书籍\\附录E 关于垃圾收集的一些话.pdf\rJava学习相关电子书籍\\高效程序员的45个习惯：敏捷开发修炼之道.pdf\rJava学习相关电子书籍\\黑客入门(超级详细版).pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\100道趣题.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\15天学会jQuery(0-5).pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\15天学会jQuery(11-15).pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\15天学会jQuery(6-10).pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\15天学会jquery(完整版).pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\css权威指南.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\CSS禅意花园.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\CSS网站布局实录 （第二版）.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\Head First HTML与CSS、XHTML （中文版）.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\HTML5高级程序设计 [西林街 - 千万亿网盘资源 www.xilinjie.com].pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\HTML_5从入门到精通.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\JavaScript DOM编程艺术（中文第二版）.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\JavaScript.DOM高级程序设计.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\JavaScript设计模式.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\JavaScript语言精粹_修订版.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\JavaScript高级程序设计（第3版）中文 高清 完整.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\JQUERY权威指南（完整版）.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\ppk谈JavaScript.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\Secrets of the JavaScript Ninja.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[HTML5游戏开发].(Jeanine Meyer).徐阳等.扫描版.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[HTML5资料]Canvas入门基础教程.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[JavaScript高级程序设计(第2版)].（美）泽卡斯.扫描版.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[jQuery攻略].(印)哈瓦尼.扫描版.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[JQuery菜鸟到忍者].Sitepoint.jQuery.Novice.to.Ninja.Feb.2010.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[ppk谈JavaScript].(荷)科克.扫描版(第一部分).pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[web开发CSS系列].Apress.Pro.CSS.Techniques.Nov.2006.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[web开发CSS系列].SitePoint.Everything.You.Know.About.CSS.is.Wrong.Oct.2008.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[web开发CSS系列].The.Art.and.Science.of.CSS.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[web开发CSS系列].The.Principles.of.Beautiful.Web.Design.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[web开发CSS系列].The.Ultimate.CSS.Reference.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[web开发CSS系列].UIdesignForMereMortals.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[web开发CSS系列].WebDevelopmentSolutions.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[大家网]高性能网站建设指南[www.TopSage.com].pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[深入浅出Javascript].O'reilly.Head.First.Javascript.Jan.2008.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[精通CSS高级Web标准解决方案].CSS.Mastery.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[网页重构xhtml.css].Ajax.In.Action.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[网页重构xhtml.css].Bulletproof_Web_Design.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[网页重构xhtml.css].css.hack.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[网页重构xhtml.css].css.mastery.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[高性能网站建设指南——前端工程师技能精粹(英文原版)].O'Reilly.High.Performance.Web.Sites.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[高性能网站建设进阶指南].(Even.Faster.Web.Sites).Steve.Souders.文字版.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[高流量网站的CSS设计].(Pro.CSS.for.High.Traffic.Websites).A.Kennedy\u0026amp;I.d.Leon.文字版.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\大巧不工Web前端设计修炼之道 [西林街 - 千万亿网盘资源 www.xilinjie.com].pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\悟透JavaScript.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\淘宝的HTML5实践.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\用AngularJS开发下一代Web应用.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\瞬间之美 Web界面设计如何让用户心动.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\精彩绝伦的CSS.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\精通JavaScript(图灵计算机科学丛书).pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\网站重构—应用Web标准进行设计[中文版].pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\高性能JavaScript.pdf\r复制了 208 个文件\rJavaWEB(htmi,css）、JavaScript、jQuery等相关书籍 这个就是子文件夹\rxcopy D:\\CS E:\\kk\\ /s/c\r 文件重命名命令 ren sourceFileName targetFileName  E:\\temp\\cc\u0026gt;ren d.txt d2.txt;\rE:\\temp\\cc\u0026gt;type d2.txt\rthis is a text file\r 文件移动命令(剪贴命令) move fileName path+FileName  E:\\temp\\cc\u0026gt;move d2.txt E:\\temp\\kk\r移动了 1 个文件。\r 文件删除操作 del fileName  E:\\temp\\kk\u0026gt;dir\r驱动器 E 中的卷是 新加卷\r卷的序列号是 64E8-4ABF\rE:\\temp\\kk 的目录\r2020/02/14 19:10 \u0026lt;DIR\u0026gt; .\r2020/02/14 19:10 \u0026lt;DIR\u0026gt; ..\r2020/02/14 18:59 19 d2.txt\r1 个文件 19 字节\r2 个目录 264,645,689,344 可用字节\rE:\\temp\\kk\u0026gt;del d2.txt\rE:\\temp\\kk\u0026gt;dir\r驱动器 E 中的卷是 新加卷\r卷的序列号是 64E8-4ABF\rE:\\temp\\kk 的目录\r2020/02/14 19:12 \u0026lt;DIR\u0026gt; .\r2020/02/14 19:12 \u0026lt;DIR\u0026gt; ..\r0 个文件 0 字节\r2 个目录 264,645,689,344 可用字节\r 删除特定文件夹下的文件  E:\\temp\u0026gt;del kk\rE:\\temp\\kk\\*, 是否确认(Y/N)? Y\r删除kk文件夹下所以的文件\r 文件夹删除 rd /s path  E:\\temp\\kk\u0026gt;rd /s dg\rdg, 是否确认(Y/N)? Y\r 文件夹删除 rd path  PS E:\\temp\u0026gt; dir 目录: E:\\temp\rMode LastWriteTime Length Name\r---- ------------- ------ ----\rd----- 2020/2/15 10:40 cc\rd----- 2020/2/15 12:01 kk\r-a---- 2020/2/14 18:59 19 d2.txt\rPS E:\\temp\u0026gt; rd cc  dos命令下正则表达式有效  D:\\ter\u0026gt;del *.txt ;\r"});index.add({'id':73,'href':'/life/docs/javadir/basedir/jsp_dir/jsp_jstl_core%E6%A0%87%E7%AD%BE%E5%BA%93/','title':"jsp jstl core 标签库 ",'section':"jsp 基础知识 ",'content':"JSTL标签库 #  JSTL主要有五大类标签库\n core标签库(核心标签库),包括通用标签(输出标签),流程控制和循环控制标签 fmt标签库,包括格式化,国际格式化标签等 fn标签库,函数标签库 XML标签库,关于XML操作的标签库 SQL标签库,操作数据库标签  core标签库用法 #  使用core标签前必须添加taglie指令\n %@ taglib prefix=\u0026ldquo;c\u0026rdquo; uri=\u0026ldquo;http://java.sun.com/jsp/jstl/core\u0026quot; %\u0026gt;\n  \u0026lt;c:set\u0026gt;在某个范围设定某个值   \u0026lt;c:set value=\u0026ldquo;表达式\u0026rdquo; var=\u0026ldquo;varname\u0026rdquo; [scope=\u0026ldquo;request|page|session|application\u0026rdquo;]\u0026gt;\u0026lt;/c:set\u0026gt;\n \u0026lt;c:set value=\u0026quot;${1+2 }\u0026quot; var=\u0026quot;variable\u0026quot;\u0026gt;\u0026lt;/c:set\u0026gt;\r${variable }\r \u0026lt;c:out\u0026gt;把表达式的结构输出到页面中   \u0026lt;c:out value=\u0026ldquo;表达式\u0026rdquo; [escapeXml=\u0026ldquo;true|false\u0026rdquo;]\u0026gt;\u0026lt;/c:out\u0026gt;\n \u0026lt;c:set value=\u0026quot;${1+2 }\u0026quot; var=\u0026quot;variable\u0026quot;\u0026gt;\u0026lt;/c:set\u0026gt;\r\u0026lt;c:out value=\u0026quot;${variable }\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r \u0026lt;c:if\u0026gt;条件判断   \u0026lt;c:if test=\u0026ldquo;判断条件\u0026rdquo; [var=\u0026ldquo;varname\u0026rdquo;] [scope=\u0026ldquo;request|page|session|application\u0026rdquo;]\u0026gt; 条件为真执行的语句 \u0026lt;/c:if\u0026gt;\n \u0026lt;c:if test=\u0026quot;${1\u0026lt;2 }\u0026quot; var=\u0026quot;result\u0026quot;\u0026gt;\r\u0026lt;c:out value=\u0026quot;${result }\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r\u0026lt;/c:if\u0026gt;\r \u0026lt;c:choose\u0026gt;,\u0026lt;c:when\u0026gt;,\u0026lt;c:otherwise\u0026gt;流程控制标签   \u0026lt;c:choose\u0026gt; \u0026lt;c:when test=\u0026ldquo;表达式\u0026rdquo;\u0026gt; 表达式为真执行的语句 \u0026lt;/c:when\u0026gt; [\u0026lt;c:otherwise\u0026gt; 表达式为假执行的语句 \u0026lt;/c:otherwise\u0026gt;] \u0026lt;/c:choose\u0026gt;\n  \u0026lt;c:when\u0026gt;必须在\u0026lt;c:otherwise\u0026gt;前边,\u0026lt;c:choose\u0026gt;可以添加多个\u0026lt;c:choose\u0026gt;,类似于if else if写法\n \u0026lt;c:set value=\u0026quot;8\u0026quot; var=\u0026quot;variable1\u0026quot;\u0026gt;\u0026lt;/c:set\u0026gt;\r\u0026lt;c:set value=\u0026quot;9\u0026quot; var=\u0026quot;variable2\u0026quot;\u0026gt;\u0026lt;/c:set\u0026gt;\r\u0026lt;c:choose\u0026gt;\r\u0026lt;c:when test=\u0026quot;${variable1%2==0 }\u0026quot;\u0026gt;\r\u0026lt;c:out value=\u0026quot;variable1:偶数\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r\u0026lt;c:choose\u0026gt;\r\u0026lt;c:when test=\u0026quot;${variable2%2==0 }\u0026quot;\u0026gt;\r\u0026lt;c:out value=\u0026quot;variable2:偶数\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r\u0026lt;/c:when\u0026gt;\r\u0026lt;c:otherwise\u0026gt;\r\u0026lt;c:out value=\u0026quot;variable2:奇数\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r\u0026lt;/c:otherwise\u0026gt;\r\u0026lt;/c:choose\u0026gt;\r\u0026lt;/c:when\u0026gt;\r\u0026lt;c:otherwise\u0026gt;\r\u0026lt;c:out value=\u0026quot;variable1:奇数\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r\u0026lt;/c:otherwise\u0026gt;\r\u0026lt;/c:choose\u0026gt;\r \u0026lt;c:forEach\u0026gt;迭代标签   \u0026lt;c:forEach [var=\u0026ldquo;varname\u0026rdquo;] [varStatus=\u0026ldquo;varStatusName\u0026rdquo;] [begin=\u0026ldquo;开始\u0026rdquo;] [end=\u0026ldquo;结束\u0026rdquo;] [step=\u0026ldquo;步数\u0026rdquo;]\u0026gt; java or html code \u0026lt;/c:forEach\u0026gt;\n \u0026lt;table\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;行号1\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;行号2\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;当前迭代项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;是否第一项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;是否最后一项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;结果\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;c:forEach var=\u0026quot;i\u0026quot; varStatus=\u0026quot;j\u0026quot; begin=\u0026quot;1\u0026quot; end=\u0026quot;10\u0026quot; step=\u0026quot;2\u0026quot;\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;${j.index }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.count }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.current }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.first }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.last }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${i }\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/c:forEach\u0026gt;\r\u0026lt;/table\u0026gt;\r  \u0026lt;c:forEach item=\u0026ldquo;collection\u0026rdquo; [varStatus=\u0026ldquo;varStatusName\u0026rdquo; [begin=\u0026ldquo;开始\u0026rdquo;] [end=\u0026ldquo;结束\u0026rdquo;] [step=\u0026ldquo;步数\u0026rdquo;]]\u0026gt; java or heml code \u0026lt;/c:forEach\u0026gt;\n \u0026lt;%\rList list=new ArrayList();\rlist.add(\u0026quot;zhangsan\u0026quot;);\rlist.add(\u0026quot;lisi\u0026quot;);\rlist.add(\u0026quot;wangwu\u0026quot;);\rlist.add(\u0026quot;liuliu\u0026quot;);\rpageContext.setAttribute(\u0026quot;collection\u0026quot;, list);\r%\u0026gt;\r\u0026lt;table\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;行号1\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;行号2\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;当前迭代项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;是否第一项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;是否最后一项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;姓名\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;c:forEach items=\u0026quot;${collection }\u0026quot; var=\u0026quot;i\u0026quot; varStatus=\u0026quot;j\u0026quot;\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;${j.index }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.count }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.current }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.first }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.last }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${i }\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/c:forEach\u0026gt;\r\u0026lt;/table\u0026gt;\r \u0026lt;c;forTokens\u0026gt;字符串分割标签   \u0026lt;c:forTokens items=\u0026ldquo;字符串\u0026rdquo; delims=\u0026ldquo;分割符\u0026rdquo; [var=\u0026ldquo;別名\u0026rdquo;] [varStatus=\u0026ldquo;varStatusName\u0026rdquo;] [begin=\u0026ldquo;开始\u0026rdquo;] [end=\u0026ldquo;结束\u0026rdquo;] [step=\u0026ldquo;步数\u0026rdquo;]\u0026gt; java or html code \u0026lt;/c:forTokens\u0026gt;\n \u0026lt;table\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;行号1\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;行号2\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;当前迭代项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;是否第一项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;是否最后一项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;子字符串\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;c:forTokens items=\u0026quot;this is a jstl code\u0026quot; delims=\u0026quot; \u0026quot; var=\u0026quot;i\u0026quot; varStatus=\u0026quot;j\u0026quot;\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;${j.index }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.count }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.current }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.first }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.last }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${i }\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/c:forTokens\u0026gt;\r \u0026lt;c;remove\u0026gt;删除某个范围内的值   \u0026lt;c:remove var=\u0026ldquo;varname\u0026rdquo; [scope=\u0026ldquo;request|page|session|application\u0026rdquo;]/\u0026gt;\n \u0026lt;%\rpageContext.setAttribute(\u0026quot;varname1\u0026quot;, \u0026quot;one\u0026quot;);\rrequest.setAttribute(\u0026quot;varname2\u0026quot;, \u0026quot;two\u0026quot;);\rsession.setAttribute(\u0026quot;varname3\u0026quot;, \u0026quot;three\u0026quot;);\rapplication.setAttribute(\u0026quot;varname4\u0026quot;, \u0026quot;four\u0026quot;);\r%\u0026gt;\r\u0026lt;table\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;pageContext\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;request\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;session\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;application\u0026lt;/th\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;${varname1 }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${varname2 }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${varname3 }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${varname4 }\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/table\u0026gt;\r\u0026lt;c:remove var=\u0026quot;varname1\u0026quot;/\u0026gt;\r\u0026lt;c:remove var=\u0026quot;varname2\u0026quot;/\u0026gt;\r\u0026lt;c:remove var=\u0026quot;varname3\u0026quot;/\u0026gt;\r\u0026lt;c:remove var=\u0026quot;varname4\u0026quot;/\u0026gt;\r\u0026lt;c:out value=\u0026quot;删除后\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;table\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;pageContext\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;request\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;session\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;application\u0026lt;/th\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;${varname1 }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${varname2 }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${varname3 }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${varname4 }\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/table\u0026gt;\r \u0026lt;c:catch\u0026gt;抛出异常标签   \u0026lt;c:catch [var=\u0026ldquo;varname\u0026rdquo;]\u0026gt; code \u0026lt;/c:catch\u0026gt;\n \u0026lt;c:catch var=\u0026quot;error\u0026quot;\u0026gt;\r\u0026lt;%\rint[] arr=new int[4];\rint j=arr[5];\r%\u0026gt;\r\u0026lt;/c:catch\u0026gt;\r\u0026lt;c:out value=\u0026quot;错误信息:${error }\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;c:catch var=\u0026quot;error1\u0026quot;\u0026gt;\r\u0026lt;%\rint j=5/0;\r%\u0026gt;\r\u0026lt;/c:catch\u0026gt;\r\u0026lt;c:out value=\u0026quot;错误信息:${error1 }\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r \u0026lt;c:param\u0026gt;向导入的页面传入参数,与\u0026lt;c:import\u0026gt;结合使用   \u0026lt;c:param name=\u0026ldquo;paramName\u0026rdquo; value=\u0026ldquo;paramValue\u0026rdquo;\u0026gt;\u0026lt;/c:param\u0026gt;\n \u0026lt;c:import\u0026gt;导入静|动态文件   \u0026lt;c:import url=\u0026ldquo;url\u0026rdquo; [context=\u0026ldquo;context\u0026rdquo;] [var=\u0026ldquo;varname\u0026rdquo;] [scope=\u0026ldquo;request|page|session|application\u0026rdquo;] [charEncoding=\u0026ldquo;coding\u0026rdquo;]\u0026gt; [\u0026lt;c:param name=\u0026ldquo;paramName\u0026rdquo; [value=\u0026ldquo;valueName\u0026rdquo;]\u0026gt;\u0026lt;/c:param\u0026gt;] \u0026lt;/c:import\u0026gt;\n \u0026lt;c:import url=\u0026quot;https://www.baidu.com/s\u0026quot;\u0026gt;\r\u0026lt;c:param name=\u0026quot;wd\u0026quot; value=\u0026quot;java\u0026quot;/\u0026gt;\r\u0026lt;/c:import\u0026gt;\r \u0026lt;c:redirect\u0026gt;重定向另一个页面   \u0026lt;c:redirect url=\u0026ldquo;url\u0026rdquo; [contex=\u0026ldquo;context\u0026rdquo;]\u0026gt; [\u0026lt;c:param name=\u0026ldquo;paramName\u0026rdquo; [value=\u0026ldquo;valueName\u0026rdquo;]\u0026gt;\u0026lt;/c:param\u0026gt;] \u0026lt;/c:redirect\u0026gt;\n \u0026lt;c:redirect url=\u0026quot;https://www.baidu.com/s\u0026quot;\u0026gt;\r\u0026lt;c:param name=\u0026quot;wd\u0026quot; value=\u0026quot;java\u0026quot;/\u0026gt;\r\u0026lt;/c:redirect\u0026gt;  \u0026lt;c:url\u0026gt;生成一个url   \u0026lt;c:url value=\u0026ldquo;url\u0026rdquo; [context=\u0026ldquo;context\u0026rdquo;] var=\u0026ldquo;varname\u0026rdquo; [scope=\u0026ldquo;request|page|session|application\u0026rdquo;]\u0026gt; [\u0026lt;c:param name=\u0026ldquo;paramName\u0026rdquo; [value=\u0026ldquo;valueName\u0026rdquo;]\u0026gt;\u0026lt;/c:param\u0026gt;] \u0026lt;/c:url\u0026gt;\n \u0026lt;c:url value=\u0026quot;https://www.baidu.com/s\u0026quot; var=\u0026quot;varname\u0026quot;\u0026gt;\r\u0026lt;c:param name=\u0026quot;wd\u0026quot; value=\u0026quot;java\u0026quot;\u0026gt;\u0026lt;/c:param\u0026gt;\r\u0026lt;/c:url\u0026gt;\r\u0026lt;c:out value=\u0026quot;${varname }\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r\u0026lt;br\u0026gt;\r\u0026lt;c:url value=\u0026quot;/index.jsp\u0026quot; var=\u0026quot;varname\u0026quot;\u0026gt;\u0026lt;/c:url\u0026gt;\r\u0026lt;c:out value=\u0026quot;${varname }\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r 表格合并   \u0026lt;div class=\u0026quot;page-inner mt--5\u0026quot; style=\u0026quot;margin-bottom: 1rem;\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;row mt--2\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;col-md-12\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;card full-height\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;card-header\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;card-head-row\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;card-title\u0026quot;\u0026gt;工作事项配置\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026quot;card-body\u0026quot;\u0026gt;\r\u0026lt;form class=\u0026quot;form-horizontal\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;row form-group\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;col-md-12\u0026quot;\u0026gt;\r\u0026lt;table class=\u0026quot;table table-bordered table-striped\u0026quot;\u0026gt;\r\u0026lt;thead\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;阶段\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;工作事项\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;名称\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;排序\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;责任人\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;描述\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;编辑\u0026lt;/th\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/thead\u0026gt;\r\u0026lt;tbody\u0026gt;\r\u0026lt;c:forEach items=\u0026quot;${projectWorkStageConfigVoList}\u0026quot; var=\u0026quot;ProjectWorkStageConfigVo\u0026quot; varStatus=\u0026quot;StatusWorkStageConfigVo\u0026quot;\u0026gt;\r\u0026lt;c:forEach items=\u0026quot;${ProjectWorkStageConfigVo.projectPhaseConfigVoList}\u0026quot; var=\u0026quot;ProjectPhaseConfigVo\u0026quot; varStatus=\u0026quot;StatusPhaseConfigVo\u0026quot;\u0026gt;\r\u0026lt;c:forEach items=\u0026quot;${ProjectPhaseConfigVo.projectPhaseConfigList}\u0026quot; var=\u0026quot;ProjectPhaseConfig\u0026quot; varStatus=\u0026quot;StatusConfig\u0026quot;\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;c:choose\u0026gt;\r\u0026lt;c:when test=\u0026quot;${ StatusConfig.first \u0026amp;\u0026amp; StatusPhaseConfigVo.first}\u0026quot;\u0026gt;\r\u0026lt;td rowspan=\u0026quot;${fn:length(ProjectWorkStageConfigVo.projectPhaseConfigVoList) * fn:length(ProjectPhaseConfigVo.projectPhaseConfigList)}\u0026quot;\u0026gt;\r${ProjectWorkStageConfigVo.workStageName}\r\u0026lt;/td\u0026gt;\r\u0026lt;/c:when\u0026gt;\r\u0026lt;/c:choose\u0026gt;\r\u0026lt;c:choose\u0026gt;\r\u0026lt;c:when test=\u0026quot;${ StatusConfig.first}\u0026quot;\u0026gt;\r\u0026lt;td rowspan=\u0026quot;${fn:length(ProjectPhaseConfigVo.projectPhaseConfigList)}\u0026quot;\u0026gt;\r${ProjectPhaseConfigVo.projectPhaseName}\r\u0026lt;/td\u0026gt;\r\u0026lt;/c:when\u0026gt;\r\u0026lt;/c:choose\u0026gt;\r\u0026lt;td \u0026gt;${ProjectPhaseConfig.parName} \u0026lt;/td\u0026gt;\r\u0026lt;td \u0026gt;${ProjectPhaseConfig.sorting} \u0026lt;/td\u0026gt;\r\u0026lt;td \u0026gt;${ProjectPhaseConfig.parValues} \u0026lt;/td\u0026gt;\r\u0026lt;td \u0026gt;${ProjectPhaseConfig.remark} \u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;\r\u0026lt;button type=\u0026quot;button\u0026quot; onclick=\u0026quot;editProjectPhaseConfig('${ProjectPhaseConfig.id}');\u0026quot;\rstyle=\u0026quot;margin-left: 5px;\u0026quot;\rclass=\u0026quot;btn btn-primary btn-xs tooltips\u0026quot;\rdata-placement=\u0026quot;bottom\u0026quot; data-original-title=\u0026quot;编辑\u0026quot;\u0026gt;\r\u0026lt;i class=\u0026quot;fa fa-pen\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\r\u0026lt;/button\u0026gt;\r\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/c:forEach\u0026gt;\r\u0026lt;/c:forEach\u0026gt;\r\u0026lt;/c:forEach\u0026gt;\r\u0026lt;/tbody\u0026gt;\r\u0026lt;/table\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r"});index.add({'id':74,'href':'/life/docs/javadir/thread/tool/','title':"并发工具 ",'section':"多线程与并发 ",'content':"目录 #    ThreadLocal\n  Semaphore和Exchanger\n  CountDownLatch和CyclicBarrier\n  Phaser\n  Executor\n  Future和Callable\n  CompletionService\n  ExecutorService\n  Fork_Join\n  并发集合框架\n  "});index.add({'id':75,'href':'/life/docs/operating_system/three_chapter/','title':"第三章 内存管理 ",'section':"操作系统 ",'content':"内存管理 #  "});index.add({'id':76,'href':'/life/docs/car_study/three/','title':"科目三",'section':"汽车教学",'content':""});index.add({'id':77,'href':'/life/docs/javadir/tooldoc/commons_io/','title':"apache FilenameUtils 文件名称操作",'section':"Java公共库文档总结 ",'content':"org.apache.commons.io.FilenameUtils 文件名称操作 #    FilenameUtils.getExtension(fileName) 获取文件后缀 //text\n  FilenameUtils.getName(fileName) 获取文件完整名称 //c.text\n  FilenameUtils.getBaseName(fileName) 获取文件名称 //c\n  FilenameUtils.getFullPath(fileName) 获取文件的完整路径 //D:\\data\\\n  String path = \u0026quot;D:\\\\data\\\\假设开发法土地模板.docx\u0026quot; ;\rString fullPath = FilenameUtils.getFullPath(path);\rSystem.out.println(\u0026quot;fullPath:\u0026quot;+fullPath);//D:\\data\\\rString name = FilenameUtils.getName(path);\rSystem.out.println(\u0026quot;name:\u0026quot;+name); //假设开发法土地模板.docx\rString prefix = FilenameUtils.getPrefix(path);\rSystem.out.println(\u0026quot;prefix:\u0026quot;+prefix); //D:\\\rint prefixLength = FilenameUtils.getPrefixLength(path);\rSystem.out.println(\u0026quot;prefixLength:\u0026quot;+prefixLength); //3\rString path1 = FilenameUtils.getPath(path);\rSystem.out.println(\u0026quot;path:\u0026quot;+path1); //data\\\rString baseName = FilenameUtils.getBaseName(path);\rSystem.out.println(\u0026quot;baseName:\u0026quot;+baseName); //假设开发法土地模板\rString extension = FilenameUtils.getExtension(path);\rSystem.out.println(\u0026quot;extension:\u0026quot;+extension); //docx\rFileUtils：提供文件操作（移动文件，读取文件，检查文件是否存在等等） #  String path = \u0026quot;D:\\\\data\\\\test\u0026quot;;\rString fileSize = FileUtils.byteCountToDisplaySize(1024 * 1024);\r// 转换文件长度单位\rAssert.assertEquals(\u0026quot;1 MB\u0026quot;, fileSize);\r// 清空某目录下的所有目录,含文件夹和文件,注意是目录下,不包含父目录\rFileUtils.cleanDirectory(new File(path));\r// copy URL中文件到參數2\rFileUtils.copyURLToFile(new URL(\u0026quot;https://v3.bootcss.com/\u0026quot;), new File(\u0026quot;D:\\\\data\\\\test1\\\\a1.txt\u0026quot;));//a1.txt 里面拷贝下来是一个网页\r// 强制删除文件\rFileUtils.forceDelete(new File(\u0026quot;D:\\\\data\\\\test1\\\\a1.txt\u0026quot;));\r// 将文件转为 InputStream\rFileUtils.openInputStream(new File(\u0026quot;D:\\\\data\\\\aac.pptx\u0026quot;));\r//openOutStream\rFileUtils.openOutputStream(new File(\u0026quot;D:\\\\data\\\\aac.pptx\u0026quot;));\r// 读取文件转为字节数组\rbyte[] bytes = FileUtils.readFileToByteArray(new File(\u0026quot;D:\\\\data\\\\aab.pptx\u0026quot;));\r// 读取文件转换为String类型,方便文本读取\rFileUtils.readFileToString(new File(\u0026quot;D:\\\\data\\\\aab.pptx\u0026quot;),\u0026quot;UTF-8\u0026quot;);\r// 返回目录的大小\rlong size = FileUtils.sizeOfDirectory(new File(\u0026quot;D:\\\\data\\\\\u0026quot;));\r// 写字符串到参数1文件中\rFileUtils.writeStringToFile(new File(\u0026quot;D:\\\\data\\\\test1\\\\b2.txt\u0026quot;), \u0026quot;test\u0026quot;, \u0026quot;UTF-8\u0026quot;);\r// 将参数1目录下的全部内容复制到参数2目录\rFileUtils.copyDirectory(new File(\u0026quot;D:\\\\data\\\\test1\u0026quot;), new File(\u0026quot;D:\\\\data\\\\test2\u0026quot;));\r// 将参数1目录整个复制到参数2目录下\rFileUtils.copyDirectoryToDirectory(new File(\u0026quot;D:\\\\data\u0026quot;) , new File(\u0026quot;D:\\\\data\\\\test1\u0026quot;));\r// copy参数1文件到参数2\rFileUtils.copyFile(new File(\u0026quot;D:\\\\data\\\\test1\\\\b2.txt\u0026quot;), new File(\u0026quot;D:\\\\data\\\\b1.txt\u0026quot;));\r// copy参数1文件到参数2目录下\rFileUtils.copyFileToDirectory(new File(\u0026quot;D:\\\\data\\\\b1.txt\u0026quot;) , new File(\u0026quot;D:\\\\data\\\\test2\u0026quot;)) ;\r//读取文件的每一行\rList\u0026lt;String\u0026gt; stringList = FileUtils.readLines(new File(\u0026quot;D:\\\\data\\\\b1.txt\u0026quot;));\rIOCase：提供字符串操作以及比较的方法 #  FileSystemUtils：提供查看指定目录剩余空间的方法 #   long spaceKb = FileSystemUtils.freeSpaceKb(\u0026quot;D:\\\\data\\\\\u0026quot;);//247018912 kb\rSystem.out.println(spaceKb);\rIOUtils #   Reader reader = new InputStreamReader(new FileInputStream(new File(\u0026quot;D:\\\\data\\\\b1.txt\u0026quot;))) ;\rIOUtils.copy(reader,new FileOutputStream(\u0026quot;D:\\\\data\\\\b3.txt\u0026quot;)) ;\rbyte[] toByteArray = IOUtils.toByteArray(new URL(\u0026quot;https://www.bootcss.com/\u0026quot;));\r"});index.add({'id':78,'href':'/life/docs/javadir/middleware/testng/','title':"testng 学习与使用",'section':"中间件 ",'content':"TestNG介绍 #   TestNG是Java中的一个测试框架， 类似于JUnit 和NUnit, 功能都差不多， 只是功能更加强大，使用也更方便Java中已经有一个JUnit的测试框架了。 TestNG比JUnit功能强大的多。 测试人员一般用TestNG来写自动化测试。 开发人员一般用JUnit写单元测试。\n TestNG的基本注解 #     说明 示 例     @BeforeSuite 在该套件的所有测试都运行在注释的方法之前，仅运行一次。   @AfterSuite 在该套件的所有测试都运行在注释方法之后，仅运行一次。   @BeforeClass 在调用当前类的第一个测试方法之前运行，注释方法仅运行一次。   @AfterClass 在调用当前类的第一个测试方法之后运行，注释方法仅运行一次   @BeforeTest 注释的方法将在属于标签内的类的所有测试方法运行之前运行。   @AfterTest 注释的方法将在属于标签内的类的所有测试方法运行之后运行。   @BeforeGroups 配置方法将在之前运行组列表。 此方法保证在调用属于这些组中的任何一个的第一个测试方法之前不久运行。   @AfterGroups 此配置方法将在之后运行组列表。该方法保证在调用属于任何这些组的最后一个测试方法之后不久运行。   @BeforeMethod 注释方法将在每个测试方法之前运行。   @AfterMethod 注释方法将在每个测试方法之后运行。   @DataProvider 标记一种方法来提供测试方法的数据。 注释方法必须返回一个Object [] []，其中每个Object []可以被分配给测试方法的参数列表。 要从该DataProvider接收数据的@Test方法需要使用与此注释名称相等的dataProvider名称。   @Factory 将一个方法标记为工厂，返回TestNG将被用作测试类的对象。 该方法必须返回Object []。   @Listeners 定义测试类上的侦听器。   @Parameters 描述如何将参数传递给@Test方法。   @Test 将类或方法标记为测试的一部分。    Testng翻译 #   org.testng.annotations.Test\n  /**\r* 此类/方法所属的组列表。\r*/\rpublic String[] groups() default {};\r/**\r* 是否启用此类/方法上的方法。\r*/\rpublic boolean enabled() default true;\r/**\r*用于填充此方法参数的变量列表。\r*这些变量必须在属性文件中定义。\r*\r* @deprecated Use @Parameters\r*/\r@Deprecated\rpublic String[] parameters() default {};\r/**\r* The list of groups this method depends on. Every method\r* member of one of these groups is guaranteed to have been\r* invoked before this method. Furthermore, if any of these\r* methods was not a SUCCESS, this test method will not be\r* run and will be flagged as a SKIP.\r*/\rpublic String[] dependsOnGroups() default {};\r/**\r* The list of methods this method depends on. There is no guarantee\r* on the order on which the methods depended upon will be run, but you\r* are guaranteed that all these methods will be run before the test method\r* that contains this annotation is run. Furthermore, if any of these\r* methods was not a SUCCESS, this test method will not be\r* run and will be flagged as a SKIP.\r*\r* If some of these methods have been overloaded, all the overloaded\r* versions will be run.\r*/\rpublic String[] dependsOnMethods() default {};\r/**\r此测试应花费的最大毫秒数。\r如果此时间后未返回，则将标记为失败。\r*/\rpublic long timeOut() default 0;\r/**\r本试验方法中的最大数毫秒引用总数应采用。如果该方法中没有具体说明引用的属性，则此注释将不清楚。如果这段时间后还没有回来，那将是一个失败。\r*/\rpublic long invocationTimeOut() default 0;\r/**\r* 应调用此方法的次数。\r*/\rpublic int invocationCount() default 1;\r/**\r* 此方法的线程池的大小。\r* 该方法将从invocationCount指定的多个线程中调用。\r* 注意: 如果未指定invocationCount，则忽略此属性。\r*/\rpublic int threadPoolSize() default 0;\r/**\r* 此方法预期的成功百分比。\r*/\rpublic int successPercentage() default 100;\r/**\r* 此测试方法的数据提供程序的名称。\r* @see org.testng.annotations.DataProvider\r*/\rpublic String dataProvider() default \u0026quot;\u0026quot;;\r/**\r* The class where to look for the data provider. If not\r* specified, the dataprovider will be looked on the class\r* of the current test method or one of its super classes.\r* If this attribute is specified, the data provider method\r* needs to be static on the specified class.\r*/\rpublic Class\u0026lt;?\u0026gt; dataProviderClass() default Object.class;\r/**\r如果设置为true，则即使此测试方法依赖于\r在失败的方法上。如果此测试\r不依赖任何方法或组。\r*/\rpublic boolean alwaysRun() default false;\r/**\r此方法的说明。使用的字符串将出现在\r如果verbose大于等于2，也可以在标准输出上显示HTML报告。\r*/\rpublic String description() default \u0026quot;\u0026quot;;\r/**\r* The list of exceptions that a test method is expected to throw. If no\r* exception or a different than one on this list is thrown, this test will be\r* marked a failure.\r*/\rpublic Class[] expectedExceptions() default {};\r/**\r如果指定了ExpectedExceptions，则其消息必须与此属性中指定的正则表达式匹配。\r*/\rpublic String expectedExceptionsMessageRegExp() default \u0026quot;.*\u0026quot;;\r/**\r此测试类应放入的套件的名称。这个\r如果@test不在类级别，则忽略属性。\r*/\rpublic String suiteName() default \u0026quot;\u0026quot;;\r/**\r应放置此测试类的测试的名称。这个\r如果@test不在类级别，则忽略属性。\r*/\rpublic String testName() default \u0026quot;\u0026quot;;\r/**\r* @不推荐使用单线程\r*/\rpublic boolean sequential() default false;\r/**\r*如果设置为true，则确保此测试类上的所有方法都运行\r*在同一线程中，即使测试当前正以parallel=“true”运行。\r*\r*此属性只能在类级别使用，将被忽略\r*如果在方法级别使用。\r*/\rpublic boolean singleThreaded() default false;\r/**\r* The name of the class that should be called to test if the test\r* should be retried.\r* @return String The name of the class that will test if a test method\r* should be retried.\r*/\rpublic Class retryAnalyzer() default Class.class;\r/**\r* If true and invocationCount is specified with a value \u0026gt; 1,\r* then all invocations after a failure will be marked as a SKIP\r* instead of a FAIL.\r*/\rpublic boolean skipFailedInvocations() default false;\r/**\r* If set to true, this test will run even if the methods\r* it depends on are missing or excluded.\r*/\rpublic boolean ignoreMissingDependencies() default false;\r/**\r* 调度优先级。优先安排较低的优先级。\r*/\rint priority() default 0;\r"});index.add({'id':79,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/iqcs36rgjy/tbwyjex4gc/','title':"从此你不再受伤害",'section':"人际剖析",'content':"从此你不再受伤害 #  "});index.add({'id':80,'href':'/life/docs/databases/mysql/mysql_basis/','title':"基本命令",'section':"mysql学习笔记",'content':"  停止命令：net stop mysql\n  启动命令：net start mysql\n  登陆 mysql -u 用户名 -p\n  查看数据库版本: mysql \u0026ndash;version：用于在未登录情况下，查看本机mysql版本,select version();：登录情况下，查看链接的库版本\n  显示所有数据库：show databases;\n  进入指定的库：use 库名;\n  显示当前库中所有的表：show tables;\n  查看其他库中所有的表：show tables from 库名;\n  查看表的创建语句：show create table 表名;\n  查看表结构：desc 表名;\n  SQL的语言分类 #  DQL（Data Query Language）：数据查询语言\rselect 相关语句\rDML（Data Manipulate Language）：数据操作语言\rinsert 、update、delete 语句\rDDL（Data Define Languge）：数据定义语言\rcreate、drop、alter 语句\rTCL（Transaction Control Language）：事务控制语言\rset autocommit=0、start transaction、savepoint、commit、rollback\rmysql语法规范 #  不区分大小写，但建议关键字大写，表名、列名小写\r每条命令最好用英文分号结尾\r每条命令根据需要，可以进行缩进或换行\r注释\r单行注释：#注释文字\r单行注释：-- 注释文字 ，注意， 这里需要加空格\r多行注释：/* 注释文字 */\rMySQL删除数据库中的所有表 #  SELECT CONCAT('drop table ',table_name,';') FROM information_schema.`TABLES` WHERE table_schema='数据库名';\r# 然后复制结果 然后重新执行\r"});index.add({'id':81,'href':'/life/docs/hugo%E5%AD%A6%E4%B9%A0/','title':"hugo教程",'section':"Docs",'content':"hugo学习\n"});index.add({'id':82,'href':'/life/docs/operating_system/one_chapter/1_3_/','title':" 操作系统的发展与分类 ",'section':"第一章 操作系统概述 ",'content':"一:知识总览 #  二:分类描述 #   1:手工操作阶段   2:批处理阶段——单道批处理系统   引入脱机输入/输出技术（用外围机+磁带完成），并由监督程序负责控制作业的输入、输出\n  和上面不同的是不必等结果输出在执行而是计算机执行完毕马上将结果输入磁带中并在同事已经开始执行其它数据程序\n  3:批处理阶段——多道批处理系统   4:分时操作系统   5:实时操作系统   主要优点：能够优先响应一些紧急任务，某些紧急任务不需时间片排队。在实时操作系统的控制下，计算机系统接收到外部信号后及时进行处理，并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性  三:其他几种操作系统 #   网络操作系统：是伴随着计算机网络的发展而诞生的，能把网络中各个计算机有机地结合起来，实现数据传送等功能，实现网络中各种资源的共享（如文件共享）和各台计算机之间的通信。（如：Windows NT 就是一种典型的网络操作系统，网站服务器就可以使用） 分布式操作系统：主要特点是分布性和并行性。系统中的各台计算机地位相同，任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务。 个人计算机操作系统：如 Windows XP、MacOS，方便个人使用。  四:知识回顾与重要考点 #  "});index.add({'id':83,'href':'/life/docs/operating_system/two_chapter/2_1_3/','title':"进程控制",'section':"第二章 进程管理 ",'content':""});index.add({'id':84,'href':'/life/docs/computer_network/network_architecture/1.1.3%E9%80%9F%E7%8E%87%E7%9B%B8%E5%85%B3%E7%9A%84%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/','title':"速率",'section':"网络体系结构",'content':"速率 #   速率即数据率或称数据传输率或比特率\n  速率即数据率或称数据传输率或比特率 比特 1/0 位 连接在计算机网络上的主机在数字信道上传输数据位数的速率 单位是b/s , kb/s,Gb/s,Gb/s ,Tb/s 发送端 ==\u0026gt; 接收端 速率是10b/s 0101010101  宽带 #   \u0026ldquo;带宽\u0026quot;原本指某个信号具有的频道宽度，即最高频率与最低频率之差，单位是赫兹(Hz) 计算机网络中，带宽用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的\u0026quot;最高数据率\u0026rdquo;。单位是\u0026quot;比特/秒\u0026quot;  吞吐量 #   表示在单位时间内通过某个网络(或信道、接口)的数据量。单位b/s,kb/s,Mb/s 吞吐量受网络的带宽或网络的额定速率的限制   时延 #    时延 = 发送时延 + 传播时延 + 排队时延 + 处理时延\n  发送时延 : 从发送分组的第一个比特算起，到分组的最后一个比特发送完毕所需的时间(分组交换/路由器将数据推到信道上的时间)\n  传播时延 : 这里看什么介质来传播数据 计算机网络中是 数字信号 -\u0026gt; 模拟信号 因此假如是光纤那么传播速度非常快2x⑩9 当然也有用无线电波我个人不知道无限电波是怎样模拟的无法知道速度究竟怎样,公示 传播时间 = 数据长度 / 传播速率(发送速率,带宽)\n  排队时延 : 等待输出/入链路可用\n  处理时延 : 检查找出口 (如果大陆地区还会有数据拆分与重新组合过滤检查)\n  时延带宽积 (可以理解为物理中的长度) #   时延带宽积 = 传播时延 x 带宽 (时间 x 速度)  往返时延RTT #    从发送方发送数据开始，到发送方收到接收方的确认\n  RTT 包括 往返传播时延 = 传播时延 * 2 ，末端处理时间\n  利用率 (信道利用率 , 网络利用率) #    信道利用率 有数据通过时间 / 总体通过时间(有无数据通过时间)\n  网络利用率 信道利用率加权平均值\n  "});index.add({'id':85,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/x5ws5dsp8a/','title':"男生 穿着 和 仪态",'section':"自我提升",'content':" 这方面我再考虑 是不是可以去咨询一下那些专业的人员 现在不是有很多信息咨询分析师吗\n 发型 #  参考\n"});index.add({'id':86,'href':'/life/docs/javadir/basedir/java-basic-x-reflection/','title':"反射机制详解",'section':"Java基础知识 ",'content':"demo #  "});index.add({'id':87,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/2bm8trpqzx/','title':"发声 具体训练方法",'section':"自信",'content':"先简单了解一下我们的语音产生原理：人的发音是由多个系统协作完成的 #   人的发音是由多个系统协作完成的   1、众所周知，肺储存空气。通过呼吸系统，空气进入肺部，在说话时腹肌收缩使横膈膜向上，挤出肺部的空气，形成气流。肺部呼出的气流是语音产生的原动力，依靠呼吸系统构建的动力系统，产生气流及声门下压力。 2、气流来到振动系统，在动力作用下，声带产生振动，形成基础的声音。 3、声音通过咽腔、口腔、鼻腔、胸腔等共鸣腔体对声音进行调制，最后经过唇、齿、舌、腭构音器官的精细加工形成最终的语音。  【以下是一些具体训练方法】 #  一、练共鸣腔让你的声音浑厚。 #  二、练气息，为你说话提供动力 #  三、练咬字器官，助你发音清晰响亮。 #  四、练好普通话的声调，增强你的语言魅力。参考以下的方法感受一下发音时胸腔的震动，以及声音的浑厚度。 #  1、用非常低沉的声音叹气：哎\u0026hellip;\u0026hellip;（练习15次以上）\n2、闭着嘴巴发音：嗯——（延长音，一口气一次，练15次以上）\n3、发延长的音：yu——（一口气一次，练15次以上）\n如果你想要更稳定有力的胸腔共鸣，可以扩展咽腔。方法如下：\n1、闭着嘴打哈欠，注意要挺软腭，咽壁绷紧，放松下巴，舌尖轻轻抵住下齿，尽量把舌根往下压，体会咽腔的扩张感。（至少做20个）\n2、深吸气，吸气时不要耸肩，不能抬胸，小声地持续发“yu”，最好一口气坚持发音15秒以上。同时应该注意：舌根降下去，舌面呈凹槽状，软腭提起，嘴巴搓圆，把力量集中在唇部的中间。\n注：要特意训练口腔，加大口腔后部的空间，提起颧肌，打开牙关，挺起软腭，放松下巴 ，这些要经常训练。 说话的时候尽量把口咽腔扩展开，不然，舌骨向后上方移动，牵动喉头上起，声音通道变窄，咬字就会紧，喉部肌肉没有弹性，就会造成发声的紧张吃力，发音不仅暗沉，还很扁。\n练气息丹田是气的泵。\n《难经.六十六难》云:“丹田者，人之根本也。”又说:“脐下动气者，人之生命也。 ”脐下就是指丹田，丹田是生命的大本营，是气的工厂和仓库，是人体全身“气”的营运供应中心。\n丹田是气的泵，气息聚集在丹田，随时可以供输全身，当然也为我们的播音或平时健康用嗓提供良好的服务。\n其实，刚刚开始学习的时候，对丹田的感受不是很强烈的。我们可以先用腹式呼吸， 牵动你的丹田，让你有丹田位置的感受。经常有意识地训练，感受就会越来越明显，然后才会有丹田运气的表现，精气会越来越足，够支撑你的发声。\n腹式呼吸： #  放松肩部，鼻子吸气，嘴巴呼气，横膈膜会下降，腹压增加，感觉好像是空气直接进入腹部，腹部会自动隆起，隆起的幅度要尽当时的能力，尽量达到极限量。 然后用口慢慢呼气，腹壁下陷恢复自然状态。\n具体练习方法： #  1、憋气吸气下沉，憋住，看看能不能憋1—2分钟，实在忍不住的时候，连接胸部和腹部的肌肉会颤抖，那里是横膈膜所在地。这个要大量练习。\n2、假装擤鼻涕只用鼻子吸气下沉，憋一会儿，然后快速地用鼻子把气“擤”出去，同时感受横膈膜的上下弹动。这个环节的练习可以增强对横膈膜的敏感度。\n3、吸气下沉，一口气不断，发“si”音。这个过程一定要慢，气息输出要均匀，同时计算一下时间，看看自己一口气可以坚持多久。多练几次，循序渐进。\n进阶：保持气息，形成支撑。 #  鼻子吸入气息，横膈膜下降，保持气息，憋几秒钟，然后嘴巴微张，很慢很慢地吹出气息，看看一口气是否可以平稳地输出15秒，同时体会气流被拉住的感觉。\n进阶：气息和声音结合，练气为主，发声为辅。 #  1、提起颧肌，打开牙关，挺软腭放松下巴的前提下，轻柔舒服地发a音，感受热气从嘴巴呼出，声音稳定、小声地发出，一口气一次，尽量拉长发音，反复练习。\n2、双手插腰，一口气快速用力的小声发“hu”的音，体会气息从小腹到额咽处冲出的感觉，腹部及横膈膜会弹动。反复练习。\n练唇舌 #  唇部操可以增强唇部的力量和灵活性\n撅唇咧唇：\n在提颧肌的情况下，唇部沿着牙齿向中间撮合，再慢慢展开。这样反复练习20-30次，颧肌发酸，嘴唇酸麻发热都是正常的副作用。\n绕唇：\n嘴巴合拢撅起来顺时针绕15圈，逆时针绕15圈。\n喷唇：\n嘴巴撅起来，稍微抿嘴把一半的唇部裹进去，用力喷唇，发出“popo”的声音。练习30次。\n唇的力量集中很重要！多练习唇部操可以增强你对唇部动程的敏感度，便于察觉调整再正确训练。\n发音时要把力量集中在上唇中央三分之一的部位，做到唇齿相依，唇不可以离开齿，在活动时唇部内缘要有较强的收束力，口型动作的滑行要自然。\n舌部操练习舌头的弹性\n弹舌：\n舌尖顶住上齿龈，抵挡住气流再突然放开，爆发出“t—t”的声音。练习30次。\n顶舌：\n紧闭唇部，舌尖顶住左右内脸颊，顶左边一次停留一秒，再顶右边。反复训练共30次。\n绕舌：\n紧闭唇部，舌尖在唇部内缘360度绕，顺时针15圈，逆时针15圈。\n舌头的力量要集中\n发音部位上要把力使在成阻部位的中央，不可以让舌体的接触面太大，如果这样，力量就会分散， 字音就不响亮了。舌体要向中纵线收拢，这样就有利于发音时舌头的动作弹动有力量。\n读一读绕口令，练口齿，练气息。 #  刚刚开始练习绕口令，不要追求速度。\n先追求发音、调值的准确度， 慢慢追求其韵律感，气托声，声传情。\n搬白布 爸爸搬白布，伯伯搬柏木； 爸爸不搬柏木搬白布， 伯伯不搬白布搬柏木。\n端汤\n老唐端蛋汤， 踏凳登宝塔， 只因凳太滑， 汤洒汤烫塔。\n老罗拉了一车梨\n老罗拉了一车梨， 老李拉了一车栗。 老罗人称大力罗， 老李人称李大力。 老罗拉梨做梨酒， 老李拉栗去换梨。\n两个棋迷\n一个姓米， 一个姓齐； 米棋迷， 米棋迷， 一起来下棋。 米棋迷要吃齐棋迷的车。\n九与酒\n九月九，九个酒迷喝醉酒。 九个酒杯九杯酒，九个酒迷喝九口。 喝罢九口酒，又倒九杯酒。 九个酒迷端起酒，“咕咚、咕咚”又九口。 九杯酒，酒九口，喝罢酒九个酒迷醉了酒。\n大嫂子和大小子 一个大嫂子，一个大小子。 大嫂子跟大小子比包饺子， 看是大嫂子包的饺子好， 还是大小子包的饺子好， 再看大嫂子包的饺子少， 还是大小子包的饺子少。 大嫂子包的饺子又小又好又不少， 大小子包的饺子又小又少又不好。\n练好普通话的声调，增强你的语言魅力。 #  声调是语音结构中很重要的一个部分。 它的作用和声母韵母一样重要，如果声调没读准确，说出来的话就会产生歧义，自然就会影响你和别人的交流。 反之，如果你的普通话声调读得错落有致，使得音节抑扬起伏，你说的话就会给别人带来听觉上的美感，旁人和你交流起来就是一种享受。\n什么是声调？\n声调是汉语音节所固有的，可以区别意义的声音的高低升降、曲直长短的变化形式。\n普通话声调有四个调类：阴平、阳平、上声、去声。就是我们通常说的一声二声三声和四声。 为了便于学习普通话，还需要了解一点：调值。 调值就是声调的高低升降和曲直的变化。普通话四声的调值分别是： 55（阴平）35（阳平）214（上声）51（去声）【可参考下图】\n调值是有标记方法的\n五度标记法记录一个音节声调的调值，这样就可以更直观地了解声音的高低，使声音形象化，方便大家的学习。【可参考下图】\n竖线表示声音高低，最低点到最高点分为五度，用1、2、3、4、5来表示。\n声调的存在让每一个字有升有降有曲的变化，它们配合起来在语句里自然会有抑扬顿挫的音乐感，再加入你的情感，你说的话就会产生强烈的感染力。\n练好声调是和气息控制紧密联系在一起的\n1、发阴平的时候，气息应该要紧绷着，一口气平稳地发完。【可以读一读下面的字词找找感觉】班 餐 猜 猫卑微 鲜花 芳香 公积金\n2、发阳平起音的时候，气息稍微松一点，扬起来之后，气息越来越紧。3度升到5度的过程中不要晃晃悠悠的。白 蚕 才 唇白银 邮局 同学 足球 联合国\n3、发上声的气息应该是由紧到松再到紧。声带要完全松弛下来才可以降到1度，1度到4度是有一定的时长的，而且这个过程是平滑的弯曲扬上去，不要硬着拐弯。注意气息要稳定，升上去的时候要加强，如果没有气息支撑，整个音节会噎住。\n好 九 写 秒\n宝塔 口角 阻挡 打草稿\n4、去声是全降调（51）气息应该先紧后松，最后是完全放松的状态。注意，起音的音高与阴平一样。\n爸 抱 后 肺\n爱戴 奥秘 顾客 灿烂 动画片\n分享一个绕口令 你可以读一读 兜里装豆，豆装满兜，兜破漏豆。 倒出豆，补破兜，补好兜， 又装豆，装满兜，不漏豆。\n"});index.add({'id':88,'href':'/life/docs/javadir/thread/tool/phaser/','title':"Phaser",'section':"并发工具 ",'content':"Phaser #  java7中引入了一种新的可重复使用的同步屏障,称为移相器Phaser\nPhaser拥有与CyclicBarrier和CountDownLatch类似的功劳.但是这个类提供了更加灵活的应用.CountDownLatch和CyclicBarrier都是只适用于固定数量的参与者.移相器适用于可变数目的屏障,在这个意义上,可以在任何时间注册新的参与者.并且在抵达屏障是可以注销已经注册的参与者.因此,注册到同步移相器的参与者的数目可能会随着时间的推移而变化\n如CyclicBarrier一样,移相器可以重复使用,这意味着当前参与者到达移相器后,可以再一次注册自己并等待另一次到达.因此,移相器会有多代.一旦为某个特定相位注册的所有参与者都到达移相器,就增加相数.相数从零开始,在达到Integer.MAX_VALUE后,再次绕回0.当移相器发生变化时,通过重写onAdvance方法,可以自行可选操作.这个方法也可用于终止移相器.移相器一旦被终止,所有的同步方法就会立即返回,并尝试注册新的失败的参与者\n移相器的另一个重要特征是:移相器可能是分层的,这允许你以树形结构来安排移相器以减少竞争.很明显,更小的组将拥有更少的竞争同步的参与者.因此,将大量的参与者分成较小的组可以减少竞争.虽然创建移相器能增加中的吞吐量,但是这需要更多的开销.最后,移相器的另一个重要的特征在于监控功能,使用独立的对象可以监视移相器的当前状态.监视器可以查询注册到移相器的参与者的数量,以及已经到达和还没有到达某个特定相数的参与者的数量\nPhaser中是通过计数器来控制。在Phaser中计数器叫做parties， 我们可以通过Phaser的构造函数或者register()方法来注册\n通过调用register()方法，我们可以动态的控制phaser的个数。如果我们需要取消注册，则可以调用arriveAndDeregister()方法\n方法 #    register()\n  注册一个需要协作的线程。\n  bulkRegister(int parties)\n  批量注册需要协作的线程。\n  arrive()\n  到达屏障直接执行，无需等待其他线程。\n  arriveAndAwaitAdvance()\n  到达屏障，必须等待其他线程。\n  arriveAndDeregister()\n  到达屏障，注销自己，无需等待其他线程到达。\n  onAdvance(int phase, int registeredParties)\n  参与协作的线程都到达屏障后，会调用该方法。\n  例子 #   case 1  final Phaser phaser = new Phaser(3) { @Override protected boolean onAdvance(int phase, int registeredParties) { System.out.println(phase + \u0026#34;_\u0026#34; + registeredParties); System.out.println(Thread.currentThread().getName() + \u0026#34; 调用了onAdvance方法\u0026#34;); // switch (phase) { // case 0: // System.out.println(\u0026#34;第一阶段，买食材完成啦！总共参与人数：\u0026#34; + registeredParties); // return false; // case 1: // System.out.println(\u0026#34;第二阶段，炒菜完成啦！总共参与人数：\u0026#34; + registeredParties); // return false; // case 2: // System.out.println(\u0026#34;第三阶段，吃完饭啦！总共参与人数：\u0026#34; + registeredParties); // return false; // default: // return true; // }  return super.onAdvance(phase, registeredParties); } }; for (int i = 1; i \u0026lt;= 1 * 3; i++) { if (i \u0026gt;= 2 \u0026amp;\u0026amp; i % 3 == 1) { System.out.println(\u0026#34;i:\u0026#34; + i); // phaser.bulkRegister(3);  } new Thread(String.valueOf(i)) { public void run() { //注册 // phaser.register();  System.out.println(Thread.currentThread().getName()+\u0026#34;---------------------\u0026#34;); //注册并释放  phaser.arriveAndAwaitAdvance(); System.out.println(Thread.currentThread().getName() + \u0026#34;....................\u0026#34;); } }.start(); } "});index.add({'id':89,'href':'/life/docs/operating_system/windows/dos_network/','title':" DOS网络操作命令 ",'section':"windows学习与使用 ",'content':"DOS网络操作命令 #   netstat -ano (列出所有端口的情况)  PS C:\\Users\\noatn\u0026gt; netstat -ano\r活动连接\r协议 本地地址 外部地址 状态 PID\rTCP 0.0.0.0:135 0.0.0.0:0 LISTENING 1028\rTCP 0.0.0.0:445 0.0.0.0:0 LISTENING 4\rTCP 0.0.0.0:1024 0.0.0.0:0 LISTENING 852\rTCP 0.0.0.0:1025 0.0.0.0:0 LISTENING 2232\rTCP 0.0.0.0:3306 0.0.0.0:0 LISTENING 3672\rTCP 0.0.0.0:5040 0.0.0.0:0 LISTENING 5660\rTCP 0.0.0.0:7680 0.0.0.0:0 LISTENING 6628\rTCP 0.0.0.0:49664 0.0.0.0:0 LISTENING 868\rTCP 0.0.0.0:49665 0.0.0.0:0 LISTENING 784\rTCP 0.0.0.0:49666 0.0.0.0:0 LISTENING 1580\rTCP 0.0.0.0:49667 0.0.0.0:0 LISTENING 1316\rTCP 127.0.0.1:1036 0.0.0.0:0 LISTENING 2536\rTCP 127.0.0.1:1155 127.0.0.1:1156 ESTABLISHED 1204\rTCP 127.0.0.1:1156 127.0.0.1:1155 ESTABLISHED 1204\rTCP 127.0.0.1:1157 127.0.0.1:1158 ESTABLISHED 1204\rTCP 127.0.0.1:1158 127.0.0.1:1157 ESTABLISHED 1204\rTCP 127.0.0.1:6942 0.0.0.0:0 LISTENING 1204\rTCP 127.0.0.1:10000 0.0.0.0:0 LISTENING 3556\rTCP 127.0.0.1:63342 0.0.0.0:0 LISTENING 1204\rTCP 192.168.31.208:139 0.0.0.0:0 LISTENING 4\rTCP 192.168.31.208:3810 104.18.25.243:80 ESTABLISHED 6976\rTCP 192.168.31.208:4258 13.107.3.254:443 ESTABLISHED 6976\rTCP 192.168.31.208:4368 40.90.189.152:443 ESTABLISHED 3700\rTCP 192.168.31.208:4571 111.231.211.246:443 FIN_WAIT_1 9324\rTCP 192.168.31.208:4589 111.12.62.190:443 LAST_ACK 9324\rTCP 192.168.31.208:4593 185.199.108.153:443 FIN_WAIT_1 9324\rTCP 192.168.31.208:4595 112.25.253.5:443 ESTABLISHED 9324\rTCP 192.168.31.208:4596 223.85.58.79:443 CLOSE_WAIT 9324\rTCP 192.168.31.208:4600 223.85.58.79:443 LAST_ACK 9324\rTCP 192.168.31.208:4602 192.144.173.136:7823 ESTABLISHED 9324\rTCP 192.168.31.208:4609 192.30.252.153:80 LAST_ACK 9324\rTCP 192.168.31.208:4610 192.30.252.153:80 LAST_ACK 9324\rTCP 192.168.31.208:4611 192.30.252.153:80 LAST_ACK 9324\rTCP 192.168.31.208:4616 209.197.3.24:443 LAST_ACK 9324\rTCP 192.168.31.208:4617 140.205.33.7:443 TIME_WAIT 0\rTCP [::]:135 [::]:0 LISTENING 1028\rTCP [::]:445 [::]:0 LISTENING 4\rTCP [::]:1024 [::]:0 LISTENING 852\rTCP [::]:1025 [::]:0 LISTENING 2232\rTCP [::]:3306 [::]:0 LISTENING 3672\rTCP [::]:7680 [::]:0 LISTENING 6628\rTCP [::]:49664 [::]:0 LISTENING 868\rTCP [::]:49665 [::]:0 LISTENING 784\rTCP [::]:49666 [::]:0 LISTENING 1580\rTCP [::]:49667 [::]:0 LISTENING 1316\rUDP 0.0.0.0:500 *:* 3540\rUDP 0.0.0.0:4500 *:* 3540\rUDP 0.0.0.0:5050 *:* 5660\rUDP 0.0.0.0:5353 *:* 6324\rUDP 0.0.0.0:5353 *:* 9324\rUDP 0.0.0.0:5353 *:* 6324\rUDP 0.0.0.0:5353 *:* 8372\rUDP 0.0.0.0:5353 *:* 10032\rUDP 0.0.0.0:5353 *:* 10032\rUDP 0.0.0.0:5353 *:* 9324\rUDP 0.0.0.0:5353 *:* 8372\rUDP 0.0.0.0:5353 *:* 2076\rUDP 0.0.0.0:5355 *:* 2076\rUDP 0.0.0.0:49665 *:* 3636\rUDP 0.0.0.0:57076 *:* 2076\rUDP 0.0.0.0:58215 *:* 2076\rUDP 127.0.0.1:1900 *:* 9868\rUDP 127.0.0.1:40000 *:* 3556\rUDP 127.0.0.1:49664 *:* 4008\rUDP 127.0.0.1:51112 *:* 6976\rUDP 127.0.0.1:62732 *:* 9868\rUDP 192.168.31.208:137 *:* 4\rUDP 192.168.31.208:138 *:* 4\rUDP 192.168.31.208:1900 *:* 9868\rUDP 192.168.31.208:2177 *:* 8424\rUDP 192.168.31.208:62731 *:* 9868\rUDP [::]:500 *:* 3540\rUDP [::]:4500 *:* 3540\rUDP [::]:5353 *:* 6324\rUDP [::]:5353 *:* 2076\rUDP [::]:5353 *:* 8372\rUDP [::]:5353 *:* 10032\rUDP [::]:5353 *:* 9324\rUDP [::]:5355 *:* 2076\rUDP [::]:57076 *:* 2076\rUDP [::]:58215 *:* 2076\rUDP [::1]:1900 *:* 9868\rUDP [::1]:62730 *:* 9868\rUDP [fe80::6d6c:6e66:c80:456b%16]:1900 *:* 9868\rUDP [fe80::6d6c:6e66:c80:456b%16]:2177 *:* 8424\rUDP [fe80::6d6c:6e66:c80:456b%16]:62729 *:* 9868\r 查看被占用端口对应的PID，输入命令： netstat -ano|findstr \u0026lsquo;3306\u0026rsquo; ，回车，记下最后一位数字，即PID,这里是3672  PS C:\\Users\\noatn\u0026gt; netstat -ano|findstr '3306' TCP 0.0.0.0:3306 0.0.0.0:0 LISTENING 3672\rTCP [::]:3306 [::]:0 LISTENING 3672\r ipconfig用法  PS C:\\WINDOWS\\system32\u0026gt; ipconfig /?\r用法:\ripconfig [/allcompartments] [/? | /all |\r/renew [adapter] | /release [adapter] |\r/renew6 [adapter] | /release6 [adapter] |\r/flushdns | /displaydns | /registerdns |\r/showclassid adapter |\r/setclassid adapter [classid] |\r/showclassid6 adapter |\r/setclassid6 adapter [classid] ]\r其中\radapter 连接名称\r(允许使用通配符 * 和 ?，参见示例)\r选项:\r/? 显示此帮助消息\r/all 显示完整配置信息。\r/release 释放指定适配器的 IPv4 地址。\r/release6 释放指定适配器的 IPv6 地址。\r/renew 更新指定适配器的 IPv4 地址。\r/renew6 更新指定适配器的 IPv6 地址。\r/flushdns 清除 DNS 解析程序缓存。\r/registerdns 刷新所有 DHCP 租用并重新注册 DNS 名称\r/displaydns 显示 DNS 解析程序缓存的内容。\r/showclassid 显示适配器允许的所有 DHCP 类 ID。\r/setclassid 修改 DHCP 类 ID。\r/showclassid6 显示适配器允许的所有 IPv6 DHCP 类 ID。\r/setclassid6 修改 IPv6 DHCP 类 ID。\r默认情况下，仅显示绑定到 TCP/IP 的每个适配器的 IP 地址、子网掩码和\r默认网关。\r对于 Release 和 Renew，如果未指定适配器名称，则会释放或更新所有绑定\r到 TCP/IP 的适配器的 IP 地址租用。\r对于 Setclassid 和 Setclassid6，如果未指定 ClassId，则会删除 ClassId。\r示例:\r\u0026gt; ipconfig ... 显示信息\r\u0026gt; ipconfig /all ... 显示详细信息\r\u0026gt; ipconfig /renew ... 更新所有适配器\r\u0026gt; ipconfig /renew EL* ... 更新所有名称以 EL 开头\r的连接\r\u0026gt; ipconfig /release *Con* ... 释放所有匹配的连接，\r例如“有线以太网连接 1”或\r“有线以太网连接 2”\r\u0026gt; ipconfig /allcompartments ... 显示有关所有隔离舱的\r信息\r\u0026gt; ipconfig /allcompartments /all ... 显示有关所有隔离舱的\r详细信息\r1.显示网络协议配置 ipconfig 如果要查看跟详细的网络配置信息 /all 包括MAC地址、IP地址、子网掩码、默认网关、DNS\r2.更新IP地址 ipconfig/renew\r3.初始化网络配置 ipconfig/registerdns 将网络状态还原到初始状态\r4.显示本地DNS信息 ipconfig/displaydns\r5.清除本地DNS缓存内容 ipconfig/flushdns\r6.取消IP地址租用 ipconfig/release DHCP服务器：动态获取到IP地址及其他网络设置\r7.备份网络设置 ipconfig/all\u0026gt;c:\\bak.txt 将所有网络配置信息备份到bak.txt中\r ipconfig 举例用法 显示本地DNS信息  PS C:\\WINDOWS\\system32\u0026gt; ipconfig /displaydns\rWindows IP 配置\r1.0.0.127.in-addr.arpa\r----------------------------------------\r记录名称. . . . . . . : 1.0.0.127.in-addr.arpa.\r记录类型. . . . . . . : 12\r生存时间. . . . . . . : 540319\r数据长度. . . . . . . : 8\r部分. . . . . . . . . : 答案\rPTR 记录 . . . . . . : www.xmind.net\rroot-c3-ca2-2009.ocsp.d-trust.net\r----------------------------------------\r记录名称. . . . . . . : root-c3-ca2-2009.ocsp.d-trust.net\r记录类型. . . . . . . : 5\r生存时间. . . . . . . : 9\r数据长度. . . . . . . : 8\r部分. . . . . . . . . : 答案\rCNAME 记录 . . . . . : ocsp.d-trust.net\r记录名称. . . . . . . : ocsp.d-trust.net\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 9\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 213.61.227.196\rhm.baidu.com\r----------------------------------------\r记录名称. . . . . . . : hm.baidu.com\r记录类型. . . . . . . : 5\r生存时间. . . . . . . : 194\r数据长度. . . . . . . : 8\r部分. . . . . . . . . : 答案\rCNAME 记录 . . . . . : hm.e.shifen.com\r记录名称. . . . . . . : hm.e.shifen.com\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 194\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 39.156.66.179\rwww.xmind.net\r----------------------------------------\r没有 AAAA 类型的记录\rwww.xmind.net\r----------------------------------------\r记录名称. . . . . . . : www.xmind.net\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 540319\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 127.0.0.1\rzhidao.baidu.com\r----------------------------------------\r记录名称. . . . . . . : zhidao.baidu.com\r记录类型. . . . . . . : 5\r生存时间. . . . . . . : 20\r数据长度. . . . . . . : 8\r部分. . . . . . . . . : 答案\rCNAME 记录 . . . . . : iknow.baidu.com\r记录名称. . . . . . . : iknow.baidu.com\r记录类型. . . . . . . : 5\r生存时间. . . . . . . : 20\r数据长度. . . . . . . : 8\r部分. . . . . . . . . : 答案\rCNAME 记录 . . . . . : iknow.n.shifen.com\r记录名称. . . . . . . : iknow.n.shifen.com\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 20\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 112.34.111.123\rblog.csdn.net\r----------------------------------------\r记录名称. . . . . . . : blog.csdn.net\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 3\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 47.95.47.253\radservice.google.com\r----------------------------------------\r记录名称. . . . . . . : adservice.google.com\r记录类型. . . . . . . : 5\r生存时间. . . . . . . : 11\r数据长度. . . . . . . : 8\r部分. . . . . . . . . : 答案\rCNAME 记录 . . . . . : pagead46.l.doubleclick.net\r记录名称. . . . . . . : pagead46.l.doubleclick.net\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 11\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 203.208.50.58\r记录名称. . . . . . . : pagead46.l.doubleclick.net\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 11\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 203.208.50.57\r记录名称. . . . . . . : pagead46.l.doubleclick.net\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 11\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 203.208.50.45\r 检测自己的ip ipconfig  C:\\Users\\noatn\u0026gt;ipconfig\rWindows IP 配置\r以太网适配器 以太网:\r媒体状态 . . . . . . . . . . . . : 媒体已断开连接\r连接特定的 DNS 后缀 . . . . . . . :\r无线局域网适配器 本地连接* 1:\r媒体状态 . . . . . . . . . . . . : 媒体已断开连接\r连接特定的 DNS 后缀 . . . . . . . :\r无线局域网适配器 本地连接* 2:\r媒体状态 . . . . . . . . . . . . : 媒体已断开连接\r连接特定的 DNS 后缀 . . . . . . . :\r以太网适配器 以太网 2:\r媒体状态 . . . . . . . . . . . . : 媒体已断开连接\r连接特定的 DNS 后缀 . . . . . . . :\r无线局域网适配器 WLAN:\r连接特定的 DNS 后缀 . . . . . . . :\r本地链接 IPv6 地址. . . . . . . . : fe80::6d6c:6e66:c80:456b%16\rIPv4 地址 . . . . . . . . . . . . : 192.168.31.208\r子网掩码 . . . . . . . . . . . . : 255.255.255.0\r默认网关. . . . . . . . . . . . . : 192.168.31.1\r   \r 检测是否连上外网 ping url  C:\\Users\\noatn\u0026gt;ping 192.168.31.208\r正在 Ping 192.168.31.208 具有 32 字节的数据:\r来自 192.168.31.208 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r来自 192.168.31.208 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r来自 192.168.31.208 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r来自 192.168.31.208 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r192.168.31.208 的 Ping 统计信息:\r数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，\r往返行程的估计时间(以毫秒为单位):\r最短 = 0ms，最长 = 0ms，平均 = 0ms\rC:\\Users\\noatn\u0026gt;ping www.baidu.com\r正在 Ping www.baidu.com [39.156.66.14] 具有 32 字节的数据:\r来自 39.156.66.14 的回复: 字节=32 时间=152ms TTL=50\r来自 39.156.66.14 的回复: 字节=32 时间=821ms TTL=50\r来自 39.156.66.14 的回复: 字节=32 时间=76ms TTL=50\r来自 39.156.66.14 的回复: 字节=32 时间=157ms TTL=50\r39.156.66.14 的 Ping 统计信息:\r数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，\r往返行程的估计时间(以毫秒为单位):\r最短 = 76ms，最长 = 821ms，平均 = 301ms\r这个网络情况就是不好的样子time\u0026gt;821毫秒了 ==就是延迟821毫秒\r 清屏命令 cls   C:\\Users\\noatn\u0026gt;dir\r驱动器 C 中的卷没有标签。\r卷的序列号是 1CE3-274F\rC:\\Users\\noatn 的目录\r2020/02/14 18:32 \u0026lt;DIR\u0026gt; .\r2020/02/14 18:32 \u0026lt;DIR\u0026gt; ..\r2020/01/24 13:55 \u0026lt;DIR\u0026gt; .android\r2020/01/23 08:12 100 .gitconfig\r2019/12/19 20:15 \u0026lt;DIR\u0026gt; .IntelliJIdea2017.3\r2020/01/26 17:53 \u0026lt;DIR\u0026gt; .m2\r2020/02/14 18:32 \u0026lt;DIR\u0026gt; .oracle_jre_usage\r2020/01/23 08:14 \u0026lt;DIR\u0026gt; .ssh\r2020/01/14 23:17 \u0026lt;DIR\u0026gt; .translation\r2020/01/20 21:52 \u0026lt;DIR\u0026gt; .vscode\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; 3D Objects\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; Contacts\r2020/02/14 18:32 \u0026lt;DIR\u0026gt; Desktop\r2020/02/14 17:57 \u0026lt;DIR\u0026gt; Documents\r2020/02/14 18:47 \u0026lt;DIR\u0026gt; Downloads\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; Favorites\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; Links\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; Music\r2020/02/14 10:57 \u0026lt;DIR\u0026gt; OneDrive\r2020/01/22 21:45 \u0026lt;DIR\u0026gt; Pictures\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; Saved Games\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; Searches\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; Videos\r1 个文件 100 字节\r22 个目录 91,425,759,232 可用字节\rC:\\Users\\noatn\u0026gt;cls;\r然后就没有任何了\r 系统情况查看 systeminfo  //这里切记不要输入;\rC:\\Users\\noatn\u0026gt;systeminfo\r主机名: DESKTOP-GN2SF7M\rOS 名称: Microsoft Windows 10 家庭中文版\rOS 版本: 10.0.18363 暂缺 Build 18363\rOS 制造商: Microsoft Corporation\rOS 配置: 独立工作站\rOS 构件类型: Multiprocessor Free\r注册的所有人: noatnu@163.com\r注册的组织: 暂缺\r产品 ID: 00342-35097-36011-AAOEM\r初始安装日期: 2019/12/18, 21:19:37\r系统启动时间: 2020/2/14, 18:40:59\r系统制造商: LENOVO\r系统型号: 20KSA00FCD\r系统类型: x64-based PC\r处理器: 安装了 1 个处理器。\r[01]: Intel64 Family 6 Model 142 Stepping 10 GenuineIntel ~1801 Mhz\rBIOS 版本: LENOVO R0PET42W (1.19 ), 2018/6/14\rWindows 目录: C:\\WINDOWS\r系统目录: C:\\WINDOWS\\system32\r启动设备: \\Device\\HarddiskVolume5\r系统区域设置: zh-cn;中文(中国)\r输入法区域设置: zh-cn;中文(中国)\r时区: (UTC+08:00) 北京，重庆，香港特别行政区，乌鲁木齐\r物理内存总量: 16,281 MB\r可用的物理内存: 10,187 MB\r虚拟内存: 最大值: 18,713 MB\r虚拟内存: 可用: 11,653 MB\r虚拟内存: 使用中: 7,060 MB\r页面文件位置: C:\\pagefile.sys\r域: WORKGROUP\r登录服务器: \\\\DESKTOP-GN2SF7M\r修补程序: 安装了 9 个修补程序。\r[01]: KB4534132\r[02]: KB4513661\r[03]: KB4516115\r[04]: KB4517245\r[05]: KB4521863\r[06]: KB4524569\r[07]: KB4528759\r[08]: KB4537759\r[09]: KB4528760\r网卡: 安装了 3 个 NIC。\r[01]: Realtek PCIe GbE Family Controller\r连接名: 以太网\r状态: 媒体连接已中断\r[02]: Realtek 8821CE Wireless LAN 802.11ac PCI-E NIC\r连接名: WLAN\r启用 DHCP: 是\rDHCP 服务器: 192.168.31.1\rIP 地址\r[01]: 192.168.31.208\r[02]: fe80::6d6c:6e66:c80:456b\r[03]: Sangfor SSL VPN CS Support System VNIC\r连接名: 以太网 2\r状态: 媒体连接已中断\rHyper-V 要求: 虚拟机监视器模式扩展: 是\r固件中已启用虚拟化: 否\r二级地址转换: 是\r数据执行保护可用: 是\r//具体用法\rC:\\Users\\noatn\u0026gt;SYSTEMINFO /?\rSYSTEMINFO [/S system [/U username [/P [password]]]] [/FO format] [/NH]\r描述:\r该工具显示本地或远程机器(包括服务包级别)的操作系统配置的信息。\r参数列表:\r/S system 指定要连接的远程系统。\r/U [domain\\]user 指定应该在哪个用户上下文执行命令。\r/P [password] 指定给定用户上下文的密码。如果省略则\r提示输入。\r/FO format 指定显示结果的格式。\r有效值: \u0026quot;TABLE\u0026quot;、\u0026quot;LIST\u0026quot;、\u0026quot;CSV\u0026quot;。\r/NH 指定“列标题”不应该在输出中显示。\r只对 \u0026quot;TABLE\u0026quot; 和 \u0026quot;CSV\u0026quot; 格式有效。\r/? 显示帮助消息。\r例如:\rSYSTEMINFO\rSYSTEMINFO /?\rSYSTEMINFO /S system\rSYSTEMINFO /S system /U user\rSYSTEMINFO /S system /U domain\\user /P password /FO TABLE\rSYSTEMINFO /S system /FO LIST\rSYSTEMINFO /S system /FO CSV /NH\r  内存查看 mem (部分windows不支持了或者缺失此条程序)\n  磁盘检测 chkdsk D:\n  PS C:\\WINDOWS\\system32\u0026gt; chkdsk /?\r检查磁盘并显示状态报告。\rCHKDSK [volume[[path]filename]]] [/F] [/V] [/R] [/X] [/I] [/C] [/L[:size]] [/B] [/scan] [/spotfix]\rvolume 指定驱动器号(后面跟一个冒号)、\r装入点或卷名。\rfilename 仅 FAT/FAT32: 指定要检查\r碎片的文件。\r/F 修复磁盘上的错误。\r/V 在 FAT/FAT32 上: 显示磁盘上每个文件的\r完整路径和名称。\r在 NTFS 上: 显示清理消息(如果有)。\r/R 查找坏扇区并恢复可读信息\r(未指定 /scan 时，隐含 /F)。\r/L:size 仅 NTFS: 将日志文件大小更改为指定\r的 KB 数。如果未指定大小，则显示\r当前大小。\r/X 如果必要，则先强制卸除卷。\r该卷的所有打开的句柄都将无效\r(隐含 /F)。\r/I 仅 NTFS: 对索引项进行强度较小的\r检查。\r/C 仅 NTFS: 跳过文件夹结构内的\r循环检查。\r/B 仅 NTFS: 重新评估该卷上的坏簇\r(隐含 /R)\r/scan 仅 NTFS: 在卷上运行联机扫描\r/forceofflinefix 仅 NTFS: (必须与 \u0026quot;/scan\u0026quot; 一起使用)\r跳过所有联机修复；找到的所有故障都\r排队等待脱机修复(即 \u0026quot;chkdsk /spotfix\u0026quot;)。\r/perf 仅 NTFS: (必须与 \u0026quot;/scan\u0026quot; 一起使用)\r使用更多系统资源尽快完成\r扫描。这可能会对系统中运行的其他任务的性能\r造成负面影响。\r/spotfix 仅 NTFS: 在卷上运行点修复\r/sdcleanup 仅 NTFS: 回收不需要的安全描述符\r数据(隐含 /F)。\r/offlinescanandfix 在卷上运行脱机扫描并进行修复。\r/freeorphanedchains 仅 FAT/FAT32/exFAT: 释放所有孤立的簇链\r而不恢复其内容。\r/markclean 仅 FAT/FAT32/exFAT: 如果未检测到损坏，则将卷\r标记为干净，即使未指定 /F 也是如此。\r/I 或 /C 开关通过跳过对卷的某些检查，\r来减少运行 Chkdsk 所需的时间。\rE:\\temp\u0026gt;chkdsk D:\r访问被拒绝，因为你没有足够的权限，或\r该磁盘可能被另一个进程锁定。\r你必须调用这一在提升模式下运行的实用工具\r并确保磁盘处于解锁状态。\r采用管理员登陆\rPS C:\\WINDOWS\\system32\u0026gt; chkdsk d:\r文件系统的类型是 NTFS。\r卷标是 新加卷。\r警告! 未指定 /F 参数。\r将在只读模式下运行 CHKDSK。\r阶段 1: 检查基本文件系统结构...\r已处理 143872 个文件记录。\r文件验证完成。\r已处理 37 个大型文件记录。\r已处理 0 个错误的文件记录。\r阶段 2: 检查文件名链接...\r已处理 92 个重新解析记录。\r已处理 178806 个索引项。\r索引验证完成。\r已扫描到 0 个未索引文件。\r已将 0 个未编制索引的文件恢复到回收箱。\r已处理 92 个重新解析记录。\r阶段 3: 检查安全描述符...\r安全描述符验证完成。\r已处理 17467 个数据文件。\rWindows 已扫描文件系统并且没有发现问题。\r无需采取进一步操作。\r总共有 307199999 KB 磁盘空间。\r79964 个文件中有 26412124 KB。\r17469 个索引 18832 KB。\r坏扇区 0 KB。\r系统正在使用 219231 KB。\r日志文件占用了 65536 KB。\r磁盘上 280549812 KB 可用。\r每个分配单元中有 4096 字节。\r磁盘上共有 76799999 个分配单元。\r磁盘上有 70137453 个可用的分配单元。\r dos 版本  E:\\temp\u0026gt;ver\rMicrosoft Windows [版本 10.0.18363.592]\r 探测对方计算机名  netstat -a 192.168.2.8\rPS C:\\Users\\noatn\u0026gt; netstat -a 192.168.2.8\r活动连接\r协议 本地地址 外部地址 状态\rTCP 0.0.0.0:135 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:445 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:1024 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:1025 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:3306 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:5040 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:7680 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:49664 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:49665 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:49666 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:49667 DESKTOP-GN2SF7M:0 LISTENING\rTCP 127.0.0.1:1036 DESKTOP-GN2SF7M:0 LISTENING\rTCP 127.0.0.1:1155 www:1156 ESTABLISHED\rTCP 127.0.0.1:1156 www:nfa ESTABLISHED\rTCP 127.0.0.1:1157 www:1158 ESTABLISHED\rTCP 127.0.0.1:1158 www:1157 ESTABLISHED\rTCP 127.0.0.1:6942 DESKTOP-GN2SF7M:0 LISTENING\rTCP 127.0.0.1:10000 DESKTOP-GN2SF7M:0 LISTENING\rTCP 127.0.0.1:63342 DESKTOP-GN2SF7M:0 LISTENING\rTCP 192.168.31.208:139 DESKTOP-GN2SF7M:0 LISTENING\r 快速诊断网卡故障 ping 127.0.0.1  PS C:\\WINDOWS\\system32\u0026gt; ping 127.0.0.1; 正在 Ping 127.0.0.1 具有 32 字节的数据:\r来自 127.0.0.1 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r来自 127.0.0.1 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r来自 127.0.0.1 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r来自 127.0.0.1 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r127.0.0.1 的 Ping 统计信息:\r数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，\r往返行程的估计时间(以毫秒为单位):\r最短 = 0ms，最长 = 0ms，平均 = 0ms\r 网络连接查看  PS C:\\Users\\noatn\u0026gt; netstat /?\r显示协议统计信息和当前 TCP/IP 网络连接。\rNETSTAT [-a] [-b] [-e] [-f] [-n] [-o] [-p proto] [-r] [-s] [-x] [-t] [interval]\r-a 显示所有连接和侦听端口。\r-b 显示在创建每个连接或侦听端口时涉及的\r可执行程序。在某些情况下，已知可执行程序承载\r多个独立的组件，这些情况下，\r显示创建连接或侦听端口时\r涉及的组件序列。在此情况下，可执行程序的\r名称位于底部 [] 中，它调用的组件位于顶部，\r直至达到 TCP/IP。注意，此选项\r可能很耗时，并且在你没有足够\r权限时可能失败。\r-e 显示以太网统计信息。此选项可以与 -s 选项\r结合使用。\r-f 显示外部地址的完全限定\r域名(FQDN)。\r-n 以数字形式显示地址和端口号。\r-o 显示拥有的与每个连接关联的进程 ID。\r-p proto 显示 proto 指定的协议的连接；proto\r可以是下列任何一个: TCP、UDP、TCPv6 或 UDPv6。如果与 -s\r选项一起用来显示每个协议的统计信息，proto 可以是下列任何一个:\rIP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 或 UDPv6。\r-q 显示所有连接、侦听端口和绑定的\r非侦听 TCP 端口。绑定的非侦听端口\r不一定与活动连接相关联。\r-r 显示路由表。\r-s 显示每个协议的统计信息。默认情况下，\r显示 IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 和 UDPv6 的统计信息;\r-p 选项可用于指定默认的子网。\r-t 显示当前连接卸载状态。\r-x 显示 NetworkDirect 连接、侦听器和共享\r终结点。\r-y 显示所有连接的 TCP 连接模板。\r无法与其他选项结合使用。\rinterval 重新显示选定的统计信息，各个显示间暂停的\r间隔秒数。按 CTRL+C 停止重新显示\r统计信息。如果省略，则 netstat 将打印当前的\r配置信息一次。\r 网络连接查看 数字形式显示地址和端口号  PS C:\\Users\\noatn\u0026gt; netstat -n\r活动连接\r协议 本地地址 外部地址 状态\rTCP 127.0.0.1:1155 127.0.0.1:1156 ESTABLISHED\rTCP 127.0.0.1:1156 127.0.0.1:1155 ESTABLISHED\rTCP 127.0.0.1:1157 127.0.0.1:1158 ESTABLISHED\rTCP 127.0.0.1:1158 127.0.0.1:1157 ESTABLISHED\rTCP 192.168.31.208:3032 117.18.237.29:80 CLOSE_WAIT\rTCP 192.168.31.208:3312 117.174.50.69:80 ESTABLISHED\rTCP 192.168.31.208:3810 104.18.25.243:80 ESTABLISHED\rTCP 192.168.31.208:3870 203.119.218.69:443 ESTABLISHED\rTCP 192.168.31.208:3880 40.119.211.203:443 ESTABLISHED\rTCP 192.168.31.208:3931 117.174.50.69:80 ESTABLISHED\rTCP 192.168.31.208:3982 213.61.227.196:80 LAST_ACK\rTCP 192.168.31.208:4021 59.110.73.45:443 LAST_ACK\rTCP 192.168.31.208:4023 112.29.158.132:443 LAST_ACK\rTCP 192.168.31.208:4026 112.29.158.132:443 LAST_ACK\rTCP 192.168.31.208:4027 112.18.249.241:443 TIME_WAIT\rTCP 192.168.31.208:4028 112.18.249.241:443 TIME_WAIT\rTCP 192.168.31.208:4029 47.95.47.253:443 TIME_WAIT\rTCP 192.168.31.208:4030 39.107.189.15:443 LAST_ACK\rTCP 192.168.31.208:4032 112.29.158.132:443 LAST_ACK\rTCP 192.168.31.208:4035 112.29.158.132:443 LAST_ACK\rTCP 192.168.31.208:4036 52.114.128.44:443 TIME_WAIT\rTCP 192.168.31.208:4038 131.253.33.254:443 ESTABLISHED\rTCP 192.168.31.208:4039 204.79.197.222:443 ESTABLISHED\rTCP 192.168.31.208:4040 204.79.197.222:443 ESTABLISHED\rTCP 192.168.31.208:4041 131.253.33.254:443 ESTABLISHED\rTCP 192.168.31.208:4042 131.253.33.254:443 ESTABLISHED\rTCP 192.168.31.208:4044 62.96.224.156:389 ESTABLISHED\rTCP 192.168.31.208:4045 117.18.237.29:80 ESTABLISHED\rTCP 192.168.31.208:4046 47.95.47.253:443 ESTABLISHED\rTCP 192.168.31.208:4047 117.177.133.243:443 ESTABLISHED\rTCP 192.168.31.208:4048 112.18.249.239:443 ESTABLISHED\rTCP 192.168.31.208:4049 204.79.197.222:443 ESTABLISHED\rTCP 192.168.31.208:4050 221.178.73.35:443 ESTABLISHED\rTCP 192.168.31.208:4051 39.107.11.172:443 ESTABLISHED\rTCP 192.168.31.208:4052 112.29.158.132:443 ESTABLISHED\rTCP 192.168.31.208:4053 183.220.151.49:443 ESTABLISHED\rTCP 192.168.31.208:4054 13.107.3.254:443 ESTABLISHED\r"});index.add({'id':90,'href':'/life/docs/javadir/groovy/groovy%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8A%A0%E5%BC%BA/','title':" groovy变量和数据类型 ",'section':"groovy 学习与使用 ",'content':"groovy 变量和数据类型 #  groovy类型自动推断 #   先看有一段代码  def a = 12;\rdef int a1 = 12;\rdef a_type = a instanceof Integer ;\rdef a1_type = a1 instanceof Integer ;\rprintln(a_type) ;\rprintln(a1_type) ;\r//打印结果如下\rtrue\rtrue\r 从上面我们可以看出a和a1实际推导出的类型是一样的,但是有哪些不同呢 接着我把上面的例子改了  def a = 12;\rdef int a1 = 12;\rdef a_type = a instanceof Integer ;\rdef a1_type = a1 instanceof Integer ;\rprintln(a_type) ;\rprintln(a1_type) ;\ra = 52253.46f ;\ra1 = 52253.46f ;\rprintln(a instanceof Integer) ;\rprintln(a1 instanceof Integer) ;\rprintln(\u0026quot;a1 的值:\u0026quot;+a1) ;\rprintln(\u0026quot;a 的 值 :\u0026quot;+a) ;\r//print result\rtrue\rtrue\rfalse\rtrue\ra1 的值:52253\ra 的 值 :52253.46\r  看吧神奇的事情出来了, a1 的 参数类型即便被赋值了浮点数但是类型并没有改变,并且精度和赋值的值相比降低了,而 a 的类型却改变了\n另外假如在idea中编辑变量 编辑器也会提示你\rAssignment is not used less... (Ctrl+F1) Inspection info: Reports on unnecessary Groovy assignment statement Possible loss of precision from 'Float' to 'int' less... (Ctrl+F1) Inspection info: Reports assignments with incompatible types\r  假如接着上面的例子给 a变量和a1变量分别赋值字符串类型会怎样呢 (算了还是重新写吧好看点)\n  int b = 141;\rx = 141;\rprintln(b) ;\rprintln(x) ;\rb = \u0026quot;字符串b\u0026quot; ;\rx = \u0026quot;字符串x\u0026quot; ;\rprintln(b) ;\rprintln(x) ;\r//运行会怎样呢?\r141\rCaught: org.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object '字符串b' with class 'java.lang.String' to class 'int'\r141\rorg.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object '字符串b' with class 'java.lang.String' to class 'int'\rat gr.h1.t4.run(t4.groovy:10)\r  以上我们可以看出在groovy中赋值的时候系统会尝试强转类型,上面的例子是转失败的情况\n  因此在定义变量的时候尽量不要去更改已经定义的变量的类型,尽量 申明变量类型\n  变量的类型检测方法\n  var_name instanceof type 如 a instanceof Integer\n  b.class == Integer 或 b.class.equals(Integer)\n  "});index.add({'id':91,'href':'/life/docs/operating_system/one_chapter/1_4_/','title':" 操作系统的运行机制与体系结构 ",'section':"第一章 操作系统概述 ",'content':"运行机制 #  一: 知识总览 #  二: 预备知识：程序是如何运行的？ #  三:内核程序 v.s. 应用程序 #  四:特权指令 v.s. 非特权指令 #  五:内核态 v.s. 用户态 #  六:内核态、用户态 的切换 #  知识回顾与重要考点 #  体系结构 #  两种指令、两种处理器状态、两种程序 #  操作系统的内核 #   Yo~生活经验：我们安装完 Windows 操作系统后，会发现操作系统提供了多种多样的功能，比如“记事本”、 “任务管理器”。然而，这些功能并不是必不可少的。即使没有“任务管理器”，我们仍然可以使用计算机。\n  内核是计算机上配置的底层软件，是操作系统最基本、最核心的部分。实现操作系统内核功能的那些程序就是内核程序。   计算机系统的层次结构  知识回顾与重要考点 #  "});index.add({'id':92,'href':'/life/docs/javadir/thread/jol/','title':"JOL工具 ",'section':"多线程与并发 ",'content':"引入jol依赖 #  \u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.openjdk.jol\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;jol-core\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;0.9\u0026lt;/version\u0026gt;\r\u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt;\r\u0026lt;/dependency\u0026gt;\r相关方法 #    1.使用jol计算对象的大小（单位为字节）：ClassLayout.parseInstance(obj).instanceSize()\n  2.使用jol查看对象内部的内存布局：ClassLayout.parseInstance(obj).toPrintable()\n  3.查看对象外部信息：包括引用的对象：GraphLayout.parseInstance(obj).toPrintable()\n  4.查看对象占用空间总大小：GraphLayout.parseInstance(obj).totalSize()\n  对象布局 空属性 #  import org.openjdk.jol.info.ClassLayout; public class Entity { public static void main(String[] args) { Entity entity = new Entity(); // 打印java 对象内存布局  System.out.println(ClassLayout.parseInstance(entity).toPrintable()); } } // 输出结果 com.brown.Entity object internals: // Entity对象内存布局  OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 01 00 00 00 (00000001 00000000 00000000 00000000) (1) 4 4 (object header) 00 00 00 00 (00000000 00000000 00000000 00000000) (0) 8 4 (object header) 05 c1 00 f8 (00000101 11000001 00000000 11111000) (-134168315) 12 4 (loss due to the next object alignment) Instance size: 16 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total OFFSET：偏移地址，单位字节 SIZE：占用的内存大小，单位为字节 TYPE DESCRIPTION： 类型描述，其中object header为对象头； object header：对象头 loss due to the next object alignment：由于下一个对象对齐而导致的丢失（有4Byte是对齐的字节（因为在64位虚拟机上对象的大小必须是8的倍数）,由于这个对象里面没有任何字段，故而对象的实例数据为0Byte）。 VALUE : 对应内存中当前存储的值； Instance size：实例字节数值大小（**此处一个空的java对象（不包含任意字段属性）实例，其实例大小为``16Byte**） 对象布局 有属性 #  /** * 带有属性的 实体类 */ public class Student { private String name; private Integer age; } public class DemoT1 { public static void main(String[] args) { Student o = new Student(); System.out.println(ClassLayout.parseInstance(o).toPrintable()); } } // 输出结果（默认开启指针压缩）： com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 01 00 00 00 (00000001 00000000 00000000 00000000) (1) 4 4 (object header) 00 00 00 00 (00000000 00000000 00000000 00000000) (0) 8 4 (object header) 43 c1 00 f8 (01000011 11000001 00000000 11111000) (-134168253) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total 对象布局大体由三部分构成 #   对象头【对象头的前64位(8byte)是MarkWord，后32位(4byte)是类的元数据指针（开启指针压缩）。】 实例数据 字节对齐（可有可无，若对象头加上实例数据是8的倍数时，则不存在字节对齐）  mark word (对象头的描述) #   mark word用于存储对象的运行时记录信息，如哈希值、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等\n  Hotspot 64位实现   Hotspot 32位实现   mark word中锁状态描述（根据后三位判断）     偏向锁位 1bit（是否偏向锁） 锁标志位 2bit 锁状态     0 01 无锁态(new)   1 01 偏向锁    00 轻量级锁（自旋锁、无锁、自适应自旋锁）    10 重量级锁    11 GC 标记     hotspot中对于对象头的描述  // 32 bits: 32位操作系统 // -------- // hash:25 ------------\u0026gt;| age:4 biased_lock:1 lock:2 (normal object) // JavaThread*:23 epoch:2 age:4 biased_lock:1 lock:2 (biased object) // size:32 ------------------------------------------\u0026gt;| (CMS free block) // PromotedObject*:29 ----------\u0026gt;| promo_bits:3 -----\u0026gt;| (CMS promoted object) // // 64 bits: 64位操作系统 // -------- // unused:25 hash:31 --\u0026gt;| unused:1 age:4 biased_lock:1 lock:2 (normal object) // 无锁 // JavaThread*:54 epoch:2 unused:1 age:4 biased_lock:1 lock:2 (biased object) // 偏向锁 // PromotedObject*:61 ---------------------\u0026gt;| promo_bits:3 -----\u0026gt;| (CMS promoted object) // 轻量级锁、重量级锁 // size:64 -----------------------------------------------------\u0026gt;| (CMS free block) 总长度   64位操作系统的对象头的描述翻译如下  |--------------------------------------------------------------------------------------------------------------------------------------| ​ Object Header (128 bits) |--------------------------------------------------------------------------------------------------------------------------------------| | Mark Word (64 bits) | Klass Word (64 bits) |默认开启指针压缩(32bits) |--------------------------------------------------------------------------------------------------------------------------------------| |unused:25|identity_hashcode:31(56) | unused:1 | age:4 | biased_lock:1 | lock:2 | OOP to metadata object | 无锁 |--------------------------------------------------------------------------------------------------------------------------------------| |thread:54 | epoch:2 | unused:1 | age:4 | biased_lock:1 | lock:2 | OOP to metadata object | 偏向锁 |---------------------------------------------------------------------|----------------------------------------------------------------| | ptr_to_lock_record:62 | lock:2 | OOP to metadata object | 轻量锁 |--------------------------------------------------------------------------------------------------------------------------------------| | ptr_to_heavyweight_monitor:62 | lock:2 | OOP to metadata object | 重量锁 |------------------------------------------------------------------------------------------------------------| | | lock:2 | OOP to metadata object | GC |--------------------------------------------------------------------------------------------------------------------------------------|  32位操作系统的对象头信息  以 mark word 变化调试线程锁升级过程 #  无锁 -\u0026gt; 偏向锁 #  package com.tool.thread; import org.openjdk.jol.info.ClassLayout; public class SynchronizedTest1 { public static void main(String[] args) throws Exception { runA() ; } public static void runA()throws Exception{ System.out.println(\u0026#34;run...................\u0026#34;); //偏向锁  long millis = 5000; //偏向锁 默认4秒后开启  Thread.sleep(millis); System.out.println(String.format(\u0026#34;休眠%s秒结束\u0026#34;,String.valueOf(millis/1000))); Student student = new Student(); System.out.println(\u0026#34;当偏向锁可以使用的时候,对象头的mark word默认写入的就是首先使用偏向锁标识符\u0026#34;); System.out.println(\u0026#34;带偏向锁标识符的对象头的描述\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); synchronized (student) { System.out.println(\u0026#34;对象头的mark word写入了线程相关数据(如线程id)\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); } System.out.println(\u0026#34;结束!偏向锁线程执行完毕后不会立即移除对象头里面包含偏向锁的信息而是等到某个全局安全点系统在判断是否继续偏向锁\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); } } run................... 休眠5秒结束 当偏向锁可以使用的时候,对象头的mark word默认写入的就是首先使用偏向锁标识符 带偏向锁标识符的对象头的描述 com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 05 00 00 00 (00000101 00000000 00000000 00000000) (5) 4 4 (object header) 00 00 00 00 (00000000 00000000 00000000 00000000) (0) 8 4 (object header) 43 c1 00 f8 (01000011 11000001 00000000 11111000) (-134168253) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total //下面两行表示的是mark word 0 4 (object header) 05 00 00 00 (00000101 00000000 00000000 00000000) (5) 4 4 (object header) 00 00 00 00 (00000000 00000000 00000000 00000000) (0) // 元数据指针 8 4 (object header) 43 c1 00 f8 (01000011 11000001 00000000 11111000) (-134168253) // 00000101 就是8位的锁年代和锁标识符所占 对象头的mark word写入了线程相关数据(如线程id) com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 05 b0 c5 be (00000101 10110000 11000101 10111110) (-1094340603) 4 4 (object header) 1c 02 00 00 (00011100 00000010 00000000 00000000) (540) 8 4 (object header) 43 c1 00 f8 (01000011 11000001 00000000 11111000) (-134168253) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total //00000101 00000000 00000000 00000000 =\u0026gt; 00000101 10110000 11000101 10111110 || 00000000 00000000 00000000 00000000 =\u0026gt; 00011100 00000010 00000000 00000000 线程锁相关信息写入到mark word中了 结束!偏向锁线程执行完毕后不会立即移除对象头里面包含偏向锁的信息而是等到某个全局安全点系统在判断是否继续偏向锁 com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 05 b0 c5 be (00000101 10110000 11000101 10111110) (-1094340603) 4 4 (object header) 1c 02 00 00 (00011100 00000010 00000000 00000000) (540) 8 4 (object header) 43 c1 00 f8 (01000011 11000001 00000000 11111000) (-134168253) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total //同步块执行完毕 并没有立即清除对象头里面的偏向锁相关标识符 无锁 -\u0026gt; 轻量级锁 #  import org.openjdk.jol.info.ClassLayout; public class SynchronizedTest1 { public static void main(String[] args) throws Exception { runB() ; } public static void runB()throws Exception{ //注意:-XX:BiasedLockingStartupDelay=0 改了偏向锁的启动时间那么也是达不到我们说的效果的  //在4秒以前 创建的对象 对象头默认写入的是轻量级锁标识 只是没有写入线程相关和同步锁信息等  Student tempStudent = new Student(); System.out.println(ClassLayout.parseInstance(tempStudent).toPrintable()); synchronized (tempStudent) { System.out.println(ClassLayout.parseInstance(tempStudent).toPrintable()); } System.out.println(ClassLayout.parseInstance(tempStudent).toPrintable()); } } //属于轻量级锁但是没有写入线程和同步相关数据 com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 01 00 00 00 (00000001 00000000 00000000 00000000) (1) 4 4 (object header) 00 00 00 00 (00000000 00000000 00000000 00000000) (0) 8 4 (object header) 43 c1 00 f8 (01000011 11000001 00000000 11111000) (-134168253) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total //属于轻量级锁已经写入线程和同步相关数据 com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 98 f6 7f 3b (10011000 11110110 01111111 00111011) (998241944) 4 4 (object header) 2b 00 00 00 (00101011 00000000 00000000 00000000) (43) 8 4 (object header) 43 c1 00 f8 (01000011 11000001 00000000 11111000) (-134168253) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total //执行完毕 Displaced Mark Word(将标识符同步加锁和线程相关移除并改为默认的标识符) 执行完毕后依旧是轻量级标识符 com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 01 00 00 00 (00000001 00000000 00000000 00000000) (1) 4 4 (object header) 00 00 00 00 (00000000 00000000 00000000 00000000) (0) 8 4 (object header) 43 c1 00 f8 (01000011 11000001 00000000 11111000) (-134168253) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total //001 -\u0026gt; 000 -\u0026gt; 001 无锁 -\u0026gt; 偏向锁 -\u0026gt; 轻量级锁 #  import org.openjdk.jol.info.ClassLayout; public class SynchronizedTest1 { public static void main(String[] args) throws Exception { runC() ; } public static void runC()throws Exception{ System.out.println(\u0026#34;run...................\u0026#34;); //偏向锁  long millis = 5000; //偏向锁 默认4秒后开启  Thread.sleep(millis); Student student = new Student(); System.out.println(ClassLayout.parseInstance(student).toPrintable()); synchronized (student) { System.out.println(\u0026#34;偏向锁\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); } Thread thread = new Thread(() -\u0026gt; { synchronized (student) { System.out.println(\u0026#34;轻量级锁\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); } }); thread.start(); thread.join(); System.out.println(ClassLayout.parseInstance(student).toPrintable()); } } run................... com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 05 00 00 00 (00000101 00000000 00000000 00000000) (5) 4 4 (object header) 00 00 00 00 (00000000 00000000 00000000 00000000) (0) 8 4 (object header) 92 d7 00 f8 (10010010 11010111 00000000 11111000) (-134162542) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total 偏向锁 com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 05 d8 88 7c (00000101 11011000 10001000 01111100) (2089342981) 4 4 (object header) 3d 02 00 00 (00111101 00000010 00000000 00000000) (573) 8 4 (object header) 92 d7 00 f8 (10010010 11010111 00000000 11111000) (-134162542) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total 轻量级锁 com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) f0 ef 8f 15 (11110000 11101111 10001111 00010101) (361754608) 4 4 (object header) a1 00 00 00 (10100001 00000000 00000000 00000000) (161) 8 4 (object header) 92 d7 00 f8 (10010010 11010111 00000000 11111000) (-134162542) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 01 00 00 00 (00000001 00000000 00000000 00000000) (1) 4 4 (object header) 00 00 00 00 (00000000 00000000 00000000 00000000) (0) 8 4 (object header) 92 d7 00 f8 (10010010 11010111 00000000 11111000) (-134162542) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total 偏向锁 -\u0026gt; 偏向锁标识加锁 -\u0026gt; 轻量级锁 -\u0026gt; 无锁状态 101 -\u0026gt; 101 -\u0026gt; 00 -\u0026gt; 01 无锁 -\u0026gt; 偏向锁 -\u0026gt; 轻量级锁 -\u0026gt; 重量级锁 #   重量级锁在轻量级锁级别达到后如果满足重量级锁情况继续升级  import org.openjdk.jol.info.ClassLayout; public class SynchronizedTest1 { public static void main(String[] args) throws Exception { runD() ; } public static void runD()throws Exception{ System.out.println(\u0026#34;run...................\u0026#34;); //偏向锁  long millis = 5000; //偏向锁 默认4秒后开启  Thread.sleep(millis); Student student = new Student(); System.out.println(ClassLayout.parseInstance(student).toPrintable()); synchronized (student) { System.out.println(\u0026#34;偏向锁\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); } Thread thread = new Thread(() -\u0026gt; { synchronized (student) { System.out.println(\u0026#34;轻量级锁(threadA不启动的情况)\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); try { //让线程晚点儿死亡，造成锁的竞争  Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); } } }); Thread threadA = new Thread(() -\u0026gt; { synchronized (student) { System.out.println(\u0026#34;重量级锁\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); try { Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); } } }); thread.start(); threadA.start();//注释后 thread中的对象标识符是轻量级锁  } } run................... com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 05 00 00 00 (00000101 00000000 00000000 00000000) (5) 4 4 (object header) 00 00 00 00 (00000000 00000000 00000000 00000000) (0) 8 4 (object header) 92 d7 00 f8 (10010010 11010111 00000000 11111000) (-134162542) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total 偏向锁 com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 05 c0 fa 43 (00000101 11000000 11111010 01000011) (1140506629) 4 4 (object header) 1d 01 00 00 (00011101 00000001 00000000 00000000) (285) 8 4 (object header) 92 d7 00 f8 (10010010 11010111 00000000 11111000) (-134162542) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total 轻量级锁(threadA不启动的情况) com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 4a 56 b9 5e (01001010 01010110 10111001 01011110) (1589204554) 4 4 (object header) 1d 01 00 00 (00011101 00000001 00000000 00000000) (285) 8 4 (object header) 92 d7 00 f8 (10010010 11010111 00000000 11111000) (-134162542) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total 重量级锁 com.tool.thread.Student object internals: OFFSET SIZE TYPE DESCRIPTION VALUE 0 4 (object header) 4a 56 b9 5e (01001010 01010110 10111001 01011110) (1589204554) 4 4 (object header) 1d 01 00 00 (00011101 00000001 00000000 00000000) (285) 8 4 (object header) 92 d7 00 f8 (10010010 11010111 00000000 11111000) (-134162542) 12 4 java.lang.String Student.name null 16 4 java.lang.Integer Student.age null 20 4 (loss due to the next object alignment) Instance size: 24 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total 101 -\u0026gt; 101 -\u0026gt; 10 -\u0026gt; 10 锁升级所有源码 #  import org.openjdk.jol.info.ClassLayout; public class SynchronizedTest1 { public static void main(String[] args) throws Exception { runD() ; } /** * 无锁 -\u0026gt; 偏向锁 -\u0026gt; 轻量级锁 -\u0026gt; 重量级锁 * @throws Exception */ public static void runD()throws Exception{ System.out.println(\u0026#34;run...................\u0026#34;); //偏向锁  long millis = 5000; //偏向锁 默认4秒后开启  Thread.sleep(millis); Student student = new Student(); System.out.println(ClassLayout.parseInstance(student).toPrintable()); synchronized (student) { System.out.println(\u0026#34;偏向锁\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); } Thread thread = new Thread(() -\u0026gt; { synchronized (student) { System.out.println(\u0026#34;轻量级锁(threadA不启动的情况)\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); try { //让线程晚点儿死亡，造成锁的竞争  Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); } } }); Thread threadA = new Thread(() -\u0026gt; { synchronized (student) { System.out.println(\u0026#34;重量级锁\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); try { Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); } } }); thread.start(); threadA.start();//注释后 thread中的对象标识符是轻量级锁  } /** * 无锁 -\u0026gt; 偏向锁 -\u0026gt; 轻量级锁 * @throws Exception */ public static void runC()throws Exception{ System.out.println(\u0026#34;run...................\u0026#34;); //偏向锁  long millis = 5000; //偏向锁 默认4秒后开启  Thread.sleep(millis); Student student = new Student(); System.out.println(ClassLayout.parseInstance(student).toPrintable()); synchronized (student) { System.out.println(\u0026#34;偏向锁\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); } Thread thread = new Thread(() -\u0026gt; { synchronized (student) { System.out.println(\u0026#34;轻量级锁\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); } }); thread.start(); thread.join(); System.out.println(ClassLayout.parseInstance(student).toPrintable()); } /** * 轻量级锁 * @throws Exception */ public static void runB()throws Exception{ //在4秒以前 创建的对象 对象头默认写入的是轻量级锁标识 只是没有写入线程相关和同步锁信息等  Student tempStudent = new Student(); System.out.println(ClassLayout.parseInstance(tempStudent).toPrintable()); synchronized (tempStudent) { System.out.println(ClassLayout.parseInstance(tempStudent).toPrintable()); } System.out.println(ClassLayout.parseInstance(tempStudent).toPrintable()); } /** * 偏向锁 * @throws Exception */ public static void runA()throws Exception{ System.out.println(\u0026#34;run...................\u0026#34;); long millis = 5000; //偏向锁 默认4秒后开启  Thread.sleep(millis); System.out.println(String.format(\u0026#34;休眠%s秒结束\u0026#34;,String.valueOf(millis/1000))); Student student = new Student(); System.out.println(\u0026#34;当偏向锁可以使用的时候,对象头的mark word默认写入的就是首先使用偏向锁标识符\u0026#34;); System.out.println(\u0026#34;带偏向锁标识符的对象头的描述\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); synchronized (student) { System.out.println(\u0026#34;对象头的mark word写入了线程相关数据(如线程id)\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); } System.out.println(\u0026#34;结束!偏向锁线程执行完毕后不会立即移除对象头里面包含偏向锁的信息而是等到某个全局安全点系统在判断是否继续偏向锁\u0026#34;); System.out.println(ClassLayout.parseInstance(student).toPrintable()); } }  文章参考1 文章参考2  "});index.add({'id':93,'href':'/life/docs/javadir/basedir/jsp_dir/jsp_jstl_session/','title':"jsp jstl session ",'section':"jsp 基础知识 ",'content':"Session #   HTTP是无状态协议，这意味着每次客户端检索网页时，都要单独打开一个服务器连接，因此服务器不会记录下先前客户端请求的任何信息 #    会话,当用户打开一个浏览器连接到web应用或者打开某个页面,直到关闭浏览器这个过程叫做会话 #    Session是保存在服务器上的数据结构，用于跟踪用户的状态。此数据可以保存在群集、数据库、文件中 #   Session常用方法 #    public boolean isNew()\n返回是否为一个新的客户端，或者客户端是否拒绝加入session     public Enumeration getAttributeNames()\n返回session对象中所有的对象名称     public int getMaxInactiveInterval()\n返回最大时间间隔，以秒为单位，servlet 容器将会在这段时间内保持会话打开     public long getCreationTime()\n返回session对象被创建的时间， 以毫秒为单位，从1970年1月1号凌晨开始算起     public long getLastAccessedTime()\n返回客户端最后访问的时间，以毫秒为单位，从1970年1月1号凌晨开始算起     public Object getAttribute(String name)\n返回session对象中与指定名称绑定的对象，如果不存在则返回null     public Object getAttribute(String name)\n返回session对象中与指定名称绑定的对象，如果不存在则返回null     public String getId()\n返回session对象的ID     public void invalidate()\n将session无效化，解绑任何与该session绑定的对象     public void removeAttribute(String name)\n移除session中指定名称的对象     public void setAttribute(String name, Object value)\n使用指定的名称和值来产生一个对象并绑定到session中     public void setMaxInactiveInterval(int interval)\n用来指定时间，以秒为单位，servlet容器将会在这段时间内保持会话有效   Session应用 #  新建SessionDemo类 #  @WebServlet(\u0026quot;/SessionDemo\u0026quot;)\rpublic class SessionDemo extends HttpServlet {\rprivate int count=0;\rprotected void doGet(HttpServletRequest request, HttpServletResponse response)\rthrows ServletException, IOException {\rrequest.setCharacterEncoding(\u0026quot;utf-8\u0026quot;);\rresponse.setCharacterEncoding(\u0026quot;utf-8\u0026quot;);\rcount++;\rHttpSession session = request.getSession();\rString id = session.getId();\rlong startTime = session.getCreationTime();\rlong lastTime = session.getLastAccessedTime();\rlong validTime = session.getMaxInactiveInterval();\rsession.setMaxInactiveInterval(60);\rSimpleDateFormat myFormat=new SimpleDateFormat(\u0026quot;yyyy/MM/dd HH:mm:ss\u0026quot;);\rresponse.setContentType(\u0026quot;text/html\u0026quot;);\rPrintWriter out = response.getWriter();\rout.println(\u0026quot;\u0026lt;!DOCTYPE HTML PUBLIC \\\u0026quot;-\rout.println(\u0026quot;\u0026lt;HTML\u0026gt;\u0026quot;);\rout.println(\u0026quot; \u0026lt;HEAD\u0026gt;\u0026lt;TITLE\u0026gt;A Servlet\u0026lt;/TITLE\u0026gt;\u0026lt;/HEAD\u0026gt;\u0026quot;);\rout.println(\u0026quot; \u0026lt;BODY\u0026gt;\u0026quot;);\rif(session.isNew()) {\rout.println(\u0026quot;新客户\u0026lt;br\u0026gt;\u0026quot;);\r}else {\rout.println(\u0026quot;不是新客户\u0026lt;br\u0026gt;\u0026quot;);\r}\rout.println(\u0026quot;会话ID:\u0026quot; + id+\u0026quot;\u0026lt;br\u0026gt;\u0026quot;);\rout.println(\u0026quot;会话创建时间:\u0026quot;+myFormat.format(startTime)+\u0026quot;\u0026lt;br\u0026gt;\u0026quot;);\rout.println(\u0026quot;会话有效时间:\u0026quot;+validTime+\u0026quot;秒\u0026lt;br\u0026gt;\u0026quot;);\rout.println(\u0026quot;当前会话有效时间:\u0026quot;+session.getMaxInactiveInterval()+\u0026quot;秒\u0026lt;br\u0026gt;\u0026quot;);\rout.println(\u0026quot;最后访问时间:\u0026quot;+myFormat.format(lastTime)+\u0026quot;\u0026lt;br\u0026gt;\u0026quot;);\rout.println(\u0026quot;访问次数:\u0026quot;+count+\u0026quot;\u0026lt;br\u0026gt;\u0026quot;);\rout.println(\u0026quot; \u0026lt;/BODY\u0026gt;\u0026quot;);\rout.println(\u0026quot;\u0026lt;/HTML\u0026gt;\u0026quot;);\rout.flush();\rout.close();\r}\r}\r会话监听器 #  新建SerssionListenerDemo类 #  @WebListener\rpublic class SerssionListenerDemo implements HttpSessionListener{\rprivate static int count=0;\r@Override\rpublic void sessionCreated(HttpSessionEvent se) {\rHttpSessionListener.super.sessionCreated(se);\rcount++;\rSystem.out.println(\u0026quot;第\u0026quot;+count+\u0026quot;个会话被创建\u0026quot;);\r}\r@Override\rpublic void sessionDestroyed(HttpSessionEvent se) {\r// TODO Auto-generated method stub\rHttpSessionListener.super.sessionDestroyed(se);\rSystem.out.println(\u0026quot;会话被毁灭\u0026quot;);\rcount--;\rSystem.out.println(\u0026quot;当前剩余\u0026quot;+count+\u0026quot;个会话\u0026quot;);\r}\r}\r新建SessionAttributeListener类 #  @WebListener\rpublic class SessionAttributeListener implements HttpSessionAttributeListener{\r@Override\rpublic void attributeAdded(HttpSessionBindingEvent event) {\rHttpSessionAttributeListener.super.attributeAdded(event);\rSystem.out.println(\u0026quot;session添加了一个属性\u0026quot;);\r}\r@Override\rpublic void attributeRemoved(HttpSessionBindingEvent event) {\rHttpSessionAttributeListener.super.attributeRemoved(event);\rSystem.out.println(\u0026quot;session删除了某个属性\u0026quot;);\r}\r@Override\rpublic void attributeReplaced(HttpSessionBindingEvent event) {\rHttpSessionAttributeListener.super.attributeReplaced(event);\rSystem.out.println(\u0026quot;session修改了某个属性\u0026quot;);\r}\r}\r新建ServletRequestListener类 #  @WebListener\rpublic class ServletRequestListener implements javax.servlet.ServletRequestListener{\r@Override\rpublic void requestInitialized(ServletRequestEvent sre) {\rjavax.servlet.ServletRequestListener.super.requestInitialized(sre);\rSystem.out.println(\u0026quot;生成新的请求\u0026quot;);\r}\r@Override\rpublic void requestDestroyed(ServletRequestEvent sre) {\rjavax.servlet.ServletRequestListener.super.requestDestroyed(sre);\rSystem.out.println(\u0026quot;请求毁灭\u0026quot;);\r}\r}\r"});index.add({'id':94,'href':'/life/docs/operating_system/four_chapter/','title':"第四章 文件管理 ",'section':"操作系统 ",'content':"文件管理 #  "});index.add({'id':95,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/iqcs36rgjy/x8benctsak/','title':"关于爱情令人不解的一切",'section':"人际剖析",'content':"关于爱情令人不解的一切 #  "});index.add({'id':96,'href':'/life/docs/databases/mysql/mysql_data/','title':"数据准备",'section':"mysql学习笔记",'content':" 数据准备  数据准备\ndrop datbase ch10; create database ch10; use ch10; drop table if EXISTS fruits ; CREATE TABLE fruits ( f_id char(10) NOT NULL, s_id INT NOT NULL, f_name char(255) NOT NULL, f_price decimal(8,2) NOT NULL, PRIMARY KEY(f_id) ); INSERT INTO fruits (f_id, s_id, f_name, f_price) VALUES(\u0026#39;a1\u0026#39;, 101,\u0026#39;apple\u0026#39;,5.2), (\u0026#39;b1\u0026#39;,101,\u0026#39;blackberry\u0026#39;, 10.2), (\u0026#39;bs1\u0026#39;,102,\u0026#39;orange\u0026#39;, 11.2), (\u0026#39;bs2\u0026#39;,105,\u0026#39;melon\u0026#39;,8.2), (\u0026#39;t1\u0026#39;,102,\u0026#39;banana\u0026#39;, 10.3), (\u0026#39;t2\u0026#39;,102,\u0026#39;grape\u0026#39;, 5.3), (\u0026#39;o2\u0026#39;,103,\u0026#39;coconut\u0026#39;, 9.2), (\u0026#39;c0\u0026#39;,101,\u0026#39;cherry\u0026#39;, 3.2), (\u0026#39;a2\u0026#39;,103, \u0026#39;apricot\u0026#39;,2.2), (\u0026#39;l2\u0026#39;,104,\u0026#39;lemon\u0026#39;, 6.4), (\u0026#39;b2\u0026#39;,104,\u0026#39;berry\u0026#39;, 7.6), (\u0026#39;m1\u0026#39;,106,\u0026#39;mango\u0026#39;, 15.6), (\u0026#39;m2\u0026#39;,105,\u0026#39;xbabay\u0026#39;, 2.6), (\u0026#39;t4\u0026#39;,107,\u0026#39;xbababa\u0026#39;, 3.6), (\u0026#39;m3\u0026#39;,105,\u0026#39;xxtt\u0026#39;, 11.6), (\u0026#39;b5\u0026#39;,107,\u0026#39;xxxx\u0026#39;, 3.6); drop table if EXISTS customers ; CREATE TABLE customers ( c_id int NOT NULL AUTO_INCREMENT, c_name char(50) NOT NULL, c_address char(50) NULL, c_city char(50) NULL, c_zip char(10) NULL, c_contact char(50) NULL, c_email char(255) NULL, PRIMARY KEY (c_id) ); INSERT INTO customers(c_id, c_name, c_address, c_city, c_zip, c_contact, c_email) VALUES(10001, \u0026#39;RedHook\u0026#39;, \u0026#39;200 Street \u0026#39;, \u0026#39;Tianjin\u0026#39;, \u0026#39;300000\u0026#39;, \u0026#39;LiMing\u0026#39;, \u0026#39;LMing@163.com\u0026#39;), (10002, \u0026#39;Stars\u0026#39;, \u0026#39;333 Fromage Lane\u0026#39;, \u0026#39;Dalian\u0026#39;, \u0026#39;116000\u0026#39;, \u0026#39;Zhangbo\u0026#39;,\u0026#39;Jerry@hotmail.com\u0026#39;), (10003, \u0026#39;Netbhood\u0026#39;, \u0026#39;1 Sunny Place\u0026#39;, \u0026#39;Qingdao\u0026#39;, \u0026#39;266000\u0026#39;, \u0026#39;LuoCong\u0026#39;, NULL), (10004, \u0026#39;JOTO\u0026#39;, \u0026#39;829 Riverside Drive\u0026#39;, \u0026#39;Haikou\u0026#39;, \u0026#39;570000\u0026#39;, \u0026#39;YangShan\u0026#39;, \u0026#39;sam@hotmail.com\u0026#39;); drop table if EXISTS orderitems ; CREATE TABLE orderitems ( o_num int NOT NULL, o_item int NOT NULL, f_id char(10) NOT NULL, quantity int NOT NULL, item_price decimal(8,2) NOT NULL, PRIMARY KEY (o_num,o_item) ) ; INSERT INTO orderitems(o_num, o_item, f_id, quantity, item_price) VALUES(30001, 1, \u0026#39;a1\u0026#39;, 10, 5.2), (30001, 2, \u0026#39;b2\u0026#39;, 3, 7.6), (30001, 3, \u0026#39;bs1\u0026#39;, 5, 11.2), (30001, 4, \u0026#39;bs2\u0026#39;, 15, 9.2), (30002, 1, \u0026#39;b3\u0026#39;, 2, 20.0), (30003, 1, \u0026#39;c0\u0026#39;, 100, 10), (30004, 1, \u0026#39;o2\u0026#39;, 50, 2.50), (30005, 1, \u0026#39;c0\u0026#39;, 5, 10), (30005, 2, \u0026#39;b1\u0026#39;, 10, 8.99), (30005, 3, \u0026#39;a2\u0026#39;, 10, 2.2), (30005, 4, \u0026#39;m1\u0026#39;, 5, 14.99); drop table if EXISTS suppliers ; CREATE TABLE suppliers ( s_id int NOT NULL AUTO_INCREMENT, s_name char(50) NOT NULL, s_city char(50) NULL, s_zip char(10) NULL, s_call CHAR(50) NOT NULL, PRIMARY KEY (s_id) ) ; INSERT INTO suppliers(s_id, s_name,s_city, s_zip, s_call) VALUES(101,\u0026#39;FastFruit Inc.\u0026#39;,\u0026#39;Tianjin\u0026#39;,\u0026#39;300000\u0026#39;,\u0026#39;48075\u0026#39;), (102,\u0026#39;LT Supplies\u0026#39;,\u0026#39;Chongqing\u0026#39;,\u0026#39;400000\u0026#39;,\u0026#39;44333\u0026#39;), (103,\u0026#39;ACME\u0026#39;,\u0026#39;Shanghai\u0026#39;,\u0026#39;200000\u0026#39;,\u0026#39;90046\u0026#39;), (104,\u0026#39;FNK Inc.\u0026#39;,\u0026#39;Zhongshan\u0026#39;,\u0026#39;528437\u0026#39;,\u0026#39;11111\u0026#39;), (105,\u0026#39;Good Set\u0026#39;,\u0026#39;Taiyuang\u0026#39;,\u0026#39;030000\u0026#39;, \u0026#39;22222\u0026#39;), (106,\u0026#39;Just Eat Ours\u0026#39;,\u0026#39;Beijing\u0026#39;,\u0026#39;010\u0026#39;, \u0026#39;45678\u0026#39;), (107,\u0026#39;DK Inc.\u0026#39;,\u0026#39;Zhengzhou\u0026#39;,\u0026#39;450000\u0026#39;, \u0026#39;33332\u0026#39;); drop table if EXISTS orders ; CREATE TABLE orders ( o_num int NOT NULL AUTO_INCREMENT, o_date datetime NOT NULL, c_id int NOT NULL, PRIMARY KEY (o_num) ) ; INSERT INTO orders(o_num, o_date, c_id) VALUES(30001, \u0026#39;2008-09-01\u0026#39;, 10001), (30002, \u0026#39;2008-09-12\u0026#39;, 10003), (30003, \u0026#39;2008-09-30\u0026#39;, 10004), (30004, \u0026#39;2008-10-03\u0026#39;, 10005), (30005, \u0026#39;2008-10-08\u0026#39;, 10001); drop table if EXISTS dept ; CREATE TABLE dept ( d_no INT NOT NULL PRIMARY KEY AUTO_INCREMENT, d_name VARCHAR(50), d_location VARCHAR(100) ); drop table if EXISTS employee ; -- 由于employee表dept_no依赖于父表dept的主键d_no，因此需要先创建dept表，然后创建employee表。 CREATE TABLE employee ( e_no INT NOT NULL PRIMARY KEY, e_name VARCHAR(100) NOT NULL, e_gender CHAR(2) NOT NULL, dept_no INT NOT NULL, e_job VARCHAR(100) NOT NULL, e_salary SMALLINT NOT NULL, hireDate DATE, CONSTRAINT dno_fk FOREIGN KEY(dept_no) REFERENCES dept(d_no) ); INSERT INTO dept VALUES (10, \u0026#39;ACCOUNTING\u0026#39;, \u0026#39;ShangHai\u0026#39;), (20, \u0026#39;RESEARCH \u0026#39;, \u0026#39;BeiJing \u0026#39;), (30, \u0026#39;SALES \u0026#39;, \u0026#39;ShenZhen \u0026#39;), (40, \u0026#39;OPERATIONS \u0026#39;, \u0026#39;FuJian \u0026#39;); INSERT INTO employee VALUES (1001, \u0026#39;SMITH\u0026#39;, \u0026#39;m\u0026#39;,20, \u0026#39;CLERK\u0026#39;,800,\u0026#39;2005-11-12\u0026#39;), (1002, \u0026#39;ALLEN\u0026#39;, \u0026#39;f\u0026#39;,30, \u0026#39;SALESMAN\u0026#39;, 1600,\u0026#39;2003-05-12\u0026#39;), (1003, \u0026#39;WARD\u0026#39;, \u0026#39;f\u0026#39;,30, \u0026#39;SALESMAN\u0026#39;, 1250,\u0026#39;2003-05-12\u0026#39;), (1004, \u0026#39;JONES\u0026#39;, \u0026#39;m\u0026#39;,20, \u0026#39;MANAGER\u0026#39;, 2975,\u0026#39;1998-05-18\u0026#39;), (1005, \u0026#39;MARTIN\u0026#39;, \u0026#39;m\u0026#39;,30, \u0026#39;SALESMAN\u0026#39;, 1250,\u0026#39;2001-06-12\u0026#39;), (1006, \u0026#39;BLAKE\u0026#39;, \u0026#39;f\u0026#39;,30, \u0026#39;MANAGER\u0026#39;, 2850,\u0026#39;1997-02-15\u0026#39;), (1007, \u0026#39;CLARK\u0026#39;, \u0026#39;m\u0026#39;,10, \u0026#39;MANAGER\u0026#39;, 2450,\u0026#39;2002-09-12\u0026#39;), (1008, \u0026#39;SCOTT\u0026#39;, \u0026#39;m\u0026#39;,20, \u0026#39;ANALYST\u0026#39;, 3000,\u0026#39;2003-05-12\u0026#39;), (1009, \u0026#39;KING\u0026#39;, \u0026#39;f\u0026#39;,10, \u0026#39;PRESIDENT\u0026#39;, 5000,\u0026#39;1995-01-01\u0026#39;), (1010, \u0026#39;TURNER\u0026#39;, \u0026#39;f\u0026#39;,30, \u0026#39;SALESMAN\u0026#39;, 1500,\u0026#39;1997-10-12\u0026#39;), (1011, \u0026#39;ADAMS\u0026#39;, \u0026#39;m\u0026#39;,20, \u0026#39;CLERK\u0026#39;, 1100,\u0026#39;1999-10-05\u0026#39;), (1012, \u0026#39;JAMES\u0026#39;, \u0026#39;m\u0026#39;,30, \u0026#39;CLERK\u0026#39;, 950,\u0026#39;2008-06-15\u0026#39;); drop table if EXISTS score ; CREATE TABLE `score` ( `id` int NOT NULL AUTO_INCREMENT, `stu_id` int NOT NULL, `c_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL, `grade` int DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `id` (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin; INSERT INTO `score`(`id`, `stu_id`, `c_name`, `grade`) VALUES (1, 901, \u0026#39;计算机\u0026#39;, 98); INSERT INTO `score`(`id`, `stu_id`, `c_name`, `grade`) VALUES (2, 901, \u0026#39;英语\u0026#39;, 80); INSERT INTO `score`(`id`, `stu_id`, `c_name`, `grade`) VALUES (3, 902, \u0026#39;计算机\u0026#39;, 65); INSERT INTO `score`(`id`, `stu_id`, `c_name`, `grade`) VALUES (4, 902, \u0026#39;中文\u0026#39;, 88); INSERT INTO `score`(`id`, `stu_id`, `c_name`, `grade`) VALUES (5, 903, \u0026#39;中文\u0026#39;, 95); INSERT INTO `score`(`id`, `stu_id`, `c_name`, `grade`) VALUES (6, 904, \u0026#39;计算机\u0026#39;, 70); INSERT INTO `score`(`id`, `stu_id`, `c_name`, `grade`) VALUES (7, 904, \u0026#39;英语\u0026#39;, 92); INSERT INTO `score`(`id`, `stu_id`, `c_name`, `grade`) VALUES (8, 905, \u0026#39;英语\u0026#39;, 94); INSERT INTO `score`(`id`, `stu_id`, `c_name`, `grade`) VALUES (9, 906, \u0026#39;计算机\u0026#39;, 90); INSERT INTO `score`(`id`, `stu_id`, `c_name`, `grade`) VALUES (10, 906, \u0026#39;英语\u0026#39;, 85); DROP TABLE IF EXISTS `student`; CREATE TABLE `student` ( `id` int(0) NOT NULL, `class_id` int(0) NULL DEFAULT NULL, `name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL, `sex` varchar(4) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL, `birth` year NULL DEFAULT NULL, `department` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL, `address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE, UNIQUE INDEX `id`(`id`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic; INSERT INTO `student` VALUES (901, 1, \u0026#39;张老大\u0026#39;, \u0026#39;男\u0026#39;, 1985, \u0026#39;计算机系\u0026#39;, \u0026#39;北京市海淀区\u0026#39;); INSERT INTO `student` VALUES (902, 1, \u0026#39;张老二\u0026#39;, \u0026#39;男\u0026#39;, 1986, \u0026#39;中文系\u0026#39;, \u0026#39;北京市昌平区\u0026#39;); INSERT INTO `student` VALUES (903, 1, \u0026#39;张三\u0026#39;, \u0026#39;女\u0026#39;, 1990, \u0026#39;中文系\u0026#39;, \u0026#39;湖南省永州市\u0026#39;); INSERT INTO `student` VALUES (904, 2, \u0026#39;李四\u0026#39;, \u0026#39;男\u0026#39;, 1990, \u0026#39;英语系\u0026#39;, \u0026#39;辽宁省阜新市\u0026#39;); INSERT INTO `student` VALUES (905, 1, \u0026#39;王五\u0026#39;, \u0026#39;女\u0026#39;, 1991, \u0026#39;英语系\u0026#39;, \u0026#39;福建省厦门市\u0026#39;); INSERT INTO `student` VALUES (906, 2, \u0026#39;王六\u0026#39;, \u0026#39;男\u0026#39;, 1988, \u0026#39;计算机系\u0026#39;, \u0026#39;湖南省衡阳市\u0026#39;); DROP TABLE IF EXISTS `tb_class`; CREATE TABLE `tb_class` ( `id` int(0) NOT NULL AUTO_INCREMENT, `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic; INSERT INTO `tb_class` VALUES (1, \u0026#39;一班\u0026#39;); INSERT INTO `tb_class` VALUES (2, \u0026#39;二班\u0026#39;); DROP TABLE IF EXISTS `t_user`; CREATE TABLE `t_user` ( `USER_ID` int NOT NULL AUTO_INCREMENT, `USER_NAME` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, `USER_PASSWORD` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, `USER_EMAIL` char(80) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, PRIMARY KEY (`USER_ID`), KEY `IDX_NAME` (`USER_NAME`) ) ENGINE=InnoDB AUTO_INCREMENT=6209 DEFAULT CHARSET=utf8mb3; DROP TABLE IF EXISTS `temp_date`; CREATE TABLE `temp_date` ( `id` int NOT NULL AUTO_INCREMENT, `age` float(14,2) DEFAULT NULL COMMENT \u0026#39;age\u0026#39;, `name` varchar(255) DEFAULT NULL, `birthday` date DEFAULT NULL COMMENT \u0026#39;生日\u0026#39;, `gmt_created` datetime DEFAULT CURRENT_TIMESTAMP, `gmt_modified` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=1075 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=\u0026#39;临时用户表\u0026#39;; DROP TABLE IF EXISTS `user_column_row`; CREATE TABLE `user_column_row` ( `id` int NOT NULL AUTO_INCREMENT, `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT \u0026#39;姓名\u0026#39;, `features` varchar(255) DEFAULT NULL COMMENT \u0026#39;特征\u0026#39;, `value` varchar(255) DEFAULT NULL COMMENT \u0026#39;数值\u0026#39;, PRIMARY KEY (`id`) ) ENGINE=MyISAM AUTO_INCREMENT=18 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; DROP TABLE IF EXISTS `user2`; CREATE TABLE `user2` ( `id` int NOT NULL AUTO_INCREMENT, `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT \u0026#39;名称\u0026#39;, `age` double(11,2) DEFAULT NULL COMMENT \u0026#39;年龄\u0026#39;, `height` double(11,2) DEFAULT NULL COMMENT \u0026#39;身高\u0026#39;, `weight` double(11,2) DEFAULT NULL COMMENT \u0026#39;体重\u0026#39;, PRIMARY KEY (`id`) ) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (2, \u0026#39;小明\u0026#39;, \u0026#39;身高\u0026#39;, \u0026#39;172.00\u0026#39;); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (3, \u0026#39;小明\u0026#39;, \u0026#39;体重\u0026#39;, \u0026#39;48.0kg\u0026#39;); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (4, \u0026#39;小明\u0026#39;, \u0026#39;年龄\u0026#39;, \u0026#39;23\u0026#39;); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (5, \u0026#39;小红\u0026#39;, \u0026#39;身高\u0026#39;, \u0026#39;161.00\u0026#39;); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (6, \u0026#39;小红\u0026#39;, \u0026#39;体重\u0026#39;, \u0026#39;40.0kg\u0026#39;); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (7, \u0026#39;小红\u0026#39;, \u0026#39;年龄\u0026#39;, \u0026#39;19\u0026#39;); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (8, \u0026#39;小花\u0026#39;, \u0026#39;身高\u0026#39;, \u0026#39;153.00\u0026#39;); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (9, \u0026#39;小花\u0026#39;, \u0026#39;体重\u0026#39;, \u0026#39;42.0kg\u0026#39;); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (10, \u0026#39;小花\u0026#39;, \u0026#39;年龄\u0026#39;, \u0026#39;17\u0026#39;); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (11, \u0026#39;小明\u0026#39;, \u0026#39;身高\u0026#39;, \u0026#39;172.33\u0026#39;); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (12, \u0026#39;小军\u0026#39;, \u0026#39;身高\u0026#39;, NULL); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (13, \u0026#39;小军\u0026#39;, \u0026#39;体重\u0026#39;, NULL); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (14, \u0026#39;小军\u0026#39;, \u0026#39;年龄\u0026#39;, NULL); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (15, \u0026#39;小胖\u0026#39;, NULL, NULL); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (16, \u0026#39;小胖\u0026#39;, NULL, NULL); INSERT INTO `user_column_row`(`id`, `name`, `features`, `value`) VALUES (17, \u0026#39;小胖\u0026#39;, NULL, NULL); INSERT INTO `temp_date`(`id`, `age`, `name`, `birthday`, `gmt_created`, `gmt_modified`) VALUES (1, 27.00, \u0026#39;0512c852d8d53f715876c72a239da357\u0026#39;, \u0026#39;1973-03-06\u0026#39;, \u0026#39;2022-05-30 23:18:09\u0026#39;, \u0026#39;2022-05-30 23:18:09\u0026#39;); INSERT INTO `temp_date`(`id`, `age`, `name`, `birthday`, `gmt_created`, `gmt_modified`) VALUES (2, 3.00, \u0026#39;677a9a202a76195edebe5735486fbd37\u0026#39;, \u0026#39;1992-02-02\u0026#39;, \u0026#39;2022-05-30 23:18:09\u0026#39;, \u0026#39;2022-05-30 23:18:09\u0026#39;); INSERT INTO `temp_date`(`id`, `age`, `name`, `birthday`, `gmt_created`, `gmt_modified`) VALUES (3, 56.00, \u0026#39;960d07df0252db6c73d8bbd59bbce05f\u0026#39;, \u0026#39;2016-09-23\u0026#39;, \u0026#39;2022-05-30 23:18:09\u0026#39;, \u0026#39;2022-05-30 23:18:09\u0026#39;); INSERT INTO `temp_date`(`id`, `age`, `name`, `birthday`, `gmt_created`, `gmt_modified`) VALUES (4, 75.00, \u0026#39;f715d5b2625b50c7f0bf28f4818efd28\u0026#39;, \u0026#39;1963-02-25\u0026#39;, \u0026#39;2022-05-30 23:18:10\u0026#39;, \u0026#39;2022-05-30 23:18:10\u0026#39;); INSERT INTO `temp_date`(`id`, `age`, `name`, `birthday`, `gmt_created`, `gmt_modified`) VALUES (5, 89.00, \u0026#39;b61d09e5cc6e4f004bd308b871d83d9c\u0026#39;, \u0026#39;1929-04-11\u0026#39;, \u0026#39;2022-05-30 23:18:10\u0026#39;, \u0026#39;2022-05-30 23:18:10\u0026#39;); INSERT INTO `temp_date`(`id`, `age`, `name`, `birthday`, `gmt_created`, `gmt_modified`) VALUES (6, 3.00, \u0026#39;bcb74f85d88f94dac13cda1dc62f9e07\u0026#39;, \u0026#39;1950-08-24\u0026#39;, \u0026#39;2022-05-30 23:18:10\u0026#39;, \u0026#39;2022-05-30 23:18:10\u0026#39;); INSERT INTO `temp_date`(`id`, `age`, `name`, `birthday`, `gmt_created`, `gmt_modified`) VALUES (7, 34.00, \u0026#39;5f632ce7c206a1559c0d153d4be1fc2c\u0026#39;, \u0026#39;1991-09-17\u0026#39;, \u0026#39;2022-05-30 23:18:10\u0026#39;, \u0026#39;2022-05-30 23:18:10\u0026#39;); INSERT INTO `temp_date`(`id`, `age`, `name`, `birthday`, `gmt_created`, `gmt_modified`) VALUES (8, 77.00, \u0026#39;ede2768cc05a582a8b20e6a93683b435\u0026#39;, \u0026#39;1901-05-25\u0026#39;, \u0026#39;2022-05-30 23:18:10\u0026#39;, \u0026#39;2022-05-30 23:18:10\u0026#39;); INSERT INTO `temp_date`(`id`, `age`, `name`, `birthday`, `gmt_created`, `gmt_modified`) VALUES (9, 24.00, \u0026#39;68949a40f111939a0be18db38141c7b3\u0026#39;, \u0026#39;1946-10-30\u0026#39;, \u0026#39;2022-05-30 23:18:10\u0026#39;, \u0026#39;2022-05-30 23:18:10\u0026#39;); INSERT INTO `temp_date`(`id`, `age`, `name`, `birthday`, `gmt_created`, `gmt_modified`) VALUES (10, 2.00, \u0026#39;5362bb925f28dc23f94229a2653edd48\u0026#39;, \u0026#39;1928-09-26\u0026#39;, \u0026#39;2022-05-30 23:18:10\u0026#39;, \u0026#39;2022-05-30 23:18:10\u0026#39;); INSERT INTO `temp_date`(`id`, `age`, `name`, `birthday`, `gmt_created`, `gmt_modified`) VALUES (11, 58.00, \u0026#39;e236185011cb88e6226ef542b83fd9e3\u0026#39;, \u0026#39;1902-08-05\u0026#39;, \u0026#39;2022-05-31 20:42:28\u0026#39;, \u0026#39;2022-05-31 20:42:28\u0026#39;); INSERT INTO `temp_date`(`id`, `age`, `name`, `birthday`, `gmt_created`, `gmt_modified`) VALUES (12, 85.00, \u0026#39;baa1eac46aa193fcf6c2b704f17a2ae9\u0026#39;, \u0026#39;1955-09-07\u0026#39;, \u0026#39;2022-05-31 20:42:28\u0026#39;, \u0026#39;2022-05-31 20:42:28\u0026#39;); INSERT INTO `temp_date`(`id`, `age`, `name`, `birthday`, `gmt_created`, `gmt_modified`) VALUES (13, 8.00, \u0026#39;ae4f37ff310138525784a4eb56d7ca08\u0026#39;, \u0026#39;1971-07-23\u0026#39;, \u0026#39;2022-05-31 20:42:28\u0026#39;, \u0026#39;2022-05-31 20:42:28\u0026#39;); INSERT INTO `temp_date`(`id`, `age`, `name`, `birthday`, `gmt_created`, `gmt_modified`) VALUES (14, 18.00, \u0026#39;64ebcbd613223347e7cee2549197eab6\u0026#39;, \u0026#39;1916-10-10\u0026#39;, \u0026#39;2022-05-31 20:42:28\u0026#39;, \u0026#39;2022-05-31 20:42:28\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (9, \u0026#39;8d80af597433177f201f86f1fe0f9d9d\u0026#39;, \u0026#39;64a3680910b95bc6361b560fc5e07970\u0026#39;, \u0026#39;d474fe4@4feed-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (10, \u0026#39;d0e1cc42e2774e52cce412e9f5027491\u0026#39;, \u0026#39;ea346e9806c5f80b2a2eda551b45827b\u0026#39;, \u0026#39;d48271b@271e4-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (11, \u0026#39;88693fb73cab1f860ccfaf80de83e204\u0026#39;, \u0026#39;a624aa6c82faa32379892106b6daa249\u0026#39;, \u0026#39;d489f9a@9f9d5-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (12, \u0026#39;6d47c9fffc66612fbc057201a4d910bd\u0026#39;, \u0026#39;1e34c1122675a45e525a1ab1b6348ca2\u0026#39;, \u0026#39;d4953c5@53c88-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (13, \u0026#39;418f57775bfcdb3e0687e6c423e57d05\u0026#39;, \u0026#39;0a7089f91c7ab7850df0802e5ca3bc12\u0026#39;, \u0026#39;d4a0866@08c65-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (14, \u0026#39;ea0f6876c57dcc3f82a36208a97afea6\u0026#39;, \u0026#39;b6a8591804f06e9bd99fb2114cb50861\u0026#39;, \u0026#39;d4a8089@808bf-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (15, \u0026#39;3d0a07879b2e826e0b29d8ced8e92b4c\u0026#39;, \u0026#39;875e61c2fe9025fa30326bad73e070ca\u0026#39;, \u0026#39;d4af8f7@f8fb3-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (16, \u0026#39;877b734119235886088a5124a7fe8ddf\u0026#39;, \u0026#39;c293b45da05a29a3e9204625831977c5\u0026#39;, \u0026#39;d4b713c@713f9-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (17, \u0026#39;f3f3c624bb418b63bdc3f580dd5039b0\u0026#39;, \u0026#39;860514262f38d33545d6c8301d5921b2\u0026#39;, \u0026#39;d4c2588@258b8-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (18, \u0026#39;bffcad8fdfd4a95d2062d6e83098186d\u0026#39;, \u0026#39;2fff3c910cca03887ab6b26ee2b76cf3\u0026#39;, \u0026#39;d4c9de5@9de85-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (19, \u0026#39;2f1e409ea4569648270507e424a09621\u0026#39;, \u0026#39;78ffe25a4e2ef08605f2c25a2392f611\u0026#39;, \u0026#39;d4d1643@16464-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (20, \u0026#39;2f87b8d6988cd55c4361768735955861\u0026#39;, \u0026#39;e4dd44e0bf104610f915c26854f0e6f2\u0026#39;, \u0026#39;d4d8ec9@8ecd7-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (21, \u0026#39;94879aadb598a19ab612b97fa0f0c769\u0026#39;, \u0026#39;92912589c3a3ddb4457ccc5f183df822\u0026#39;, \u0026#39;d4e4406@44093-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (22, \u0026#39;69cbf1919065ce7a04f0cb486d7a0320\u0026#39;, \u0026#39;03bed78d5031fd536f0af3a6f0e3cc1f\u0026#39;, \u0026#39;d4f70b8@70bbe-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (23, \u0026#39;b77b1800acc41f27d8158c05c53ca743\u0026#39;, \u0026#39;fb1001ca32eea35a0a561416e9bd1996\u0026#39;, \u0026#39;d50617a@617d0-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (24, \u0026#39;57dab3aacd9776d067f7f42f1adf92d3\u0026#39;, \u0026#39;ddc141fef43e5d6f87659fdc5455333c\u0026#39;, \u0026#39;d5151be@51c1e-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (25, \u0026#39;1208d1d73683c335a8e601f6eef5a5b4\u0026#39;, \u0026#39;c45e0d126705c9f83c35ed218e1b9a4e\u0026#39;, \u0026#39;d51c97a@c97e0-da.com\u0026#39;); INSERT INTO `t_user`(`USER_ID`, `USER_NAME`, `USER_PASSWORD`, `USER_EMAIL`) VALUES (26, \u0026#39;fe85827612e43eee230250d8f94f12ac\u0026#39;, \u0026#39;301a625913e87498b656836118294225\u0026#39;, \u0026#39;d527dab@7daf1-da.com\u0026#39;); INSERT INTO `user2`(`id`, `name`, `age`, `height`, `weight`) VALUES (2, \u0026#39;小明\u0026#39;, 22.00, 48.00, 178.40); INSERT INTO `user2`(`id`, `name`, `age`, `height`, `weight`) VALUES (3, \u0026#39;小胖\u0026#39;, 25.00, 50.00, 168.00); DROP TABLE IF EXISTS `productnotes`; CREATE TABLE `productnotes` ( `note_id` int NOT NULL AUTO_INCREMENT, `prod_id` char(10) NOT NULL, `note_date` datetime NOT NULL, `note_text` text, PRIMARY KEY (`note_id`), FULLTEXT KEY `note_text` (`note_text`) ) ENGINE=MyISAM AUTO_INCREMENT=115 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; DROP TABLE IF EXISTS `vendors`; CREATE TABLE `vendors` ( `vend_id` int NOT NULL AUTO_INCREMENT, `vend_name` char(50) NOT NULL, `vend_address` char(50) DEFAULT NULL, `vend_city` char(50) DEFAULT NULL, `vend_state` char(5) DEFAULT NULL, `vend_zip` char(10) DEFAULT NULL, `vend_country` char(50) DEFAULT NULL, PRIMARY KEY (`vend_id`) ) ENGINE=InnoDB AUTO_INCREMENT=1007 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; DROP TABLE IF EXISTS `products`; CREATE TABLE `products` ( `prod_id` char(10) NOT NULL, `vend_id` int NOT NULL, `prod_name` char(255) NOT NULL, `prod_price` decimal(8,2) NOT NULL, `prod_desc` text, PRIMARY KEY (`prod_id`), KEY `fk_products_vendors` (`vend_id`), CONSTRAINT `fk_products_vendors` FOREIGN KEY (`vend_id`) REFERENCES `vendors` (`vend_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; INSERT INTO `productnotes`(`note_id`, `prod_id`, `note_date`, `note_text`) VALUES (101, \u0026#39;TNT2\u0026#39;, \u0026#39;2005-08-17 00:00:00\u0026#39;, \u0026#39;Customer complaint:\\r\\nSticks not individually wrapped, too easy to mistakenly detonate all at once.\\r\\nRecommend individual wrapping.\u0026#39;); INSERT INTO `productnotes`(`note_id`, `prod_id`, `note_date`, `note_text`) VALUES (102, \u0026#39;OL1\u0026#39;, \u0026#39;2005-08-18 00:00:00\u0026#39;, \u0026#39;Can shipped full, refills not available.\\r\\nNeed to order new can if refill needed.\u0026#39;); INSERT INTO `productnotes`(`note_id`, `prod_id`, `note_date`, `note_text`) VALUES (103, \u0026#39;SAFE\u0026#39;, \u0026#39;2005-08-18 00:00:00\u0026#39;, \u0026#39;Safe is combination locked, combination not provided with safe.\\r\\nThis is rarely a problem as safes are typically blown up or dropped by customers.\u0026#39;); INSERT INTO `productnotes`(`note_id`, `prod_id`, `note_date`, `note_text`) VALUES (104, \u0026#39;FC\u0026#39;, \u0026#39;2005-08-19 00:00:00\u0026#39;, \u0026#39;Quantity varies, sold by the sack load.\\r\\nAll guaranteed to be bright and orange, and suitable for use as rabbit bait.\u0026#39;); INSERT INTO `productnotes`(`note_id`, `prod_id`, `note_date`, `note_text`) VALUES (105, \u0026#39;TNT2\u0026#39;, \u0026#39;2005-08-20 00:00:00\u0026#39;, \u0026#39;Included fuses are short and have been known to detonate too quickly for some customers.\\r\\nLonger fuses are available (item FU1) and should be recommended.\u0026#39;); INSERT INTO `productnotes`(`note_id`, `prod_id`, `note_date`, `note_text`) VALUES (106, \u0026#39;TNT2\u0026#39;, \u0026#39;2005-08-22 00:00:00\u0026#39;, \u0026#39;Matches not included, recommend purchase of matches or detonator (item DTNTR).\u0026#39;); INSERT INTO `productnotes`(`note_id`, `prod_id`, `note_date`, `note_text`) VALUES (107, \u0026#39;SAFE\u0026#39;, \u0026#39;2005-08-23 00:00:00\u0026#39;, \u0026#39;Please note that no returns will be accepted if safe opened using explosives.\u0026#39;); INSERT INTO `productnotes`(`note_id`, `prod_id`, `note_date`, `note_text`) VALUES (108, \u0026#39;ANV01\u0026#39;, \u0026#39;2005-08-25 00:00:00\u0026#39;, \u0026#39;Multiple customer returns, anvils failing to drop fast enough or falling backwards on purchaser. Recommend that customer considers using heavier anvils.\u0026#39;); INSERT INTO `productnotes`(`note_id`, `prod_id`, `note_date`, `note_text`) VALUES (109, \u0026#39;ANV03\u0026#39;, \u0026#39;2005-09-01 00:00:00\u0026#39;, \u0026#39;Item is extremely heavy. Designed for dropping, not recommended for use with slings, ropes, pulleys, or tightropes.\u0026#39;); INSERT INTO `productnotes`(`note_id`, `prod_id`, `note_date`, `note_text`) VALUES (110, \u0026#39;FC\u0026#39;, \u0026#39;2005-09-01 00:00:00\u0026#39;, \u0026#39;Customer complaint: rabbit has been able to detect trap, food apparently less effective now.\u0026#39;); INSERT INTO `productnotes`(`note_id`, `prod_id`, `note_date`, `note_text`) VALUES (111, \u0026#39;SLING\u0026#39;, \u0026#39;2005-09-02 00:00:00\u0026#39;, \u0026#39;Shipped unassembled, requires common tools (including oversized hammer).\u0026#39;); INSERT INTO `productnotes`(`note_id`, `prod_id`, `note_date`, `note_text`) VALUES (112, \u0026#39;SAFE\u0026#39;, \u0026#39;2005-09-02 00:00:00\u0026#39;, \u0026#39;Customer complaint:\\r\\nCircular hole in safe floor can apparently be easily cut with handsaw.\u0026#39;); INSERT INTO `productnotes`(`note_id`, `prod_id`, `note_date`, `note_text`) VALUES (113, \u0026#39;ANV01\u0026#39;, \u0026#39;2005-09-05 00:00:00\u0026#39;, \u0026#39;Customer complaint:\\r\\nNot heavy enough to generate flying stars around head of victim. If being purchased for dropping, recommend ANV02 or ANV03 instead.\u0026#39;); INSERT INTO `productnotes`(`note_id`, `prod_id`, `note_date`, `note_text`) VALUES (114, \u0026#39;SAFE\u0026#39;, \u0026#39;2005-09-07 00:00:00\u0026#39;, \u0026#39;Call from individual trapped in safe plummeting to the ground, suggests an escape hatch be added.\\r\\nComment forwarded to vendor.\u0026#39;); INSERT INTO `vendors`(`vend_id`, `vend_name`, `vend_address`, `vend_city`, `vend_state`, `vend_zip`, `vend_country`) VALUES (1001, \u0026#39;Anvils R Us\u0026#39;, \u0026#39;123 Main Street\u0026#39;, \u0026#39;Southfield\u0026#39;, \u0026#39;MI\u0026#39;, \u0026#39;48075\u0026#39;, \u0026#39;USA\u0026#39;); INSERT INTO `vendors`(`vend_id`, `vend_name`, `vend_address`, `vend_city`, `vend_state`, `vend_zip`, `vend_country`) VALUES (1002, \u0026#39;LT Supplies\u0026#39;, \u0026#39;500 Park Street\u0026#39;, \u0026#39;Anytown\u0026#39;, \u0026#39;OH\u0026#39;, \u0026#39;44333\u0026#39;, \u0026#39;USA\u0026#39;); INSERT INTO `vendors`(`vend_id`, `vend_name`, `vend_address`, `vend_city`, `vend_state`, `vend_zip`, `vend_country`) VALUES (1003, \u0026#39;ACME\u0026#39;, \u0026#39;555 High Street\u0026#39;, \u0026#39;Los Angeles\u0026#39;, \u0026#39;CA\u0026#39;, \u0026#39;90046\u0026#39;, \u0026#39;USA\u0026#39;); INSERT INTO `vendors`(`vend_id`, `vend_name`, `vend_address`, `vend_city`, `vend_state`, `vend_zip`, `vend_country`) VALUES (1004, \u0026#39;Furball Inc.\u0026#39;, \u0026#39;1000 5th Avenue\u0026#39;, \u0026#39;New York\u0026#39;, \u0026#39;NY\u0026#39;, \u0026#39;11111\u0026#39;, \u0026#39;USA\u0026#39;); INSERT INTO `vendors`(`vend_id`, `vend_name`, `vend_address`, `vend_city`, `vend_state`, `vend_zip`, `vend_country`) VALUES (1005, \u0026#39;Jet Set\u0026#39;, \u0026#39;42 Galaxy Road\u0026#39;, \u0026#39;London\u0026#39;, NULL, \u0026#39;N16 6PS\u0026#39;, \u0026#39;England\u0026#39;); INSERT INTO `vendors`(`vend_id`, `vend_name`, `vend_address`, `vend_city`, `vend_state`, `vend_zip`, `vend_country`) VALUES (1006, \u0026#39;Jouets Et Ours\u0026#39;, \u0026#39;1 Rue Amusement\u0026#39;, \u0026#39;Paris\u0026#39;, NULL, \u0026#39;45678\u0026#39;, \u0026#39;France\u0026#39;); INSERT INTO `products`(`prod_id`, `vend_id`, `prod_name`, `prod_price`, `prod_desc`) VALUES (\u0026#39;ANV01\u0026#39;, 1001, \u0026#39;.5 ton anvil\u0026#39;, 5.99, \u0026#39;.5 ton anvil, black, complete with handy hook\u0026#39;); INSERT INTO `products`(`prod_id`, `vend_id`, `prod_name`, `prod_price`, `prod_desc`) VALUES (\u0026#39;ANV02\u0026#39;, 1001, \u0026#39;1 ton anvil\u0026#39;, 9.99, \u0026#39;1 ton anvil, black, complete with handy hook and carrying case\u0026#39;); INSERT INTO `products`(`prod_id`, `vend_id`, `prod_name`, `prod_price`, `prod_desc`) VALUES (\u0026#39;ANV03\u0026#39;, 1001, \u0026#39;2 ton anvil\u0026#39;, 14.99, \u0026#39;2 ton anvil, black, complete with handy hook and carrying case\u0026#39;); INSERT INTO `products`(`prod_id`, `vend_id`, `prod_name`, `prod_price`, `prod_desc`) VALUES (\u0026#39;DTNTR\u0026#39;, 1003, \u0026#39;Detonator\u0026#39;, 13.00, \u0026#39;Detonator (plunger powered), fuses not included\u0026#39;); INSERT INTO `products`(`prod_id`, `vend_id`, `prod_name`, `prod_price`, `prod_desc`) VALUES (\u0026#39;FB\u0026#39;, 1003, \u0026#39;Bird seed\u0026#39;, 10.00, \u0026#39;Large bag (suitable for road runners)\u0026#39;); INSERT INTO `products`(`prod_id`, `vend_id`, `prod_name`, `prod_price`, `prod_desc`) VALUES (\u0026#39;FC\u0026#39;, 1003, \u0026#39;Carrots\u0026#39;, 2.50, \u0026#39;Carrots (rabbit hunting season only)\u0026#39;); INSERT INTO `products`(`prod_id`, `vend_id`, `prod_name`, `prod_price`, `prod_desc`) VALUES (\u0026#39;FU1\u0026#39;, 1002, \u0026#39;Fuses\u0026#39;, 3.42, \u0026#39;1 dozen, extra long\u0026#39;); INSERT INTO `products`(`prod_id`, `vend_id`, `prod_name`, `prod_price`, `prod_desc`) VALUES (\u0026#39;JP1000\u0026#39;, 1005, \u0026#39;JetPack 1000\u0026#39;, 35.00, \u0026#39;JetPack 1000, intended for single use\u0026#39;); INSERT INTO `products`(`prod_id`, `vend_id`, `prod_name`, `prod_price`, `prod_desc`) VALUES (\u0026#39;JP2000\u0026#39;, 1005, \u0026#39;JetPack 2000\u0026#39;, 55.00, \u0026#39;JetPack 2000, multi-use\u0026#39;); INSERT INTO `products`(`prod_id`, `vend_id`, `prod_name`, `prod_price`, `prod_desc`) VALUES (\u0026#39;OL1\u0026#39;, 1002, \u0026#39;Oil can\u0026#39;, 8.99, \u0026#39;Oil can, red\u0026#39;); INSERT INTO `products`(`prod_id`, `vend_id`, `prod_name`, `prod_price`, `prod_desc`) VALUES (\u0026#39;SAFE\u0026#39;, 1003, \u0026#39;Safe\u0026#39;, 50.00, \u0026#39;Safe with combination lock\u0026#39;); INSERT INTO `products`(`prod_id`, `vend_id`, `prod_name`, `prod_price`, `prod_desc`) VALUES (\u0026#39;SLING\u0026#39;, 1003, \u0026#39;Sling\u0026#39;, 4.49, \u0026#39;Sling, one size fits all\u0026#39;); INSERT INTO `products`(`prod_id`, `vend_id`, `prod_name`, `prod_price`, `prod_desc`) VALUES (\u0026#39;TNT1\u0026#39;, 1003, \u0026#39;TNT (1 stick)\u0026#39;, 2.50, \u0026#39;TNT, red, single stick\u0026#39;); INSERT INTO `products`(`prod_id`, `vend_id`, `prod_name`, `prod_price`, `prod_desc`) VALUES (\u0026#39;TNT2\u0026#39;, 1003, \u0026#39;TNT (5 sticks)\u0026#39;, 10.00, \u0026#39;TNT, red, pack of 10 sticks\u0026#39;); DROP TABLE IF EXISTS `tb_posts`; CREATE TABLE `tb_posts` ( `id` int NOT NULL AUTO_INCREMENT, `pro_date` datetime DEFAULT NULL, `price_remark` varchar(255) DEFAULT NULL, `title` varchar(255) NOT NULL, `post_content` text, `gmt_created` datetime DEFAULT CURRENT_TIMESTAMP, `gmt_modified` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`), FULLTEXT KEY `ft_index` (`post_content`) /*!50100 WITH PARSER `ngram` */ ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (1, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;19.75元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (2, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;20.1元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;北京八里桥农产品中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (3, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;18.5元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (4, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;20元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;北京水屯农副产品批发市场中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (5, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;21.5元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;天津市红旗农贸综合批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (6, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;20元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;天津韩家墅海吉星农产品物流有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (7, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;26元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;邯郸市(馆陶)金凤禽蛋农贸批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (8, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;21元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;邯郸（魏县）天仙果菜批发交易市场服务中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (9, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;19.8元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;河北张家口市京北农产品综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (10, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;22元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;山东青岛黄河路农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (11, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;26元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;山东凯盛国际农产品物流城\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (12, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;22元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;山东威海市农副产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (13, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;21.6元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;山东滨州(六街）鲁北蔬菜批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (14, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;20.6元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;河南万邦国际农产品物流股份有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (15, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;28元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;河南金牛大别山农产品现代物流中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (16, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;23元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;湖南长沙马王堆农产品股份有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (17, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;23.58元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;红星实业集团有限公司红星农副产品大市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (18, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;24元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;绵阳市高水农副产品批发有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (19, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;26元/公斤\u0026#39;, \u0026#39;猪肉(白条猪)\u0026#39;, \u0026#39;四川广安市邻水县农产品交易中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (20, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;66元/公斤\u0026#39;, \u0026#39;牛肉\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (21, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;67元/公斤\u0026#39;, \u0026#39;牛肉\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (22, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;67.7元/公斤\u0026#39;, \u0026#39;牛肉\u0026#39;, \u0026#39;北京八里桥农产品中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (23, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;65.75元/公斤\u0026#39;, \u0026#39;牛肉\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (24, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;67元/公斤\u0026#39;, \u0026#39;牛肉\u0026#39;, \u0026#39;北京水屯农副产品批发市场中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (25, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;70元/公斤\u0026#39;, \u0026#39;牛肉\u0026#39;, \u0026#39;天津市金钟蔬菜批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (26, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;72元/公斤\u0026#39;, \u0026#39;牛肉\u0026#39;, \u0026#39;天津韩家墅海吉星农产品物流有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (27, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;70元/公斤\u0026#39;, \u0026#39;牛肉\u0026#39;, \u0026#39;石家庄桥西蔬菜中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (28, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;67元/公斤\u0026#39;, \u0026#39;牛肉\u0026#39;, \u0026#39;邯郸（魏县）天仙果菜批发交易市场服务中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (29, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;83元/公斤\u0026#39;, \u0026#39;牛肉\u0026#39;, \u0026#39;山西省长治市紫坊农产品综合交易市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (30, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;53元/公斤\u0026#39;, \u0026#39;羊肉\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (31, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;46.5元/公斤\u0026#39;, \u0026#39;羊肉\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (32, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;44元/公斤\u0026#39;, \u0026#39;羊肉\u0026#39;, \u0026#39;北京八里桥农产品中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (33, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;44元/公斤\u0026#39;, \u0026#39;羊肉\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (34, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;57元/公斤\u0026#39;, \u0026#39;羊肉\u0026#39;, \u0026#39;北京水屯农副产品批发市场中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (35, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;74元/公斤\u0026#39;, \u0026#39;羊肉\u0026#39;, \u0026#39;天津市金钟蔬菜批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (36, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;78元/公斤\u0026#39;, \u0026#39;羊肉\u0026#39;, \u0026#39;天津韩家墅海吉星农产品物流有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (37, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;69元/公斤\u0026#39;, \u0026#39;羊肉\u0026#39;, \u0026#39;石家庄桥西蔬菜中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (38, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;70元/公斤\u0026#39;, \u0026#39;羊肉\u0026#39;, \u0026#39;邯郸（魏县）天仙果菜批发交易市场服务中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (39, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;77元/公斤\u0026#39;, \u0026#39;羊肉\u0026#39;, \u0026#39;山西省长治市紫坊农产品综合交易市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (40, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;15.7元/公斤\u0026#39;, \u0026#39;白条鸡\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (41, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;15.8元/公斤\u0026#39;, \u0026#39;白条鸡\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (42, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;15.2元/公斤\u0026#39;, \u0026#39;白条鸡\u0026#39;, \u0026#39;北京八里桥农产品中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (43, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;14元/公斤\u0026#39;, \u0026#39;白条鸡\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (44, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;16元/公斤\u0026#39;, \u0026#39;白条鸡\u0026#39;, \u0026#39;天津市金钟蔬菜批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (45, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;13.5元/公斤\u0026#39;, \u0026#39;白条鸡\u0026#39;, \u0026#39;石家庄桥西蔬菜中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (46, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;16元/公斤\u0026#39;, \u0026#39;白条鸡\u0026#39;, \u0026#39;邯郸市(馆陶)金凤禽蛋农贸批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (47, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;12.4元/公斤\u0026#39;, \u0026#39;白条鸡\u0026#39;, \u0026#39;邯郸（魏县）天仙果菜批发交易市场服务中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (48, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;15.5元/公斤\u0026#39;, \u0026#39;白条鸡\u0026#39;, \u0026#39;山西省长治市紫坊农产品综合交易市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (49, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;19元/公斤\u0026#39;, \u0026#39;白条鸡\u0026#39;, \u0026#39;内蒙古呼和浩特市东瓦窑农副产品批发市场有限责任公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (50, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3.6元/公斤\u0026#39;, \u0026#39;黄瓜\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (51, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2.4元/公斤\u0026#39;, \u0026#39;黄瓜\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (52, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;1.8元/公斤\u0026#39;, \u0026#39;黄瓜\u0026#39;, \u0026#39;北京八里桥农产品中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (53, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2元/公斤\u0026#39;, \u0026#39;黄瓜\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (54, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3元/公斤\u0026#39;, \u0026#39;黄瓜\u0026#39;, \u0026#39;北京水屯农副产品批发市场中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (55, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;1.6元/公斤\u0026#39;, \u0026#39;黄瓜\u0026#39;, \u0026#39;天津市金钟蔬菜批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (56, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3元/公斤\u0026#39;, \u0026#39;黄瓜\u0026#39;, \u0026#39;天津市红旗农贸综合批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (57, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2.1元/公斤\u0026#39;, \u0026#39;黄瓜\u0026#39;, \u0026#39;天津碧城农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (58, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;1.4元/公斤\u0026#39;, \u0026#39;黄瓜\u0026#39;, \u0026#39;天津何庄子农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (59, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;1.8元/公斤\u0026#39;, \u0026#39;黄瓜\u0026#39;, \u0026#39;天津韩家墅海吉星农产品物流有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (60, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;6.6元/公斤\u0026#39;, \u0026#39;西红柿\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (61, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4元/公斤\u0026#39;, \u0026#39;西红柿\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (62, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4元/公斤\u0026#39;, \u0026#39;西红柿\u0026#39;, \u0026#39;北京八里桥农产品中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (63, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4元/公斤\u0026#39;, \u0026#39;西红柿\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (64, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2.8元/公斤\u0026#39;, \u0026#39;西红柿\u0026#39;, \u0026#39;天津市金钟蔬菜批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (65, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3.6元/公斤\u0026#39;, \u0026#39;西红柿\u0026#39;, \u0026#39;天津市红旗农贸综合批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (66, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;17元/公斤\u0026#39;, \u0026#39;樱桃西红柿\u0026#39;, \u0026#39;天津市红旗农贸综合批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (67, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;1.8元/公斤\u0026#39;, \u0026#39;西红柿\u0026#39;, \u0026#39;天津碧城农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (68, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2元/公斤\u0026#39;, \u0026#39;西红柿\u0026#39;, \u0026#39;天津何庄子农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (69, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3.2元/公斤\u0026#39;, \u0026#39;西红柿\u0026#39;, \u0026#39;天津韩家墅海吉星农产品物流有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (70, NULL, NULL, \u0026#39;\u0026#39;, NULL, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (71, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;1.9元/公斤\u0026#39;, \u0026#39;大白菜\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (72, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;0.8元/公斤\u0026#39;, \u0026#39;大白菜\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (73, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;0.7元/公斤\u0026#39;, \u0026#39;大白菜\u0026#39;, \u0026#39;北京八里桥农产品中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (74, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;1元/公斤\u0026#39;, \u0026#39;大白菜\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (75, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;1.88元/公斤\u0026#39;, \u0026#39;大白菜\u0026#39;, \u0026#39;北京水屯农副产品批发市场中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (76, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;0.7元/公斤\u0026#39;, \u0026#39;大白菜\u0026#39;, \u0026#39;天津市金钟蔬菜批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (77, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;1.2元/公斤\u0026#39;, \u0026#39;大白菜\u0026#39;, \u0026#39;天津市红旗农贸综合批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (78, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;0.6元/公斤\u0026#39;, \u0026#39;大白菜\u0026#39;, \u0026#39;天津碧城农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (79, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;0.8元/公斤\u0026#39;, \u0026#39;大白菜\u0026#39;, \u0026#39;天津何庄子农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (80, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;0.9元/公斤\u0026#39;, \u0026#39;大白菜\u0026#39;, \u0026#39;天津韩家墅海吉星农产品物流有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (81, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2.2元/公斤\u0026#39;, \u0026#39;土豆\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (82, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3.1元/公斤\u0026#39;, \u0026#39;土豆\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (83, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2.3元/公斤\u0026#39;, \u0026#39;土豆\u0026#39;, \u0026#39;北京八里桥农产品中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (84, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2.1元/公斤\u0026#39;, \u0026#39;土豆\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (85, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2元/公斤\u0026#39;, \u0026#39;土豆\u0026#39;, \u0026#39;天津市金钟蔬菜批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (86, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2元/公斤\u0026#39;, \u0026#39;土豆\u0026#39;, \u0026#39;天津市红旗农贸综合批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (87, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2.4元/公斤\u0026#39;, \u0026#39;土豆\u0026#39;, \u0026#39;天津碧城农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (88, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;1.8元/公斤\u0026#39;, \u0026#39;土豆\u0026#39;, \u0026#39;天津何庄子农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (89, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2元/公斤\u0026#39;, \u0026#39;土豆\u0026#39;, \u0026#39;天津韩家墅海吉星农产品物流有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (90, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;1.9元/公斤\u0026#39;, \u0026#39;土豆\u0026#39;, \u0026#39;石家庄桥西蔬菜中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (91, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;8.5元/公斤\u0026#39;, \u0026#39;大蒜\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (92, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3.4元/公斤\u0026#39;, \u0026#39;大蒜\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (93, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;8.2元/公斤\u0026#39;, \u0026#39;大蒜\u0026#39;, \u0026#39;北京八里桥农产品中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (94, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.2元/公斤\u0026#39;, \u0026#39;大蒜\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (95, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.6元/公斤\u0026#39;, \u0026#39;大蒜\u0026#39;, \u0026#39;北京水屯农副产品批发市场中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (96, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;5.4元/公斤\u0026#39;, \u0026#39;大蒜\u0026#39;, \u0026#39;天津市金钟蔬菜批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (97, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2.6元/公斤\u0026#39;, \u0026#39;大蒜\u0026#39;, \u0026#39;天津市红旗农贸综合批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (98, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.6元/公斤\u0026#39;, \u0026#39;大蒜\u0026#39;, \u0026#39;天津碧城农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (99, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;5.2元/公斤\u0026#39;, \u0026#39;大蒜\u0026#39;, \u0026#39;天津韩家墅海吉星农产品物流有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (100, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.3元/公斤\u0026#39;, \u0026#39;大蒜\u0026#39;, \u0026#39;石家庄桥西蔬菜中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (101, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;7元/公斤\u0026#39;, \u0026#39;生姜\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (102, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3.3元/公斤\u0026#39;, \u0026#39;生姜\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (103, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;5.5元/公斤\u0026#39;, \u0026#39;生姜\u0026#39;, \u0026#39;北京八里桥农产品中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (104, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2.1元/公斤\u0026#39;, \u0026#39;生姜\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (105, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3.2元/公斤\u0026#39;, \u0026#39;生姜\u0026#39;, \u0026#39;天津市金钟蔬菜批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (106, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3元/公斤\u0026#39;, \u0026#39;生姜\u0026#39;, \u0026#39;天津市红旗农贸综合批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (107, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3.3元/公斤\u0026#39;, \u0026#39;生姜\u0026#39;, \u0026#39;天津碧城农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (108, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3元/公斤\u0026#39;, \u0026#39;生姜\u0026#39;, \u0026#39;天津何庄子农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (109, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2.5元/公斤\u0026#39;, \u0026#39;生姜\u0026#39;, \u0026#39;天津韩家墅海吉星农产品物流有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (110, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4元/公斤\u0026#39;, \u0026#39;生姜\u0026#39;, \u0026#39;石家庄桥西蔬菜中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (111, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;5.3元/公斤\u0026#39;, \u0026#39;香蕉\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (112, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;7.3元/公斤\u0026#39;, \u0026#39;香蕉\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (113, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;7.4元/公斤\u0026#39;, \u0026#39;香蕉\u0026#39;, \u0026#39;北京八里桥农产品中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (114, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;8.05元/公斤\u0026#39;, \u0026#39;香蕉\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (115, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;7元/公斤\u0026#39;, \u0026#39;香蕉\u0026#39;, \u0026#39;天津市金钟蔬菜批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (116, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;5.9元/公斤\u0026#39;, \u0026#39;香蕉\u0026#39;, \u0026#39;天津市红旗农贸综合批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (117, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;8元/公斤\u0026#39;, \u0026#39;香蕉\u0026#39;, \u0026#39;天津韩家墅海吉星农产品物流有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (118, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;6.05元/公斤\u0026#39;, \u0026#39;香蕉\u0026#39;, \u0026#39;石家庄桥西蔬菜中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (119, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.4元/公斤\u0026#39;, \u0026#39;香蕉\u0026#39;, \u0026#39;乐亭县冀东果菜批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (120, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4元/公斤\u0026#39;, \u0026#39;香蕉\u0026#39;, \u0026#39;邯郸市(馆陶)金凤禽蛋农贸批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (121, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;7.5元/公斤\u0026#39;, \u0026#39;富士苹果\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (122, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;6.6元/公斤\u0026#39;, \u0026#39;富士苹果\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (123, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;7.8元/公斤\u0026#39;, \u0026#39;富士苹果\u0026#39;, \u0026#39;北京八里桥农产品中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (124, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;9元/公斤\u0026#39;, \u0026#39;富士苹果\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (125, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;7元/公斤\u0026#39;, \u0026#39;富士苹果\u0026#39;, \u0026#39;天津市红旗农贸综合批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (126, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;11元/公斤\u0026#39;, \u0026#39;富士苹果\u0026#39;, \u0026#39;天津韩家墅海吉星农产品物流有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (127, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3.8元/公斤\u0026#39;, \u0026#39;富士苹果\u0026#39;, \u0026#39;乐亭县冀东果菜批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (128, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3元/公斤\u0026#39;, \u0026#39;富士苹果\u0026#39;, \u0026#39;邯郸市(馆陶)金凤禽蛋农贸批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (129, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;5.2元/公斤\u0026#39;, \u0026#39;富士苹果\u0026#39;, \u0026#39;邯郸（魏县）天仙果菜批发交易市场服务中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (130, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;5.6元/公斤\u0026#39;, \u0026#39;富士苹果\u0026#39;, \u0026#39;河北省怀来县京西果菜批发市场有限责任公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (131, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;20元/公斤\u0026#39;, \u0026#39;柠檬\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (132, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;9.5元/公斤\u0026#39;, \u0026#39;柠檬\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (133, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;9元/公斤\u0026#39;, \u0026#39;柠檬\u0026#39;, \u0026#39;石家庄桥西蔬菜中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (134, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;9元/公斤\u0026#39;, \u0026#39;柠檬\u0026#39;, \u0026#39;邯郸（魏县）天仙果菜批发交易市场服务中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (135, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;10元/公斤\u0026#39;, \u0026#39;柠檬\u0026#39;, \u0026#39;山西太原丈子头农产品物流园（原城东利民）\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (136, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;10元/公斤\u0026#39;, \u0026#39;柠檬\u0026#39;, \u0026#39;山西省太原市河西农产品有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (137, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;8元/公斤\u0026#39;, \u0026#39;柠檬\u0026#39;, \u0026#39;长治市金鑫瓜果批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (138, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;8元/公斤\u0026#39;, \u0026#39;柠檬\u0026#39;, \u0026#39;江苏凌家塘市场发展有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (139, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;11元/公斤\u0026#39;, \u0026#39;柠檬\u0026#39;, \u0026#39;济南堤口果品批发发展有限责任公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (140, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;8元/公斤\u0026#39;, \u0026#39;柠檬\u0026#39;, \u0026#39;滕州市农副产品物流中心有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (141, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;14.5元/公斤\u0026#39;, \u0026#39;猕猴桃\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (142, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;6元/公斤\u0026#39;, \u0026#39;猕猴桃\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (143, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;11元/公斤\u0026#39;, \u0026#39;猕猴桃\u0026#39;, \u0026#39;天津市红旗农贸综合批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (144, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;7.5元/公斤\u0026#39;, \u0026#39;猕猴桃\u0026#39;, \u0026#39;天津碧城农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (145, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;10元/公斤\u0026#39;, \u0026#39;猕猴桃\u0026#39;, \u0026#39;石家庄桥西蔬菜中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (146, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;7元/公斤\u0026#39;, \u0026#39;猕猴桃\u0026#39;, \u0026#39;乐亭县冀东果菜批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (147, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;8元/公斤\u0026#39;, \u0026#39;猕猴桃\u0026#39;, \u0026#39;邯郸（魏县）天仙果菜批发交易市场服务中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (148, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;6.8元/公斤\u0026#39;, \u0026#39;猕猴桃\u0026#39;, \u0026#39;山西太原丈子头农产品物流园（原城东利民）\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (149, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;6元/公斤\u0026#39;, \u0026#39;猕猴桃\u0026#39;, \u0026#39;山西省太原市河西农产品有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (150, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;12元/公斤\u0026#39;, \u0026#39;猕猴桃\u0026#39;, \u0026#39;长治市金鑫瓜果批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (151, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.5元/公斤\u0026#39;, \u0026#39;大米\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (152, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;5.5元/公斤\u0026#39;, \u0026#39;大米\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (153, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.9元/公斤\u0026#39;, \u0026#39;大米\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (154, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;5.9元/公斤\u0026#39;, \u0026#39;大米\u0026#39;, \u0026#39;天津碧城农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (155, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.4元/公斤\u0026#39;, \u0026#39;大米\u0026#39;, \u0026#39;天津何庄子农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (156, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;5.4元/公斤\u0026#39;, \u0026#39;大米\u0026#39;, \u0026#39;天津韩家墅海吉星农产品物流有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (157, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.5元/公斤\u0026#39;, \u0026#39;大米\u0026#39;, \u0026#39;石家庄桥西蔬菜中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (158, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.2元/公斤\u0026#39;, \u0026#39;大米\u0026#39;, \u0026#39;山西太原丈子头农产品物流园（原城东利民）\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (159, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;5.7元/公斤\u0026#39;, \u0026#39;大米\u0026#39;, \u0026#39;山西省长治市紫坊农产品综合交易市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (160, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;5.9元/公斤\u0026#39;, \u0026#39;大米\u0026#39;, \u0026#39;山西省晋城市绿欣农产品贸易有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (161, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3.5元/公斤\u0026#39;, \u0026#39;玉米\u0026#39;, \u0026#39;石家庄桥西蔬菜中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (162, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2.36元/公斤\u0026#39;, \u0026#39;玉米\u0026#39;, \u0026#39;扶余市三井子园区市场建设运营有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (163, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.32元/公斤\u0026#39;, \u0026#39;玉米棒\u0026#39;, \u0026#39;江苏无锡朝阳农产品大市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (164, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;7元/公斤\u0026#39;, \u0026#39;玉米\u0026#39;, \u0026#39;徐州农副产品中心批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (165, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4元/公斤\u0026#39;, \u0026#39;玉米棒\u0026#39;, \u0026#39;江苏凌家塘市场发展有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (166, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2.8元/公斤\u0026#39;, \u0026#39;玉米\u0026#39;, \u0026#39;江苏凌家塘市场发展有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (167, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.5元/公斤\u0026#39;, \u0026#39;玉米\u0026#39;, \u0026#39;江苏苏州南环桥农副产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (168, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;8元/公斤\u0026#39;, \u0026#39;鲜食玉米\u0026#39;, \u0026#39;杭州农副产品物流中心南庄兜农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (169, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;7元/公斤\u0026#39;, \u0026#39;鲜食玉米\u0026#39;, \u0026#39;绍兴市蔬菜果品批发交易市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (170, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.6元/公斤\u0026#39;, \u0026#39;鲜食玉米\u0026#39;, \u0026#39;义乌市市场发展集团有限公司农批管理分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (171, NULL, NULL, \u0026#39;\u0026#39;, NULL, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (172, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;25.5元/公斤\u0026#39;, \u0026#39;花生油\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (173, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;31元/公斤\u0026#39;, \u0026#39;花生油\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (174, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;30元/公斤\u0026#39;, \u0026#39;花生油\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (175, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.5元/公斤\u0026#39;, \u0026#39;花生\u0026#39;, \u0026#39;石家庄桥西蔬菜中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (176, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;28.5元/公斤\u0026#39;, \u0026#39;花生油\u0026#39;, \u0026#39;石家庄桥西蔬菜中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (177, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;18元/公斤\u0026#39;, \u0026#39;花生油\u0026#39;, \u0026#39;邯郸（魏县）天仙果菜批发交易市场服务中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (178, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;9元/公斤\u0026#39;, \u0026#39;花生\u0026#39;, \u0026#39;长治市金鑫瓜果批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (179, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;29元/公斤\u0026#39;, \u0026#39;花生油\u0026#39;, \u0026#39;内蒙古呼和浩特市东瓦窑农副产品批发市场有限责任公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (180, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;11元/公斤\u0026#39;, \u0026#39;花生仁\u0026#39;, \u0026#39;内蒙古呼和浩特市东瓦窑农副产品批发市场有限责任公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (181, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;9元/公斤\u0026#39;, \u0026#39;花生\u0026#39;, \u0026#39;扶余市三井子园区市场建设运营有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (182, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;18元/公斤\u0026#39;, \u0026#39;芝麻(白芝麻)\u0026#39;, \u0026#39;内蒙古呼和浩特市东瓦窑农副产品批发市场有限责任公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (183, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;12元/公斤\u0026#39;, \u0026#39;芝麻(白芝麻)\u0026#39;, \u0026#39;扶余市三井子园区市场建设运营有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (184, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;10.7元/公斤\u0026#39;, \u0026#39;芝麻(白芝麻)\u0026#39;, \u0026#39;广东江门水产冻品副食批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (185, \u0026#39;2022-06-01 00:00:00\u0026#39;, \u0026#39;18元/公斤\u0026#39;, \u0026#39;芝麻(白芝麻)\u0026#39;, \u0026#39;内蒙古呼和浩特市东瓦窑农副产品批发市场有限责任公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (186, \u0026#39;2022-06-01 00:00:00\u0026#39;, \u0026#39;12元/公斤\u0026#39;, \u0026#39;芝麻(白芝麻)\u0026#39;, \u0026#39;扶余市三井子园区市场建设运营有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (187, \u0026#39;2022-06-01 00:00:00\u0026#39;, \u0026#39;10.7元/公斤\u0026#39;, \u0026#39;芝麻(白芝麻)\u0026#39;, \u0026#39;广东江门水产冻品副食批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (188, \u0026#39;2022-05-31 00:00:00\u0026#39;, \u0026#39;18元/公斤\u0026#39;, \u0026#39;芝麻(白芝麻)\u0026#39;, \u0026#39;内蒙古呼和浩特市东瓦窑农副产品批发市场有限责任公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (189, \u0026#39;2022-05-31 00:00:00\u0026#39;, \u0026#39;12元/公斤\u0026#39;, \u0026#39;芝麻(白芝麻)\u0026#39;, \u0026#39;扶余市三井子园区市场建设运营有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (190, \u0026#39;2022-05-31 00:00:00\u0026#39;, \u0026#39;10.7元/公斤\u0026#39;, \u0026#39;芝麻(白芝麻)\u0026#39;, \u0026#39;广东江门水产冻品副食批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (191, \u0026#39;2022-05-30 00:00:00\u0026#39;, \u0026#39;18元/公斤\u0026#39;, \u0026#39;芝麻(白芝麻)\u0026#39;, \u0026#39;内蒙古呼和浩特市东瓦窑农副产品批发市场有限责任公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (192, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2.95元/公斤\u0026#39;, \u0026#39;面粉\u0026#39;, \u0026#39;北京朝阳区大洋路综合市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (193, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;2.99元/公斤\u0026#39;, \u0026#39;面粉\u0026#39;, \u0026#39;北京新发地农副产品批发市场信息中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (194, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4元/公斤\u0026#39;, \u0026#39;面粉\u0026#39;, \u0026#39;北京八里桥农产品中心批发市场有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (195, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3.3元/公斤\u0026#39;, \u0026#39;面粉\u0026#39;, \u0026#39;北京顺鑫石门国际农产品批发市场集团有限公司北京分公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (196, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3.8元/公斤\u0026#39;, \u0026#39;面粉\u0026#39;, \u0026#39;天津碧城农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (197, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.2元/公斤\u0026#39;, \u0026#39;面粉\u0026#39;, \u0026#39;天津何庄子农产品批发市场\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (198, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;4.6元/公斤\u0026#39;, \u0026#39;面粉\u0026#39;, \u0026#39;天津韩家墅海吉星农产品物流有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (199, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;6.8元/公斤\u0026#39;, \u0026#39;面粉\u0026#39;, \u0026#39;邯郸（魏县）天仙果菜批发交易市场服务中心\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (200, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;5元/公斤\u0026#39;, \u0026#39;面粉\u0026#39;, \u0026#39;山西太原丈子头农产品物流园（原城东利民）\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); INSERT INTO `tb_posts`(`id`, `pro_date`, `price_remark`, `title`, `post_content`, `gmt_created`, `gmt_modified`) VALUES (201, \u0026#39;2022-06-02 00:00:00\u0026#39;, \u0026#39;3.8元/公斤\u0026#39;, \u0026#39;面粉\u0026#39;, \u0026#39;山西省晋城市绿欣农产品贸易有限公司\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;, \u0026#39;2022-06-02 21:03:32\u0026#39;); "});index.add({'id':97,'href':'/life/docs/javadir/','title':" Java技术栈",'section':"Docs",'content':"目录 #    工具文档\n  中间件\n  groovy 脚本\n  多线程与并发\n  "});index.add({'id':98,'href':'/life/docs/computer_network/network_architecture/%E5%88%86%E5%B1%82%E7%BB%93%E6%9E%84/','title':"分层结构",'section':"网络体系结构",'content':"为什么要分层，分层要做什么 #   （1）发起通信的计算机必须将数据通信的通路进行激活。 （2）要告诉网络如何识别目的主机。 （3）发起通信的计算机要查明目的主机是否开机，并且与网络连接正常。 （4）发起通信的计算机要弄清楚，对方计算机中文件管理程序是否已经做好准备工作。 （5）确保差错和意外可以解决。  正式认识分层结构 #   使用 协议 ，服务， 接口 来完成分层\n 总结 #   网络体系结构是从功能上描述计算机网络结构 计算机网络体系结构简称网络体系结构是分层结构 每层遵循某个/多个网络协议以完成本层功能 计算机网络体系结构是计算机网络的各层及其协议的集合 上层要求服务 下层提供服务 实际是上层制定接口标准，下层实现接口标准  "});index.add({'id':99,'href':'/life/docs/operating_system/two_chapter/2_1_4/','title':"进程通信",'section':"第二章 进程管理 ",'content':""});index.add({'id':100,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/idx4etcwwy/','title':"如何系统地训练口才",'section':"自信",'content':"如何系统地训练口才 #   从不敢在人前讲话到学院迎新晚会主持人，说说我的练习经历。\n 一、首先练习自己的声音 #  因为人家听你讲话，第一注意到的就是声音，而后才是内容。\n发音最重要的就是唇舌，唇舌力度够了，发音就会准确，字音会拉开，使自己的声音饱满动听一些。另外还要练习自己的气息，不然声音发不出去，嗓子会很难受。\n△唇：八百标兵奔北坡，炮兵并排北边跑，炮兵怕把标兵碰，标兵怕把炮兵炮。\n△舌：牛郎年年恋刘娘，刘娘连连恋牛郎。牛郎恋刘娘，刘娘念牛郎，郎念娘来，娘恋郎。\n△气息：出东门,过大桥,大桥前面一树枣,拿着竿子去打枣,青的多,红的少,一个枣,两个枣,三个枣,四个枣,五个枣,六个枣,七个枣,八个枣,九个枣,十个枣;十个枣,九个枣,八个枣,七个枣,六个枣,五个枣,四个枣,三个枣,两个枣,一个枣,这是一个绕口令,一口气说完才算好。\n△躺下来朗读：躺下来时，用的是腹式呼吸，这是练声练气的最好方法。每天睡觉之前，躺着大声朗读十分钟，每天起床之前，先唱首歌。坚持一两个月，觉会感觉自己的呼吸流畅了，声音洪亮，音质也好听了。\n二、模仿名人的演讲 (快速的学习一个新的技能最好的就是模仿) #  刚开始的时候，很难找到自己演讲，发言的风格，所以先从模仿开始。看看名人演讲有什么优点自己可以利用，就记录下来，慢慢的就会有自己的风格。\n我最开始看的是马云的演讲，后开看《奇葩说》去模仿了里边很多人的风格。\n你要注意他们的说话方式，语气，动作，有哪些好的词汇可以利用。\n三、给自己录视频和音频 (角色扮演法) #  前边我们说去模仿名人演讲，这是输入，然后给自己录就是输出。\n看自己的视频时，多注意神情，动作，站姿之类的别人很容易注意到的地方。哪里不满意就再去看看名人是怎么做的，反复纠正，直到满意。\n听音频，听自己说话的感觉，自己讲的当下，自己是感觉不出来的，就得事后反复听。那些细节没有处理好，比如情绪，语气，停顿的地方以及停顿时间的长短。\n可以找别看看自己录的视频和音频，倾听别人的意见。\n四、每天读五篇以上的文章并适量背诵 #  可以读短片散文，用来练习自己的感情和情绪的控制。读新闻来练习自己的发音，和语气等。\n但你千万别给自己设限，每天必须读多少散文或者新闻之类的。就平时闲下来的时候，手边有任何文字类的东西，都可以拿来读。\n背诵一些好的文章，不仅可以锻炼记忆能力，天长日久，那些文章自己就自然而然的转化为自己的词语了，熟到一定程度，就能张口就来了。\n如果读新闻，最好在读完之后，用自己的语言复述给别人听，要简单明了，可以锻炼自己的逻辑思维能力。\n朗读时，多做一些速读训练。这旨在锻炼人的口齿伶俐，语音准确，吐字清晰。但是快而不乱，每个字，每个音都要发得十分清楚，准确，没有含混不清的地方。\n五、描述法 (对于内向的人来说很好的练习方法) #  就是把你看到的景、事、物、人用描述性的语言表达出来。\n描述法可以说是最有效的一种练习方法。因为这里没有现成的演讲稿、散文、诗歌等材料，而是要求你自己去组织语言进行描述。\n所以描述法训练的主要目的就在于训练你的语言组织能力和语言条理性。在描述时，要抓住特点进行描述。语言要清楚明白，尽量生动一些，活泼一些。\n六、找机会上台 #  自己练习千百次，不如上台一次。自己练的再好，一些舞台上的突发情况也是遇不到的。每一次上台都是突破自己的机会，不管说得如何，都要去尝试，积累经验。\n另外的一些小技巧： #  1、抑是拖气，让表达更清楚。扬是爆破音，引起听众的注意。停顿最重要，讲短句，不讲长句。\n2、一口气一句话，一句话一个人。\n3、讲故事是训练事理逻辑的好方法。把故事讲好就是讲心理活动和对话。\n4、先讲结果，在简单解释清楚过程。\n5、即兴讲话，要记结构，少记内容。熟悉场合，讲我和你的故事。\n6、结构是表达逻辑的核心，上台前，要设计一个好的结构。\n推荐提升口才的书单 #   1、《高效对话》  “高效沟通才能得到你想要的结果，而其他一切沟通仅是说话而已。”这本书会告诉你，如何突破喋喋不休，用策略来解释自己的想法，并让对方听明白。\n 2、《精准表达》  这本书会教会你，如何克服“语无论次、颠三倒四、词不达意、不知所云”、学会用精准的语言和方式，精准的向对方表达，快速提升表达能力。\n 3、《口才三绝》  这本书教你如何恰当的赞美他人，而不是一听就知道是在拍马屁，如何巧妙地体现幽默，如何有效的拒绝他人，从而避免误会和困扰。\n 4、《逻辑说服力》  这本书教你如何动之以情，晓之以理，运用富有逻辑的表达方式、沟通技巧说服他人，让他人心悦诚服的接受你的“意识灌输”\n 5、《好口才决定好人生》  羡慕内个“铁齿铜牙的纪晓岚”吗？这本书，教你如何在社交活动中把话说的滴水不漏、说到点子上、说到心窝里，还教会你如何把话说的得心应手、如何巧妙化解困境。\n绕口令我也给你找好了： #  1、 童子打桐子，童子打桐子，桐子落，童子乐。\n2、 湿字纸：刚往窗上糊字纸，你就隔着窗户撕字纸，一次撕下横字纸，一次撕下竖字纸，横竖两次撕了四十四张湿字纸，是字纸你就撕字纸，不是内字纸，你就不要胡乱地撕一地纸。\n3、粉红墙上容画凤凰，凤凰画在粉红墙。红凤凰、粉凤凰，红粉凤凰、花凤凰。\n4、蒋家羊，杨家墙， 蒋家羊撞倒了杨家墙，杨家墙压死了蒋家羊，杨家要蒋家赔墙，蒋家要杨家赔羊。\n5、一个跛子，牵着驴子; 一个驼子，拉着车子；一个瞎子，抱着孩子。 跛子的驴子，撞着驼子的车子；驼子的车子，碰倒瞎子的孩子; 瞎子要打驼子，驼子要打跛子。\n6、东边大婆婆之家有一只白鼻头大白猫。西边二婆婆家也有一只白鼻头大白猫。一天东边大婆婆家的白鼻头大白猫和西边二婆婆家的白鼻头大白猫相打，也不晓得东边大婆婆家的白鼻头大白猫赢的呢？还是西边二婆婆家的白鼻头大白猫赢的？\n7、房子里有箱子，箱子里有匣子，匣子里有盒子，盒子里有镯子；镯子外有盒子，盒子外有匣子，匣子外有箱子，箱子外有房子。\n8、家后有座庙，天天猫来尿，不知是庙尿猫，还是猫尿庙。\n9、楼上一块破瓦，楼下一匹骡马，破瓦落下来打了骡马，骡马跳起来踩了破瓦。 天上一颗星，地上一个人，星照人，人瞧星，星照不清人，人瞧不清星。\n10、龚先生东方走来肩了一棵松，翁先生西方走来拿了一只钟。龚先生的松撞破了翁先生的钟，翁先生扭住了龚先生的一棵松。龚先生要翁先生放了他的松，翁先生要龚先生赔了他的钟。龚先生不肯赔还翁先生的钟，翁先生不肯放还龚先生的松。\n11、九月九，九个酒迷喝醉酒。九个酒杯九杯酒，九个酒迷喝九口。喝罢九口酒，又倒九杯酒。九个酒迷端起酒，“咕咚、咕咚”又九口。九杯酒，酒九口，喝罢九个酒迷醉了酒。\n12、营房里出来两个排，直奔正北菜园来，一排浇波菜，二排砍白菜。剩下八百八十八棵大白菜没有掰。一排浇完了波菜，又把八百八十八棵大白菜掰下来；二排砍完白菜，把一排掰下来的八百八十八棵大白菜背回来。\n题外话 #  说了这么多，最重要的是你要剪坚持，做一次不做一次，坚持一个星期就放弃。那不管给你什么好方法，都没用的。\n做任何事，三个月是能看见明显变化的，就给自己三个月的时间，说不定会改变自己的一生。\n辅助锻炼 #  1、每天至少20分钟阅读励志书籍或口才书籍，培养自己积极心态，学习一些技巧。\n2、每天放声大笑10次，乐观面对生活，放松情绪。\n3、训练接受他人的视线、目光，培养自信和观察能力。\n4、培养微笑的习惯，要笑得灿烂、笑得真诚，锻炼亲和力。\n5、学会检讨，每天总结得与失，写心得体会。每周要全面总结成效及不足，并确定下周的目标。\n口才锻炼 #  (一)每天至少10分钟深呼吸训练。\n(二)抓住一切机会讲话，锻炼口才。\n1、每天至少与5个人有意识地交流思想。\n2、每天大声朗诵或大声讲至少5分钟。\n3、每天训练自己“三分钟演讲”一次或“三分钟默讲”一次。\n4、每天给亲人、同事至少讲一个故事或完整叙述一件事情。\n5、注意讲话时的一些技巧。\nA、讲话前，深吸一口气，平静心情，面带微笑，眼神交流一遍后，开始讲话。\nB、勇敢地讲出第一句话，声音大一点，速度慢一点，说短句，语句中间不打岔。\nC、当发现紧张卡壳时，停下来有意识地深吸口气，然后随着吐气讲出来。\nD、如果表现不好，自我安慰：“刚才怎么又紧张了?没关系，继续平稳地讲”;同时，用感觉和行动上的自信战胜恐惧。\nE、紧张时，可以做放松练习，深呼吸，或尽力握紧拳头，又迅速放松，连续10次\n其它 #  锻炼口才最好的方法 #    1、训练口齿。多念文章，任何文章，每天定时定量当然是好的，甚至可以录下来，自己听，找不足，这是提高你吐字能力、让你口齿清楚的办法。 其实，任何时候你都有时间锻炼这个能力。当你毫无头绪，不知道如何入门的时候，你拿起一本书读起来，便已经迈出了第一步。\n  2、培养逻辑思维能力。比如，把报纸上大段的新闻缩减成一个概要，提取内容的主干，记得说给别人听。(训练逻辑思维能力的方法，可以轻松搜索到\n  3、和羞涩和腼腆说“不”。这一步你必须跨出去，多与人沟通，尤其是辩论，有意识的通过实践提高自己，一方面是表达的勇气和自信，另一方面是表达的效果。\n  4、有恒心。下决心很容易，坚持下去很难。这和培养外语会话能力、和健身减肥等一样，都是循序渐进的过程，是量变到质变的过程，少则半年，多则一两年。如果能坚持，相信一个长时间未见你的朋友会对你的感觉大为改观，这是由内而外的。所以，勇敢的跨出你的第一步，非常重要。\n  第1个方法超级管用。（随便的文章读起来读了半个小时。 第2天.我天了，口才顺的.都不嘴飘了）\n  参考\n"});index.add({'id':101,'href':'/life/docs/javadir/basedir/java-basic-x-annotation/','title':"注解机制详解",'section':"Java基础知识 ",'content':"demo #  "});index.add({'id':102,'href':'/life/docs/javadir/thread/unsafe/','title':"unsafe",'section':"多线程与并发 ",'content':"前言 #   Unsafe类位于sun.misc包下，它是java实现高并发的基础，通过它可以执行一些不安全的操作，如像C语言一样直接操作内存资源，它提供的这些方法增强了java对底层资源的操作能力，但同时也增加了程序出错的风险，所以对它的使用一定要慎重  核心功能介绍 #   Unsafe提供的API大致可分为内存操作、CAS、Class相关、对象操作、线程调度、系统信息获取、内存屏障相关、数组相关等。下面介绍几个方法的使用。  获取Unsafe对象 #  import sun.misc.Unsafe; import java.lang.reflect.Field; public final class UnsafeAccessor { private static Unsafe unsafe; //Unsafe提供的getUnsafe()方法只能被根类加载器加载的类所调用，也就是jdk内部的类。我们可以通过反射来获取Unsafe对象  static { try { //这个名字是 theUnsafe 里面的不要随便写  Field unsafeFile = Unsafe.class.getDeclaredField(\u0026#34;theUnsafe\u0026#34;); unsafeFile.setAccessible(true); //因为是静态属性  unsafe = (Unsafe) unsafeFile.get(null); } catch (Exception e) { } } public static Unsafe getUnsafe() { return unsafe; } } AtomicInteger实现 #   在AtomicInteger的实现中，静态属性valueOffset即为属性value的内存偏移地址，在静态代码块中通过Unsafe的objectFieldOffset方法对valueOffset赋值。在AtomicInteger中提供的线程安全方法中，通过属性valueOffset可以定位到属性value的内存地址，从而可以根据CAS实现对value属性的原子操作。   上图为某个AtomicInteger对象自增操作前后的内存示意图，对象的基地址baseAddress=“0x110000”，通过baseAddress+valueOffset得到value的内存地址valueAddress=“0x11000c”；然后通过CAS进行原子性的更新操作，成功则返回，否则继续重试，直到更新成功为止。  CAS #   CAS(compareAndSwap)即比较并替换，是实现并发算法时常用到的一种技术，CAS操作包含三个参数，要修改变量的内存位置、预期原值、要修改为的值，如果变量的值和预期原值相等，就修改为新值，否则不做处理。CAS底层为一条原子指令cmpxchg，可以保证原子性，Unsafe提供的CAS方法如compareAndSwapInt底层就是CPU指令cmpxchg  /** * CAS * @param o 包含要修改field的对象 * @param offset 对象中某field的偏移量 * @param expected 期望值 * @param update 更新值 * @return true | false */ public final native boolean compareAndSwapObject(Object o, long offset, Object expected, Object update); public final native boolean compareAndSwapInt(Object o, long offset, int expected,int update); public final native boolean compareAndSwapLong(Object o, long offset, long expected, long update);  compareAndSwapInt 使用 (AtomicInteger中也是使用这个)  public class Demo2 { public static void main(String[] args) throws Exception { long startTime = System.currentTimeMillis(); Demo_B2 demo_b = new Demo_B2(); final int len = 10000000; Thread t1 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; len; i++) { demo_b.increase(); } }); t1.start(); for (int i = 0; i \u0026lt; len; i++) { demo_b.increase(); } t1.join(); long endTime = System.currentTimeMillis(); System.out.println(demo_b.getNumber()); System.out.println(String.format(\u0026#34;time:%s\u0026#34;, (endTime - startTime))); } } class Demo_B2 { //jdk级别代码才能这样 因为这个级别的会涉及到绕过jvm所以得另寻出路  final static Unsafe unsafe = UnsafeAccessor.getUnsafe(); private volatile int value = 0; //内存偏移量地址(相对地址)  private long valueOffset = 0l; public void increase() { if (valueOffset == 0l) { try { valueOffset = unsafe.objectFieldOffset(Demo_B2.class.getDeclaredField(\u0026#34;value\u0026#34;)); } catch (NoSuchFieldException e) { e.printStackTrace(); } } int oldValue = 0; do { oldValue = value; } while (!unsafe.compareAndSwapInt(this, valueOffset, oldValue, oldValue + 1)); } public int getNumber() { return value; } }  compareAndSwapObject 使用  import sun.misc.Unsafe; import java.util.UUID; public class Demo4 { public static void main(String[] args) throws Exception { long startTime = System.currentTimeMillis(); ObjectDemo4 objectDemo4 = new ObjectDemo4(); final int len = 200; Thread t1 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; len; i++) { try { objectDemo4.increaseName(String.valueOf(1)); } catch (Exception e) { e.printStackTrace(); } } }); t1.start(); for (int i = len; i \u0026lt; len * 2; i++) { objectDemo4.increaseName(String.valueOf(1)); } t1.join(); long endTime = System.currentTimeMillis(); System.out.println(objectDemo4.getName()); System.out.println(objectDemo4.getName().split(\u0026#34;-\u0026#34;).length); System.out.println(String.format(\u0026#34;time:%s\u0026#34;, (endTime - startTime))); } } class ObjectDemo4 { final static Unsafe unsafe = UnsafeAccessor.getUnsafe(); private Integer id; private String name; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public void increaseName(String value) throws Exception { long valueOffset = unsafe.objectFieldOffset(ObjectDemo4.class.getDeclaredField(\u0026#34;name\u0026#34;)); String oldValue = null; do { oldValue = (String) unsafe.getObject(this, valueOffset); } while (!unsafe.compareAndSwapObject(this, valueOffset, oldValue, oldValue == null ? value : oldValue + \u0026#34;-\u0026#34;+value)); } } 对象操作 #   此部分主要包含对象成员属性相关操作及非常规的对象实例化方式等相关方法  //返回对象成员属性在内存地址相对于此对象的内存地址的偏移量 public native long objectFieldOffset(Field f); //获得给定对象的指定地址偏移量的值，与此类似操作还有：getInt，getDouble，getLong，getChar等 public native Object getObject(Object o, long offset); //给定对象的指定地址偏移量设值，与此类似操作还有：putInt，putDouble，putLong，putChar等 public native void putObject(Object o, long offset, Object x); //从对象的指定偏移量处获取变量的引用，使用volatile的加载语义 public native Object getObjectVolatile(Object o, long offset); //存储变量的引用到对象的指定的偏移量处，使用volatile的存储语义 public native void putObjectVolatile(Object o, long offset, Object x); //有序、延迟版本的putObjectVolatile方法，不保证值的改变被其他线程立即看到。只有在field被volatile修饰符修饰时有效 public native void putOrderedObject(Object o, long offset, Object x); //绕过构造方法、初始化代码来创建对象 public native Object allocateInstance(Class\u0026lt;?\u0026gt; cls) throws InstantiationException;   常规对象实例化方式：我们通常所用到的创建对象的方式，从本质上来讲，都是通过new机制来实现对象的创建。但是，new机制有个特点就是当类只提供有参的构造器且没有显式声明无参构造器时，必须使用有参构造器并传递相应个数的参数进行对象构造\n  非常规的实例化方式：而Unsafe中提供的allocateInstance方法，仅通过Class对象就可以创建此类的实例对象， 而且不需要调用其构造器、初始化代码、JVM安全检查等。它抑制修饰符检测，也就是即使构造器是private修饰的也能通过此方法实例化。 由于这种特性，allocateInstance在java.lang.invoke、Objenesis（提供绕过类构造器的对象生成方式）、Gson（反序列化时用到）中都有相应的使用\n  参考\n"});index.add({'id':103,'href':'/life/docs/javadir/thread/tool/executor/','title':"Executor",'section':"并发工具 ",'content':"Executor #  "});index.add({'id':104,'href':'/life/docs/%E8%84%9A%E6%9C%AC/uniapp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/','title':"uniapp基础知识 ",'section':"脚本",'content':"uni-app的基本使用 #  课程介绍：\n基础部分：\n 环境搭建 页面外观配置 数据绑定 uni-app的生命周期 组件的使用 uni-app中样式学习 在uni-app中使用字体图标和开启scss 条件注释跨端兼容 uni中的事件 导航跳转 组件创建和通讯，及组件的生命周期 uni-app中使用uni-ui库  项目：xxxx\nuni-app介绍 官方网页 #  uni-app view uni-app view #  uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。\n即使不跨端，uni-app同时也是更好的小程序开发框架。\n具有vue和微信小程序的开发经验，可快速上手uni-app\n为什么要去学习uni-app？\n相对开发者来说，减少了学习成本，因为只学会uni-app之后，即可开发出iOS、Android、H5、以及各种小程序的应用，不需要再去学习开发其他应用的框架，相对公司而言，也大大减少了开发成本。\n环境搭建 #  安装编辑器HbuilderX 下载地址\nHBuilderX是通用的前端开发工具，但为uni-app做了特别强化。\n下载App开发版，可开箱即用\n安装微信开发者工具 下载地址\n利用HbuilderX初始化项目 #    点击HbuilderX菜单栏文件\u0026gt;项目\u0026gt;新建\n  选择uni-app,填写项目名称，项目创建的目录\n  运行项目 #  在菜单栏中点击运行，运行到浏览器，选择浏览器即可运行\n在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -\u0026gt; 运行到小程序模拟器 -\u0026gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app\n在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -\u0026gt; 运行到手机或模拟器 -\u0026gt; 选择调式的手机\n注意：\n 如果是第一次使用，需要先配置小程序ide的相关路径，才能运行成功 微信开发者工具在设置中安全设置，服务端口开启  介绍项目目录和文件作用 #  pages.json 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等\nmanifest.json 文件是应用的配置文件，用于指定应用的名称、图标、权限等。\nApp.vue是我们的跟组件，所有页面都是在App.vue下进行切换的，是页面入口文件，可以调用应用的生命周期函数。\nmain.js是我们的项目入口文件，主要作用是初始化vue实例并使用需要的插件。\nuni.scss文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，uni.scss文件里预置了一批scss变量预置。\nunpackage 就是打包目录，在这里有各个平台的打包文件\npages 所有的页面存放目录\nstatic 静态资源目录，例如图片等\ncomponents 组件存放目录\n为了实现多端兼容，综合考虑编译速度、运行性能等因素，uni-app 约定了如下开发规范：\n 页面文件遵循 Vue 单文件组件 (SFC) 规范 组件标签靠近小程序规范，详见uni-app 组件规范 接口能力（JS API）靠近微信小程序规范，但需将前缀 wx 替换为 uni，详见uni-app接口规范 数据绑定及事件处理同 Vue.js 规范，同时补充了App及页面的生命周期 为兼容多端运行，建议使用flex布局进行开发  全局配置和页面配置 #  通过globalStyle进行全局配置 #  用于设置应用的状态栏、导航条、标题、窗口背景色等。详细文档\n   属性 类型 默认值 描述     navigationBarBackgroundColor HexColor #F7F7F7 导航栏背景颜色（同状态栏背景色）   navigationBarTextStyle String white 导航栏标题颜色及状态栏前景颜色，仅支持 black/white   navigationBarTitleText String  导航栏标题文字内容   backgroundColor HexColor #ffffff 窗口的背景色   backgroundTextStyle String dark 下拉 loading 的样式，仅支持 dark / light   enablePullDownRefresh Boolean false 是否开启下拉刷新，详见页面生命周期。   onReachBottomDistance Number 50 页面上拉触底事件触发时距页面底部距离，单位只支持px，详见页面生命周期    创建新的message页面 #  右键pages新建message目录，在message目录下右键新建.vue文件,并选择基本模板\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; 这是信息页面 \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; 通过pages来配置页面 #     属性 类型 默认值 描述     path String  配置页面路径   style Object  配置页面窗口表现，配置项参考 pageStyle    pages数组数组中第一项表示应用启动页\n\u0026#34;pages\u0026#34;: [ 、 { \u0026#34;path\u0026#34;:\u0026#34;pages/message/message\u0026#34; }, { \u0026#34;path\u0026#34;: \u0026#34;pages/index/index\u0026#34;, \u0026#34;style\u0026#34;: { \u0026#34;navigationBarTitleText\u0026#34;: \u0026#34;uni-app\u0026#34; } } ] 通过style修改页面的标题和导航栏背景色，并且设置h5下拉刷新的特有样式\n\u0026#34;pages\u0026#34;: [ //pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages \t{ \u0026#34;path\u0026#34;:\u0026#34;pages/message/message\u0026#34;, \u0026#34;style\u0026#34;: { \u0026#34;navigationBarBackgroundColor\u0026#34;: \u0026#34;#007AFF\u0026#34;, \u0026#34;navigationBarTextStyle\u0026#34;: \u0026#34;white\u0026#34;, \u0026#34;enablePullDownRefresh\u0026#34;: true, \u0026#34;disableScroll\u0026#34;: true, \u0026#34;h5\u0026#34;: { \u0026#34;pullToRefresh\u0026#34;: { \u0026#34;color\u0026#34;: \u0026#34;#007AFF\u0026#34; } } } } ] 配置tabbar #  如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。\nTips\n 当设置 position 为 top 时，将不会显示 icon tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。  属性说明：\n   属性 类型 必填 默认值 描述 平台差异说明     color HexColor 是  tab 上的文字默认颜色    selectedColor HexColor 是  tab 上的文字选中时的颜色    backgroundColor HexColor 是  tab 的背景色    borderStyle String 否 black tabbar 上边框的颜色，仅支持 black/white App 2.3.4+ 支持其他颜色值   list Array 是  tab 的列表，详见 list 属性说明，最少2个、最多5个 tab    position String 否 bottom 可选值 bottom、top top 值仅微信小程序支持    其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：\n   属性 类型 必填 说明     pagePath String 是 页面路径，必须在 pages 中先定义   text String 是 tab 上按钮文字，在 5+APP 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标   iconPath String 否 图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片，不支持字体图标   selectedIconPath String 否 选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效    案例代码：\n\u0026#34;tabBar\u0026#34;: { \u0026#34;list\u0026#34;: [ { \u0026#34;text\u0026#34;: \u0026#34;首页\u0026#34;, \u0026#34;pagePath\u0026#34;:\u0026#34;pages/index/index\u0026#34;, \u0026#34;iconPath\u0026#34;:\u0026#34;static/tabs/home.png\u0026#34;, \u0026#34;selectedIconPath\u0026#34;:\u0026#34;static/tabs/home-active.png\u0026#34; }, { \u0026#34;text\u0026#34;: \u0026#34;信息\u0026#34;, \u0026#34;pagePath\u0026#34;:\u0026#34;pages/message/message\u0026#34;, \u0026#34;iconPath\u0026#34;:\u0026#34;static/tabs/message.png\u0026#34;, \u0026#34;selectedIconPath\u0026#34;:\u0026#34;static/tabs/message-active.png\u0026#34; }, { \u0026#34;text\u0026#34;: \u0026#34;我们\u0026#34;, \u0026#34;pagePath\u0026#34;:\u0026#34;pages/contact/contact\u0026#34;, \u0026#34;iconPath\u0026#34;:\u0026#34;static/tabs/contact.png\u0026#34;, \u0026#34;selectedIconPath\u0026#34;:\u0026#34;static/tabs/contact-active.png\u0026#34; } ] } condition启动模式配置 #  启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。\n属性说明：\n   属性 类型 是否必填 描述     current Number 是 当前激活的模式，list节点的索引值   list Array 是 启动模式列表    list说明：\n   属性 类型 是否必填 描述     name String 是 启动模式名称   path String 是 启动页面路径   query String 否 启动参数，可在页面的 onLoad 函数里获得    组件的基本使用 #  uni-app提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼接称自己的应用\nuni-app中的组件，就像 HTML 中的 div 、p、span 等标签的作用一样，用于搭建页面的基础结构\ntext文本组件的用法 #  001 - text 组件的属性 #     属性 类型 默认值 必填 说明     selectable boolean false 否 文本是否可选   space string . 否 显示连续空格，可选参数：ensp、emsp、nbsp   decode boolean false 否 是否解码     text 组件相当于行内标签、在同一行显示 除了文本节点以外的其他节点都无法长按选中  002 - 代码案例 #  \u0026lt;view\u0026gt; \u0026lt;!-- 长按文本是否可选 --\u0026gt; \u0026lt;text selectable=\u0026#39;true\u0026#39;\u0026gt;来了老弟\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view\u0026gt; \u0026lt;!-- 显示连续空格的方式 --\u0026gt; \u0026lt;view\u0026gt; \u0026lt;text space=\u0026#39;ensp\u0026#39;\u0026gt;来了 老弟\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view\u0026gt; \u0026lt;text space=\u0026#39;emsp\u0026#39;\u0026gt;来了 老弟\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view\u0026gt; \u0026lt;text space=\u0026#39;nbsp\u0026#39;\u0026gt;来了 老弟\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view\u0026gt; \u0026lt;text\u0026gt;skyblue\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view\u0026gt; \u0026lt;!-- 是否解码 --\u0026gt; \u0026lt;text decode=\u0026#39;true\u0026#39;\u0026gt;\u0026amp;nbsp; \u0026amp;lt; \u0026amp;gt; \u0026amp;amp; \u0026amp;apos; \u0026amp;ensp; \u0026amp;emsp;\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; view视图容器组件的用法 #   View 视图容器， 类似于 HTML 中的 div\n 001 - 组件的属性 #  002 - 代码案例 #  \u0026lt;view class=\u0026#34;box2\u0026#34; hover-class=\u0026#34;box2_active\u0026#34;\u0026gt; \u0026lt;view class=\u0026#39;box1\u0026#39; hover-class=\u0026#39;active\u0026#39; hover-stop-propagation :hover-start-time=\u0026#34;2000\u0026#34; :hover-stay-time=\u0026#39;2000\u0026#39;\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; button按钮组件的用法 #  001 - 组件的属性 #     属性名 类型 默认值 说明     size String default 按钮的大小   type String default 按钮的样式类型   plain Boolean false 按钮是否镂空，背景色透明   disabled Boolean false 是否按钮   loading Boolean false 名称是否带 loading t图标     button 组件默认独占一行，设置 size 为 mini 时可以在一行显示多个  002 - 案例代码 #  \u0026lt;button size=\u0026#39;mini\u0026#39; type=\u0026#39;primary\u0026#39;\u0026gt;前端\u0026lt;/button\u0026gt; \u0026lt;button size=\u0026#39;mini\u0026#39; type=\u0026#39;default\u0026#39; disabled=\u0026#39;true\u0026#39;\u0026gt;前端\u0026lt;/button\u0026gt; \u0026lt;button size=\u0026#39;mini\u0026#39; type=\u0026#39;warn\u0026#39; loading=\u0026#39;true\u0026#39;\u0026gt;前端\u0026lt;/button\u0026gt; image组件的使用 #  image #  图片。\n   属性名 类型 默认值 说明 平台差异说明     src String  图片资源地址    mode String \u0026lsquo;scaleToFill\u0026rsquo; 图片裁剪、缩放的模式     Tips\n \u0026lt;image\u0026gt; 组件默认宽度 300px、高度 225px； src 仅支持相对路径、绝对路径，支持 base64 码； 页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 image{will-change: transform} ,可优化此问题。  uni-app中的样式 #    rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。\n  使用@import语句可以导入外联样式表，@import后跟需要导入的外联样式表的相对路径，用;表示语句结束\n  支持基本常用的选择器class、id、element等\n  在 uni-app 中不能使用 * 选择器。\n  page 相当于 body 节点\n  定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。\n  uni-app 支持使用字体图标，使用方式与普通 web 项目相同，需要注意以下几点：\n  字体文件小于 40kb，uni-app 会自动将其转化为 base64 格式；\n  字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；\n  字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。\n @font-face {\rfont-family: test1-icon;\rsrc: url('~@/static/iconfont.ttf');\r}\r    如何使用scss或者less\n  uni-app中的数据绑定 #  在页面中需要定义数据，和我们之前的vue一摸一样，直接在data中定义数据即可\nexport default { data () { return { msg: \u0026#39;hello-uni\u0026#39; } } } 插值表达式的使用 #    利用插值表达式渲染基本数据\n\u0026lt;view\u0026gt;{{msg}}\u0026lt;/view\u0026gt;   在插值表达式中使用三元运算\n\u0026lt;view\u0026gt;{{ flag ? \u0026#39;我是真的\u0026#39;:\u0026#39;我是假的\u0026#39; }}\u0026lt;/view\u0026gt;   基本运算\n\u0026lt;view\u0026gt;{{1+1}}\u0026lt;/view\u0026gt;   v-bind动态绑定属性 #  在data中定义了一张图片，我们希望把这张图片渲染到页面上\nexport default { data () { return { img: \u0026#39;http://destiny001.gitee.io/image/monkey_02.jpg\u0026#39; } } } 利用v-bind进行渲染\n\u0026lt;image v-bind:src=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/image\u0026gt; 还可以缩写成:\n\u0026lt;image :src=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/image\u0026gt; v-for的使用 #  data中定以一个数组，最终将数组渲染到页面上\ndata () { return { arr: [ { name: \u0026#39;刘能\u0026#39;, age: 29 }, { name: \u0026#39;赵四\u0026#39;, age: 39 }, { name: \u0026#39;宋小宝\u0026#39;, age: 49 }, { name: \u0026#39;小沈阳\u0026#39;, age: 59 } ] } } 利用v-for进行循环\n\u0026lt;view v-for=\u0026#34;(item,i) in arr\u0026#34; :key=\u0026#34;i\u0026#34;\u0026gt;名字：{{item.name}}---年龄：{{item.age}}\u0026lt;/view\u0026gt; uni中的事件 #  事件绑定 #  在uni中事件绑定和vue中是一样的，通过v-on进行事件的绑定，也可以简写为@\n\u0026lt;button @click=\u0026#34;tapHandle\u0026#34;\u0026gt;点我啊\u0026lt;/button\u0026gt; 事件函数定义在methods中\nmethods: { tapHandle () { console.log(\u0026#39;真的点我了\u0026#39;) } } 事件传参 #    默认如果没有传递参数，事件函数第一个形参为事件对象\n// template\r\u0026lt;button @click=\u0026quot;tapHandle\u0026quot;\u0026gt;点我啊\u0026lt;/button\u0026gt;\r// script\rmethods: {\rtapHandle (e) {\rconsole.log(e)\r}\r}\r  如果给事件函数传递参数了，则对应的事件函数形参接收的则是传递过来的数据\n// template\r\u0026lt;button @click=\u0026quot;tapHandle(1)\u0026quot;\u0026gt;点我啊\u0026lt;/button\u0026gt;\r// script\rmethods: {\rtapHandle (num) {\rconsole.log(num)\r}\r}\r  如果获取事件对象也想传递参数\n// template\r\u0026lt;button @click=\u0026quot;tapHandle(1,$event)\u0026quot;\u0026gt;点我啊\u0026lt;/button\u0026gt;\r// script\rmethods: {\rtapHandle (num,e) {\rconsole.log(num,e)\r}\r}\r  uni的生命周期 #  应用的生命周期 #  生命周期的概念：一个对象从创建、运行、销毁的整个过程被成为生命周期。\n生命周期函数：在生命周期中每个阶段会伴随着每一个函数的触发，这些函数被称为生命周期函数\nuni-app 支持如下应用生命周期函数：\n   函数名 说明     onLaunch 当uni-app 初始化完成时触发（全局只触发一次）   onShow 当 uni-app 启动，或从后台进入前台显示   onHide 当 uni-app 从前台进入后台   onError 当 uni-app 报错时触发    页面的生命周期 #  uni-app 支持如下页面生命周期函数：\n   函数名 说明 平台差异说明 最低版本     onLoad 监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参），参考示例     onShow 监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面     onReady 监听页面初次渲染完成。     onHide 监听页面隐藏     onUnload 监听页面卸载      下拉刷新 #  开启下拉刷新 #  在uni-app中有两种方式开启下拉刷新\n 需要在 pages.json 里，找到的当前页面的pages节点，并在 style 选项中开启 enablePullDownRefresh 通过调用uni.startPullDownRefresh方法来开启下拉刷新  通过配置文件开启 #  创建list页面进行演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; 杭州学科 \u0026lt;view v-for=\u0026#34;(item,index) in arr\u0026#34; :key=\u0026#34;index\u0026#34;\u0026gt; {{item}} \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data () { return { arr: [\u0026#39;前端\u0026#39;,\u0026#39;java\u0026#39;,\u0026#39;ui\u0026#39;,\u0026#39;大数据\u0026#39;] } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; 通过pages.json文件中找到当前页面的pages节点，并在 style 选项中开启 enablePullDownRefresh\n{ \u0026#34;path\u0026#34;:\u0026#34;pages/list/list\u0026#34;, \u0026#34;style\u0026#34;:{ \u0026#34;enablePullDownRefresh\u0026#34;: true } } 通过API开启 #  api文档\nuni.startPullDownRefresh() 监听下拉刷新 #  通过onPullDownRefresh可以监听到下拉刷新的动作\nexport default { data () { return { arr: [\u0026#39;前端\u0026#39;,\u0026#39;java\u0026#39;,\u0026#39;ui\u0026#39;,\u0026#39;大数据\u0026#39;] } }, methods: { startPull () { uni.startPullDownRefresh() } }, onPullDownRefresh () { console.log(\u0026#39;触发下拉刷新了\u0026#39;) } } 关闭下拉刷新 #  uni.stopPullDownRefresh()\n停止当前页面下拉刷新。\n案例演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;startPull\u0026#34;\u0026gt;开启下拉刷新\u0026lt;/button\u0026gt; 杭州学科 \u0026lt;view v-for=\u0026#34;(item,index) in arr\u0026#34; :key=\u0026#34;index\u0026#34;\u0026gt; {{item}} \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data () { return { arr: [\u0026#39;前端\u0026#39;,\u0026#39;java\u0026#39;,\u0026#39;ui\u0026#39;,\u0026#39;大数据\u0026#39;] } }, methods: { startPull () { uni.startPullDownRefresh() } }, onPullDownRefresh () { this.arr = [] setTimeout(()=\u0026gt; { this.arr = [\u0026#39;前端\u0026#39;,\u0026#39;java\u0026#39;,\u0026#39;ui\u0026#39;,\u0026#39;大数据\u0026#39;] uni.stopPullDownRefresh() }, 1000); } } \u0026lt;/script\u0026gt; 上拉加载 #  通过在pages.json文件中找到当前页面的pages节点下style中配置onReachBottomDistance可以设置距离底部开启加载的距离，默认为50px\n通过onReachBottom监听到触底的行为\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;startPull\u0026#34;\u0026gt;开启下拉刷新\u0026lt;/button\u0026gt; 杭州学科 \u0026lt;view v-for=\u0026#34;(item,index) in arr\u0026#34; :key=\u0026#34;index\u0026#34;\u0026gt; {{item}} \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data () { return { arr: [\u0026#39;前端\u0026#39;,\u0026#39;java\u0026#39;,\u0026#39;ui\u0026#39;,\u0026#39;大数据\u0026#39;,\u0026#39;前端\u0026#39;,\u0026#39;java\u0026#39;,\u0026#39;ui\u0026#39;,\u0026#39;大数据\u0026#39;] } }, onReachBottom () { console.log(\u0026#39;触底了\u0026#39;) } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; view{ height: 100px; line-height: 100px; } \u0026lt;/style\u0026gt; 网络请求 #  在uni中可以调用uni.request方法进行请求网络请求\n需要注意的是：在小程序中网络相关的 API 在使用前需要配置域名白名单。\n发送get请求\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button @click=\u0026#34;sendGet\u0026#34;\u0026gt;发送请求\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { methods: { sendGet () { uni.request({ url: \u0026#39;http://localhost:8082/api/getlunbo\u0026#39;, success(res) { console.log(res) } }) } } } \u0026lt;/script\u0026gt; 发送post请求\n数据缓存 #  uni.setStorage #  官方文档\n将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口。\n代码演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;setStor\u0026#34;\u0026gt;存储数据\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { methods: { setStor () { uni.setStorage({ key: \u0026#39;id\u0026#39;, data: 100, success () { console.log(\u0026#39;存储成功\u0026#39;) } }) } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; uni.setStorageSync #  将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口。\n代码演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;setStor\u0026#34;\u0026gt;存储数据\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { methods: { setStor () { uni.setStorageSync(\u0026#39;id\u0026#39;,100) } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; uni.getStorage #  从本地缓存中异步获取指定 key 对应的内容。\n代码演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;getStorage\u0026#34;\u0026gt;获取数据\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data () { return { id: \u0026#39;\u0026#39; } }, methods: { getStorage () { uni.getStorage({ key: \u0026#39;id\u0026#39;, success: res=\u0026gt;{ this.id = res.data } }) } } } \u0026lt;/script\u0026gt; uni.getStorageSync #  从本地缓存中同步获取指定 key 对应的内容。\n代码演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;getStorage\u0026#34;\u0026gt;获取数据\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { methods: { getStorage () { const id = uni.getStorageSync(\u0026#39;id\u0026#39;) console.log(id) } } } \u0026lt;/script\u0026gt; uni.removeStorage #  从本地缓存中异步移除指定 key。\n代码演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;removeStorage\u0026#34;\u0026gt;删除数据\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { methods: { removeStorage () { uni.removeStorage({ key: \u0026#39;id\u0026#39;, success: function () { console.log(\u0026#39;删除成功\u0026#39;) } }) } } } \u0026lt;/script\u0026gt; uni.removeStorageSync #  从本地缓存中同步移除指定 key。\n代码演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;removeStorage\u0026#34;\u0026gt;删除数据\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { methods: { removeStorage () { uni.removeStorageSync(\u0026#39;id\u0026#39;) } } } \u0026lt;/script\u0026gt; 上传图片、预览图片 #  上传图片 #  uni.chooseImage方法从本地相册选择图片或使用相机拍照。\n案例代码\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button @click=\u0026#34;chooseImg\u0026#34; type=\u0026#34;primary\u0026#34;\u0026gt;上传图片\u0026lt;/button\u0026gt; \u0026lt;view\u0026gt; \u0026lt;image v-for=\u0026#34;item in imgArr\u0026#34; :src=\u0026#34;item\u0026#34; :key=\u0026#34;index\u0026#34;\u0026gt;\u0026lt;/image\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data () { return { imgArr: [] } }, methods: { chooseImg () { uni.chooseImage({ count: 9, success: res=\u0026gt;{ this.imgArr = res.tempFilePaths } }) } } } \u0026lt;/script\u0026gt; 预览图片 #  结构\n\u0026lt;view\u0026gt; \u0026lt;image v-for=\u0026#34;item in imgArr\u0026#34; :src=\u0026#34;item\u0026#34; @click=\u0026#34;previewImg(item)\u0026#34; :key=\u0026#34;item\u0026#34;\u0026gt;\u0026lt;/image\u0026gt; \u0026lt;/view\u0026gt; 预览图片的方法\npreviewImg (current) { uni.previewImage({ urls: this.imgArr, current }) } 条件注释实现跨段兼容 #  条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。\n**写法：**以 #ifdef 加平台标识 开头，以 #endif 结尾。\n平台标识\n   值 平台 参考文档     APP-PLUS 5+App HTML5+ 规范   H5 H5    MP-WEIXIN 微信小程序 微信小程序   MP-ALIPAY 支付宝小程序 支付宝小程序   MP-BAIDU 百度小程序 百度小程序   MP-TOUTIAO 头条小程序 头条小程序   MP-QQ QQ小程序 （目前仅cli版支持）   MP 微信小程序/支付宝小程序/百度小程序/头条小程序/QQ小程序     组件的条件注释 #  代码演示\n\u0026lt;!-- #ifdef H5 --\u0026gt; \u0026lt;view\u0026gt; h5页面会显示 \u0026lt;/view\u0026gt; \u0026lt;!-- #endif --\u0026gt; \u0026lt;!-- #ifdef MP-WEIXIN --\u0026gt; \u0026lt;view\u0026gt; 微信小程序会显示 \u0026lt;/view\u0026gt; \u0026lt;!-- #endif --\u0026gt; \u0026lt;!-- #ifdef APP-PLUS --\u0026gt; \u0026lt;view\u0026gt; app会显示 \u0026lt;/view\u0026gt; \u0026lt;!-- #endif --\u0026gt; api的条件注释 #  代码演示\nonLoad () { //#ifdef MP-WEIXIN  console.log(\u0026#39;微信小程序\u0026#39;) //#endif  //#ifdef H5  console.log(\u0026#39;h5页面\u0026#39;) //#endif } 样式的条件注释\n代码演示\n/* #ifdef H5 */ view{ height: 100px; line-height: 100px; background: red; } /* #endif */ /* #ifdef MP-WEIXIN */ view{ height: 100px; line-height: 100px; background: green; } /* #endif */ uni中的导航跳转 #  利用navigator进行跳转 #  navigator详细文档：文档地址\n跳转到普通页面\n\u0026lt;navigator url=\u0026#34;/pages/about/about\u0026#34; hover-class=\u0026#34;navigator-hover\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;default\u0026#34;\u0026gt;跳转到关于页面\u0026lt;/button\u0026gt; \u0026lt;/navigator\u0026gt; 跳转到tabbar页面\n\u0026lt;navigator url=\u0026#34;/pages/message/message\u0026#34; open-type=\u0026#34;switchTab\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;default\u0026#34;\u0026gt;跳转到message页面\u0026lt;/button\u0026gt; \u0026lt;/navigator\u0026gt; 利用编程式导航进行跳转 #  导航跳转文档\n利用navigateTo进行导航跳转\n保留当前页面，跳转到应用内的某个页面，使用uni.navigateBack可以返回到原页面。\n\u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;goAbout\u0026#34;\u0026gt;跳转到关于页面\u0026lt;/button\u0026gt; 通过navigateTo方法进行跳转到普通页面\ngoAbout () { uni.navigateTo({ url: \u0026#39;/pages/about/about\u0026#39;, }) } 通过switchTab跳转到tabbar页面\n跳转到tabbar页面\n\u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;goMessage\u0026#34;\u0026gt;跳转到message页面\u0026lt;/button\u0026gt; 通过switchTab方法进行跳转\ngoMessage () { uni.switchTab({ url: \u0026#39;/pages/message/message\u0026#39; }) } redirectTo进行跳转\n关闭当前页面，跳转到应用内的某个页面。\n\u0026lt;!-- template --\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;goMessage\u0026#34;\u0026gt;跳转到message页面\u0026lt;/button\u0026gt; \u0026lt;!-- js --\u0026gt; goMessage () { uni.switchTab({ url: \u0026#39;/pages/message/message\u0026#39; }) } 通过onUnload测试当前组件确实卸载\nonUnload () { console.log(\u0026#39;组件卸载了\u0026#39;) } 导航跳转传递参数 #  在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过onLoad生命周期进行接收\n传递参数的页面\ngoAbout () { uni.navigateTo({ url: \u0026#39;/pages/about/about?id=80\u0026#39;, }); } 接收参数的页面\n\u0026lt;script\u0026gt; export default { onLoad (options) { console.log(options) } } \u0026lt;/script\u0026gt; #  uni-app中组件的创建 #  在uni-app中，可以通过创建一个后缀名为vue的文件，即创建一个组件成功，其他组件可以将该组件通过impot的方式导入，在通过components进行注册即可\n  创建login组件，在component中创建login目录，然后新建login.vue文件\n\u0026lt;template\u0026gt;\r\u0026lt;view\u0026gt;\r这是一个自定义组件\r\u0026lt;/view\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;script\u0026gt;\r\u0026lt;/script\u0026gt;\r\u0026lt;style\u0026gt;\r\u0026lt;/style\u0026gt;\r  在其他组件中导入该组件并注册\nimport login from \u0026quot;@/components/test/test.vue\u0026quot;\r  注册组件\ncomponents: {test}   使用组件\n\u0026lt;test\u0026gt;\u0026lt;/test\u0026gt;\r  组件的生命周期函数 #     beforeCreate 在实例初始化之后被调用。详见       created 在实例创建完成后被立即调用。详见     beforeMount 在挂载开始之前被调用。详见     mounted 挂载到实例上去之后调用。详见 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用$nextTickVue官方文档     beforeUpdate 数据更新时调用，发生在虚拟 DOM 打补丁之前。详见 仅H5平台支持    updated 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。详见 仅H5平台支持    beforeDestroy 实例销毁之前调用。在这一步，实例仍然完全可用。详见     destroyed Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。详见      组件的通讯 #  父组件给子组件传值 #  通过props来接受外界传递到组件内部的值\n\u0026lt;template\u0026gt;\r\u0026lt;view\u0026gt;\r这是一个自定义组件 {{msg}}\r\u0026lt;/view\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;script\u0026gt;\rexport default {\rprops: ['msg']\r}\r\u0026lt;/script\u0026gt;\r\u0026lt;style\u0026gt;\r\u0026lt;/style\u0026gt;\r其他组件在使用login组件的时候传递值\n\u0026lt;template\u0026gt;\r\u0026lt;view\u0026gt;\r\u0026lt;test :msg=\u0026quot;msg\u0026quot;\u0026gt;\u0026lt;/test\u0026gt;\r\u0026lt;/view\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;script\u0026gt;\rimport test from \u0026quot;@/components/test/test.vue\u0026quot;\rexport default {\rdata () {\rreturn {\rmsg: 'hello'\r}\r},\rcomponents: {test}\r}\r\u0026lt;/script\u0026gt;\r子组件给父组件传值 #  通过$emit触发事件进行传递参数\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; 这是一个自定义组件 {{msg}} \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;sendMsg\u0026#34;\u0026gt;给父组件传值\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data () { return { status: \u0026#39;打篮球\u0026#39; } }, props: { msg: { type: String, value: \u0026#39;\u0026#39; } }, methods: { sendMsg () { this.$emit(\u0026#39;myEvent\u0026#39;,this.status) } } } \u0026lt;/script\u0026gt; 父组件定义自定义事件并接收参数\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;test :msg=\u0026#34;msg\u0026#34; @myEvent=\u0026#34;getMsg\u0026#34;\u0026gt;\u0026lt;/test\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import test from \u0026#34;@/components/test/test.vue\u0026#34; export default { data () { return { msg: \u0026#39;hello\u0026#39; } }, methods: { getMsg (res) { console.log(res) } }, components: {test} } \u0026lt;/script\u0026gt; 兄弟组件通讯 #  uni-ui的使用 #  uni-ui文档\n1、进入Grid宫格组件\n2、使用HBuilderX导入该组件\n3、导入该组件\nimport uniGrid from \u0026#34;@/components/uni-grid/uni-grid.vue\u0026#34; import uniGridItem from \u0026#34;@/components/uni-grid-item/uni-grid-item.vue\u0026#34; 4、注册组件\ncomponents: {uniGrid,uniGridItem} 5、使用组件\n\u0026lt;uni-grid :column=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;uni-grid-item\u0026gt; \u0026lt;text class=\u0026#34;text\u0026#34;\u0026gt;文本\u0026lt;/text\u0026gt; \u0026lt;/uni-grid-item\u0026gt; \u0026lt;uni-grid-item\u0026gt; \u0026lt;text class=\u0026#34;text\u0026#34;\u0026gt;文本\u0026lt;/text\u0026gt; \u0026lt;/uni-grid-item\u0026gt; \u0026lt;uni-grid-item\u0026gt; \u0026lt;text class=\u0026#34;text\u0026#34;\u0026gt;文本\u0026lt;/text\u0026gt; \u0026lt;/uni-grid-item\u0026gt; \u0026lt;/uni-grid\u0026gt; "});index.add({'id':105,'href':'/life/docs/operating_system/windows/ftp/','title':" FTP ",'section':"windows学习与使用 ",'content':"本地设置FTP服务器 #  步骤1：在计算机上打开“控制面板”，然后单击“程序和功能”。 #  步骤2：在“程序和功能”窗口中，单击“控制面板”窗口左侧的“打开或关闭Windows功能”。 #  第3步：现在等待一段时间并向下滚动以找出“Internet信息服务”。 只需展开它，打开“FTP服务器”，“Web管理工具”和“万维网服务”下的所有内容，与下面的屏幕截图相同。 完成所有服务后，单击“确定” #  第4步：应用更改需要一些时间，完成后，单击“立即重新启动”以重新启动计算机并应用所做的更改 #  步骤5：重新启动计算机后，再次打开“控制面板”，然后单击“管理工具”将其打开 #  步骤7：在IIS管理器窗口的左侧，展开窗口左侧的计算机名称，除非您找到“站点”。 只需右键单击“站点”，然后单击“添加FTP站点\u0026hellip;” #  第8步：这里给FTP站点命名。 我将\u0026rsquo;sampleftp\u0026rsquo;赋予FTP站点名称。 现在单击“\u0026hellip;”按钮以找到要通过FTP服务器访问的文件夹或驱动程序。 我为本教程选择了“C：FTP_Path”。 完成所有操作后，单击“下一步” #  步骤9：在下一个窗口中，单击与“IP Address：”对应的下拉菜单，然后在本地网络上选择计算机的IP地址。 #   将端口号保留为“21”，默认情况下是这样。  步骤10：选择“No SSL”并启用“自动启动FTP站点”，然后单击“下一步”。 #   *由于这是一个教程，我不允许使用SSL。 但是，如果您想通过FTP服务器访问敏感数据，我建议您使用SSL  步骤11：现在选择“基本”的身份验证方法，并向“所有用户”提供“授权”。 用户必须输入您的Windows用户名和密码才能使用此身份验证方法访问FTP服务器上的文件 #   现在，根据您要如何设置FTP服务器，将权限设置为“读取”和“写入”或仅设置为“读取”。 之后，单击“完成”以完成站点设置并在Windows计算机上启动FTP服务器  配置防火墙 #   您的FTP服务器已准备就绪并且正在运行 但是，您需要配置Windows防火墙以允许与您的计算机进行FTP通信的事务处理。  步骤12：打开“控制面板”并在Windows 10上单击“Windows Defender Firewall”或在Windows 7上单击“Windows防火墙” #  步骤13：单击窗口左侧的“允许通过Windows Defender防火墙的应用程序或功能” #  步骤14：在新窗口中，单击“更改设置”并标记“FTP服务器”的“公共”和“私人”对应的复选框，然后单击“确定”。 #    现在，您可以使用适当的应用程序轻松地从本地网络中的任何其他计算机或移动设备访问FTP服务器，或者只需从浏览器访问即可。\n  步骤15：只需输入\u0026rsquo;ftp：//'，然后输入计算机的IP地址和端口号，即21。对于本教程，我的计算机的IP地址为192.168.1.108。\n  所以完整的地址将是\u0026rsquo;ftp://192.168.1.108:21'\n  步骤16：如果输入的地址正确，将要求您输入Windows计算机的用户名和密码。 最后，点击“确定”或“登录”，以适用于您的方式为准 #   如果身份验证成功，您将能够看到通过FTP服务器共享的文件夹或驱动器中的内容。    这样，您就可以在本地网络上访问Windows计算机上的文件。\n  通过Internet访问本地FTP服务器\n  通过Internet访问本地或家庭FTP服务器需要在路由器上配置一些设置。因此，该过程可能会根据您使用的路由器的公司和型号而有所不同。不过，我在此基本了解如何配置路由器以通过互联网访问您的FTP服务器。\n  在继续之前，请记下您的Internet服务提供商从以下链接提供给您的外部IP地址。\n  打开路由器配置页面，该页面应为192.168.1.1,192.168.0.1或左右。您可以在配置手册中找到路由器配置页面的地址。\n  对我来说，它是192.168.1.1。只需打开配置页面，然后使用用户名和密码登录即可。\n  然后转到“高级设置”，并在其下选择“NAT”。\n  步骤17：在“Virtual Circuit”中选择“PVC2”，然后单击“Virtual Server”。将“IP数量”设置为“单个”，这应该是默认值。 #  步骤18：现在点击“应用程序”对应的下拉菜单，然后从菜单中选择“FTP”。 之后将自动应用其他配置。 您甚至会注意到FTP应用程序的端口号也被分配为“21” #   现在为我设置本地IP地址，即192.168.1.108。  第19步：完成后，单击“保存”。 #  第20步：一切准备就绪。 现在输入\u0026rsquo;ftp：//'，后跟前面提到的外部IP地址，以及冒号后的端口号，即21。 #   所以对我来说地址是\u0026rsquo;ftp://117.194.16.221:21'。 如果您的ISP为您分配动态IP地址，则每次重新启动路由器时外部IP地址都会更改。  "});index.add({'id':106,'href':'/life/docs/javadir/groovy/%E5%A6%82%E4%BD%95%E5%9C%A8groovy%E4%B8%AD%E8%8E%B7%E5%8F%96%E4%BB%A5%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E7%9A%84%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/','title':" groovy变量值获取 ",'section':"groovy 学习与使用 ",'content':"groovy变量值获取 #  `\nhttps://www.codenong.com/34288451/\n`\n"});index.add({'id':107,'href':'/life/docs/operating_system/one_chapter/1_5_/','title':" 中断和异常 ",'section':"第一章 操作系统概述 ",'content':"一:知识总览 #  中断的作用 #   “中断”会使CPU由用户态变为内核态，使操作系统重新夺回对CPU的控制权\n   CPU 上会运行两种程序，一种是操作系统内核程序，一种是应用程序\n  在合适的情况下，操作系统内核会把CPU的使用权主动让给应用程序(进程管理相关内容)\n  如果没有“中断”机制，那么一旦应用程序上CPU运行，CPU就会一直运行这个应用程序\n    内核态à用户态：执行一条特权指令——修改PSW的标志位为“用户态”，这个动作意味着操作系统将主动让出CPU使用权\n  用户态à内核态：由“中断”引发，硬件自动完成变态过程，触发中断信号意味着操作系统将强行夺回CPU的使用权\n  中断的类型 #  中断机制的基本原理 #  二:知识回顾与重要考点 #  "});index.add({'id':108,'href':'/life/docs/javadir/basedir/jsp_dir/jsp_%E5%AD%97%E7%AC%A6%E4%B8%B2el%E8%A1%A8%E8%BE%BE%E5%BC%8F/','title':"字符串el表达式 ",'section':"jsp 基础知识 ",'content':"字符串el表达式 #  fn:contains 判断字符串是否包含另外一个字符串 \u0026lt;c:if test=\u0026quot;${fn:contains(name, searchString)}\u0026quot;\u0026gt;\rfn:containsIgnoreCase 判断字符串是否包含另外一个字符串(大小写无关) \u0026lt;c:if test=\u0026quot;${fn:containsIgnoreCase(name, searchString)}\u0026quot;\u0026gt;\rfn:endsWith 判断字符串是否以另外字符串结束 \u0026lt;c:if test=\u0026quot;${fn:endsWith(filename, \u0026quot;.txt\u0026quot;)}\u0026quot;\u0026gt;\rfn:escapeXml 把一些字符转成XML表示，例如 \u0026lt;字符应该转为\u0026lt; ${fn:escapeXml(param:info)}\rfn:indexOf 子字符串在母字符串中出现的位置 ${fn:indexOf(name, \u0026quot;-\u0026quot;)}\rfn:join 将数组中的数据联合成一个新字符串，并使用指定字符格开 ${fn:join(array, \u0026quot;;\u0026quot;)}\rfn:length 获取字符串的长度，或者数组的大小 ${fn:length(shoppingCart.products)}\rfn:replace 替换字符串中指定的字符 ${fn:replace(text, \u0026quot;-\u0026quot;, \u0026quot;?\u0026quot;)}\rfn:split 把字符串按照指定字符切分 ${fn:split(customerNames, \u0026quot;;\u0026quot;)}\rfn:startsWith 判断字符串是否以某个子串开始 \u0026lt;c:if test=\u0026quot;${fn:startsWith(product.id, \u0026quot;100-\u0026quot;)}\u0026quot;\u0026gt;\rfn:substring 获取子串 ${fn:substring(zip, 6, -1)}\rfn:substringAfter 获取从某个字符所在位置开始的子串 ${fn:substringAfter(zip, \u0026quot;-\u0026quot;)}\rfn:substringBefore 获取从开始到某个字符所在位置的子串 ${fn:substringBefore(zip, \u0026quot;-\u0026quot;)}\rfn:toLowerCase 转为小写 ${fn.toLowerCase(product.name)}\rfn:toUpperCase 转为大写字符 ${fn.UpperCase(product.name)}\rfn:trim 去除字符串前后的空格 ${fn.trim(name)}\r函数 描述\rfn:contains(string, substring)\r如果参数string中包含参数substring，返回true\rfn:containsIgnoreCase(string, substring)\r如果参数string中包含参数substring（忽略大小写），返回true\rfn:endsWith(string, suffix)\r如果参数 string 以参数suffix结尾，返回true\rfn:escapeXml(string)\r将有特殊意义的XML (和HTML)转换为对应的XML character entity code，并返回\rfn:indexOf(string, substring)\r返回参数substring在参数string中第一次出现的位置\rfn:join(array, separator)\r将一个给定的数组array用给定的间隔符separator串在一起，组成一个新的字符串并返回。\rfn:length(item)\r返回参数item中包含元素的数量。参数Item类型是数组、collection或者String。如果是String类型,返回值是String中的字符数。\rfn:replace(string, before, after)\r返回一个String对象。用参数after字符串替换参数string中所有出现参数before字符串的地方，并返回替换后的结果 fn:split(string, separator)\r返回一个数组，以参数separator 为分割符分割参数string，分割后的每一部分就是数组的一个元素\rfn:startsWith(string, prefix)\r如果参数string以参数prefix开头，返回true\rfn:substring(string, begin, end)\r返回参数string部分字符串, 从参数begin开始到参数end位置，包括end位置的字符\rfn:substringAfter(string, substring)\r返回参数substring在参数string中后面的那一部分字符串?? fn:substringBefore(string, substring)\r返回参数substring在参数string中前面的那一部分字符串\rfn:toLowerCase(string)\r将参数string所有的字符变为小写，并将其返回\rfn:toUpperCase(string)\r将参数string所有的字符变为大写，并将其返回\rfn:trim(string)\r在jsp中 使用EL表达式时，不可以使用java提供的功能，比如indexOf()等。\r\u0026lt;c:if test=\u0026quot;${Boolean.valueOf(requestScope.addresult)==false}\u0026quot;\u0026gt; "});index.add({'id':109,'href':'/life/docs/operating_system/','title':"操作系统 ",'section':"Docs",'content':"现代操作系统 #   操作系统的基本特征是：\n  1、并发性：  是在计算机系统中同时存在多个程序，宏观上看，这些程序是同时向前推进的。 在单CPU上，这些并发执行的程序是交替在CPU上运行的。\n程序并发性体现在两个方面： 用户程序与用户程序之间的并发执行。 用户程序与操作系统程序之间的并发。\n 2、共享性：  资源共享是操作系统程序和多个用户程序共用系统中的资源。\n 3、 随机性：  随机性指：操作系统的运行是在一个随机的环境中，一个设备可能在任何时间向处理机发出中断请求，系统无法知道运行着的程序会在什么时候做什么事情。\n操作系统分类： #   1、批处理操作系统 ：  批处理操作系统的工作方式是：用户将作业交给系统操作员，系统操作员将许多用户的作业组成一批作业，之后输入到计算机中，在系统中形成一个自动转接的连续的作业流，然后启动操作系统，系统自动、依次执行每个作业。最后由操作员将作业结果交给用户。\n批处理操作系统的特点是：多道和成批处理。\n 2、分时操作系统 ：  分时操作系统的工作方式是：一台主机连接了若干个终端，每个终端有一个用户在使用。用户交互式地向系统提出命令请求，系统接受每个用户的命令，采用时间片轮转方式处理服务请求，并通过交互方式在终端上向用户显示结果。\n常见的通用操作系统是分时系统与批处理系统的结合。其原则是：分时优先，批处理后。“前台”响应需频繁交互的作业，如终端的要求； “后台”处理时间性要求不强的作业。\n 3、实时操作系统 ：  实时操作系统是指使计算机能及时响应外部事件的请求在规定的严格时间内完成对该事件的处理，并控制所有实时设备和实时任务协调一致地工作的操作系统。实时操作系统要追求的目标是：对外部请求在严格时间范围内做出反应，有高可靠性和完整性。\n 4、嵌入式操作系统 ：  嵌入式操作系统是运行在嵌入式系统环境中，对整个嵌入式系统以及它所操作、控制的各种部件装置等资源进行统一协调、调度、指挥和控制的系统软件。程，并使整个系统能高效地运行。\n 5、个人计算机操作系统 ：  个人计算机操作系统是一种单用户多任务的操作系统。个人计算机操作系统主要供个人使用，功能强、价格便宜，可以在几乎任何地方安装使用。它能满足一般人操作、学习、游戏等方面的需求。个人计算机操作系统的主要特点是计算机在某一时间内为单个用户服务；采用图形界面人机交互的工作方式，界面友好；使用方便，用户无需专门学习，也能熟练操纵机器。\n 6、网络操作系统 ：  网络操作系统是基于计算机网络的，是在各种计算机操作系统上按网络体系结构协议标准开发的软件，包括网络管理、通信、安全、资源共享和各种网络应用。其目标是相互通信及资源共享。\n 7、分布式操作系统 ：  大量的计算机通过网络被连结在一起，可以获得极高的运算能力及广泛的数据共享。这种系统被称作分布式系统。\n"});index.add({'id':110,'href':'/life/docs/operating_system/five_chapter/','title':"第五章 输入，输出（I,O） ",'section':"操作系统 ",'content':"输入，输出（I,O） #  "});index.add({'id':111,'href':'/life/docs/think/criticalthinking/','title':"批判性思维",'section':"思维",'content':" 批判性思维  "});index.add({'id':112,'href':'/life/docs/javadir/tooldoc/dom4j/','title':"dom4j",'section':"Java公共库文档总结 ",'content':"dom4j #   选取节点\n   nodename 选取当前节点的所有子节点\n  / 从根节点选取\n  // 从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置\n  . 选取当前节点\n  .. 选取当前节点的父节点\n  @ 选取属性\n   实例\n   路径表达式 结果\n  bookstore 选取 bookstore 元素的所有子节点\n  /bookstore 选取根元素 bookstore\n  bookstore/book 选取bookstore 下名字为 book的所有子元素。\n  //book 选取所有 book 子元素，而不管它们在文档中的位置。\n  bookstore//book 选取bookstore 下名字为 book的所有后代元素，而不管它们位于 bookstore 之下的什么位置。\n  //@lang 选取所有名为 lang 的属性。\n   常见的谓语的一些路径表达式\n  /bookstore/book[1] 选取属于 bookstore 子元素的第一个 book 元素。 /bookstore/book[last()] 选取属于 bookstore 子元素的最后一个 book 元素。 /bookstore/book[last()-1] 选取属于 bookstore 子元素的倒数第二个 book 元素。 /bookstore/book[position()\u0026lt;3] 选取最前面的两个属于 bookstore 元素的子元素的 book 元素。 //title[@lang] 选取所有拥有名为 lang 的属性的 title 元素。 //title[@lang=\u0026lsquo;eng\u0026rsquo;] 选取所有 title 元素，要求这些元素拥有值为 eng 的 lang 属性。 /bookstore/book[price\u0026gt;35.00] 选取所有 bookstore 元素的 book 元素，要求book元素的子元素 price 元素的值须大于 35.00。 /bookstore/book[price\u0026gt;35.00]/title 选取所有 bookstore 元素中的 book 元素的 title 元素，要求book元素的子元素 price 元素的值须大于 35.00   选取未知节点\n  通配符 描述   匹配任何元素节点   @* 匹配任何属性节点 node() 匹配任何类型的节点 路径表达式 结果 //book/title | //book/price 选取所有 book 元素的 title 和 price 元素。 //title | //price 选取所有文档中的 title 和 price 元素。 /bookstore/book/title|//price 选取所有属于 bookstore 元素的 book 元素的title 元素，以及文档中所有的 price 元素。  "});index.add({'id':113,'href':'/life/docs/databases/mysql/mysql_distinguish/','title':"MySQL分库分表原理",'section':"mysql学习笔记",'content':"前言 #  在互联网还未崛起的时代,我们的传统应用都有这样一个特点：访问量、数据量都比较小，单库单表都完全可以支撑整个业务。\r随着互联网的发展和用户规模的迅速扩大,对系统的要求也越来越高。因此传统的MySQL单库单表架构的性能问题就暴露出来了。而有下面几个因素会影响数据库性能:\r 数据量  MySQL单库数据量在5000万以内性能比较好,超过阈值后性能会随着数据量的增大而变弱。\rMySQL单表的数据量是500w-1000w之间性能比较好,超过1000w性能也会下降。\r 磁盘  因为单个服务的磁盘空间是有限制的,如果并发压力下,所有的请求都访问同一个节点,肯定会对磁盘IO造成非常大的影响。\r 数据库连接  数据库连接是非常稀少的资源,如果一个库里既有用户、商品、订单相关的数据,当海量用户同时操作时,数据库连接就很可能成为瓶颈。\r为了提升性能,所以我们必须要解决上述几个问题,那就有必要引进分库分表。\r垂直拆分 or 水平拆分？ #  当我们单个库太大时,我们先要看一下是因为表太多还是数据量太大，如果是表太多,则应该将部分表进行迁移(可以按业务区分),这就是所谓的垂直切分。\r如果是数据量太大,则需要将表拆成更多的小表,来减少单表的数据量,这就是所谓的水平拆分。\r垂直拆分 #   垂直分库  垂直分库针对的是一个系统中的不同业务进行拆分,比如用户一个库,商品一个库,订单一个库。 一个购物网站对外提供服务时,会同时对用户、商品、订单表进行操作。没拆分之前, 全部都是落到单一的库上的,这会让数据库的单库处理能力成为瓶颈。如果垂直分库后还是将用户、商品、订单放到同一个服务器上,只是分到了不同的库,这样虽然会减少单库的压力,但是随着用户量增大,这会让整个数据库的处理能力成为瓶颈,还有单个服务器的磁盘空间、内存也会受非常大的影响。 所以我们要将其拆分到多个服务器上，这样上面的问题都解决了，以后也不会面对单机资源问题。\r 垂直分表  也就是“大表拆小表”，基于列字段进行的。一般是表中的字段较多，将不常用的， 数据较大，长度较长（比如text类型字段）的拆分到“扩展表“。一般是针对那种几百列的大表，也避免查询时，数据量太大造成的“跨页”问题。\r水平拆分 #   水平分表  和垂直分表有一点类似,不过垂直分表是基于列的,而水平分表是基于全表的。水平拆分可以大大减少单表数据量,提升查询效率。\r 水平分库分表  将单张表的数据切分到多个服务器上去，每个服务器具有相应的库与表，只是表中数据集合不同。 水平分库分表能够有效的缓解单机和单库的性能瓶颈和压力，突破IO、连接数、硬件资源等的瓶颈。\r几种常用的分库分表的策略 #   HASH取模  假设有用户表user,将其分成3个表user0,user1,user2.路由规则是对3取模,当uid=1时,对应到的是user1,uid=2时,对应的是user2。\r 范围分片  从1-10000一个表,10001-20000一个表。\r 地理位置分片  华南区一个表,华北一个表。\r 时间分片  按月分片，按季度分片等等,可以做到冷热数据。\r分库分表后引入的问题 #   分布式事务问题  如果我们做了垂直分库或者水平分库以后,就必然会涉及到跨库执行SQL的问题,这样就引发了互联网界的老大难问题-\u0026quot;分布式事务\u0026quot;。那要如何解决这个问题呢？\r1.使用分布式事务中间件 2.使用MySQL自带的针对跨库的事务一致性方案(XA),不过性能要比单库的慢10倍左右。3.能否避免掉跨库操作(比如将用户和商品放在同一个库中)\r 跨库join的问题  分库分表后表之间的关联操作将受到限制，我们无法join位于不同分库的表，也无法join分表粒度不同的表， 结果原本一次查询能够完成的业务，可能需要多次查询才能完成。粗略的解决方法： 全局表：基础数据，所有库都拷贝一份。 字段冗余：这样有些字段就不用join去查询了。 系统层组装：分别查询出所有，然后组装起来，较复杂。\r 横向扩容的问题  当我们使用HASH取模做分表的时候,针对数据量的递增,可能需要动态的增加表,此时就需要考虑因为reHash导致数据迁移的问题。\r 结果集合并、排序的问题  因为我们是将数据分散存储到不同的库、表里的,当我们查询指定数据列表时,数据来源于不同的子库或者子表,就必然会引发结果集合并、排序的问题。如果每次查询都需要排序、合并等操作,性能肯定会受非常大的影响。走缓存可能一条路!\r使用分库分表中间件 #   Mycat  Mycat发展到现在，适用的场景已经很丰富，而且不断有新用户给出新的创新性的方案，以下是几个典型的应用场景：\r单纯的读写分离，此时配置最为简单，支持读写分离，主从切换\r分表分库，对于超过1000万的表进行分片，最大支持1000亿的单表分片\r多租户应用，每个应用一个库，但应用程序只连接Mycat，从而不改造程序本身，实现多租户化报表系统，借助于Mycat的分表能力，处理大规模报表的统计\r替代Hbase，分析大数据作为海量数据实时查询的一种简单有效方案，比如100亿条频繁查询的记录需要在3秒内查询出来结果，除了基于主键的查询，还可能存在范围查询或其他属性查询，此时Mycat可能是最简单有效的选择。\r Sharding-JDBC  当当网开发的简单易用、轻量级的中间件。\r此外还有淘宝的TDDL,支付宝的OneProxy,360的Atlas等。\r"});index.add({'id':114,'href':'/life/docs/computer_network/network_architecture/%E5%88%86%E5%B1%82%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/','title':"分层参考模型",'section':"网络体系结构",'content':"   名称 英文 作用     应用层 Application Layer 直接为用户的应用进程（例如电子邮件、文件传输和终端仿真）提供服务。如HTTP、SMTP、FTP、DNS等   表示层 Presentation Layer 把数据转换为能与接收者的系统格式兼容并适合传输的格式，即让两个系统可以交换信息   会话层 Session Layer 负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接   传输层 Transport Layer 负责端到端通讯，可靠传输，不可靠传输 ，流量控制，复用分用   网络层 Network Layer 负责选择路由最佳路径，规划IP地址(ipv4和ipv6变化只会影响网络层)，拥塞控制   数据链路层 Data Link Layer 帧的开始和结束，还有透明传输，差错校验(纠错由传输层解决)   物理层 Physical Layer 定义网络设备接口标准，电气标准(电压)，如何在物理链路上传输的更快    "});index.add({'id':115,'href':'/life/docs/operating_system/two_chapter/2_1_5/','title':"线程概念与多线程模型",'section':"第二章 进程管理 ",'content':""});index.add({'id':116,'href':'/life/docs/javadir/basedir/java-basic-x-generic/','title':"泛型机制详解",'section':"Java基础知识 ",'content':"demo #  "});index.add({'id':117,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/awb8ggwzn2/','title':"生活中常用的客套话",'section':"自信",'content':" 人际交往中往往需要客套话，客套话会使我们彼此之间的关系更加和谐。要把“谢谢你、对不起、请” 常挂嘴上。请人办事，说一声“劳驾”，送客临别，讲一句“慢走”。这些都能显示出你礼貌周到、谈吐文雅。擅长外交的人们像精通交通规则一般精于客套，得体的客套话同我们美好的仪表一样，是人际交往的推荐书。以下是总结出的一些日常生活中常用的客套话\n 初次见面说“久仰”，好久不见说“久违”。\n请人评论说“指教”，求人原谅说“包涵”。\n求人帮忙说“劳驾”，求给方便说“借光”。\n麻烦别人说“打扰”，向人祝贺说“恭喜”。\n请人改稿称“斧正”，请人指点用“赐教”。\n求人解答用“请问”，赞人见解用“高见”。\n看望别人用“拜访”，托人办事用“拜托”。\n宾客来到用“光临”，送客出门称“慢走”。\n招待远客称“洗尘”，陪伴朋有用“奉陪”。\n请人勿送用“留步”，欢迎购买叫“光顾”。\n与客作别称“再见”，归还原物叫“奉还”。\n对方来信叫“慧书”，老人年龄叫“高寿”。\n得体的客套话会温暖对方的心窝，也能使你的语言更加充满魅力。\n"});index.add({'id':118,'href':'/life/docs/javadir/thread/reentrantlock/','title':"ReentrantLock",'section':"多线程与并发 ",'content':"ReentrantLock #  ReentrantLock 介绍 #    ReentrantLock是Java中常用的锁，属于乐观锁类型，多线程并发情况下。能保证共享数据安全性，线程间有序性\n  ReentrantLock通过原子操作和阻塞实现锁原理，一般使用lock获取锁，unlock释放锁，\n  下面说一下锁的基本使用和底层基本实现原理，lock和unlock底层\n  lock的时候可能被其他线程获得所，那么此线程会阻塞自己，关键原理底层用到Unsafe类的API: CAS和park\n  ReentrantLock是一个可重入的互斥锁，又被称为“独占锁”\n  简单模拟 ReentrantLock #   不安全的例子  public class ReentrantLockDemo1 { public static void main(String[] args) { new Thread(() -\u0026gt; { drawMoney() ; },\u0026#34;线程1\u0026#34;).start(); new Thread(() -\u0026gt; { drawMoney() ; },\u0026#34;线程2\u0026#34;).start(); } private static void drawMoney(){ System.out.println(Thread.currentThread().getName()+\u0026#34;......\u0026#34;+\u0026#34;正在取钱!\u0026#34;); try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\u0026#34;取钱完毕!\u0026#34;); } /* * 线程1......正在取钱! 线程2......正在取钱! 取钱完毕! 取钱完毕! 希望线程1取钱的时候线程必须等取完才能继续取钱 * */ }  改造如下  public class ReentrantLockDemo1 { public static void main(String[] args) { ReentrantLockService reentrantLockService = new ReentrantLockService() ; new Thread(() -\u0026gt; { reentrantLockService.lock(); drawMoney(); reentrantLockService.unLock(); }, \u0026#34;线程1\u0026#34;).start(); new Thread(() -\u0026gt; { reentrantLockService.lock(); drawMoney(); reentrantLockService.unLock(); }, \u0026#34;线程2\u0026#34;).start(); } private static void drawMoney() { System.out.println(Thread.currentThread().getName() + \u0026#34;......\u0026#34; + \u0026#34;正在取钱!\u0026#34;); try { Thread.sleep(300); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\u0026#34;取钱完毕!\u0026#34;); } } class ReentrantLockService { private final static Unsafe unsafe = UnsafeAccessor.getUnsafe(); private volatile int value = 0; //内存偏移量地址(相对地址)  private static long valueOffset = 0l; static { try { valueOffset = unsafe.objectFieldOffset(ReentrantLockService.class.getDeclaredField(\u0026#34;value\u0026#34;)); } catch (NoSuchFieldException e) { e.printStackTrace(); } } public void lock() { while (!unsafe.compareAndSwapInt(this, valueOffset, 0, 1)) { System.out.println(\u0026#34;正在加锁过程中...\u0026#34;); } System.out.println(\u0026#34;加锁完成...\u0026#34;); } public void unLock() { value = 0; System.out.println(\u0026#34;解锁完成...\u0026#34;); } } final class UnsafeAccessor { private static Unsafe unsafe; //Unsafe提供的getUnsafe()方法只能被根类加载器加载的类所调用，也就是jdk内部的类。我们可以通过反射来获取Unsafe对象  static { try { //这个名字是 theUnsafe 里面的不要随便写  Field unsafeFile = Unsafe.class.getDeclaredField(\u0026#34;theUnsafe\u0026#34;); unsafeFile.setAccessible(true); //因为是静态属性  unsafe = (Unsafe) unsafeFile.get(null); } catch (Exception e) { } } public static Unsafe getUnsafe() { return unsafe; } }  使用ReentrantLock 代替我写的模拟类  import java.util.concurrent.locks.ReentrantLock; public class ReentrantLockDemo1 { public static void main(String[] args) { ReentrantLock reentrantLockService = new ReentrantLock() ; new Thread(() -\u0026gt; { reentrantLockService.lock(); drawMoney(); reentrantLockService.unlock(); }, \u0026#34;线程1\u0026#34;).start(); new Thread(() -\u0026gt; { reentrantLockService.lock(); drawMoney(); reentrantLockService.unlock(); }, \u0026#34;线程2\u0026#34;).start(); } private static void drawMoney() { System.out.println(Thread.currentThread().getName() + \u0026#34;......\u0026#34; + \u0026#34;正在取钱!\u0026#34;); try { Thread.sleep(300); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\u0026#34;取钱完毕!\u0026#34;); } }   模拟类虽然简单但是 模拟了关键细节 jdk其实实现并发安全都是用一些能够调用操作系统提供的关键方法来实现的 比如c++也不能实现并发安全 也是调用能够操作操作系统的一些特殊方法来间接实现的\n  本次是 java -\u0026gt; jni -\u0026gt; c++ -\u0026gt; 操作系统提供的api-\u0026gt; 具体指令集\n  使用 #    java.util.concurrent.locks.ReentrantLock类\n  在多线程环境下使用，创建锁对象，调用lock()获取锁开始处理逻辑，处理完unlock()释放锁。注意使用的时候lock和unlock必须成对出现，不然可能出现死锁或者严重堵塞的情况\n  unlock #  //创建锁对象 ReentrantLock lock = new ReentrantLock(); lock.lock(); //获取锁（锁定） System.out.println(\u0026#34;一段需要上锁的代码\u0026#34;) lock.unlock(); //锁释放  执行完代码后，释放锁，让其他线程去获取，需要注意的是，多个线程使用的锁对象必须是同一个   什么情况需要上锁，就是在多线程不安全的情况下，多个线程操作同一个对象。如多个线程同时操作一个队列，offer()添加对象，两个线程同时offer，因为不是原子操作，很可能一个线程添加成功，另一个线程添加失败，延伸到一些业务中是要杜绝的问题。 可以用锁解决问题，我们可以定义一个队列同一时间只能被一个拿到锁的线程操作，即保证offer这种非原子操作完成后，释放锁，再让其他线程拿到锁后，才能offer，保证有序的offer，不会丢失信息\n 原理 #   ReentrantLock主要用到unsafe的CAS和park两个功能实现锁（CAS + park ）   多个线程同时操作一个数N，使用原子（CAS）操作，原子操作能保证同一时间只能被一个线程修改，而修改数N成功后，返回true，其他线程修改失败，返回false， 这个原子操作可以定义线程是否拿到锁，返回true代表获取锁，返回false代表为没有拿到锁。 拿到锁的线程，自然是继续执行后续逻辑代码，而没有拿到锁的线程，则调用park，将线程（自己）阻塞。 线程阻塞需要其他线程唤醒，ReentrantLock中用到了链表用于存放等待或者阻塞的线程，每次线程阻塞，先将自己的线程信息放入链表尾部，再阻塞自己；之后需要拿到锁的线程，在调用unlock 释放锁时，从链表中获取阻塞线程，调用unpark 唤醒指定线程\n Unsafe #    sun.misc.Unsafe是关键类，提供大量偏底层的API 包括CAS park\n  sun.misc.Unsafe 此类在openjdk中可以查看\n  CAS 原子操作 #   compare and swapz(CAS)比较并交换，是原子性操作， 原理：当修改一个(内存中的)变量o的值N的时候，首先有个期望值expected，和一个更新值x，先比较N是否等于expected，等于，那么更新内存中的值为x值，否则不更新。  public final native boolean compareAndSwapInt(Object o, long offset, int expected, int x);  这里offset据了解，是对象的成员变量在内存中的偏移地址，即底层一个对象object存放在内存中，读取的地址是0x2110，此对象的一个成员变量state的值也在内存中，但内存地址肯定不是0x2110  java中的CAS使用 #   java.util.concurrent.locks.AbstractQueuedSynchronizer 类  private static final Unsafe unsafe = Unsafe.getUnsafe(); private static final long stateOffset; static { try { stateOffset = unsafe.objectFieldOffset (AbstractQueuedSynchronizer.class.getDeclaredField(\u0026#34;state\u0026#34;)); //获取成员变量state在内存中的偏移量  } catch (Exception ex) { throw new Error(ex); } } protected final boolean compareAndSetState(int expect, int update) { // See below for intrinsics setup to support this  return unsafe.compareAndSwapInt(this, stateOffset, expect, update); }  在Java中，compareAndSetState这个操作如果更新成功，返回true,失败返回false，通过这个机制，可以定义锁（乐观锁）。 如三个线程A，B，C，在目标值为0的情况下，同时执行compareAndSetState(0,1) 去修改它期望值是0，更新值是1，因为是原子操作，在第一个线程操作成功之后目标值变为1，返回true 所以另外两个线程就因为期望值为0不等于1，返回false。我们可以理解为，返回true的线程拿到了锁。 最终调用的Java类是sun.misc.Unsafe  park 阻塞 #   LockSupport中的park和unpark实际上依旧是使用的unsafe中的park和unpark\n  Java中可以通过unsafe.park()去阻塞（停止）一个线程，也可以通过unsafe.unpark()让一个阻塞线程恢复继续执行  unsafe.park() #   阻塞(某种意义上停止)当前线程  public native void park(boolean isAbsolute, long time); unsafe.unpark() #   取消阻塞(唤醒)线程  public native void unpark(Object thread); park与interrupt的区别 #   interrupt是Thread类的的API，park是Unsafe类的API，两者是有区别的。 测试了解，Thread.currentThread().interrupt(),线程会继续运行，而Unsafe.park(Thread.currentThread())就是直接阻塞线程，不继续运行代码  获取锁 #    线程cas操作失败，可以park阻塞自己，让其他拥有锁的线程在unlock的时候释放自己，达到锁的效果\n  java.util.concurrent.locks.ReentrantLock的lock方法是\n  public void lock() { sync.lock(); }  而sync的实现类其中一个是java.util.concurrent.locks.ReentrantLock.NonfairSync 不公平锁，它的逻辑比较直接  /** NonfairSync */ final void lock() { if (compareAndSetState(0, 1))//cas操作，如果true 则表示操作成功，获取锁  setExclusiveOwnerThread(Thread.currentThread()); //设置获取锁拥有者为当前线程  else acquire(1);//获取锁失败，锁住线程(自己) } 获取失败后阻塞线程 #   如果获取锁失败，会再尝试一次，失败后，将线程（自己）阻塞  public final void acquire(int arg) { if (!tryAcquire(arg) \u0026amp;\u0026amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) selfInterrupt(); } protected final boolean tryAcquire(int acquires) { return nonfairTryAcquire(acquires); } final boolean nonfairTryAcquire(int acquires) { final Thread current = Thread.currentThread(); int c = getState(); if (c == 0) { //如果期望值为0，内存值也为0，再次尝试获取锁（此时其他线程也可能尝试获取锁）  if (compareAndSetState(0, acquires)) { setExclusiveOwnerThread(current); //第二次获取成功，放回true  return true; } } else if (current == getExclusiveOwnerThread()) { int nextc = c + acquires; if (nextc \u0026lt; 0) // overflow  throw new Error(\u0026#34;Maximum lock count exceeded\u0026#34;); setState(nextc); return true; } return false; //没有获取到锁，返回false，则 !tryAcquire(arg) 为true，执行acquireQueued(addWaiter(Node.EXCLUSIVE), arg)  }  获取锁失败，线程会进入循环，acquireQueued 方法中for是个无限循环，除非获取锁成功后，才会return。  //获取锁失败后，准备阻塞线程（自己） //阻塞之前，添加节点存放到链表，其他线程可以通过这个链表唤醒此线程 private Node addWaiter(Node mode) { Node node = new Node(Thread.currentThread(), mode); // Try the fast path of enq; backup to full enq on failure  Node pred = tail; if (pred != null) { node.prev = pred; if (compareAndSetTail(pred, node)) {//cas操作  pred.next = node; return node; } } enq(node); return node; } // 在此方法直到获取锁成功才会跳出循环 final boolean acquireQueued(final Node node, int arg) { boolean failed = true; try { boolean interrupted = false; for (;;) { final Node p = node.predecessor(); if (p == head \u0026amp;\u0026amp; tryAcquire(arg)) { setHead(node); p.next = null; // help GC  failed = false; return interrupted; //获取锁成功之后才会return跳出此方法  } if (shouldParkAfterFailedAcquire(p, node) \u0026amp;\u0026amp; //如果满足阻塞条件  parkAndCheckInterrupt()) interrupted = true; } } finally { if (failed) cancelAcquire(node); } } private final boolean parkAndCheckInterrupt() { LockSupport.park(this);//停止线程（自己）  return Thread.interrupted(); } 释放锁 #   一个线程拿到锁之后，执行完关键代码，必须unlock释放锁的，否则其他线程永远拿不到锁  public void unlock() { sync.release(1); } public final boolean release(int arg) { if (tryRelease(arg)) { Node h = head; if (h != null \u0026amp;\u0026amp; h.waitStatus != 0) unparkSuccessor(h); return true; } return false; } //java.util.concurrent.locks.ReentrantLock.Sync 的tryRelease  protected final boolean tryRelease(int releases) { int c = getState() - releases; //这里一般是 1 - 1 = 0  if (Thread.currentThread() != getExclusiveOwnerThread()) //只能是锁的拥有者释放锁  throw new IllegalMonitorStateException(); boolean free = false; if (c == 0) { free = true; setExclusiveOwnerThread(null); } setState(c); //设置state为0，相当于释放锁，让其他线程compareAndSetState(0, 1)可能成功 \treturn free; } protected final void setState(int newState) { state = newState; //没有cas操作  }  setState不做cas操作是因为，只有拥有锁的线程才调用unlock，不存才并发混乱问题 其他线程没拿到锁不会设值成功，其他线程在此线程设置state为0之前，compareAndSetState(0, 1)都会失败，拿不到锁，此线程设置state为0之后，其他线程compareAndSetState(0, 1)才有可能成功，返回true从而拿到锁  释放线程 #   线程在获取锁失败后，有可能阻塞线程（自己），在阻塞之前把阻塞线程信息放入链表的 释放锁之后，线程会尝试通过链表释放其他线程（一个），让一个阻塞线程恢复运行  private void unparkSuccessor(Node node) { int ws = node.waitStatus; if (ws \u0026lt; 0) compareAndSetWaitStatus(node, ws, 0); Node s = node.next; if (s == null || s.waitStatus \u0026gt; 0) { s = null; for (Node t = tail; t != null \u0026amp;\u0026amp; t != node; t = t.prev) // 循环获取前面的节点  if (t.waitStatus \u0026lt;= 0) s = t; //循环，找到链表最前面需要被唤醒的线程  } if (s != null) LockSupport.unpark(s.thread); //唤醒（释放）被阻塞的线程  } 阻塞线程被取消阻塞后如何拿到锁(ReentrantLock中) #   有时候线程被中断后，唤醒继续执行后面的代码， 线程没有拿到锁之后主动阻塞自己的，但所还没拿到，被唤醒之后怎么去尝试重新获取锁呢？ 里面有一个for循环  final void lock() { if (compareAndSetState(0, 1)) setExclusiveOwnerThread(Thread.currentThread());//拿到锁  else acquire(1); //没有拿到锁  } // 上锁失败，会添加一个节点，节点包含线程信息，将此节点放入队列 public final void acquire(int arg) { if (!tryAcquire(arg) \u0026amp;\u0026amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) selfInterrupt(); } // 存好节点后，将线程（自己）中断，等其他线程唤醒（自己） final boolean acquireQueued(final Node node, int arg) { boolean failed = true; try { boolean interrupted = false; for (;;) {//循环 被唤醒后线程还是在此处循环  final Node p = node.predecessor(); if (p == head \u0026amp;\u0026amp; tryAcquire(arg)) {//尝试获取锁  setHead(node); p.next = null; // help GC  failed = false; return interrupted; //如果拿到锁了，才会return  } if (shouldParkAfterFailedAcquire(p, node) \u0026amp;\u0026amp; parkAndCheckInterrupt()) //没拿到锁时，主动中断Thread.currentThread()  interrupted = true; } } finally { if (failed) cancelAcquire(node); } }   被唤醒后继续执行compareAndSetState(0, 1)返回false没拿到锁，则继续循环或阻塞\n  compareAndSetState(0, 1) 这个操作是获取锁的关键\n  "});index.add({'id':119,'href':'/life/docs/javadir/thread/tool/future_callable/','title':"Future 和 callable",'section':"并发工具 ",'content':"Future #  callable #  "});index.add({'id':120,'href':'/life/docs/%E8%84%9A%E6%9C%AC/webpack/','title':"webpack ",'section':"脚本",'content':"（十五）webpack #  15.1\twebpack起步 #  15.1.1\t什么是webpack #  webpack是一个JavaScript应用的静态模块打包工具。\n从这句话中有两个要点，模块和打包需要关注。grunt/gulp都可以打包，那有什么区别。\n 模块化\n webpack可以支持前端模块化的一些方案，例如AMD、CMD、CommonJS、ES6。可以处理模块之间的依赖关系。不仅仅是js文件可以模块化，图片、css、json文件等等都可以模块化。\n 打包\n webpack可以将模块资源打包成一个或者多个包，并且在打包过程中可以处理资源，例如压缩图片，将scss转成css，ES6语法转成ES5语法，将TypeScript转成JavaScript等等操作。grunt/gulp也可以打包。\n和grunt/glup的对比\n grunt/glup的核心是Task  我们可以配置一系列的task，并且定义task要处理的事务（例如ES6/TS转化，图片压缩，scss转css） 之后可以让grunt/glup来执行依次这些任务，让整个流程自动化 所以grunt/glup也被称为前端自动化任务管理工具   看一个gulp例子  task将src下的js文件转化为ES5语法 并输入到dist文件夹中     什么时候使用grunt/gulp呢？  如果工程依赖简单，甚至没有模块化 只需要进行简单的合并/压缩 如果模块复杂，相互依赖性强，我们需要使用webpack   grunt/glup和webpack区别  grunt/glup更加强调的是前端自动化流程，模块化不是其核心 webpack加强模块化开发管理，而文件压缩/合并/预处理等功能，是附带功能    webpack就是前端模块化打包工具\n15.1.2\twebpack的安装 #   webpack依赖node环境。 node环境依赖众多包，所以需要npm，npm（node packages manager）node包管理工具 nvm是node管理工具可以自由切换node环境版本  全局安装webpack\nnpm install webpack -g //指定版本安装 npm install webpack@3.6.0 -g  由于vue-cli2基于webpack3.6.0 如果要用vue-cli2的可以使用npm install webpack@3.6.0 -g\n 局部安装\nnpm install webpack --save-dev   在终端执行webpack命令，使用的是全局安装。\n  当在package.json中定义了scripts时，其中包括了webpack命令，那么使用的是局部webpack\n  15.1.3 起步 #  新建一个文件夹，新建如下结构的目录：\n目录结构\n如图所示在src文件夹（源码文件夹），dist（要发布的文件，已经处理过的）。\n1.新建入口js文件main.js和mathUtils.js，main.js依赖mathUtils.js。\n mathUtils\n //1.新建mathUtils.js，用CommonJs规范导出 function add(num1,num2) { return num1+num2 } function mul(num1,num2) { return num1*num2 } module.exports = { add,mul }  main.js\n //2.新建入口js文件main.js 导入mathUtil.js文件，并调用 const {add,mul} = require(\u0026#34;./mathUtils.js\u0026#34;) console.log(add(10,20)) console.log(mul(10,10)) 2.使用webpack命令打包js文件\n 注意：webpack3使用webpack ./src/main.js ./dist/bundle.js\nwebpack4，webpack打包在01-webpack的起步目录下打开终端 webpack ./scr/main.js -o ./dist/bundle.js\n 我全局安装的是webpack@3.6.0，所以在根路径执行\n如图显示打包成功，查看dist文件夹下自动生成了一个bundle.js。\n bundle.js\n //2.新建入口js文件main.js 导入mathUtil.js文件，并调用 const {add,mul} = __webpack_require__(1) console.log(add(10,20)) console.log(mul(10,10)) /***/ }), /* 1 */ /***/ (function(module, exports) { //1.新建mathUtils.js，用CommonJs规范导出 function add(num1,num2) { return num1+num2 } function mul(num1,num2) { return num1*num2 } module.exports = { add,mul } 内容很多，其中包含mathUtils.js和main.js 内容，打包成功。\n3.新建一个index.html文件，导入bundle.js\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;webpack入门\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- 3.新建一个indexhtml文件并使用 webpack ./src/main.js ./dist/bundle.js webpack3使用此命令 --\u0026gt; \u0026lt;!-- 4.引用webpack打包后的js文件 --\u0026gt; \u0026lt;script src=\u0026#34;./dist/bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 如图测试，打印成功。\n4.新建一个info.js使用ES6的语法导出\n info.js\n //es6语法导出 export default { name:\u0026#39;zzz\u0026#39;, age:24, }  main.js导入info.js\n //使用es6语法导入 import info from \u0026#39;./info.js\u0026#39; console.log(info.name) console.log(info.age)  再次使用webpack ./src/main.js ./dist/bundle.js，重新打包\n 5.打开index.html测试\n 总结\n webpack可以帮我们打包js文件，只要指定入口文件（main.js）和输出的文件（bundle.js），不管是es6的模块化还是CommonJs的模块化，webpack都可以帮我们打包，还可以帮我们处理模块之间的依赖。\n15.2\twebpack的配置 #  15.2.1\t基本配置 #  如果每次都用webpack命令自己写入口文件和出口文件会很麻烦，此时我们可以使用webpack的配置。\n 准备工作：复制01-webpack的起步文件夹并粘贴在同级目录，改名为02-webpack的配置。\n 1.在根目录（02-webpack的配置）下新建一个webpack.config.js\n webpack.config.js\n //1.导入node的path包获取绝对路径，需要使用npm init初始化node包 const path = require(\u0026#39;path\u0026#39;) //2.配置webpack的入口和出口 module.exports = { entry: \u0026#39;./src/main.js\u0026#39;,//入口文件  output:{ path: path.resolve(__dirname, \u0026#39;dist\u0026#39;),//动态获取打包后的文件路径,path.resolve拼接路径  filename: \u0026#39;bundle.js\u0026#39;//打包后的文件名  } } 2.在02-webpack的配置根目录执行npm init初始化node包，因为配置文件中用到了node的path包\nnpm init 初始化\n3.使用webpack打包\nwebkpack 这样入口和出口的配置已经配置完成了，只需要使用webpack命令就行了。\n4.使用自定义脚本（script）启动\n一般来是我们使用的是\nnpm run dev//开发环境 npm run build//生产环境 在package.json中的script中加上\n\u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; 使用npm run build\nnpm run build 15.2.2\t全局安装和局部安装 #  webpack有全局安装和局部安装。\n 局部安装\n 使用npm run build执行webpack会先从本地查找是否有webpack，如果没有会使用全局的。\n此时本地需要安装webapck\nnpm install webpack@3.6.0 --save-dev package.json中自动加上开发时的依赖devDependencies\n再次使用npm run build，使用的是本地webpack版本。\n15.3\twebpack的loader #  15.3.1\t什么是loader #  loader是webpack中一个非常核心的概念。\nwebpack可以将js、图片、css处理打包，但是对于webpack本身是不能处理css、图片、ES6转ES5等。\n此时就需要webpack的扩展，使用对应的loader就可以。\nloader使用\n 步骤一：通过npm安装需要使用的loader\n  步骤二：通过webpack.config.js中的modules关键字下进行配置\n 大部分loader可以在webpack的官网找到对应的配置。\n15.3.2\tCSS文件处理 #   准备工作：复制02-webpack的配置到根目录，改名字为03-webpack的loader\n 1.将除了入口文件（main.js）所有js文件放在js文件夹，新建一个css文件夹，新建一个normal.css文件\n normal.css\n body{ background-color: red; } 2.main.js导入依赖\n//4.依赖css文件 require(\u0026#39;./css/normal.css\u0026#39;) 此时如果直接进行打包npm run build。\n 提示信息很清楚，打包到css文件时报错，提示我们可能需要一个loader来处理css文件。\n 3.安装css-loader\nnpm install --save-dev css-loader 4.使用css-loader\nmodule.exports = { module: { rules: [ { test: /\\.css$/,//正则表达式匹配css文件  //css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader  use: [{ loader: \u0026#39;css-loader\u0026#39; }]//使用loader  } ] } }  执行npm run build，提示打包成功，但是背景色并没有变红色，是因为css-loader只负责加载css文件，不负责解析，如果要将样式解析到dom元素中需要使用style-loader。\n 5.安装使用style-loader\nnpm install --save-dev style-loader module: { rules: [ { test: /\\.css$/,//正则表达式匹配css文件  //css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader  use: [{ loader: \u0026#39;style-loader\u0026#39; }, { loader: \u0026#39;css-loader\u0026#39; }]//使用loader  } ] }  webpack使用多个loader是从右往左解析的，所以需要将css-loader放在style-loader右边，先加载后解析。\n 此时样式成加载解析到DOM元素上。\n15.3.3\tless文件处理 #  1.在css文件夹中新增一个less文件\n special.less\n @fontSize:50px;//定义变量字体大小\r@fontColor:orange;//定义变量字体颜色\rbody{\rfont-size: @fontSize;\rcolor: @fontColor;\r}\r2.main.js中导入less文件模块\n//5.依赖less文件 require(\u0026#39;./css/special.less\u0026#39;) //6.向页面写入一些内容 document.writeln(\u0026#34;hello,zzzz!\u0026#34;) 3.安装使用less-loader\nnpm install --save-dev less-loader less 在webpack.config.js中使用less-loader\nmodule: { rules: [ { test: /\\.less$/,//正则表达式匹配css文件  //css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader  use: [{ loader: \u0026#39;style-loader\u0026#39; }, { loader: \u0026#39;css-loader\u0026#39; }, { loader: \u0026#39;less-loader\u0026#39;//less文件loader  }]//使用loader  } ] } 4.执行npm run build\nless文件生效了，字体是orange，大小为50px。\n15.3.4\t图片文件的处理 #   准备工作，准备两张图片，图片大小为一张8KB以下（实际大小为5KB，名称为small.jpg），一张大于8KB（实际大小为10KB，名称为big.jpg），新建一个img文件夹将两张图片放入。\n 1.修改normal.css样式，先使用小图片作为背景\nbody{\r/* background-color: red; */\rbackground: url(\u0026quot;../img/small.jpg\u0026quot;);\r}\r此时如果直接使用npm run build 直接打包会报错，因为css文件中引用了图片url，此时需要使用url-loader。\n2.安装使用url-loader处理图片\nurl-loader像 file loader 一样工作，但如果文件小于限制，可以返回 data URL 。\nnpm install --save-dev url-loader 配置\n{ test: /\\.(png|jpg|gif)$/,//匹配png/jpg/gif格式图片  use: [ { loader: \u0026#39;url-loader\u0026#39;, options: { limit: 8192//图片小于8KB时候将图片转成base64字符串，大于8KB需要使用file-loader  } } ] } 3.打包\n使用npm run build打包后，打开index.html。\n 小于limit大小的图片地址被编译成base64格式的字符串。\n 此时修改css文件，使用big.jpg做背景。\nbody{ /* background-color: red; */ /* background: url(\u0026#34;../img/small.jpg\u0026#34;); */ background: url(\u0026#34;../img/big.jpg\u0026#34;); } 再次打包，报错，提示未找到file-loader模块。\n 因为大于limit的图片需要file-loader来打包。\n 4.安装使用file-loader处理图片\nnpm install --save-dev file-loader 不需要配置，因为url-loader超过limit的图片会直接使用file-loader。\n再次打包，没有报错，打包成功，但是图片未显示。\n 1.当加载的图片大小小于limit，使用base64将图片编译成字符串\n2.当加载的图片大小大于limit，使用file-loader模块直接将big.jpg直接打包到dist文件家，文件名会使用hash值防止重复。\n3.此时由于文件路径不对所以导致没有加载到图片\n 5.如何使用file-loader，指定路径\n修改output属性\noutput:{ path: path.resolve(__dirname, \u0026#39;dist\u0026#39;),//动态获取打包后的文件路径,path.resolve拼接路径  filename: \u0026#39;bundle.js\u0026#39;,//打包后的文件名  publicPath: \u0026#39;dist/\u0026#39; }, 此时打包，图片正常显示\n 注意：一般来说，index.html最终也会打包到dist文件夹下，所以，并不需要配置publicPath，如何打包index.html请看webpack处理.vue文件。\n  file-loader打包后，使用hash值做文件名太长，此时可以使用options的一些配置。\n options: { limit: 8192,//图片小于8KB时候将图片转成base64字符串，大于8KB需要使用file-loader  name: \u0026#39;img/[name].[hash:8].[ext]\u0026#39;//img表示文件父目录，[name]表示文件名,[hash:8]表示将hash截取8位[ext]表示后缀  }  修改options，加上name属性，其中img表示文件父目录，[name]表示文件名,[hash:8]表示将hash截取8位[ext]表示后缀\n 再次打包\n15.3.5\tES6语法处理 #  webpack打包时候ES6语法没有打包成ES5语法，如果需要将ES6打包成ES5语法，那么就需要使用babel。直接使用babel对应的loader就可以了。\n安装\nnpm install --save-dev babel-loader@7 babel-core babel-preset-es2015 配置\n{ test: /\\.js$/, //排除node模块的js和bower的js  exclude: /(node_modules|bower_components)/, use: { loader: \u0026#39;babel-loader\u0026#39;, options: { //如果要使用@babel/preset-env这里需要在根目录新建一个babel的文件  // presets: [\u0026#39;@babel/preset-env\u0026#39;]  //这里直接使用指定  presets: [\u0026#39;es2015\u0026#39;] } } }  1.如果要使用@babel/preset-env这里需要在根目录新建一个babel的文件\n2.exclude排除不需要打包的文件\n 15.4\twebpack的vue #  15.4.1\t简单安装使用vue #  如果需要使用vue，必须使用npm先安装vue。\nnpm install vue --save\t使用vue简单开发。\n 准备工作\n 复制03-webpack的loader到同级目录，改名为04-webpack的vue，并在04-webpack的vue根目录执行npm install vue --save\t，下载安装vue。\n1.在入口文件main.js导入已安装的vue，并在index.html声明要挂载的div。在main.js加入以下代码。\n//6.使用vue开发 import Vue from \u0026#39;vue\u0026#39; const app = new Vue({ el: \u0026#34;#app\u0026#34;, data: { message: \u0026#34;hello webpack and vue\u0026#34; } }) 修改index.html代码，添加\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;{{message}}\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; 2.再次打包npm run build后打开index.html\n发现message并没有正确显示，打开console发现vue报错。错误提示我们，正在使用runtime-only构建，不能将template模板编译。\n 1.runtime-only模式，代码中不可以有任何template，因为无法解析。\n2.runtime-complier模式，代码中可以有template，因为complier可以用于编译template。\n 在webpack中配置，设置指定使用runtime-complier模式。\n webpack.config.js\n resolve: { // alias:别名  alias: { //指定vue使用vue.esm.js  \u0026#39;vue$\u0026#39;:\u0026#39;vue/dist/vue.esm.js\u0026#39; } } 3.重新打包，显示正确\n15.4.2\t如何分步抽取实现vue模块 #   创建vue的template和el关系\nel表示挂载DOM的挂载点\ntemplate里面的html将替换挂载点\n 一般我们使用vue会开发单页面富应用(single page application)，只有一个index.html，而且index.html都是简单结构。\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;webpack入门\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./dist/bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1.第一次抽取，使用template替换\u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;。\n 修改mian.js的vue相关代码\n //6.使用vue开发 import Vue from \u0026#39;vue\u0026#39; new Vue({ el: \u0026#34;#app\u0026#34;, template:` \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;{{message}}\u0026lt;/h2\u0026gt; \u0026lt;button @click=\u0026#39;btnClick\u0026#39;\u0026gt;这是一个按钮\u0026lt;/button\u0026gt; \u0026lt;h2\u0026gt;{{name}}\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; `, data: { message: \u0026#34;hello webpack and vue\u0026#34;, name: \u0026#39;zzzz\u0026#39; }, methods: { btnClick(){ console.log(\u0026#34;按钮被点击了\u0026#34;) } }, }) 使用template模板替换挂载的id为app的div元素，此时不需要修改html代码了，只需要写template。\n再次打包，显示成功。\n2.第二次抽取，使用组件化思想替换template\n考虑第一次抽取，写在template中，main.js的vue代码太冗余。\n 修改main.js的代码\n //1.定义一个组件 const App = { template: ` \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;{{message}}\u0026lt;/h2\u0026gt; \u0026lt;button @click=\u0026#39;btnClick\u0026#39;\u0026gt;这是一个按钮\u0026lt;/button\u0026gt; \u0026lt;h2\u0026gt;{{name}}\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; `, data() { return { message: \u0026#34;hello webpack and vue\u0026#34;, name: \u0026#39;zzzz\u0026#39; } }, methods: { btnClick(){ console.log(\u0026#34;按钮被点击了\u0026#34;) } }, }  修改main.js，vue实例中注册组件，并使用组件\n new Vue({ el: \u0026#34;#app\u0026#34;, //使用组件  template: \u0026#39;\u0026lt;App/\u0026gt;\u0026#39;, components: { //注册局部组件  App } }) 再次使用npm run build打包，打包成功，显示和使用template替换div一样。\n3.第三次抽取组件对象，封装到新的js文件，并使用模块化导入main.js\n此处我的vue-loader是15.7.2。\n将其修改为13.0.0\n\u0026#34;vue-loader\u0026#34;: \u0026#34;^13.0.0\u0026#34; 重新安装版本\nnpm install 再次打包，打包成功，样式生效了。\n6.组件化开发\n我们使用app.vue分离了模板、行为、样式，但是不可能所有的模板和样式都在一个vue文件内，所以要用组件化。\n在vue文件夹下新建一个Cpn.vue文件\n Cpn.vue组件\n \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2 class=\u0026#39;title\u0026#39;\u0026gt;{{name}}\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script type=\u0026#34;text/ecmascript-6\u0026#34;\u0026gt; export default { name: \u0026#34;Cpn\u0026#34;, data() { return { name: \u0026#34;组件名字是Cpn\u0026#34; }; } }; \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .title { color: red; } \u0026lt;/style\u0026gt; 将Cpn.vue组件导入到App.vue\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2 class=\u0026#39;title\u0026#39;\u0026gt;{{message}}\u0026lt;/h2\u0026gt; \u0026lt;button @click=\u0026#34;btnClick\u0026#34;\u0026gt;按钮\u0026lt;/button\u0026gt; \u0026lt;h2\u0026gt;{{name}}\u0026lt;/h2\u0026gt; \u0026lt;!-- 使用Cpn组件 --\u0026gt; \u0026lt;Cpn/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script type=\u0026#34;text/ecmascript-6\u0026#34;\u0026gt; //导入Cpn组件 import Cpn from \u0026#39;./Cpn.vue\u0026#39; export default { name: \u0026#34;App\u0026#34;, data() { return { message: \u0026#34;hello webpack\u0026#34;, name: \u0026#34;zzz\u0026#34; }; }, methods: { btnclick() {} }, components: { Cpn//注册Cpn组件  } }; \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .title { color: green; } \u0026lt;/style\u0026gt; 再次打包，打开index.html，cpn组件的内容显示\n基于此，一个vue文件可以依赖导入很多vue文件，组成一个单页面富应用。\n 如果你在使用ES6语法导入模块时候想要简写的时候，例如这样省略.vue后缀\n import Cpn from \u0026#39;./Cpn\u0026#39; 可以在webpack.config.js中配置：\nresolve: { //导入模块简写省略指定后缀  extensions: [\u0026#39;.js\u0026#39;, \u0026#39;.css\u0026#39;, \u0026#39;.vue\u0026#39;], // alias:别名  alias: { //指定vue使用vue.esm.js  \u0026#39;vue$\u0026#39;:\u0026#39;vue/dist/vue.esm.js\u0026#39; } } 15.5\twebpack的plugin #  plugin插件用于扩展webpack的功能的扩展，例如打包时候优化，文件压缩。\nloader和plugin的区别\nloader主要用于转化某些类型的模块，是一个转化器。\nplugin主要是对webpack的本身的扩展，是一个扩展器。\nplugin的使用过程\n步骤一：通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要在安装)\n步骤二：在webpack.config.js中的plugins中配置插件。\n 准备工作\n复制04-webpack的vue到同级目录，并改名为05-webpack的plugin\n 15.5.1\t添加版权的Plugin #  BannerPlugin插件是属于webpack自带的插件可以添加版权信息。\n自带的插件无需安装，直接配置。\n先获取webpack的对象，在配置BannerPlugin插件。\n//获取webpack const webpack = require(\u0026#39;webpack\u0026#39;) //2.配置plugins module.exports = { ... plugins:[ new webpack.BannerPlugin(\u0026#39;最终解释权归zz所有\u0026#39;) ] } 打包后，查看bundle.js，结果如图所示：\n多了一行我们自定义的版权声明注释。\n15.5.2\t打包html的plugin #  之前我们的index.html文件都是存放在根目录下的。\n在正式发布项目的时候发布的是dist文件夹的内容，但是dist文件夹是没有index.html文件的，那么打包就没有意义了。\n所以我们需要将index.html也打包到dist文件夹中，这就需要使用**HtmlWebpackPlugin**插件了。\n HtmlWebpackPlugin：\n自动生成一个index.html文件（指定模板）\n将打包的js文件，自动同script标签插入到body中\n 首先需要安装**HtmlWebpackPlugin**插件\nnpm install html-webpack-plugin --save-dev\t使用插件，修改webpack.config.js文件中的plugins部分\n//获取htmlWebpackPlugin对象 const htmlWbepackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;) //2.配置plugins module.exports = { ... plugins:[ new webpack.BannerPlugin(\u0026#39;最终解释权归zz所有\u0026#39;), new htmlWbepackPlugin({ template: \u0026#39;index.html\u0026#39; }) ] }  1.template表示根据哪个模板来生成index.html\n2.需要删除output中添加的publicPath属性，否则插入的script标签的src可能有误\n 再次打包，打开dist文件夹，多了一个index.html\n自动加入了script引入了bundle.js。\n15.5.3\t压缩打包代码插件 #  uglifyjs-webpack-plugin是第三方插件，如果是vuecli2需要指定版本1.1.1。\n安装：\nnpm install uglifyjs-webpack-plugin@1.1.1 --save-dev 配置plugin\n//获取uglifyjs-webpack-plugin对象 const uglifyjsWebpackPlugin = require(\u0026#39;uglifyjs-webpack-plugin\u0026#39;) //2.配置plugins module.exports = { ... plugins:[ new webpack.BannerPlugin(\u0026#39;最终解释权归zz所有\u0026#39;), new htmlWbepackPlugin({ template: \u0026#39;index.html\u0026#39; }), new uglifyjsWebpackPlugin() ] } 打包过后，打开bundle.js，发现已经压缩了，此时版权声明被删除了。\n webpack高版本自带了压缩插件。\n 15.6\twebpack搭建本地服务器 #  webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用了express框架，可以实现热启动。\n 准备工作复制05-webpack的plugin文件夹到同级目录，并改名为06-webpack搭建本地服务器。\n 不过这是一个单独的模块，在webpack中使用之前需要先安装：\nnpm install --save-dev webpack-dev-server@2.9.1 devServe也是webpack中一个选项，选项本省可以设置一些属性：\n contentBase：为哪个文件夹提供本地服务，默认是根文件夹，这里我们需要改成./dist port：端口号 inline：页面实时刷新 historyApiFallback：在SPA（单页面富应用）页面中，依赖HTML5的history模式  修改webpack.config.js的文件配置\n//2.配置webpack的入口和出口 module.exports = { ... devServer: { contentBase: \u0026#39;./dist\u0026#39;,//服务的文件夹  port: 4000, inline: true//是否实时刷新  } } 配置package.json的script：\n\u0026#34;dev\u0026#34;: \u0026#34;webpack-dev-server --open\u0026#34;  \u0026ndash;open表示直接打开浏览器\n 启动服务器\nnpm run dev 启动成功，自动打开浏览器，发现在本地指定端口启动了，此时你修改src文件内容，会热修改。\n 1.服务器启动在内存中。\n2.开发调试时候最好不要使用压缩js文件的插件，不易调试。\n 15.7\twebpack的配置文件分离 #  webpack.config.js文件中有些是开发时候需要配置，有些事生产环境发布编译需要的配置，比如搭建本地服务器的devServer配置就是开发时配置，接下来我们分析如何分离配置文件。\n 准备工作：复制06-webpack搭建本地服务器文件夹到同级目录，并改名为07-webpack的配置文件分离。\n 在根目录下新建一个build的文件夹，新建配置文件。\n base.config.js（公共的配置）\n //1.导入node的path包获取绝对路径，需要使用npm init初始化node包 const path = require(\u0026#39;path\u0026#39;) //获取webpack const webpack = require(\u0026#39;webpack\u0026#39;) //获取htmlWebpackPlugin对象 const htmlWbepackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;) //2.配置webpack的入口和出口 module.exports = { entry: \u0026#39;./src/main.js\u0026#39;,//入口文件  output:{ path: path.resolve(__dirname, \u0026#39;dist\u0026#39;),//动态获取打包后的文件路径,path.resolve拼接路径  filename: \u0026#39;bundle.js\u0026#39;,//打包后的文件名  // publicPath: \u0026#39;dist/\u0026#39;  }, module: { rules: [ { test: /\\.css$/,//正则表达式匹配css文件  //css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader  use: [{ loader: \u0026#39;style-loader\u0026#39; }, { loader: \u0026#39;css-loader\u0026#39; }]//使用loader  }, { test: /\\.less$/,//正则表达式匹配css文件  //css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader  use: [{ loader: \u0026#39;style-loader\u0026#39; }, { loader: \u0026#39;css-loader\u0026#39; }, { loader: \u0026#39;less-loader\u0026#39;//less文件loader  }]//使用loader  }, { test: /\\.(png|jpg|gif)$/,//匹配png/jpg/gif格式图片  use: [ { loader: \u0026#39;url-loader\u0026#39;, options: { limit: 8192,//图片小于8KB时候将图片转成base64字符串，大于8KB需要使用file-loader  name: \u0026#39;img/[name].[hash:8].[ext]\u0026#39;//img表示文件父目录，[name]表示文件名,[hash:8]表示将hash截取8位[ext]表示后缀  } } ] }, { test: /\\.js$/, //排除node模块的js和bower的js  exclude: /(node_modules|bower_components)/, use: { loader: \u0026#39;babel-loader\u0026#39;, options: { //如果要使用@babel/preset-env这里需要在根目录新建一个babel的文件  // presets: [\u0026#39;@babel/preset-env\u0026#39;]  //这里直接使用指定  presets: [\u0026#39;es2015\u0026#39;] } } }, { test: /\\.vue$/,//正则匹配.vue文件  use: { loader: \u0026#39;vue-loader\u0026#39; } } ] }, resolve: { // alias:别名  alias: { //指定vue使用vue.esm.js  \u0026#39;vue$\u0026#39;:\u0026#39;vue/dist/vue.esm.js\u0026#39; } }, plugins:[ new webpack.BannerPlugin(\u0026#39;最终解释权归zz所有\u0026#39;), new htmlWbepackPlugin({ template: \u0026#39;index.html\u0026#39; }) ] }  dev.config.js（开发时候需要的配置）\n module.exports = { devServer: { contentBase: \u0026#39;./dist\u0026#39;,//服务的文件夹  port: 4000, inline: true//是否实时刷新  } }  prod.config.js（构建发布时候需要的配置）\n const uglifyjsWebpackPlugin = require(\u0026#39;uglifyjs-webpack-plugin\u0026#39;) module.exports = { plugins:[ new uglifyjsWebpackPlugin() ] } 此时我们将webpack.config.js文件分成了三个部分，公共部分、开发部分、构建发布的部分。\n 1.如果此时是dev环境，我们只需要使用base.config.js+dev.config.js的内容\n2.如果此时是生产发布构建的环境，我们只需要使用base.config.js+prod.config.js的内容\n 要将两个文件内容合并需要使用webpack-merge插件，安装webpack-merge。\nnpm isntall webpack-merge --save-dev 合并内容都是将base.config.js的内容合并到dev或者prod的文件中，修改dev.config.js和prod.config.js文件。\n 修改dev.config.js\n //导入webpack-merge对象 const webpackMerge = require(\u0026#39;webpack-merge\u0026#39;) //导入base.config.js const baseConfig = require(\u0026#39;./base.config\u0026#39;) //使用webpackMerge将baseConfig和dev.config的内容合并 module.exports = webpackMerge(baseConfig, { devServer: { contentBase: \u0026#39;./dist\u0026#39;,//服务的文件夹  port: 4000, inline: true//是否实时刷新  } })  修改prod.config.js\n const uglifyjsWebpackPlugin = require(\u0026#39;uglifyjs-webpack-plugin\u0026#39;) //导入webpack-merge对象 const webpackMerge = require(\u0026#39;webpack-merge\u0026#39;) //导入base.config.js const baseConfig = require(\u0026#39;./base.config\u0026#39;) //使用webpackMerge将baseConfig和prod.config的内容合并 module.exports = webpackMerge(baseConfig, { plugins:[ new uglifyjsWebpackPlugin() ] }) 此时我们使用三个文件构成了配置文件，此时在不同环境使用不同的配置文件，但是webpack不知道我们新配置文件，此时我们需要在package.json中的script指定要使用的配置文件。\n\u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack --config ./build/prod.config.js\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;webpack-dev-server --open --config ./build/dev.config.js\u0026#34; } 此时使用npm run build打包文件，dist文件并不在根目录下，因为我们在base.config.js中配置的出口文件使用的是当前文件的路径，即打包的根路径是配置文件的当前路径，也就是build文件夹。\nentry: \u0026#39;./src/main.js\u0026#39;,//入口文件  output:{ path: path.resolve(__dirname, \u0026#39;dist\u0026#39;),//动态获取打包后的文件路径,path.resolve拼接路径  filename: \u0026#39;bundle.js\u0026#39;,//打包后的文件名  // publicPath: \u0026#39;dist/\u0026#39;  }  注意：__dirname是当前文件路径，path.resolve拼接路径，所以在当前路径下创建了一个dist文件夹。\n 此时修改output属性：\noutput:{ path: path.resolve(__dirname, \u0026#39;../dist\u0026#39;),//动态获取打包后的文件路径,path.resolve拼接路径  filename: \u0026#39;bundle.js\u0026#39;,//打包后的文件名  // publicPath: \u0026#39;dist/\u0026#39;  }  使用../dist，在当前目录的上级目录创建dist文件夹\n "});index.add({'id':121,'href':'/life/docs/%E8%84%9A%E6%9C%AC/simple-webpack/','title':"webpack simple",'section':"脚本",'content':"webpack #  一:卸载 #   全局卸载  D:\\IdeaProjects\\cycle\\docs\\webc\\web\\webpack-study\\one\u0026gt;npm uninstall webpack webpack-cli -g removed 73 packages in 0.726s  本地卸载  D:\\IdeaProjects\\cycle\\docs\\webc\\web\\webpack-study\\one\u0026gt;npm uninstall webpack webpack-cli -D npm WARN saveError ENOENT: no such file or directory, open \u0026#39;D:\\IdeaProjects\\package.json\u0026#39; npm WARN enoent ENOENT: no such file or directory, open \u0026#39;D:\\IdeaProjects\\package.json\u0026#39; npm WARN IdeaProjects No description npm WARN IdeaProjects No repository field. npm WARN IdeaProjects No README data npm WARN IdeaProjects No license field. up to date in 0.791s 16 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\docs\\webc\\web\\webpack-study\\one\u0026gt; 二:安装 #   1:webpack依赖node环境。 2:node环境依赖众多包，所以需要npm，npm（node packages manager）node包管理工具 3:nvm是node管理工具可以自由切换node环境版本   在终端执行webpack命令，使用的是全局安装(在某个地方看到)\n  1: 全局安装webpack simple (低版本)  npm install webpack -g //指定版本安装 npm install webpack@3.6.0 -g  2: 全局安装webpack (高版本)  npm install webpack webpack-cli -g //或指定版本，类似这样： npm install webpack@4.16.5 webpack-cli -g  3:本地安装 ?  npm install webpack webpack-cli --save-dev //或者 npm install webpack webpack-cli -D //或者指定版本 npm install webpack@4.16.5 webpack-cli -D 三:使用 #    1:简单使用\n  1、初始化\n  D:\\IdeaProjects\\cycle\\docs\\webc\\web\\webpack-study\\one\u0026gt;npm init This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See `npm help init` for definitive documentation on these fields and exactly what they do. Use `npm install \u0026lt;pkg\u0026gt;` afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. package name: (one) version: (1.0.0) description: entry point: (index.js) test command: git repository: keywords: author: license: (ISC) About to write to D:\\IdeaProjects\\cycle\\docs\\webc\\web\\webpack-study\\one\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;one\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } Is this OK? (yes) yes D:\\IdeaProjects\\cycle\\docs\\webc\\web\\webpack-study\\one\u0026gt; 包初始化之后 就会生成package.json dependencies和devDependencies的区别 #   devDependencies：开发环境使用 dependencies：生产环境使用   举例说明\n webpack，gulp等打包工具，这些都是我们开发阶段使用的，代码提交线上时，不需要这些工具，所以我们将它放入devDependencies即可，但是像jquery这类插件库，是我们生产环境所使用的，所以如要放入dependencies，如果未将jquery安装到dependencies，那么项目就可能报错，无法运行，所以类似这种项目必须依赖的插件库，我们则必须打入dependencies中，这下子都明白了吧。 简单版本 (webpack使用高版本5.42.0) #   生成必要的文件  Microsoft Windows [版本 10.0.19043.1052] (c) Microsoft Corporation。保留所有权利。 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;mkdir demo01 创建文件夹 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;cd demo01 进入文件夹 D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;npm install -g webpack webpack-cli 安装全局webpack D:\\CS\\node\\node-v14.17.2-win-x64\\webpack -\u0026gt; D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\bin\\webpack.js D:\\CS\\node\\node-v14.17.2-win-x64\\webpack-cli -\u0026gt; D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack-cli\\bin\\cli.js + webpack@5.42.0 + webpack-cli@4.7.2 updated 2 packages in 4.11s D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;echo index.js windows错误创建文件 必须 echo \u0026gt; file.suffix index.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;echo \u0026gt; index.js windows正确创建方法 D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;webpack index.js webpack打包编译(实际上这是低版本至少是低于4.0.0的目前我安装的是非常高的版本) assets by status 0 bytes [cached] 1 asset WARNING in configuration The \u0026#39;mode\u0026#39; option has not been set, webpack will fallback to \u0026#39;production\u0026#39; for this value. Set \u0026#39;mode\u0026#39; option to \u0026#39;development\u0026#39; or \u0026#39;production\u0026#39; to enable defaults for each environment. You can also set it to \u0026#39;none\u0026#39; to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/ ERROR in main Module not found: Error: Can\u0026#39;t resolve \u0026#39;index.js\u0026#39; in \u0026#39;D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026#39; Did you mean \u0026#39;./index.js\u0026#39;? Requests that should resolve in the current directory need to start with \u0026#39;./\u0026#39;. Requests that start with a name are treated as module requests and resolve within module directories (node_modules). If changing the source code is not an option there is also a resolve options called \u0026#39;preferRelative\u0026#39; which tries to resolve these kind of requests in the current directory too. resolve \u0026#39;index.js\u0026#39; in \u0026#39;D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026#39; Parsed request is a module No description file found in D:\\IdeaProjects\\cycle\\study\\webpack\\demo01 or above resolve as module D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\\node_modules doesn\u0026#39;t exist or is not a directory D:\\IdeaProjects\\cycle\\study\\webpack\\node_modules doesn\u0026#39;t exist or is not a directory D:\\IdeaProjects\\cycle\\study\\node_modules doesn\u0026#39;t exist or is not a directory D:\\IdeaProjects\\cycle\\node_modules doesn\u0026#39;t exist or is not a directory D:\\IdeaProjects\\node_modules doesn\u0026#39;t exist or is not a directory D:\\node_modules doesn\u0026#39;t exist or is not a directory webpack 5.42.0 compiled with 1 error and 1 warning in 147 ms   高版本采用低版本显然的报错了\n  找解决办法 网上找到解决方案是必须要配置开发模式还是生产模式,要求指定\n  生成 package.json 并设置相应内容 这里 package.json 不要手动设置 直接node js 的包初始化命令即可生成 npm init\n  D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;npm init This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See `npm help init` for definitive documentation on these fields and exactly what they do. Use `npm install \u0026lt;pkg\u0026gt;` afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. package name: (demo01) version: (1.0.0) description: entry point: (index.js) test command: git repository: keywords: author: license: (ISC) About to write to D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo01\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } Is this OK? (yes) // end 设置内容 { \u0026#34;name\u0026#34;: \u0026#34;demo01\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;main.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; , \u0026#34;dev\u0026#34;: \u0026#34;webpack --mode development\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack --mode production\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; }  完毕再次执行 webpack index.js 不要意思又报错了  D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;webpack index.js [Browserslist] Could not parse D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\\package.json. Ignoring it. [webpack-cli] SyntaxError: Unexpected token / in JSON at position 204 while determining default \u0026#39;output.uniqueName\u0026#39; from \u0026#39;name\u0026#39; in D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\\package.json at JSON.parse (\u0026lt;anonymous\u0026gt;) at D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\config\\defaults.js:599:29 at F (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\config\\defaults.js:71:15) at applyOutputDefaults (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\config\\defaults.js:594:2) at applyWebpackOptionsDefaults (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\config\\defaults.js:182:2) at createCompiler (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\webpack.js:78:2) at create (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\webpack.js:127:16) at webpack (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\webpack.js:135:47) at WebpackCLI.f [as webpack] (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\index.js:55:16) at WebpackCLI.createCompiler (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack-cli\\lib\\webpack-cli.js:2053:29)   实际上是高版本的情况下是必须要配置webpack.config.js\n  因此我们来配置webpack.config.js\n  D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;echo \u0026gt; webpack.config.js webconfig.js 内容 const path = require(\u0026#39;path\u0026#39;) module.exports = { entry: \u0026#39;./main.js\u0026#39;, output: { path: path.resolve(__dirname, \u0026#39;dist\u0026#39;), filename: \u0026#39;my-first-webpack.bundle.js\u0026#39; }, mode: \u0026#39;development\u0026#39; // 设置mode }  执行打包编译 这里需要注意的是高版本不允许 webpack index.js 的方式了 直接是webpack 执行后自动找此命令下的配置然后输出编译文件  D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;webpack asset my-first-webpack.bundle.js 1.19 KiB [emitted] (name: main) ./main.js 40 bytes [built] [code generated] webpack 5.42.0 compiled successfully in 69 ms  Java生成目录结构  @Test public void printFileDir() { String path = \u0026#34;D:\\\\IdeaProjects\\\\cycle\\\\study\\\\webpack\\\\demo01\u0026#34;; // String path = \u0026#34;D:\\\\IdeaProjects\\\\lifeDoc\\\\book\\\\public\u0026#34;; File file = new File(path); print(file, 0, file.getParent()); } private void print(File file, int index, final String parent) { StringBuilder stringBuilder = new StringBuilder(); String str = \u0026#34;▸\u0026#34;; if (file.isFile()) { stringBuilder.append(str).append(StringUtils.repeat(\u0026#34; \u0026#34;, index)).append(StringUtils.remove(file.getPath(), parent)); System.out.println(stringBuilder.toString()); } else { stringBuilder.append(str).append(StringUtils.repeat(\u0026#34; \u0026#34;, index)).append(StringUtils.remove(file.getPath(),parent)); System.out.println(stringBuilder.toString()); for (File f : file.listFiles()) { int newIndex = index + 2; print(f, newIndex, parent); } } }  文件结构  ▸\\demo01 ▸ \\demo01\\dist ▸ \\demo01\\dist\\my-first-webpack.bundle.js ▸ \\demo01\\index.js ▸ \\demo01\\package.json ▸ \\demo01\\webpack.config.js 简单版本局部情况 (webpack使用高版本5.42.0) #   生成必要的文件   npm init -y 初始化的时候不会提示输入yes\n Microsoft Windows [版本 10.0.19043.1052] D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;mkdir demo02 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;cd demo02 D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\u0026gt;echo document.writeln(\u0026#39;hello blake\u0026#39;) \u0026gt; index.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\u0026gt;npm init -y Wrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo02\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\u0026gt;echo \u0026gt; webpack.config.js  局部安装说明   局部安装必须在package.json中 scripts \u0026gt; \u0026ldquo;build\u0026rdquo;: \u0026ldquo;webpack\u0026rdquo;\n  命令 npm add -D webpack webpack-cli  D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\u0026gt;npm -D webpack webpack-cli Usage: npm \u0026lt;command\u0026gt; where \u0026lt;command\u0026gt; is one of: access, adduser, audit, bin, bugs, c, cache, ci, cit, clean-install, clean-install-test, completion, config, create, ddp, dedupe, deprecate, dist-tag, docs, doctor, edit, explore, fund, get, help, help-search, hook, i, init, install, install-ci-test, install-test, it, link, list, ln, login, logout, ls, org, outdated, owner, pack, ping, prefix, profile, prune, publish, rb, rebuild, repo, restart, root, run, run-script, s, se, search, set, shrinkwrap, star, stars, start, stop, t, team, test, token, tst, un, uninstall, unpublish, unstar, up, update, v, version, view, whoami npm \u0026lt;command\u0026gt; -h quick help on \u0026lt;command\u0026gt; npm -l display full usage info npm help \u0026lt;term\u0026gt; search for help on \u0026lt;term\u0026gt; npm help npm involved overview Specify configs in the ini-formatted file: C:\\Users\\dell\\.npmrc or on the command line via: npm \u0026lt;command\u0026gt; --key value Config info can be viewed via: npm help config npm@6.14.13 D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\npm Did you mean this? pack D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\u0026gt;npm add -D webpack webpack-cli npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN demo02@1.0.0 No description npm WARN demo02@1.0.0 No repository field. + webpack-cli@4.7.2 + webpack@5.42.0 added 121 packages from 155 contributors in 7.307s 16 packages are looking for funding run `npm fund` for details  编译打包  D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\u0026gt;webpack asset bundle.js 1.19 KiB [emitted] (name: main) ./index.js 34 bytes [built] [code generated] webpack 5.42.0 compiled successfully in 69 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\u0026gt;  文件目录  [TestNG] Running: C:\\Users\\dell\\.IntelliJIdea2018.3\\system\\temp-testng-customsuite.xml ▸\\demo02 ▸ \\demo02\\dist ▸ \\demo02\\dist\\bundle.js ▸ \\demo02\\index.html ▸ \\demo02\\index.js ▸ \\demo02\\node_modules ▸ \\demo02\\node_modules\\.bin ▸ \\demo02\\node_modules\\.bin\\acorn ▸ \\demo02\\node_modules\\.bin\\acorn.cmd ▸ \\demo02\\node_modules\\.bin\\acorn.ps1 ▸ \\demo02\\node_modules\\.bin\\browserslist ▸ \\demo02\\node_modules\\.bin\\browserslist.cmd ▸ \\demo02\\node_modules\\.bin\\browserslist.ps1 ▸ \\demo02\\node_modules\\.bin\\envinfo ▸ \\demo02\\node_modules\\.bin\\envinfo.cmd ▸ \\demo02\\node_modules\\.bin\\envinfo.ps1 ▸ \\demo02\\node_modules\\.bin\\  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ 目录太多我删掉了差不多就是这样 ▸ \\demo02\\node_modules\\yocto-queue\\index.d.ts ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ ▸ \\demo02\\node_modules\\yocto-queue\\index.d.ts ▸ \\demo02\\node_modules\\yocto-queue\\index.js ▸ \\demo02\\node_modules\\yocto-queue\\license ▸ \\demo02\\node_modules\\yocto-queue\\package.json ▸ \\demo02\\node_modules\\yocto-queue\\readme.md ▸ \\demo02\\package-lock.json ▸ \\demo02\\package.json ▸ \\demo02\\webpack.config.js =============================================== Default Suite Total tests run: 1, Failures: 0, Skips: 0 =============================================== Process finished with exit code 0 自定义版本(局部) (webpack使用高版本5.42.0) #   生成必要的文件  Microsoft Windows [版本 10.0.19043.1052] (c) Microsoft Corporation。保留所有权利。 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;mkdir demo03 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;cd demo03 D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;npm init -y Wrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo03\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;echo \u0026gt; index.html D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;echo \u0026gt; main.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;echo webpack.config.js webpack.config.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;echo \u0026gt; webpack.config.js   安装之前查询版本webpack和webpack-cli版本不一致的否则会报错\n  版本查询 webpack版本地址 webpack-cli版本地址\n  安装命令 npm add -D webpack@5.32.0 webpack-cli@4.0.0-alpha-5\n  D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;npm add -D webpack@5.32.0 webpack-cli@5.32.0 npm ERR! code ETARGET npm ERR! notarget No matching version found for webpack-cli@5.32.0. npm ERR! notarget In most cases you or one of your dependencies are requesting npm ERR! notarget a package version that doesn\u0026#39;t exist. npm ERR! A complete log of this run can be found in: npm ERR! C:\\Users\\dell\\AppData\\Roaming\\npm-cache\\_logs\\2021-07-04T04_40_27_844Z-debug.log D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;npm add -D webpack@5.32.0 webpack-cli@4.0.0-alpha-5 \u0026gt; ejs@2.7.4 postinstall D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\\node_modules\\ejs \u0026gt; node ./postinstall.js Thank you for installing EJS: built with the Jake JavaScript build tool (https://jakejs.com/) npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN webpack-cli@4.0.0-alpha-5 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself. npm WARN demo03@1.0.0 No description npm WARN demo03@1.0.0 No repository field. + webpack@5.32.0 + webpack-cli@4.0.0-alpha-5 added 365 packages from 245 contributors in 23.014s 19 packages are looking for funding run `npm fund` for details  安装完成之后到package.json 中查看 devDependencies 即可查询到版本  { \u0026#34;name\u0026#34;: \u0026#34;demo03\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;webpack\u0026#34;: \u0026#34;^5.32.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.0.0-alpha-5\u0026#34; } }  打包编译  D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;webpack asset bundle.js 1.2 KiB [emitted] (name: main) ./main.js 44 bytes [built] [code generated] webpack 5.42.0 compiled successfully in 72 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;  文件目录  ▸\\demo03 ▸ \\demo03\\dist ▸ \\demo03\\dist\\bundle.js ▸ \\demo03\\index.html ▸ \\demo03\\main.js ▸ \\demo03\\node_modules ▸ \\demo03\\node_modules\\.bin ▸ \\demo03\\node_modules\\.bin\\acorn ▸ \\demo03\\node_modules\\.bin\\acorn.cmd ▸ \\demo03\\node_modules\\.bin\\acorn.ps1 ▸ \\demo03\\node_modules\\.bin\\browserslist ▸ \\demo03\\node_modules\\.bin\\browserslist.cmd ▸ \\demo03\\node_modules\\.bin\\browserslist.ps1 ▸ \\demo03\\node_modules\\.bin\\errno ▸ \\demo03\\node_modules\\.bin\\errno.cmd ▸ \\demo03\\node_modules\\.bin\\errno.ps1 ▸ \\demo03\\node_modules\\.bin\\is-ci ..................省略node model dir index ▸ \\demo03\\node_modules\\yocto-queue ▸ \\demo03\\node_modules\\yocto-queue\\index.d.ts ▸ \\demo03\\node_modules\\yocto-queue\\index.js ▸ \\demo03\\node_modules\\yocto-queue\\license ▸ \\demo03\\node_modules\\yocto-queue\\package.json ▸ \\demo03\\node_modules\\yocto-queue\\readme.md ▸ \\demo03\\package-lock.json ▸ \\demo03\\package.json ▸ \\demo03\\webpack.config.js 使用html插件 #   生成必要的文件  Microsoft Windows [版本 10.0.19043.1052] (c) Microsoft Corporation。保留所有权利。 D:\\IdeaProjects\\cycle\u0026gt;cd study D:\\IdeaProjects\\cycle\\study\u0026gt;mkdir demo04 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;cd demo04 D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\u0026gt;npm init -y Wrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo04\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\u0026gt;echo \u0026gt; webpack.config.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\u0026gt;md src D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\u0026gt;cd src D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\\src\u0026gt;echo \u0026gt; index.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\\src\u0026gt;cd D:\\IdeaProjects\\cycle\\study\\webpack\\demo04   找到html-webpack-load\n  html-webpack-plugin\n  HtmlWebpackPlugin\n  如果您有多个webpack入口点，它们都将包含在生成的HTML中的\u0026lt;script\u0026gt;标记中\n  插件命令\n  npm install --save-dev html-webpack-plugin\r局部 npm install -D --save-dev html-webpack-plugin\r 配置  const HtmlWebpackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;); const path = require(\u0026#39;path\u0026#39;); module.exports = { entry: \u0026#39;index.js\u0026#39;, output: { path: path.resolve(__dirname, \u0026#39;./dist\u0026#39;), filename: \u0026#39;index_bundle.js\u0026#39;, }, plugins: [new HtmlWebpackPlugin()], };  生成包含以下内容的文件dist/index.html  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;webpack App\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026#34;index_bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  安装命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\u0026gt;npm add -D webpack webpack-cli npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN demo04@1.0.0 No description npm WARN demo04@1.0.0 No repository field. + webpack-cli@4.7.2 + webpack@5.42.0 added 121 packages from 155 contributors in 13.022s 16 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\u0026gt;npm install -D --save-dev html-webpack-plugin npm WARN demo04@1.0.0 No description npm WARN demo04@1.0.0 No repository field. + html-webpack-plugin@5.3.2 added 19 packages from 8 contributors in 4.707s 27 packages are looking for funding run `npm fund` for details  webpack.config.js 配置  const path = require(\u0026#39;path\u0026#39;); const HtmlWebpackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;); module.exports = { entry: \u0026#34;./src/index.js\u0026#34;, output: { path: path.resolve(__dirname, \u0026#39;dist\u0026#39;), filename: \u0026#39;bundle2.js\u0026#39; }, plugins: [ new HtmlWebpackPlugin({}), ], mode: \u0026#39;development\u0026#39; // 设置mode }  打包编译 npm run build(实际相当于执行了webpack命令)  D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\u0026gt;npm run build \u0026gt; demo04@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo04 \u0026gt; webpack asset bundle2.js 1.4 KiB [compared for emit] (name: main) asset index.html 234 bytes [compared for emit] ./src/index.js 207 bytes [built] [code generated] webpack 5.42.0 compiled successfully in 122 ms  文件目录  ▸\\demo04 ▸ \\demo04\\dist ▸ \\demo04\\dist\\bundle2.js ▸ \\demo04\\dist\\index.html ▸ \\demo04\\node_modules ▸ \\demo04\\node_modules\\.bin ▸ \\demo04\\node_modules\\.bin\\acorn ▸ \\demo04\\node_modules\\.bin\\acorn.cmd ▸ \\demo04\\node_modules\\.bin\\acorn.ps1 ▸ \\demo04\\node_modules\\.bin\\browserslist ▸ \\demo04\\node_modules\\yocto-queue ||省略 ▸ \\demo04\\node_modules\\yocto-queue\\index.d.ts ▸ \\demo04\\node_modules\\yocto-queue\\index.js ▸ \\demo04\\node_modules\\yocto-queue\\license ▸ \\demo04\\node_modules\\yocto-queue\\package.json ▸ \\demo04\\node_modules\\yocto-queue\\readme.md ▸ \\demo04\\package-lock.json ▸ \\demo04\\package.json ▸ \\demo04\\src ▸ \\demo04\\src\\index.js ▸ \\demo04\\webpack.config.js 多入口 #   生成必要的文件  Microsoft Windows [版本 10.0.19043.1052] (c) Microsoft Corporation。保留所有权利。 D:\\IdeaProjects\\cycle\u0026gt;cd study D:\\IdeaProjects\\cycle\\study\u0026gt;cd webpack D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;mkdir demo05 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;cd demo05 D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;mkdir src D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;cd src D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\\src\u0026gt;echo -\u0026gt; main.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\\src\u0026gt;echo -\u0026gt; home.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\\src\u0026gt;echo -\u0026gt; register.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\\src\u0026gt;cd .. D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;echo \u0026#39;\u0026#39; \u0026gt; webpack.config.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;npm init -y Wrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo05\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt; npm add -D webpack webpack-cli npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN demo05@1.0.0 No description npm WARN demo05@1.0.0 No repository field. + webpack-cli@4.7.2 + webpack@5.42.1 added 121 packages from 155 contributors in 9.549s 16 packages are looking for funding run `npm fund` for details  webpack.config.js 配置  const path = require(\u0026#39;path\u0026#39;); module.exports = { entry: { home : \u0026#34;./src/home.js\u0026#34; , main : \u0026#34;./src/main.js\u0026#34; , register : \u0026#34;./src/register.js\u0026#34; , }, output :{ path: path.resolve(__dirname, \u0026#39;dist\u0026#39;), }, mode: \u0026#39;development\u0026#39; // 设置mode } ;  package.json 配置  { \u0026#34;name\u0026#34;: \u0026#34;demo05\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;webpack --mode development\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack --mode production\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;webpack\u0026#34;: \u0026#34;^5.42.1\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.7.2\u0026#34; } }  执行以及校验js (这里使用nodejs直接在命令行执行js)  D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;npm run build \u0026gt; demo05@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo05 \u0026gt; webpack --mode production asset register.js 54 bytes [emitted] [minimized] (name: register) asset home.js 50 bytes [emitted] [minimized] (name: home) asset main.js 50 bytes [emitted] [minimized] (name: main) ./src/home.js 50 bytes [built] [code generated] ./src/main.js 50 bytes [built] [code generated] ./src/register.js 54 bytes [built] [code generated] webpack 5.42.1 compiled successfully in 207 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;node dist/main.js main 15 D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;node dist/home.js home 20 D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;node dist/register.js register 63  附 main.js内容  console.log(\u0026#34;main\u0026#34;,Math.round(Math.random()*100));  文件目录  ▸\\demo05\r▸ \\demo05\\dist\r▸ \\demo05\\dist\\home.js\r▸ \\demo05\\dist\\main.js\r▸ \\demo05\\dist\\register.js\r▸ \\demo05\\node_modules\r▸ \\demo05\\node_modules\\.bin\r▸ \\demo05\\node_modules\\.bin\\acorn\r▸ \\demo05\\node_modules\\.bin\\acorn.cmd\r▸ \\demo05\\node_modules\\.bin\\acorn.ps1\r▸ \\demo05\\node_modules\\.bin\\browserslist\r▸ \\demo05\\node_modules\\.bin\\browserslist.cmd\r||省略\r▸ \\demo05\\node_modules\\wildcard\\README.md\r▸ \\demo05\\node_modules\\wildcard\\test\r▸ \\demo05\\node_modules\\wildcard\\test\\all.js\r▸ \\demo05\\node_modules\\wildcard\\test\\arrays.js\r▸ \\demo05\\node_modules\\wildcard\\test\\objects.js\r▸ \\demo05\\node_modules\\wildcard\\test\\strings.js\r▸ \\demo05\\node_modules\\wildcard\\yarn.lock\r▸ \\demo05\\node_modules\\yocto-queue\r▸ \\demo05\\node_modules\\yocto-queue\\index.d.ts\r▸ \\demo05\\node_modules\\yocto-queue\\index.js\r▸ \\demo05\\node_modules\\yocto-queue\\license\r▸ \\demo05\\node_modules\\yocto-queue\\package.json\r▸ \\demo05\\node_modules\\yocto-queue\\readme.md\r▸ \\demo05\\package-lock.json\r▸ \\demo05\\package.json\r▸ \\demo05\\src\r▸ \\demo05\\src\\home.js\r▸ \\demo05\\src\\main.js\r▸ \\demo05\\src\\register.js\r▸ \\demo05\\webpack.config.js\r多出口 #   生成必要的文件  Microsoft Windows [版本 10.0.19043.1052] (c) Microsoft Corporation。保留所有权利。 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;mkdir demo06 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;cd demo06 D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;mkdir src D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;cd src D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\\src\u0026gt;echo console.log(\u0026#39;index\u0026#39;); \u0026gt; index.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\\src\u0026gt;echo console.log(\u0026#39;main\u0026#39;); \u0026gt; main.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\\src\u0026gt;cd .. D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;cd \u0026gt; webpack.config.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm init -y Wrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo06\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; }  安装  D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm add -D webpack webpack-cli npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN demo06@1.0.0 No description npm WARN demo06@1.0.0 No repository field. + webpack@5.42.1 + webpack-cli@4.7.2 added 121 packages from 155 contributors in 10.332s 16 packages are looking for funding run `npm fund` for details 报错了 执行npm install时出现npm notice created a lockfile as package-lock.json. You should commit this file 在package.json中增加private字段； 将项目声明为私有项目：\u0026#34;private\u0026#34;: true, 再重新运行，notice就没有了  增加如下  { \u0026#34;name\u0026#34;: \u0026#34;demo06\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; }, \u0026#34;private\u0026#34;: true, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; }  重新安装  D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm add -D webpack webpack-cli + webpack@5.42.1 + webpack-cli@4.7.2 updated 2 packages in 4.494s 1 package is looking for funding run `npm fund` for details  关于 webpack.config.js 配置   我是从下面一次注释运行的\n const path = require(\u0026#34;path\u0026#34;) ; module.exports = { entry :{ index :\u0026#34;./src/index.js\u0026#34; , //这样写 可以不要output  main :\u0026#34;./src/main.js\u0026#34; , }, mode :\u0026#34;development\u0026#34; , output :{ // path:path.join(__dirname,\u0026#34;release\u0026#34;)  // path:path.join(__dirname,\u0026#34;output1\u0026#34;),  path:path.join(__dirname,\u0026#34;output\u0026#34;), // filename:\u0026#34;[name].js\u0026#34;//如index.js  // filename:\u0026#34;[name]_.js\u0026#34; //如index_.js  // filename:\u0026#34;[name]_[hash].js\u0026#34; //如 index_42e300f860ec901c7866.js  filename:\u0026#34;[name]_[hash:4].js\u0026#34; //如 index_42e3.js  } }  执行命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm run build \u0026gt; demo06@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo06 \u0026gt; webpack asset index.js 1.2 KiB [emitted] (name: index) asset main.js 1.2 KiB [emitted] (name: main) ./src/index.js 24 bytes [built] [code generated] ./src/main.js 23 bytes [built] [code generated] webpack 5.42.1 compiled successfully in 75 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;node src/index.js index D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;node src/main.js main D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm run build \u0026gt; demo06@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo06 \u0026gt; webpack asset index.js 1.2 KiB [emitted] (name: index) asset main.js 1.2 KiB [emitted] (name: main) ./src/index.js 24 bytes [built] [code generated] ./src/main.js 23 bytes [built] [code generated] webpack 5.42.1 compiled successfully in 77 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm run build \u0026gt; demo06@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo06 \u0026gt; webpack asset index.js 1.2 KiB [emitted] (name: index) asset main.js 1.2 KiB [emitted] (name: main) ./src/index.js 24 bytes [built] [code generated] ./src/main.js 23 bytes [built] [code generated] webpack 5.42.1 compiled successfully in 77 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm run build \u0026gt; demo06@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo06 \u0026gt; webpack asset index_.js 1.2 KiB [emitted] (name: index) asset main_.js 1.2 KiB [emitted] (name: main) ./src/index.js 24 bytes [built] [code generated] ./src/main.js 23 bytes [built] [code generated] webpack 5.42.1 compiled successfully in 80 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm run build \u0026gt; demo06@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo06 \u0026gt; webpack (node:8048) [DEP_WEBPACK_TEMPLATE_PATH_PLUGIN_REPLACE_PATH_VARIABLES_HASH] DeprecationWarning: [hash] is now [fullhash] (also consider using [chunkhash] or [contenthash], see documenta tion for details) (Use `node --trace-deprecation ...` to show where the warning was created) asset index_42e300f860ec901c7866.js 1.2 KiB [emitted] [immutable] (name: index) asset main_42e300f860ec901c7866.js 1.2 KiB [emitted] [immutable] (name: main) ./src/index.js 24 bytes [built] [code generated] ./src/main.js 23 bytes [built] [code generated] webpack 5.42.1 compiled successfully in 81 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm run build \u0026gt; demo06@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo06 \u0026gt; webpack (node:15188) [DEP_WEBPACK_TEMPLATE_PATH_PLUGIN_REPLACE_PATH_VARIABLES_HASH] DeprecationWarning: [hash] is now [fullhash] (also consider using [chunkhash] or [contenthash], see document ation for details) (Use `node --trace-deprecation ...` to show where the warning was created) asset index_42e3.js 1.2 KiB [emitted] [immutable] (name: index) asset main_42e3.js 1.2 KiB [emitted] [immutable] (name: main) ./src/index.js 24 bytes [built] [code generated] ./src/main.js 23 bytes [built] [code generated] webpack 5.42.1 compiled successfully in 76 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;  文件结构  ▸\\demo06 ▸ \\demo06\\dist ▸ \\demo06\\dist\\index.js ▸ \\demo06\\dist\\main.js ▸ \\demo06\\node_modules ▸ \\demo06\\node_modules\\yocto-queue //省略 ▸ \\demo06\\node_modules\\yocto-queue\\index.d.ts ▸ \\demo06\\node_modules\\yocto-queue\\index.js ▸ \\demo06\\node_modules\\yocto-queue\\license ▸ \\demo06\\node_modules\\yocto-queue\\package.json ▸ \\demo06\\node_modules\\yocto-queue\\readme.md ▸ \\demo06\\output ▸ \\demo06\\output\\index_42e3.js ▸ \\demo06\\output\\index_42e300f860ec901c7866.js ▸ \\demo06\\output\\main_42e3.js ▸ \\demo06\\output\\main_42e300f860ec901c7866.js ▸ \\demo06\\output1 ▸ \\demo06\\output1\\index.js ▸ \\demo06\\output1\\index_.js ▸ \\demo06\\output1\\main.js ▸ \\demo06\\output1\\main_.js ▸ \\demo06\\package-lock.json ▸ \\demo06\\package.json ▸ \\demo06\\readme.md ▸ \\demo06\\release ▸ \\demo06\\release\\index.js ▸ \\demo06\\release\\main.js ▸ \\demo06\\src ▸ \\demo06\\src\\index.js ▸ \\demo06\\src\\main.js ▸ \\demo06\\webpack.config.js "});index.add({'id':122,'href':'/life/docs/javadir/groovy/groovy%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AF%94%E8%BE%83%E4%BB%A5%E5%8F%8A%E9%9D%9E%E7%A9%BA%E5%88%A4%E6%96%AD/','title':" groovy对象比较以及空判断 ",'section':"groovy 学习与使用 ",'content':"groovy 对象比较以及空判断 #   目前测试得知 groovy的比较貌似很多直接可以使用==来比较\n groovy对象的比较 #  1.字符串比较 #  def str1 = \u0026quot;Hello World1\u0026quot;\rif (\u0026quot;Hello World\u0026quot; == str1) {\rprintln \u0026quot;Hello World\u0026quot;\r} else {\rprintln \u0026quot;不匹配\u0026quot;\r}\r2.map集合的比较（list集合也可以这样比较） #  \tdef m1=[\u0026quot;name\u0026quot;:\u0026quot;李明\u0026quot;,\u0026quot;age\u0026quot;:20]\rdef m2=[\u0026quot;name\u0026quot;:\u0026quot;李明\u0026quot;,\u0026quot;age\u0026quot;:21]\rdef m3=[\u0026quot;name\u0026quot;:\u0026quot;李明\u0026quot;,\u0026quot;age\u0026quot;:21]\rif(m1==m2){\rprintln \u0026quot;m1和m2匹配\u0026quot;\r}else{\rprintln \u0026quot;m1和m2不匹配\u0026quot;\r}\r  特别是字符串的比较，是不是比java要简洁的多呢\n  如果要比较两个对象的引用是否相同在groovy中可以使用is\n  def list1 = []\rdef list2 = [1,2,3,4]\rboolean check = list1.is(list2) ;\rprintln(check)\rif 判断对象是否为空 #   groovy中判断对象是否为空，直接if(对象){}即可，这种便捷真的很强  def list1 = []\rdef list2 = [1,2,3,4]\r//直接写入 有点像C语言里面if可以直接把0,和非0作为boolean来比较\rif (!list1){\rprintln(\u0026quot;list1为null\u0026quot;) ;\r}\rif (list2){\rprintln(\u0026quot;list2不为null\u0026quot;) ;\r}\r 特殊判断法  //def m5 = [name:\u0026quot;a\u0026quot;];\rdef m5 = [];\rprintln \u0026quot;${m5?.name}\u0026quot; ;\r//注意目前我用list失败了\rprintln \u0026quot;${list1?.get(0)}\u0026quot; ; //报error 数组越界 因此这种写法只适合map\r"});index.add({'id':123,'href':'/life/docs/operating_system/windows/windows_question/','title':" windows 问题 ",'section':"windows学习与使用 ",'content':" 磁盘变为了动态磁盘解决办法 最好是找软件解决 如DiskGenius 或者 傲梅分区助手 暴力解决办法  \r1、diskpart\r2、list disk\r3、select disk n\r4、convert basic\rSTEP 1：打开命令提示符窗口，在其中键入：“diskpart”命令并按下回车键。 STEP 2：在DISKPART命令提示符下，键入“list disk”命令并按下回车键后，能够查看到电脑中的磁盘情况。 STEP 3：在DISKPART命令提示符下，继续键入“select disk n”命令并按下回车键，其中n代表磁盘的序号。 STEP 4：在DISKPART命令提示符下，键入“convert dynamic”命令并按下回车键后，开始转换的工作。\r"});index.add({'id':124,'href':'/life/docs/operating_system/one_chapter/1_6_/','title':" 系统调用 ",'section':"第一章 操作系统概述 ",'content':"一:知识总览 #  什么是系统调用，有何作用？ #   知识点回顾：操作系统作为用户和计算机硬件之间的接口，需要向上提供一些简单易用的服务。主要包括命令接口和程序接口。其中，程序接口由一组系统调用组成。\n  “系统调用”是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以通过系统调用来请求获得操作系统内核的服务\n 系统调用与库函数的区别 #  小例子：为什么系统调用是必须的？ #  什么功能要用到系统调用？ #   应用程序通过系统调用请求操作系统的服务。而系统中的各种共享资源都由操作系统内核统一掌管，因此凡是与共享资源有关的操作（如存储分配、I/O操作、文件管理等），都必须通过系统调用的方式向操作系统内核提出服务请求，由操作系统内核代为完成。这样可以保证系统的稳定性和安全性，防止用户进行非法操作。\n 系统调用的过程 #  二:知识回顾与重要考点 #  "});index.add({'id':125,'href':'/life/docs/http/','title':"http知识 ",'section':"Docs",'content':"目录 #  "});index.add({'id':126,'href':'/life/docs/think/jinzita/','title':"金字塔原理",'section':"思维",'content':" 金字塔原理  "});index.add({'id':127,'href':'/life/docs/javadir/tooldoc/guava-common/','title':"Guava 基于java1.6的类库集合的扩展项目",'section':"Java公共库文档总结 ",'content':"Guava 基于java1.6的类库集合的扩展项目 #   com.google.common.annotations：普通注解类型。 com.google.common.base：基本工具类库和接口。 com.google.common.cache：缓存工具包，非常简单易用且功能强大的JVM内缓存。 com.google.common.collect：带泛型的集合接口扩展和实现，以及工具类，这里你会发现很多好玩的集合。 com.google.common.eventbus：发布订阅风格的事件总线。 com.google.common.hash： 哈希工具包。 com.google.common.io：I/O工具包。 com.google.common.math：原始算术类型和超大数的运算工具包。 com.google.common.net：网络工具包。 com.google.common.primitives：八种原始类型和无符号类型的静态工具包。 com.google.common.reflect：反射工具包。 com.google.common.util.concurrent：多线程工具包。\r 常见Object方法   hashCode compare/compareTo 实现一个比较器[Comparator]，或者直接实现Comparable接口有时也伤不起\n public class ProjectInfo implements Serializable,Comparable\u0026lt;ProjectInfo\u0026gt; {\rprivate int id;\rprivate String name;\rpublic int getId() {\rreturn id;\r}\rpublic String getName() {\rreturn name;\r}\rpublic void setId(int id) {\rthis.id = id;\r}\rpublic void setName(String name) {\rthis.name = name;\r}\r@Override\rpublic int compareTo(ProjectInfo o) {\rreturn ComparisonChain.start().compare(this.getName(),o.getName()).compare(this.getId(),o.getId()).result();\r}\r@Override\rpublic int hashCode() {\rreturn Objects.hashCode(getId(),getName());\r}\r}\r 当一个对象中的字段可以为null时，实现Object.equals方法会很痛苦，因为不得不分别对它们进行null检查。 使用Objects.equal帮助你执行null敏感的equals判断，从而避免抛出NullPointerException\n public void testA(){\rSystem.out.println(Objects.equal(\u0026quot;a\u0026quot;,\u0026quot;a\u0026quot;));// --\u0026gt;true\rSystem.out.println(Objects.equal(\u0026quot;a\u0026quot;,\u0026quot;\u0026quot;));// --\u0026gt;false\rSystem.out.println(Objects.equal(\u0026quot;\u0026quot;,\u0026quot;\u0026quot;));// --\u0026gt;true\rSystem.out.println(Objects.equal(\u0026quot;\u0026quot;,\u0026quot;w\u0026quot;));// --\u0026gt;false\rSystem.out.println(Objects.equal(null,null));// --\u0026gt;true\rSystem.out.println(Objects.equal(null,\u0026quot;\u0026quot;));// --\u0026gt;false\r}\r toString 好的toString方法在调试时是无价之宝，但是编写toString方法有时候却很痛苦。使用MoreObjects(低版本还是Objects)\n System.out.println(MoreObjects.toStringHelper(this).add(\u0026quot;x\u0026quot;,2).\radd(\u0026quot;y\u0026quot;,Math.round(Math.random()*10)).toString());\r/*console : ObjectsDemo{x=2, y=9}*/\r Preconditions   前置条件Preconditions提供静态方法来检查方法或构造函数，被调用是否给定适当的参数。它检查的先决条件。其方法失败抛出IllegalArgumentException\n public class PreconditionsDemo {\rpublic static void main(String[] args) {\rtry {\rsum(null,2);\r}catch (IllegalArgumentException e){\rSystem.out.println(e.getMessage());\r}\r}\rprivate static int sum(Integer a,Integer b){\ra = Preconditions.checkNotNull(a,\u0026quot;不能为null\u0026quot;);\rb = Preconditions.checkNotNull(a,\u0026quot;不能为null\u0026quot;);\rreturn a+b;\r}\r/**\r* 直接写检查表达式\r* @param input\r* @return\r*/\rprivate static double sqrt(double input){\rPreconditions.checkArgument(input \u0026gt;= 0.0);\rreturn Math.sqrt(input);\r}\r/**\r* 数组索引检查\r* @param index\r* @return\r*/\rprivate static int getValue(int index){\rint[] data = {Integer.parseInt(Math.round(Math.random())+\u0026quot;\u0026quot;),Integer.parseInt(Math.round(Math.random())+\u0026quot;\u0026quot;)} ;\rindex = Preconditions.checkElementIndex(index,data.length,\u0026quot;\u0026quot;);\rreturn data[index];\r}\r/**\r* 直接写检查表达式\r* @param num\r*/\rprivate static void maxTwo(int num){\rPreconditions.checkState(num\u0026gt;2,\u0026quot;抛出异常\u0026quot;);\r}\r}\r Joiner   Joiner 提供了各种方法来处理字符串加入操作，对象等(Joiner的实例不可变的，因此是线程安全的)\n public static void testA() {\r/*\ron:制定拼接符号，如：test1-test2-test3 中的 “-“ 符号\rskipNulls()：忽略NULL,返回一个新的Joiner实例\ruseForNull(“Hello”)：NULL的地方都用字符串”Hello”来代替\r*/\rJoiner joiner = Joiner.on(\u0026quot;,\u0026quot;);\rStringBuilder builder = new StringBuilder(1024);\r// joiner.skipNulls().appendTo(builder, \u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;, null, \u0026quot;d\u0026quot;);\rjoiner.useForNull(\u0026quot;--HH--\u0026quot;).appendTo(builder, \u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;, null, \u0026quot;d\u0026quot;);\rSystem.out.println(builder.toString());\rMap\u0026lt;String, String\u0026gt; map = new HashMap\u0026lt;\u0026gt;();\rmap.put(\u0026quot;key1\u0026quot;, \u0026quot;value1\u0026quot;);\rmap.put(\u0026quot;key2\u0026quot;, \u0026quot;value2\u0026quot;);\rmap.put(\u0026quot;key3\u0026quot;, \u0026quot;value3\u0026quot;);\rSystem.out.println(Joiner.on(\u0026quot;,\u0026quot;).withKeyValueSeparator(\u0026quot;=\u0026quot;).join(map));\r}\rconsole\ra,b,c,--HH--,d\rkey1=value1,key2=value2,key3=value3\r Splitter 能够将一个字符串按照指定的分隔符拆分成可迭代遍历的字符串集合，Iterable   public static void testA() {\r/*\ron():指定分隔符来分割字符串\rlimit():当分割的子字符串达到了limit个时则停止分割\rfixedLength():根据长度来拆分字符串\rtrimResults():去掉子串中的空格\romitEmptyStrings():去掉空的子串\rwithKeyValueSeparator():要分割的字符串中key和value间的分隔符,分割后的子串中key和value间的分隔符默认是=\r*/\rIterable it = null;\rit = Splitter.on(\u0026quot;,\u0026quot;).limit(3).trimResults().split(\u0026quot;a ,b , c, d\u0026quot;);\rSystem.out.println(Splitter.fixedLength(3).split(\u0026quot;1 2 3\u0026quot;));//[1 2, 3]\rSystem.out.println(Splitter.on(\u0026quot; \u0026quot;).omitEmptyStrings().splitToList(\u0026quot;1 2 3\u0026quot;));\rSystem.out.println(Splitter.on(\u0026quot;,\u0026quot;).omitEmptyStrings().split(\u0026quot;1,,,,2,,,3\u0026quot;));//[1, 2, 3]\rSystem.out.println(Splitter.on(\u0026quot; \u0026quot;).trimResults().split(\u0026quot;1 2 3\u0026quot;)); //[1, 2, 3],默认的连接符是,\rSystem.out.println(Splitter.on(\u0026quot;;\u0026quot;).withKeyValueSeparator(\u0026quot;:\u0026quot;).split(\u0026quot;a:1;b:2;c:3\u0026quot;));//{a=1, b=2, c=3}\r}\r//连接器[Joiner]\r@Test\rpublic void testJoiner() {\r//创建连接器\rJoiner joiner = Joiner.on(\u0026quot;; \u0026quot;).skipNulls();//skipNulls 跳过null\rString join = joiner.join(\u0026quot;Harry\u0026quot;, null, \u0026quot;Ron\u0026quot;, \u0026quot;Hermione\u0026quot;);\rSystem.out.println(join);\r//apache 下的连接器\rString join1 = StringUtils.join(Arrays.asList(\u0026quot;Harry\u0026quot;, \u0026quot;Ron\u0026quot;, \u0026quot;Hermione\u0026quot;), \u0026quot;;\u0026quot;);\rSystem.out.println(join1);\r//useForNull 当连接的字符串有null值那么使用yes代替\rString join2 = Joiner.on(\u0026quot;=\u0026quot;).useForNull(\u0026quot;yes\u0026quot;).join(Arrays.asList(\u0026quot;Harry\u0026quot;, null, \u0026quot;Ron\u0026quot;, \u0026quot;Hermione\u0026quot;));\rSystem.out.println(join2);\r//把连接后的字符串放入StringBuilder里面\rStringBuilder builder = new StringBuilder();\rStringBuilder stringBuilder = Joiner.on(\u0026quot;=\u0026quot;).useForNull(\u0026quot;yes2\u0026quot;).appendTo(builder, \u0026quot;Harry\u0026quot;, \u0026quot;Ron\u0026quot;, null,\u0026quot;Hermione\u0026quot;);\rSystem.out.println(builder.toString());\rSystem.out.println(stringBuilder.toString());\r}\r@Test\rpublic void testSplitter() {\rString text = \u0026quot;the ,quick, , brown , fox, jumps, over, the, lazy, little dog\u0026quot; ;\r// \u0026quot;dsdh\u0026quot;.split() ;\rIterable\u0026lt;String\u0026gt; split = Splitter.on(\u0026quot;,\u0026quot;).trimResults().omitEmptyStrings().limit(4).split(text);\rsplit.spliterator().forEachRemaining(s -\u0026gt; System.out.println(s));\r}\romitEmptyStrings()\t从结果中自动忽略空字符串\rtrimResults()\t移除结果字符串的前导空白和尾部空白\rtrimResults(CharMatcher)\t给定匹配器，移除结果字符串的前导匹配字符和尾部匹配字符\rlimit(int)\t限制拆分出的字符串数量\r Collection 不可变集合   不可变对象有很多优点，包括  public class ImmutableDemo {\rpublic static void main(String[] args) {\rImmutableSet\u0026lt;String\u0026gt; set=ImmutableSet.of(\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;d\u0026quot;);\rImmutableSet\u0026lt;String\u0026gt; set1=ImmutableSet.copyOf(set);\rImmutableSet\u0026lt;String\u0026gt; set2=ImmutableSet.\u0026lt;String\u0026gt;builder().addAll(set).add(\u0026quot;e\u0026quot;).build();\rSystem.out.println(set);\rImmutableList\u0026lt;String\u0026gt; list=set.asList();\r}\r}\r Multiset Multiset可统计一个词在文档中出现了多少次  public class MultiSetDemo {\rpublic static void main(String[] args) {\rMultiset\u0026lt;String\u0026gt; set= LinkedHashMultiset.create();\rset.add(\u0026quot;a\u0026quot;);\rset.add(\u0026quot;a\u0026quot;);\rset.add(\u0026quot;a\u0026quot;);\rset.add(\u0026quot;a\u0026quot;);\rset.setCount(\u0026quot;a\u0026quot;,5); //添加或删除指定元素使其在集合中的数量是count\rSystem.out.println(set.count(\u0026quot;a\u0026quot;)); //给定元素在Multiset中的计数\rSystem.out.println(set);\rSystem.out.println(set.size()); //所有元素计数的总和,包括重复元素\rSystem.out.println(set.elementSet().size()); //所有元素计数的总和,不包括重复元素\rset.clear(); //清空集合\rSystem.out.println(set);\r}\r}\r Multimap可以很容易地把一个键映射到多个值。换句话说，Multimap是把键映射到任意多个值的一般方式。  public class MultiMapDemo {\rpublic static void main(String[] args) {\rMultimap\u0026lt;String, Integer\u0026gt; map = HashMultimap.create(); //Multimap是把键映射到任意多个值的一般方式\rmap.put(\u0026quot;a\u0026quot;, 1); //key相同时不会覆盖原value\rmap.put(\u0026quot;a\u0026quot;, 2);\rmap.put(\u0026quot;a\u0026quot;, 3);\rSystem.out.println(map); //{a=[1, 2, 3]}\rSystem.out.println(map.get(\u0026quot;a\u0026quot;)); //返回的是集合\rSystem.out.println(map.size()); //返回所有”键-单个值映射”的个数,而非不同键的个数\rSystem.out.println(map.keySet().size()); //返回不同key的个数\rMap\u0026lt;String, Collection\u0026lt;Integer\u0026gt;\u0026gt; mapView = map.asMap();\r}\r}\r Table它有两个支持所有类型的键：”行”和”列”。  public class TableDemo {\rpublic static void main(String[] args) {\r//记录学生在某门课上的成绩\rTable\u0026lt;String,String,Integer\u0026gt; table= HashBasedTable.create();\rtable.put(\u0026quot;jack\u0026quot;,\u0026quot;java\u0026quot;,100);\rtable.put(\u0026quot;jack\u0026quot;,\u0026quot;c\u0026quot;,90);\rtable.put(\u0026quot;mike\u0026quot;,\u0026quot;java\u0026quot;,93);\rtable.put(\u0026quot;mike\u0026quot;,\u0026quot;c\u0026quot;,100);\rSet\u0026lt;Table.Cell\u0026lt;String,String,Integer\u0026gt;\u0026gt; cells=table.cellSet();\rfor (Table.Cell\u0026lt;String,String,Integer\u0026gt; cell : cells) {\rSystem.out.println(cell.getRowKey()+\u0026quot; \u0026quot;+cell.getColumnKey()+\u0026quot; \u0026quot;+cell.getValue());\r}\rSystem.out.println(table.row(\u0026quot;jack\u0026quot;));\rSystem.out.println(table);\rSystem.out.println(table.rowKeySet());\rSystem.out.println(table.columnKeySet());\rSystem.out.println(table.values());\r}\r}\r 集合操作：交集、差集、并集  public class CollectionsDemo {\rpublic static void main(String[] args) {\rSet\u0026lt;Integer\u0026gt; set1 = Sets.newHashSet(1, 2, 3, 4, 5);\rSet\u0026lt;Integer\u0026gt; set2 = Sets.newHashSet(3, 4, 5, 6);\rSets.SetView\u0026lt;Integer\u0026gt; inter = Sets.intersection(set1, set2); //交集\rSystem.out.println(inter);\rSets.SetView\u0026lt;Integer\u0026gt; diff = Sets.difference(set1, set2); //差集,在A中不在B中\rSystem.out.println(diff);\rSets.SetView\u0026lt;Integer\u0026gt; union = Sets.union(set1, set2); //并集\rSystem.out.println(union);\r}\r}\r"});index.add({'id':128,'href':'/life/docs/databases/mysql/mysql_install/','title':"mysql安装",'section':"mysql学习笔记",'content':"mysql安装 #   这里我们不再采用exe的安装的方式,我们使用压缩包的方式安装\n   地址 https://downloads.mysql.com/archives/community/\n  将页面拉到最下面选择选择操作系统后，选择要下载的版本点击 Downloads\n  我选择安装的版本为8.0.13。如果不想要最新的版本也可以进Archives页面选择其他版本\n  选择压缩包的版本哦\n  一:配置环境变量 #    因为下载的mysql数据库包的格式是zip的，下载完成后直接解压就可以用，但解压后需要进行配置。\n  首先进行环境变量的配置：右击计算机-\u0026gt;属性-\u0026gt;高级系统设置-\u0026gt;环境变量，选择双击Path，在最后面添加你的mysql bin文件夹的路径\n  我的目录是：D:\\databases\\mysql-8.0.13-winx64\n   必须设置这个才行,因为后面我们要在控制台运行命令,假如你不设置这个环境变量那么在控制台根本识别不了,exe安装会自动在环境中设置,而压缩包没有设置  二:在 D:\\databases\\mysql-8.0.13-winx64 目录下新建一个my.ini的文件 #  [mysqld]\r# skip-grant-tables 暂时注释了 容易引起 mysql服务启动后立马关闭 这个错误\r# 设置3306端口\rport=3306\r# 自定义设置mysql的安装目录，即解压mysql压缩包的目录\r# 切记此处一定要用双斜杠\\\\，单斜杠这里会出错。\rbasedir=D:\\\\databases\\\\mysql-8.0.13-winx64\r# 自定义设置mysql数据库的数据存放目录\rdatadir=D:\\\\databases\\\\mysql-8.0.13-winx64\\\\data\r# 允许最大连接数\rmax_connections=200\r# 允许连接失败的次数，这是为了防止有人从该主机试图攻击数据库系统\rmax_connect_errors=10\r# 服务端使用的字符集默认为UTF8\rcharacter-set-server=utf8mb4\r# 创建新表时将使用的默认存储引擎\rdefault-storage-engine=INNODB\r# 默认使用“mysql_native_password”插件认证\rdefault_authentication_plugin=mysql_native_password\r# 开启慢sql\rslow_query_log=ON\r# 慢sql存的文职\rslow_query_log_file=D:\\CS\\databases\\mysql_8.027\\log\\slow.log\r# 会记录没有使用索引的查询sql,但前提是必须开启 slow_query_log='ON'\rlog-queries-not-using-indexes =on\r# 超过10秒则属于慢SQL,慢查询时间,这里为10秒,超过10秒会被记录\rlong_query_time=10\r# 查询日志,开启对所有执行语句进行记录\rgeneral_log=on\r# 查询日志,存放位置\rgeneral_log_file=D:\\CS\\databases\\mysql_8.027\\log\\query.log\r# 查询日志，文件中的时间显示已系统时间为准\rlog_timestamps = SYSTEM\r[mysql]\r# 设置mysql客户端默认字符集\rdefault-character-set=utf8mb4\r[client]\r# 设置mysql客户端连接服务端时默认使用的端口和默认字符集\rport=3306\rdefault-character-set=utf8mb4\r三:windows下运行控制台程序 #   进入 C:\\Windows\\System32 中搜索   右键用管理员权限执行  四:初始化mysql #   mysqld \u0026ndash;initialize \u0026ndash;console，等待一会出现几行代码，root@localhost：后面的是随机生成的数据库初始密码，将初始密码记下来后面会用到。 没记住初始密码的话，删掉初始化的 data目录，再执行一遍初始化命令又会重新生成  D:\\databases\\mysql-8.0.13-winx64\\bin\u0026gt;mysqld --initialize --console\r2020-04-06T07:51:43.421098Z 0 [System] [MY-013169] [Server] D:\\databases\\mysql-8.0.13-winx64\\bin\\mysqld.exe (mysqld 8.0.13) initializing of server in progress as process 21400\r2020-04-06T07:52:04.903297Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: gMmik3IyFW!D\r2020-04-06T07:52:19.868074Z 0 [System] [MY-013170] [Server] D:\\databases\\mysql-8.0.13-winx64\\bin\\mysqld.exe (mysqld 8.0.13) initializing of server has completed\r五:mysql执行核心插件服务 #  D:\\databases\\mysql-8.0.13-winx64\\bin\u0026gt;mysqld --install\rService successfully installed.\r六:启动服务 #  net start mysql，启动服务,假如要关闭则是net stop mysql\rD:\\databases\\mysql-8.0.13-winx64\\bin\u0026gt;net start mysql\rMySQL 服务正在启动 ...\rMySQL 服务已经启动成功。\r七:登录 #  # gMmik3IyFW!D 上面这个就是随即临时密码\rD:\\databases\\mysql-8.0.13-winx64\\bin\u0026gt;mysql -u root -p\rEnter password: ************\rWelcome to the MySQL monitor. Commands end with ; or \\g.\rYour MySQL connection id is 8\rServer version: 8.0.13\rCopyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.\rOracle is a registered trademark of Oracle Corporation and/or its\raffiliates. Other names may be trademarks of their respective\rowners.\rType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\r# 显示为这样就表示登录成功了\r八:修改密码 #  mysql\u0026gt; alter user root@localhost identified by '123456';\rQuery OK, 0 rows affected (0.20 sec)\r"});index.add({'id':129,'href':'/life/docs/databases/mysql/mysql_install_more/','title':"Win10一台电脑安装多个版本的Mysql",'section':"mysql学习笔记",'content':"mysql安装 #   这里我们不再采用exe的安装的方式,我们使用压缩包的方式安装\n   地址 https://downloads.mysql.com/archives/community/\n  将页面拉到最下面选择选择操作系统后，选择要下载的版本点击 Downloads\n  我选择安装的版本为8.0.22。如果不想要最新的版本也可以进Archives页面选择其他版本\n  选择压缩包的版本哦\n  一:配置环境变量 #    因为下载的mysql数据库包的格式是zip的，下载完成后直接解压就可以用，但解压后需要进行配置。\n  首先进行环境变量的配置：右击计算机-\u0026gt;属性-\u0026gt;高级系统设置-\u0026gt;环境变量，选择双击Path，在最后面添加你的mysql bin文件夹的路径\n  我的目录是：D:\\CS\\databases\\mysql-8.0.22-winx64   必须设置这个才行,因为后面我们要在控制台运行命令,假如你不设置这个环境变量那么在控制台根本识别不了,exe安装会自动在环境中设置,而压缩包没有设置\n  二:在D:\\CS\\databases\\mysql-8.0.22-winx64 目录下新建一个my.ini的文件 #  [mysqld] # skip-grant-tables 暂时注释了 容易引起 mysql服务启动后立马关闭 这个错误 # 设置3307端口 port=3307 # 自定义设置mysql的安装目录，即解压mysql压缩包的目录 # 切记此处一定要用双斜杠\\\\，单斜杠这里会出错。 basedir=D:\\\\CS\\\\databases\\\\mysql-8.0.22-winx64 # 自定义设置mysql数据库的数据存放目录 datadir=D:\\\\CS\\\\databases\\\\mysql-8.0.22-winx64\\\\data # 允许最大连接数 max_connections=200 # 允许连接失败的次数，这是为了防止有人从该主机试图攻击数据库系统 max_connect_errors=10 # 服务端使用的字符集默认为UTF8 character-set-server=utf8mb4 # 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB # 默认使用“mysql_native_password”插件认证 default_authentication_plugin=mysql_native_password [mysql] # 设置mysql客户端默认字符集 default-character-set=utf8mb4 [client] # 设置mysql客户端连接服务端时默认使用的端口和默认字符集 port=3307 default-character-set=utf8mb4 三:windows下运行控制台程序 #   进入 C:\\Windows\\System32 中搜索   右键用管理员权限执行  四:mysql执行核心插件服务 #  D:\\CS\\databases\\mysql-8.0.22-winx64\\bin\u0026gt;mysqld install MySQL8022 --default-file=\u0026quot;D:\\CS\\databases\\mysql-8.0.22-winx64\\my.ini\u0026quot;\rService successfully installed.\r  提示Service successfully installed.说明服务安装成功，在计算机管理服务里可以看到新增一个MySQL8022的服务，接着输入mysqld \u0026ndash;initialize，回车后没有任何提示，但是在文件夹下新增了一个data文件夹，说明初始化成功\n  MySQL8022是新增mysql的名称，启动或关闭服务的时候用到\n  五:初始化mysql #  mysqld --initialize\r六:修改注册表 #   注册表路径：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services 找到MySQL8022 MySQL8022 source value: D:\\CS\\databases\\mysql-8.0.22-winx64\\bin\\mysqld \u0026ndash;default-file=D:\\CS\\databases\\mysql-8.0.22-winx64\\my.ini MySQL8022 修改为 D:\\CS\\databases\\mysql-8.0.22-winx64\\bin\\mysqld.exe MySQL8022  七:启动修改密码 #    首先找到临时密码 由于安装多个mysql无法执行mysqld \u0026ndash;initialize \u0026ndash;console 实际是mysqld \u0026ndash;initialize 所以控制台无法看到密码\n  临时密码可以去data文件夹下，一个后缀为err的文件中找到root@localhost:后面的就是\n  如图:   启动 并且修改密码   "});index.add({'id':130,'href':'/life/docs/%E8%84%9A%E6%9C%AC/','title':"脚本",'section':"Docs",'content':" dos,lua,sheel,python,js\n   dos 可以使用VisualBat编辑器编写以及调试\n  lua 可以运行在redis ,dos,Java,c++等里面另外还可以用来写触屏精灵 http://www.touchsprite.com/docs/5362 ==\u0026gt; https://www.zybuluo.com/miniknife/note/317045#%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\n  sheel脚本 运行在linux或者unix上相当于windows上的dos\n  python 胶水语言 可以直接在linux当成sheel使用,也是人工智能的一种使用工具\n   js 浏览器脚本  "});index.add({'id':131,'href':'/life/docs/operating_system/two_chapter/2_2_1/','title':"处理机调度的概念、层次",'section':"第二章 进程管理 ",'content':""});index.add({'id':132,'href':'/life/docs/computer_network/network_architecture/%E6%A8%A1%E5%9E%8B%E5%B1%82%E6%AC%A1%E8%AF%A6%E8%A7%A3/','title':"模型层次详解",'section':"网络体系结构",'content':"计算机网络分成结构 #  7层OSI参考模型 #  4层TCP/IP参考模型 #  5层体系结构 #  ISO/OSI模型怎么来的 #  ISO/OSI参考模型 #  ISO/OSI参考模型解释通信过程 #  应用层 #  表示层 #  会话层 #  传输层 #  网络层 #  数据链路层 #  物理层 #  OSI参考模型 与 TCP/IP参考模型 #  OSI参考模型与TCP/IP参考模型 #  相同点 #   1:都分层 2:基于独立的协议栈的概念 3:可以实现异构网络互联  不同点 #  面向连接分为三个阶段，第一是建立连接，在此阶段，发出一个建立连接的请求。\r只有在连接成功建立之后，才能开始数据传输，这是第二阶段。接着，当数据传输完毕，必须释放连接。\r而面向无连接没有这么多阶段，它直接进行数据传输。\r    ISO/OSI参考模型 TCP/IP模型     网络层 无连接 + 面向连接 无连接   传输层 面向连接 无连接 + 面向连接    五层参考模型 #   综合了OSI和TCP/IP的优点\n    参考层 说明     应用层 支持各种网络应用 FTP\\SMTP\\HTTP   传输层 进程-进程的数据传输 TCP\\UDP   网络层 源主机到目的主机的数据分组路由与转发 IP\\ICMP\\OSPF   数据链路层 把网络层传下来的数据报组装成帧 Ethernet ppp   物理层 比特传输    5层参考模型的数据封装与解封装 #  "});index.add({'id':133,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/hweaprcifa/','title':"高情商的聊天技巧",'section':"自信",'content':"技巧一 #  五个黄金公式和一个基本原则，轻轻松松提升情商。 #  公式1：不要在比你_____的人面前说你很_____ #  举个栗子。不要在比你胖的人面前说你很胖，不要在比你穷的人面前说你很穷……\n 曾经有个妹子，吃饱后摸着肚子对我说：“天啊！我都快胖成猪了！” 你以为她真很胖吗？事实上，当时的她，95斤。而当时的我，160斤。\n Hbnes\u0026quot;\u0026gt;我的内心os是：你是猪的话我是什么？猛犸象吗？！！\n在别人吃不起饭的时候，去跟他抱怨自己家的红烧肉不够入味，是件很不人道的事情。\n公式2： 认可情绪＞分析事实 #  举个栗子。同事说：“最近觉得工作好烦。”与其说：“每个人工作都烦，很正常。”不如说：“你最近总是熬夜，这么辛苦，真的很理解你为什么烦。”\n 上个月，在某众点评里给一家烤肉店打了三星。原因是店家环境一般且用的合成肉。结果评论里被店家人身攻击。生气的我找朋友吐槽。\n A听了以后，分析到：你打三颗星，店家肯定会不开心啊，所以他反驳你也是人之常情。虽然他言辞过于激烈，你也没必要跟陌生人计较，下次不去那家店就好。\n听完这些， 虽然知道他说得对，但我还是好生气啊！\n于是又跟B说了这件事，B立马回复：天啊！气死我了！这个店家太过分了！我现在就要去给他打一星！凭什么这么骂你啊！你的评论写得有理有据他作为商家不改正还口出狂言？我要叫大家一起来喷他！\n听完他说这些，心情立马好转。\n为什么A虽然说了事实，却没有什么安慰效果呢？\n因为人的情绪是没办法被冷冰冰的道理消化的。\n所以当B设身处地理解了我的委屈后，让我感受到了认同接纳，坏心情才随之消散。\n看见对方的情绪，是有效沟通的第一步。\n针没扎在自己身上的时候，不要着急说不疼。\n认可情绪比分析事实更能拉近我们的距离。\n公式3：我想_______,因为_______ #  举个栗子。“我想跟你一起吃晚饭，因为朋友推荐了一家超好吃的火锅店。”\n人是需要理由的动物，有目的，会让行动容易很多。\n提出自己的想法和需求的时加一个“因为”，被接受的概率会大大提升。\n 美国著名社会心理学家 罗伯特·西奥迪尼 在《影响力》这本书里举过一个例子。在买票的时候说：“我想插队，因为我要买票”比只说“我想插队”成功率要高出93%！ 这本书是我的心理学启蒙，不仅读起来很有意思，并且非常实用~没读过的小伙伴千万不要错过。\n 当然，理由得是合理的才行。\n如果你说“我想插队，因为我没素质”，那可能会被打。\n同理，拒绝人的时候也最好加个理由。“我不能借钱给你，因为我只帮助长得丑的人。”\n公式4：选A还是B？可以选C #  当面对两难选择的时候，可以回答题目之外的选项。\n举个栗子。女朋友问：“以后生孩子，你保大还是保小？”你可以回答：“那就都不保吧”。这样你在喜提幽默感的同时还能收获一顿小粉拳。\n N年前，在芒果卫视做节目嘉宾，有一期节目邀请到了台湾艺术作家曲家瑞，以及新东方知名英语老师英语老师周思成\n  主持人问我：你作为学生，比较喜欢火辣大胆的周老师，还是直爽可爱的曲老师？弱小的我当时很为难。毕竟两个老师各有特色，回答A或者B都会得罪另一个人！所以我当时回答：“我是个肤浅的学生，喜欢长得好看的老师。所以这两个我都喜欢！”\n 有人说：你好狡猾啊！那如果必须选择一个呢？\n老板问“A方案还是B方案？”怎么回答呢？\n记得我们刚刚说的“我想____,因为____”公式吗？说出理由，让你的选择合理化就好了。\n“我想选A方案，因为我觉得A更适合现在公司的处境。”\n公式5：提问的效果＞陈述 #  疑问句比陈述句更能让对话继续下去，同时更强烈的表达自己的想法。\n举个栗子。客户对你说：“周末一般会踢踢球。”如果你只回答一句：“我也是。”认同感不强烈，而且很难继续聊下去。所以可以问对方：“我也爱踢球！您一般踢哪个位置呀？”引导对话更深入。\n 以前在办公室看到同事穿得非常漂亮，只会说：“今天好美哦。”尽管我是发自内心的这么觉得，可是对方通常只能尬尬的回复一句：“谢谢。”然后互动就结束了。\n “你这么美，有什么穿搭心得？”＞“你真美。”\n“瘦了这么多！怎么做到的？” ＞“你瘦了。”\n疑问句不仅让你的欣赏显得更诚恳，让对方感觉到你是真的在赞美他，还能顺便请教对方怎么做到这么优秀的。\n正所谓他好你也好，大家好，才是真的好~\n说完五个黄金公式，最后说一个高情商的基本原则。\n其实就一句话：\n所有的高情商，都是同理心的体现\n所谓同理心，就是能够站在不同角度去理解问题的能力。\n举个栗子。 朋友弄丢了很喜欢的杯子，找了一整天。你觉得很没必要，于是说：“不就是喝水的杯子吗？再买一个不就好了？”\n这种态度朋友会觉得你像西伯利亚寒流一样冷酷无情。\n而有同理心的人通常会把自己代入到对方的角色里，这个时候会说的是：“这个杯子是不是对你很重要？如果是我丢了用了这么久的杯子也会很难过的。我陪你一起找。”\n回忆一下，自己丢东西的时候是不是也会着急？也会烦躁？为什么同样的事情发生在别人身上我们总能说得轻描淡写？\n 楼下一个男人病得要死，那间隔壁的一家唱着留声机，对面是弄孩子，楼上有两人狂笑；还有打牌声，河中的船上有女人哭着她死去的母亲，人类的悲欢并不相通，我只觉得他们吵闹。——鲁迅\n 所以同理心这件事情很简单，就是站在别人的角度去思考问题。\n可是简单的事情不代表容易。而正因为不那么容易，所以能够站在别人角度思考问题的人才更容易被人喜欢。\n【总结一下】 #  五大公式：\n1、 不要在比你_____的人面前说你很____\n2、 认可情绪＞分析事实\n3、 我想_______,因为______\n4、 选A还是B？可以选C\n5、 提问的效果＞陈述\n一个基本原则：\n所有的高情商，都是同理心的体现。\n既能考虑别人的感受，还能体谅自己的情绪，这才是与人长久且舒服的相处之道。\n希望我们都能成为理想中的高情商的人。不仅跟别人，也能跟自己，相处愉快~\n技巧二 #  1、拒绝一个强硬的人，最好的办法就是做个复读机。 #  举个例子给你看看：\n 同事：你帮我处理下这份文件吧！你（一脸为难，弱弱地说）：我也很想帮你，可是你看我工作这么多。同事：我的更要紧，你先处理一下。你（仍旧一脸为难）：可是我工作真的很多。同事：你还够不够朋友呀，够朋友就先帮我处理这份文件。你（一脸坚定，语气缓慢地说）：但我工作真的很多，帮不了你。\n 这一招特别适合老好人用来拒绝其他人的要求，维护自己的利益。\n因为再强硬的人，一旦遇上这种说话像复读机的人，也有种秀才遇上兵的无奈感。\n2、收到别人礼物时，表达感谢不要说“谢谢”，而要说收到礼物的心情 #   哇塞！这个东西我想要好久了，没想到你就给我买了，你实在太懂我了。我好开心呀！\n 为什么要这么说呢？\n换位思考一下，我们精心挑选了一个礼物，最担心的就是对方会不会喜欢我们所送的礼物。\n如果对方表示出了对礼物的喜欢，还告诉我们这正是他们想要的，我们也会非常开心。\n所以，礼物是别人精心准备的，我们要用心去回应。\n3、表达对别人的感谢时，一定要有具体事例来支撑。这样的感谢会显得更真诚。 #  比如：\n 我真的很感谢你，当时在我迷茫时，你给我的XX建议对我帮助巨大，正是你的指导，我才有现在这样的成绩。\n 4、赞美别人，不要欲扬先抑，而要先扬再扬。 #  举个例子给你看看：\n 拉小黑屋说法：经理，我刚看到你时，感觉你年纪很小，还担心过你行不行，没想到接触后你这么厉害。 更好的说法：经理，我刚看到你时，觉得你年纪这么小就能做到这个位置，能力肯定很强才能这样，接触后我发现果然如此！\n 这一条我是从微博大V恶魔奶爸那里学到的，我以前也以为先说一下刻板印象，再夸对方，效果会很好。\n但是我发现把不好的说在前头，即使后面说得再好听，别人的第一印象还是会落在不好的那一句。\n这听着就好像你去面试，对面试官说：“虽然我不会，但是我可以学习。”\n所以，不要采用欲扬先抑的说法，要先扬再扬。\n5、邀请别人聚会时，在最后加上一句“如果你怕太晚了，可以早点走”。 #  邀请别人参加聚会时，很多人喜欢把一件事说得太完美，太诱人。\n但其实这对有些人来说反而是压力。\n因为他们会担心只要一参加聚会，整个晚上就会困在聚会里无法脱身，想要早点走又会扫大家的兴，为了避免麻烦，他们就会拒绝。\n所以在邀请对方后，末尾加上一句“如果你怕太晚了，可以早点走”，这样就减轻了给对方的压力，他就会比较愿意尝试了。\n6、在别人讲自己喜欢的事情时，不要泼冷水。比如： #   朋友：这件裙子无论是款式还是颜色都是我喜欢的！ 死亡说法：这裙子颜色这么老，你皮肤有点黑，穿起来会显得更黑。 更好说法：我也觉得这裙子和你很配，不过你也可以试试另一个颜色的，我觉得也和你很配呢！\n 7、别人请你帮忙时，无论能不能做到，都不要快速答应，更不要把话说得太满。 #  你可以先思考一会，如果决定帮，就和对方说：\n 我试试看吧，我也没有太多把握。\n 这样对方对你的预期不会太高，你办成了，对方对你会只会更加感激，没办成，对方也不太会怪你。\n8、想让人做一件事，利用期待效应，成功的概率会更大。 #  期待效应，又称为皮格马利翁效应，也就是一个人被赋予更高期望后，他会表现得更好的一种现象。\n比如，我有个朋友想让她男朋友帮忙擦窗户，以前她会这么说：\n 你去把窗户擦了，一点儿家务活也不干！\n 她男朋友听了一肚子火：\n 我很忙，没时间做家务，你爱干不干！\n 两个人很快就吵起来了。\n后来，她学了这招期待效应，现在她就这么说：\n 你个子高，过来帮我擦一下，你一伸手就能够到，真厉害！\n 她男朋友听了后顿时心花怒放，马上就拿过抹布去擦窗户。\n所以，想让人做一件事情，要多利用期待效应，少用命令的口吻，这样对方也会很乐意帮你。\n就像我对你说：“赶紧给我点个赞，总是看了不点赞”，你肯定想打我。\n但是我对你说：“你一看到好文章就点赞，真是个爱学习和乐于分享的人”，效果就会更好。\n9、当别人尴尬时，能化解别人尴尬的人，情商都很高。 #  比如上大学时，有一次一个同学迟到了一会，小跑进教室的时候，不小心绊了一跤，摔了个四脚朝天，所有人都看着他，憋笑憋得厉害，这位同学脸也憋得通红。\n老师看到了，很幽默地说了一句：“这位同学真聪明，用这样的方式来提醒大家这是讲课的重点！大家快记下重点，这是要考试的！”\n所有人立即拿起笔来划重点，没人顾得上盯着他看了。那位同学也立即爬起来走到座位上。一场尴尬就此化解了。\n10、女生说小腹痛时，别总说多喝热水。 #  这一条是说给男孩子听的。我朋友就总吐槽他男友，在她痛经时，就跟复读机似的，只会说多喝热水，把她气得够呛。\n你这个时候不要回答“多喝热水”这种找死的答案。还是默默选择去买暖宫贴给她送去，有条件的话熬煮一杯姜丝红糖水，对于缓解女生的疼痛，安抚烦躁的情绪有奇效。\n11、想让一件事落实到行动，要让人去想“如果做这件事，我要怎么做” #  比如你之前打算和几个朋友聚餐，可是喊了很久也没成。如何才能更好落实这个聚餐的提议？\n 一般说法：大家说好周末要去聚餐的，可不要推脱呀！ 更好说法：大家说好周末要去聚餐的，你们周末哪个时间段更有空？想去哪种类型的餐厅？对餐厅地点有没有要求？\n 这样说之后，大家就会开始朝着你说的方向去讨论，越聊越具体。\n12、把是非题变成选择题。 #  是非题，就是回答除了“接受/不接受”外，就没有其他选择了。\n比如：\n 你今天负责洗碗好不好？\n 这样的问题只能回答好或者不好，没有选择的余地。\n但是如果把问题改成选择题，听起来就不一样了。比如：\n 你想选择洗碗，还是选择做菜？\n 听到这个问题的人，下意识就会去比较哪个选项更好，然后再做出选择。\n13、如果想让别人往好处想，就往好的方向提问。 #  心理学上有一个概念叫“正面检验策略”。\n也就是说如果你问对方对一件事情的看法，他会倾向于根据你的提问方向，从记忆中寻找能够符合的地方。\n比如，你问对方：“你是个细心的人吗？”，他就会回忆自己做过哪些细心的事情。\n所以，如果你想要让对方往好处想，就要往好的方向提问。\n举个例子：\n 一般说法：你今天过得怎样？ 更好说法：今天有没有发生什么好玩的事儿？\n 当然，如果你想让人宣泄情绪，也可以往坏的方向提问，比如：\n 今天有没有发生什么烦心事？\n 14、想让评论更可靠，要有所保留，只把话说到八分满，不然别人反而会怀疑你在夸大其词 #  举个例子，你想向HR推荐一个认识的人，\n 一般说法：XX领导力特别强，绝对是最适合这份工作的人了！ 更好说法：虽然我和他只合作过一次，但在那次合作中他展现了很强的领导力（可接具体事例）。如果他这次能够发挥同样的实力，我认为他非常适合这份工作！ 这样把评论建立在自己经验的基础上，主动限定评价的范围，反而会令你的话更加可靠。\n 15、别人自黑时，千万不要跟着自黑。更好的做法是捧一下对方，然后再黑自己一把 #   朋友：唉，我最近胖了好多斤呀！ 死亡回应：对呀，你怎么变这么胖了，你最近吃什么了？ 更好回应：我没这么觉得呀，我只是发现你最近气色好好呀。你看我最近总是熬夜工作，脸色特别差。\n 16、不要在比你___的人面前说你___。 #  不要在比你矮的人面前说你矮。\n不要在比你穷的人面前说穷。 不要在比你胖的人面前说胖。\n如果你说了，别人生气翻脸了，真不要怪别人。\n17、别人诉苦时，不要好为人师，给人建议 #  一定要记住一条原则：朋友和你诉苦，吐槽烦心事时，如果他没有问你该怎么办，就不要给建议和和讲大道理，对他说：“你应该这样做\u0026hellip;\u0026hellip;” \u0026ldquo;你其实可以这样\u0026hellip;\u0026hellip;\u0026rdquo;\n这是因为，当一个人在诉苦和吐槽时，更希望得到的是理解，而不是建议\n所以，朋友诉苦时，我们要适时点头表示理解和认同，然后还要说一些表达情绪的话，比如“你可真是太难了”“如果是我，我也很生气”。\n18、对自己不是完全认同的观点，先进行肯定，然后再以补充的方式提出自己的新角度 #   你的观点很有意思\u0026hellip;\u0026hellip;，我试着补充一个角度\u0026hellip;\u0026hellip; 有意思”这三个字，即不说赞成，也不说反对，但是在对方听来很舒服，他也更愿意倾听你接下来要说的观点。\n 19、被别人开玩笑时，最简单的回应方式是“自黑” #  开玩笑分为两种情况，一种是善意的调侃，一种是恶意的攻击\n无论哪种情况，如果你很严肃地对对方说：“哪有这样，你不要乱讲！”，其实都会瞬间冷场。\n相反，如果被人开玩笑，你还能用开玩笑的方式来自黑，就算别人是恶意攻击你的，他也没有继续下去的动力了，你反而不会那么尴尬。\n如何自黑？一个极易上手的技巧就是——比你想的更严重。\n举个例子看看：\n A：你唱歌怎么那么难听？ 你：这叫难听？不要瞧不起人，我还可以唱得更难听！要知道，别人唱歌收钱，我唱歌真是要收尸呀！\n 再举个例子：\n A：你英语成绩怎么那么差？ 你：不要瞧不起人，我英语差，可是我语文更差呀！\n 20、和一个内向的人聊天，要善于摘樱桃，寻找对方感兴趣的话题 #  谈话中的樱桃，指的是对方话语中一些特殊的词语，也就是可以开启对方话题的关键词。比如：\n A：你周末干嘛去了？ 你：我去我同学那玩了？你呢？ A：我哪也没去，一个人待着。\n 这里的樱桃就是“一个人”，想要让谈话继续下去，就要抓住这个词，继续聊下去。比如：\n 你：一个人待着也不错。那你一个人的时候愿意做什么？ A：我喜欢看电影。\n 这里的樱桃“电影”出现了，那么我们就可以问问对方喜欢看哪些类型的电影，或者最喜欢的电影是什么。\n以上的对话很正常，但有些人到后期一聊到自己感兴趣的话题，就成了“麦霸”，完全忽略对方的感受，谈话全部围绕自己来。比如：\n 你：你最喜欢的电影是哪一部？ A：XXX。 你：我也看过那部电影，不过我不太喜欢。我更喜欢的电影是\u0026hellip;\u0026hellip;。\n 结果你说了半天，都只是你一个人在说，对方完全插不进去你的谈话。这就不是一场好的沟通了\n21、说话要从对方的利益出发 #  举个例子，你买了一箱橙子，但是太多了吃不完，希望分一点给朋友吃，应该怎么说？\n 一般说法：我买了一箱橙子，但是太多了吃不完，给你分一点吃\n  更好说法：天凉了容易感冒，听说多吃点橙子可以补充维生素C，增强免疫力。所以我买了一箱橙子，和你分着吃。\n 在第一种说法中，虽然你是好意，但是有些人听了就会认为你吃不完才想到自己，心里会有疙瘩。\n但是第二种说法就是站在对方的利益来考虑，对方听了反而会很感谢你。\n22、能听懂别人暗示的人，情商肯定高 #  技巧三 #   1、碰到煞笔/杠精，甭管他们说什么，你都微笑着赞同  举个例子：\n表舅：读书有什么用，还不是打工人一个！你看你辛辛苦苦一个月也就挣那么几千块钱。我小学 都没读完，现在开工厂住别墅，多好。\n你：嗯嗯，表舅说得对。但是我这个人没有表舅您做生意的天赋，所以只能读书了。\n对于杠精或煞笔，你永远别想着说服他们，因为他们只相信自己所相信的。你越是反驳他们，他们越是觉得你没理。\n所以，就安安静静听他们说，不时点头赞同他们，让他们永远呆在井里，沉浸在自己的世界中，不必叫醒他们。毕竟你也叫不醒他们\n 2、别人自黑时，不要瞎跟着自黑，也不要过度吹捧人家  比如： 阿姨：唉，我越来越胖了，真羡慕你的身材。 说法 1：年纪大了都容易发福。（容易拉仇恨） 说法 2：哪里哪里，你没胖，瘦着呢。（对方以为你在嘲讽她）\n更好说法：阿姨你不能这么说，你看你又要工作，又要兼顾好家庭，能保持这样的身材已经很好了。我要是处在你这个情况，还真做不到像你一样好。（这话阿姨听了肯定开心）\n 3、因为自己的错误而被批评，要好好道歉，不要陷在负面情绪中  比如： 同事：我不是告诉过你要 XXX 吗？/你就不会 XXX 吗？真是把我气到了。\n作为新人的你：真是对不起，我之前没注意到，我这就去改。你看我自己犯蠢，都把你气到了，我给你买杯奶茶喝，你消消气。\n人都喜欢听到赞美自己的话，不喜欢被人批评，所以听到批评自己的话，都会本能排斥。\n但如果对方对你的批评，是因为你真做错了事情，那就好好道歉，给对方买杯奶茶，让对方消气。 这样说后，对话反而会觉得自己是不是说得太过了。\n 4、批评别人时，加入自己的感受，试着让对方理解，效果会更好  比如：\n这个季度销售业绩很差，我在跟老板汇报的时候很尴尬，顶着巨大的压力，希望大家认识到事情的严重性，努力完成业绩目标。\n这样的批评虽然指出业绩差这个事实，但语气一点也不强烈，同时还表达了自己的感受——觉得尴尬，最后还表达出自己的希望。\n整句话听起来一点也不刺耳，让人的接受度更高。\n 5、想要表示你在认真倾听别人说话，可以有效重复对方的话  比如：\n老板：今年公司业绩总体与去年持平，其它几家竞争公司还不如咱们。今年光景不好，能做到这样很不错了。\n你（点头示意，表示认同）：嗯，您讲得很对，今年业界形势普遍不好。据我了解，我们公司比其他几家公司情况稍好，至少接了好几个大单子。\n这里的有效重复，并不是把对方的话再说一遍，而是重复对方话中的关键点。这样不仅会让对方觉得你在认真听，而且也有助于对方继续讲下去。\n 6、能用商量的语气说话，就不要用命令的语气说话  比如：\n命令口吻：你去帮我搬一箱水过来。我手疼，搬不动。\n商量语气：我手受伤了，你能不能帮我帮一箱水过来？我实在抬不动。\n第一种说法用命令式的口吻，会令人反感，对方会想着：凭什么帮你呀！虽然后面也解释了原因，但是对方还是会觉得请求帮助语气过于强硬。\n第二种说法就是用一种商量和示弱的语气在请求帮忙，大多数人都能表示理解，成功率会更大。\n 7、面对不好回答的问题时，可以采用避实就虚的策略  比如：\n八卦同事：你觉得这次和 X 公司的合作前景如何？\n沉稳的你：这次合作虽然存在很多困难，但是对我们公司来说是一次机会。\n八卦同事：你觉得咱们的利润能有多少？\n沉稳的你：今年的业绩肯定不会太差。\n这样避开真正的问题，只回复一些虚的说法，起码不用担心回答不好会引来更严重的问题。\n 8、想要和别人拉近关系，可以聊聊对方得意的事情  比如你和一个客户初次见面，知道他喜欢写作，还出版过一部畅销书，那么你可以这么说：\n赵经理，我很早之前就听过你名字了。你曾经出版过一部畅销书，我读了后觉得你写得真不错，我从中也学到了挺多的。怪不得书那么受欢迎。\n对方听了你的话，也会觉得很开心，这样你们彼此间的陌生感就很快消除了。\n 9、夸人夸细节才能打动人  比如：\n一般说法：你今天很漂亮。 更好说法:你今天的口红色号和你的妆真配\n参考\n"});index.add({'id':134,'href':'/life/docs/javadir/thread/repeat_lock/','title':"java重复加锁",'section':"多线程与并发 ",'content':" 可重入锁，从字面来理解，就是可以重复进入的锁\n   可重入锁，也叫做递归锁，指的是同一线程外层函数获得锁之后，内层递归函数仍然有获取该锁的代码，但不受影响\n  在java环境下reentrantlock和synchronized都是可重入锁\n  可重入锁的实现原理 #    加锁时，需要判断锁是否已经被获取。如果已经被获取，则判断获取锁的线程是否是当前线程。如果是当前线程，则给获取次数加1。如果不是当前线程，则需要等待\n  释放锁时，需要给锁的获取次数减1，然后判断，次数是否为0了。如果次数为0了，则需要调用锁的唤醒方法，让锁上阻塞的其他线程得到执行的机会\n  模拟实现简单的可重入锁 #  public class RepeatLock { //private UnreentrantLock unreentrantLock = new UnreentrantLock();  private ReentrantLock reentrantLock = new ReentrantLock(); //加锁建议在try里面，解锁建议在finally  public void methodA() throws InterruptedException { try { reentrantLock.lock(); System.out.println(\u0026#34;methodA方法被调用\u0026#34;); methodB(); } finally { reentrantLock.unlock(); } } public void methodB() { try { reentrantLock.lock(); System.out.println(\u0026#34;methodB方法被调用\u0026#34;); } catch (InterruptedException e) { e.fillInStackTrace(); } finally { reentrantLock.unlock(); } } public static void main(String[] args) throws InterruptedException { for (int i = 0; i \u0026lt; 10; i++) { //演示的是同个线程多次加锁  new RepeatLock().methodA(); } } } class ReentrantLock { private boolean isLocked = false; private int lockedCount = 0; private Thread lockedOwner = null; public synchronized void lock() throws InterruptedException { Thread currentThread = Thread.currentThread(); //如果不是同一个线程上锁就等待  if (isLocked \u0026amp;\u0026amp; currentThread.getId() != lockedOwner.getId()) { System.out.println(\u0026#34;进入wait等待 \u0026#34; + Thread.currentThread().getName()); System.out.println(\u0026#34;当前锁状态 isLocked = \u0026#34; + isLocked); System.out.println(\u0026#34;当前count数量 lockedCount = \u0026#34; + lockedCount); wait(); } //标记锁住状态和当前线程和锁计数器自增  isLocked = true; lockedOwner = currentThread; lockedCount++; } public synchronized void unlock() { Thread currentThread = Thread.currentThread(); System.out.println(\u0026#34;进入unlock解锁 \u0026#34; + Thread.currentThread().getName()); //如果当前线程是该锁的持有者  if (currentThread.getId() == this.lockedOwner.getId()) { //解锁的时候锁计数器自减  lockedCount--; //直到减少至为零的时候标记为未锁状态线程持有置空唤醒等待(需要拿锁的线程)  if (lockedCount == 0) { isLocked = false; lockedOwner = null; notify(); } } } } ReentrantLock #    重入锁 ReentrantLock，顾名思义，就是支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，该锁还支持获取锁时的公平和非公平性选择\n  所谓不支持重进入，可以考虑如下场景：当一个线程调用 lock() 方法获取锁之后，如果再次调用 lock() 方法，则该线程将会被自己阻塞，原因是在调用 tryAcquire(int acquires) 方法时会返回 false，从而导致线程阻塞\n  重进入特性的实现需要解决以下两个问题 #    线程再次获取锁\n  锁需要去识别获取锁的线程是否为当前占据锁的线程，如果是，则再次成功获取\n  锁的最终释放\n  线程重复 n 次获取锁，随后在第 n 次释放该锁后，其他线程能获取到锁。实现此功能，理应考虑使用计数\n   ReentrantLock 通过组合自定义同步器来实现锁的获取与释放，以非公平锁实现为例，获取同步状态的代码如下所示，主要是增加了再次获取同步状态的处理逻辑  final boolean nonfairTryAcquire(int acquires) { final Thread current = Thread.currentThread(); int c = getState(); if (c == 0) { if (compareAndSetState(0, acquires)) { setExclusiveOwnerThread(current); return true; } } // 判断当前线程是否为获取锁的线程  else if (current == getExclusiveOwnerThread()) { // 将同步值进行增加，并返回 true  int nextc = c + acquires; if (nextc \u0026lt; 0) throw new Error(\u0026#34;Maximum lock count exceeded\u0026#34;); setState(nextc); return true; } return false; }  考虑到成功获取锁的线程再次获取锁，只是增加同步状态值，这也就要求 ReentrantLock 在释放同步状态时减少同步状态值，该方法代码如下：  protected final boolean tryRelease(int releases) { // 减少状态值  int c = getState() - releases; if (Thread.currentThread() != getExclusiveOwnerThread()) throw new IllegalMonitorStateException(); boolean free = false; // 当同步状态为0，将占有线程设为null，并返回true，表示释放成功  if (c == 0) { free = true; setExclusiveOwnerThread(null); } setState(c); return free; } "});index.add({'id':135,'href':'/life/docs/javadir/thread/tool/completionservice/','title':"CompletionService",'section':"并发工具 ",'content':"CompletionService #  "});index.add({'id':136,'href':'/life/docs/%E8%84%9A%E6%9C%AC/webpack%E5%92%8Cnodejs%E5%85%B3%E7%B3%BB/','title':"webpack和nodejs关系 ",'section':"脚本",'content':"webpack和nodejs关系 #   webpack可以将 .vue 文件转换为 .js 文件，而这个转换需要借助打包器vue-loader，这个打包器的下载是在node环境使用 npm 下载的（npm类似与一个应用商店，里面有很多包）；这样webpack在打包的时候是在node环境中运行的。\n  nodejs是js后端运行平台，可以把它看成java体系中对应的jdk，是三个里面最基础的。 npm是nodejs的包管理工具，可以把它看成maven中包依赖管理那部分。 webpack是前端工程化打包工具，可以把它看成maven中工程自动化那部分  npm #  npm是什么 #  是Node.js的包管理工具，是全球最大的开发库生态系统（注册表）\r为何产生？ #  当网站的依赖的js越来越多，程序员发现这是一件麻烦事：\r去JQuery官网下载JQuery，去 BootStrap 官网下载 BootStrap ，去 Underscore 官网下载 Underscore .......没完没了\r于是npm就出来了（全称 Node Package Manager 包管理工具），大家把自己写好的源码上传到npm官网上，如果要用某个或某些个，直接通过npm安装就可以了，并且模块A依赖B，B依赖C、D，此时只需安装A即可，因为此时npm会根据依赖关系，把所有依赖的包都下载下来并且管理起来；\r这一点和maven、gradle十分相似，只不过maven、gradle是用来管理java jar包的，而npm是用来管理js的。\r常用命令 #   npm init：初始化一个项目包，包含package.json文件 npm install：package.json的devDependencies字段里的插件全部安装到node_modules下  node #  node.js是javascript的一种运行环境，是对Google V8引擎进行的封装。是一个服务器端的javascript的解释器。\r包含关系，nodejs中含有npm，比如说你安装好nodejs，你打开cmd输入npm -v会发现出啊线npm的版本号，说明npm已经安装好。\rwebpack #  Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将这些模块按照指定的规则生成对应的静态资源。\r我们为什么使用webpack? #  开发是时候需要一个开发环境，要是我们修改一下代码保存之后浏览器就自动展现最新的代码就好了（热更新服务）\r本地代码的时候，要是调后端的接口不跨域就好了（代理服务）\r为了跟上时代，要是能用上ES678N就好了（翻译服务）\r项目要上线了，要是能一键压缩代码，图片什么的就好了（压缩打包服务）\r我们平时的静态资源都是放到CDN上的，要是能自动帮我把这些搞好的静态资源怼到CDN上就好了（自动上传服务）\r这么多服务，我们需要webpack帮我们去整合那么多的服务，而node的出现，赋予了我们操作系统的能力，要根据自己的需求来使用webpack，知道自己需要什么样的服务，webpack能不能提供这样的服务，如果可以，那么这个服务应该在构建中的呢个环节被处理。\r1.如果与输入相关的需求，找entry（比如多页面就有多个入口）\r2.如果与输出相关的需求，找output（比如你要定义输出文件的路径）\r3.如果与模块寻址相关的需求，找resolve（比如定义别名alias）\r4.如果与转译相关的需求，找loader（比如处理sass处理es678N）\r5.如果与构建流程相关的需求，找plugin（比如我需要在打包完成后，将打包好的文件复制到某个目录，然后提交到git上）\r4人点赞\r工程化\r其它 #    提问：\n  1.webpack安装一般使用npm，那么也需要安装node，而后台不想用nodeJs编写，这样是不是多余，毕竟不用nodeJs,为什么要因为使用webpage而被动安装node呢？（请原谅我对这方面知识的欠缺= =）\n  2.不仅是vue.js使用npm，很多好的框架和工具都使用，这里还请大神告诉我npm、node、nodejs他们之间的关系，好混乱啊。。\n  问题一：\n  使用webpack跟后台是否用nodejs无关，因为webpack在执行打包压缩的时候是依赖nodejs的，没有nodejs就不能使用webpack就好比你要使用电灯，首先必须得有电流，而电流是需要发动机来发电的，你不能因为说我不要发动机而直接使用电流吧~\n  问题二：\n  node和nodejs就是同一个东西，只是名字不同而已，而npm只是nodejs的一个模块\n  webpack是基于nodejs实现的， Node.js 是前端工程化的重要支柱之一\nwebpack打包后的web工程，不需要一定在nodejs环境中运行 比如在apache中也可以运行\n"});index.add({'id':137,'href':'/life/docs/javadir/groovy/groovy%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/','title':" groovy使用场景 ",'section':"groovy 学习与使用 ",'content':"groovy 使用场景 #  Groovy可以用于多种情况。比如 #    1、作为shell脚本语言完成数据处理和文件操作任务。\n  2、在Java或者Java EE应用程序中嵌入Groovy，实现Java和Groovy的集成。（这样有助于编写和集中处理经常变化的业务逻辑，或者给应用程序架构提供可编程的配置管理能力。）\n  Groovy是增强Java平台的唯一的脚本语言。 #   它提供了类似于Java的语法，内置映射（Map）、列表（List）、方法、类、闭包（closure）以及生成器。  脚本语言与系统编程语言： #   脚本语言不会替代系统编程语言，两者是相互补充的。\n 系统编程语言的目的： #    开发复杂的算法或者数据结构\n  实现计算密集型应用\n  操作大型数据集\n  实现定义良好的、变更缓慢的需求\n  脚本语言应用的目的： #    连接已有的组件\n  处理经常变化的多种类型的实体\n  具有图形化用户界面\n  拥有快速变化的功能\n  Java编译器会产生可以在Java虚拟机上运行的字节码。 #  Groovy类和Java是二进制兼容的。 #  Groovy编译器产生的字节码与Java编译器产生的字节码是完全一样的。 #  ——对于JVM而言，Groovy和Java是完全一样的。 #  因此，Groovy能够完全使用各种Java API。 #  Groovy是一门面向对象的语言。也就是说，Groovy中每一个事物最终都会被当做某些类 的一个实例对象。 #  "});index.add({'id':138,'href':'/life/docs/operating_system/one_chapter/1_7_/','title':" 操作系统的体系结构 ",'section':"第一章 操作系统概述 ",'content':"一:知识总览 #  操作系统的内核 #  二:知识回顾与重要考点 #  "});index.add({'id':139,'href':'/life/docs/databases/mysql/mysql_install_problem/','title':"windows下 Mysql安装的一些问题解决方法",'section':"mysql学习笔记",'content':"windows下 Mysql安装的一些问题解决方法 #  1: The service already exists #    在mysql安装的时候要执行 mysqld \u0026ndash;install 这个命令,假如你已经安装完之后觉得不对，但是mysql服务已经生成(windows注册服务已经有mysql了),你不删除此服务为报一个错误\n  The service already exists\n  决绝方法就是 删除mysql相关的服务\n  首先查询下是否存在mysql服务\n  sc query mysql\rSERVICE_NAME: mysql\rTYPE : 10 WIN32_OWN_PROCESS\rSTATE : 4 RUNNING\r(STOPPABLE, PAUSABLE, ACCEPTS_SHUTDOWN)\rWIN32_EXIT_CODE : 0 (0x0)\rSERVICE_EXIT_CODE : 0 (0x0)\rCHECKPOINT : 0x0\rWAIT_HINT : 0x0\r# 这种情况就是mysql 没有删除干净\r 删除该mysql  sc delete mysql\r Please consider using UTF8MB4 in order to be unambiguous.  utf 的别名是 UTF8MB4\r这里在my.ini 的文件中最好是设置 default-character-set=utf8mb4  windows系统下Mysql服务启动后立即关闭问题-排查及解决方法  查看 my.ini 中 多了这个 skip-grant-tables ,这个的原意思是跳过检查,但是在不同版本有些命令是不能使用的\r然后就是目前我暂时发现我自己使用的这个版本出了这个问题,在不同版本下最好是仔细查看配置和日志才是解决之道\r"});index.add({'id':140,'href':'/life/docs/javadir/tooldoc/js_console%E7%94%A8%E6%B3%95/','title':"常用 Console 调试命令",'section':"Java公共库文档总结 ",'content':"Console 对象方法 #    常用 Console 调试命令\n  console.log('hello');\rconsole.info('信息');\rconsole.error('错误');\rconsole.warn('警告');\rassert() #   ssert方法接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。  // 实例\rconsole.assert(true === false, \u0026quot;判断条件不成立\u0026quot;)\r// Assertion failed: 判断条件不成立\rclear() #   清除当前控制台的所有输出，将光标回置到第一行。  console.clear()\rcount() #   用于计数，输出它被调用了多少次。  (function() {\rfor (var i = 0; i \u0026lt; 5; i++) { console.count('count'); }\r})()\rerror() #   输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发生的堆栈。  console.error(\u0026quot;Error: %s (%i)\u0026quot;, \u0026quot;Server is not responding\u0026quot;,500)\rgroup() #   用于将显示的信息分组，可以把信息进行折叠和展开。  console.group('第一层');\rconsole.group('第二层');\rconsole.log('error');\rconsole.error('error');\rconsole.warn('error');\rconsole.groupEnd(); console.groupEnd();\rinfo() #   console.log 别名，输出信息  console.info(\u0026quot;runoob\u0026quot;)\rlog() #   输出信息  console.log(\u0026quot;runoob\u0026quot;)\rtable() #   将复合类型的数据转为表格显示。  var arr= [ { num: \u0026quot;1\u0026quot;},\r{ num: \u0026quot;2\u0026quot;}, { num: \u0026quot;3\u0026quot; }\r];\rconsole.table(arr);\rvar obj= {\ra:{ num: \u0026quot;1\u0026quot;},\rb:{ num: \u0026quot;2\u0026quot;},\rc:{ num: \u0026quot;3\u0026quot; }\r};\rconsole.table(obj);\rtime() #  ++ 计时开始\nconsole.time('计时器1');\rfor (var i = 0; i \u0026lt; 100; i++) {\rfor (var j = 0; j \u0026lt; 100; j++) {}\r}\rconsole.timeEnd('计时器1');\rconsole.time('计时器2');\rfor (var i = 0; i \u0026lt; 1000; i++) {\rfor (var j = 0; j \u0026lt; 1000; j++) {}\r}\rconsole.timeEnd('计时器2');\rtimeEnd() #   计时结束  console.time('计时器1');\rfor (var i = 0; i \u0026lt; 100; i++) {\rfor (var j = 0; j \u0026lt; 100; j++) {}\r}\rconsole.timeEnd('计时器1');\rconsole.time('计时器2');\rfor (var i = 0; i \u0026lt; 1000; i++) {\rfor (var j = 0; j \u0026lt; 1000; j++) {}\r}\rconsole.timeEnd('计时器2');\rwarn() #   输出警告信息  console.warn(\u0026quot;警告\u0026quot;)\r 最常用的就是 console.log 了。 console上述的集中度支持printf的占位符格式，支持的占位符有：字符（%s）、整数（%d或%i）、浮点数（%f）和对象（%o）:   占位符\t作用\r%s\t字符串\r%d or %i\t整数\r%f\t浮点数\r%o\t可展开的DOM\r%O\t列出DOM的属性\r%c\t根据提供的css样式格式化字符串\r实例:\rconsole.log(\u0026quot;%d年%d月%d日\u0026quot;,2011,3,26);\r"});index.add({'id':141,'href':'/life/docs/operating_system/two_chapter/2_2_2/','title':"进程调度的时机、切换与过程、方式",'section':"第二章 进程管理 ",'content':""});index.add({'id':142,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/we4ycwfxb7/','title':"我自己理解的口才练习技巧",'section':"自信",'content':" 1、朗读朗诵。  自己读书,大声地读出来。每天坚持朗读一些文章既可以口齿清晰伶俐,又积累了知识信息量,更重要的是对身体大有益处 每天坚持朗读半小时以上\n  2、(气息和声)尝试躺下来朗读 腹式呼吸，这是练声练气的最好方法每天睡觉之前，躺着大声朗读十分钟，每天起床之前，先唱首歌。坚持一两个月，觉会感觉自己的呼吸流畅了，声音洪亮，音质也好听了\n  3、对着镜子练习并且录音摄像 便于观察自己哪里有问题\n  4、速读训练 是在于锻炼人口齿伶俐，语音准确，吐字清晰\n  5、即兴朗读 平时空闲时，你可以随便拿一张报纸，任意翻到一段，然后尽量一气呵成的读下去。而且，在朗读过程中，能够注意一下，上半句看稿子，下半句离开稿子看前面（假设前面有听众）。长期以往，你发现自己记忆力加强许多，快速理解力和即兴构思能力也在加强。\n  6、复述法 复述法简单地说，就是把别人的话重复地叙述一遍。可以找一位伙伴一起训练。首先，请对方随便讲一个话题，或是一个故事。自己先注意倾听。然后再向对方复述一遍。这种练习在于锻炼语言的连贯性及现场即兴构思能力，和语言组织能力。如果能面对众人复述就更好了，它还可以锻炼你的胆量，克服紧张心理。\n  7、练唇和舌 大概就是在嘴巴里绕舌头\n  8、微笑练习 日本微笑瑜伽\n  （1）面对镜子，将上排牙齿咬住下唇\n（2）将上唇用力往上拉起，直到露出牙龈为止\n（3）再将嘴角用力提起，直到脸颊两边肌肉颤抖\n（4）接着用力睁大双眼，保持 2 分钟\n"});index.add({'id':143,'href':'/life/docs/javadir/thread/park/','title':"park",'section':"多线程与并发 ",'content':"LockSupport 原理和使用 #  一: 基本介绍 #    LockSupport是一个线程阻塞工具类，所有的方法都是静态方法，可以让线程在任意位置阻塞，阻塞之后也有对应的唤醒方法。归根揭底，LockSupport调用的是Unsafe中的native代码\n  LockSupport类使用了一种名为Permit（许可）的概念来做到阻塞和唤醒线程的功能，每个线程都有一个许可（permit）。\n  permit只有两个值1和0，默认是0。\n  可以把许可看成是一种（0，1）信号量（Semaphore），但与Semaphore不同的是，许可的累加上限是1。\n  permit默认是0，所以一开始调用park()方法，当前线程就会阻塞，直到别的线程将当前线程的permit设置为1时，park()方法会被唤醒，然后会将permit再次设置为0并返回。\n  面试题套路 #  为什么可以先唤醒线程后阻塞线程\r-----因为unpark获取了一个凭证，之后再调用park方法，就可以名正言顺的凭证消费，故不会阻塞。\r为什么唤醒两次后阻塞两次，但最终结果还会阻塞线程？\r-----因为凭证的数量最多为1，连续调用两次unpark和调用一次unpark效果一样，只会增加一个凭证；而调用两次park却需要消费两个凭证，证不够，不能放行。\r可以把permit理解为boolean只有两个状态位置 大多数基本都使用int来描述boolean\rlet permit = 0;\r当 permit = 1是阻塞\r//第一次 unpark\rpermit--\rpark\rpermit++\r检测permit=0不会阻塞\runpark\runpark 第二次 permit由于只能是0和1 所以第二次没有效果\rpark permit 回到初始值\rpark permit达到了阻塞情况 阻塞\r  3种让线程等待和唤醒的方法\n  1:使用Object中的wait()方法让线程等待，使用Object中的notify()方法唤醒线程\n  2:使用JUC包中Condition的await()方法让线程等待，使用signal()方法唤醒线程\n  3:LockSupport类可以阻塞当前线程以及唤醒指定被阻塞的线程\n  二: LockSupport 主要api #   假如没有的就到UNSAFE类中去找 LockSupport实际调用的就是UNSAFE  public static void park(Object blocker); // 暂停当前线程 public static void parkNanos(Object blocker, long nanos); // 暂停当前线程，不过有超时时间的限制 public static void parkUntil(Object blocker, long deadline); // 暂停当前线程，直到某个时间 public static void park(); // 无期限暂停当前线程 UNSAFE.park(false, 0L)调用的就是下面这个方法 public native void park(boolean isAbsolute, long time);//第一个参数是是否是绝对时间，第二个参数是等待时间值。如果isAbsolute是true则会实现ms定时。如果isAbsolute是false则会实现ns定时。 public static void parkNanos(long nanos); // 暂停当前线程，不过有超时时间的限制 public static void parkUntil(long deadline); // 暂停当前线程，直到某个时间 public static void unpark(Thread thread); // 恢复当前线程 public static Object getBlocker(Thread t); //返回提供给最近一次尚未解除阻塞的 park 方法调用的 blocker 对象，如果该调用不受阻塞，则返回 null。 public native void park(boolean isAbsolute, long time); #   第一个参数是是否是绝对时间，第二个参数是等待时间值。如果isAbsolute是true则会实现ms定时。如果isAbsolute是false则会实现ns定时\n  简单来说 UNSAFE.park(false, 0L) UNSAFE.park(true, 0L) 效果都是一致 反正就是线程超过时间限制阻塞的时间为0\n  继续 UNSAFE.park(false, 1L) 和 UNSAFE.park(true, 1L) 区别就来了 isAbsolute true就是绝对时间(不知道是翻译原因还是怎么的应该是低精度的ms定时方法) isAbsolute false 高精度计时ns定时方法\n  isAbsolute true 低精度  public static void parkUntil(long deadline) { UNSAFE.park(true, deadline); }  isAbsolute false 高精度  public static void parkNanos(long nanos) { if (nanos \u0026gt; 0) UNSAFE.park(false, nanos); }   阻塞线程 条件\n  线程执行过程前后被锁机制给阻塞了 也就是达到了 锁的阻塞临界条件 可以参考我的 JOL工具 和 ReentrantLock\n  操作系统调度时间 触发了 这个你学了操作系统就知道了 (学习并发你如果学了操作系统会很容易明白线程的很多原理的)\n  线程到期时间\n  线程被中断 (包括异常,主动被动触发线程的终端临界机制等)\n  UNSAFE.park(true or false, 0) 直接被阻塞(理论上 因为假如permit处于初始状态的时候被调用了一次unpark那么permit处于高位1 park之后permit又回到了初始状态)\n  啰嗦一句 UNSAFE.park 和 UNSAFE.unpark 都是直接基于线程的和锁无关 一个线程要想执行必须通过重重难关才能执行 很多机制都可以使他不能执行 只要阻塞线程的某一种机制被出发那么它就会被阻塞 有点类似于 true || false 或者 true|| true 或者 false|| true 的感觉 当然了可能又很多条件不止2个boolean\n  UNSAFE 是里面大部分是native修饰的方法 也就是全部是远程调用方法 这个类是一个c++的类来实现的\n  解除阻塞线程 条件\n  解除各种锁的屏障机制\n  解除直接基于线程的屏障机制\n  恢复线程执行 必须解除所以直接或者间接 阻塞机制 并且解除后线程还处于可以被调度执行的情况\n  三:例子 #   1  import java.util.Timer; import java.util.TimerTask; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.locks.LockSupport; public class LockSupportDemo2 { public static void main(String[] args) { AtomicBoolean atomicBoolean = new AtomicBoolean(false); long timeout = 6; Thread t1 = new Thread(() -\u0026gt; { System.out.println(\u0026#34;start \u0026#34;+Thread.currentThread().getId()); try { TimeUnit.SECONDS.sleep(timeout-1); } catch (InterruptedException e) { e.printStackTrace(); } LockSupport.park(); System.out.println(\u0026#34;park \u0026#34;+Thread.currentThread().getId()); }, \u0026#34;t1\u0026#34;); t1.start(); try { TimeUnit.SECONDS.sleep(timeout+2); } catch (InterruptedException e) { e.printStackTrace(); } LockSupport.unpark(t1); System.out.println(\u0026#34;unpark \u0026#34;+t1.getId()); } }  2  public static void main(String[] args) throws Exception { Thread A = new Thread(() -\u0026gt; { int sum = 0; for (int i = 0; i \u0026lt; 10; i++) { sum += i; } LockSupport.park(); System.out.println(sum); }); A.start(); //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法  Thread.sleep(1000); LockSupport.unpark(A); } 四:park unpark 原理 #  每个线程都有自己的一个 Parker 对象，由三部分组成 _counter ， _cond 和 _mutex . 打个比喻线程就像一个旅人，Parker 就像他随身携带的背包，条件变量就好比背包中的帐篷。 _counter 就好比背包中的备用干粮（0 为耗尽，1 为充足）调用 park 就是要看需不需要停下来歇息,如果备用干粮耗尽，那么钻进帐篷歇息. 如果备用干粮充足，那么不需停留，继续前进调用 unpark，就好比令干粮充足. 如果这时线程还在帐篷，就唤醒让他继续前进,如果这时线程还在运行，那么下次他调用 park 时， 仅是消耗掉备用干粮，不需停留继续前进,因为背包空间有限，多次调用 unpark 仅会补充一份备用干粮\n 当前线程调用 Unsafe.park() 方法 检查 _counter ，本情况为 0，这时，获得 _mutex 互斥锁 线程进入 _cond 条件变量阻塞 设置 _counter = 0   当前线程调用 Unsafe.park() 方法 检查 _counter ，本情况为 0，这时，获得 _mutex 互斥锁 线程进入 _cond 条件变量阻塞 设置 _counter = 0   调用 Unsafe.unpark(Thread_0) 方法，设置 _counter 为 1 唤醒 _cond 条件变量中的 Thread_0 Thread_0 恢复运行 设置 _counter 为 0   调用 Unsafe.unpark(Thread_0) 方法，设置 _counter 为 1 当前线程调用 Unsafe.park() 方法检查 _counter ，本情况为 1，这时线程无需阻塞，继续运行 设置 _counter 为 0  五:park/unpark 原理总结 #  park 操作 #    1.获取当前线程关联的 Parker 对象。\n  2.将计数器置为 0，同时检查计数器的原值是否为 1，如果是则放弃后续操作。\n  3.在互斥量上加锁。\n  4.在条件变量上阻塞，同时释放锁并等待被其他线程唤醒，当被唤醒后，将重新获取锁。\n  5.当线程恢复至运行状态后，将计数器的值再次置为 0。\n  释放锁。\n  unpark 操作： #    6.获取目标线程关联的 Parker 对象（注意目标线程不是当前线程）。\n  7.在互斥量上加锁。\n  8.将计数器置为 1。\n  9.唤醒在条件变量上等待着的线程。\n  10.释放锁。\n  六:hotspot对应的类 #  class Parker : public os::PlatformParker { private: volatile int _counter ; //计数  Parker * FreeNext ; //指向下一个Parker  JavaThread * AssociatedWith ; // 指向parker所属的线程。  public: Parker() : PlatformParker() { _counter = 0 ; //初始化为0  FreeNext = NULL ; AssociatedWith = NULL ; } protected: ~Parker() { ShouldNotReachHere(); } public: // For simplicity of interface with Java, all forms of park (indefinite,  // relative, and absolute) are multiplexed into one call.  void park(bool isAbsolute, jlong time); void unpark(); // Lifecycle operators  static Parker * Allocate (JavaThread * t) ; static void Release (Parker * e) ; private: static Parker * volatile FreeList ; static volatile int ListLock ; };  Unsafe调用的park最终会调用Parker类的park函数，Parker继承了PlatformParker  class PlatformParker : public CHeapObj\u0026lt;mtInternal\u0026gt; { protected: enum { REL_INDEX = 0, ABS_INDEX = 1 }; int _cur_index; // 条件变量数组下标，which cond is in use: -1, 0, 1  pthread_mutex_t _mutex [1] ; //pthread互斥锁  pthread_cond_t _cond [2] ; // pthread条件变量数组,一个用于相对时间，一个用于绝对时间。  public: // TODO-FIXME: make dtor private  ~PlatformParker() { guarantee (0, \u0026#34;invariant\u0026#34;) ; } public: PlatformParker() { int status; status = pthread_cond_init (\u0026amp;_cond[REL_INDEX], os::Linux::condAttr()); assert_status(status == 0, status, \u0026#34;cond_init rel\u0026#34;); status = pthread_cond_init (\u0026amp;_cond[ABS_INDEX], NULL); assert_status(status == 0, status, \u0026#34;cond_init abs\u0026#34;); status = pthread_mutex_init (_mutex, NULL); assert_status(status == 0, status, \u0026#34;mutex_init\u0026#34;); _cur_index = -1; // mark as unused  } };  PlatformParker主要看三个成员变量，_cur_index, _mutex, _cond。其中mutex和cond就是很熟悉的glibc nptl包中符合posix标准的线程同步工具，一个互斥锁一个条件变量。再看thread和Parker的关系，在hotspot的Thread类的NameThread内部类中有一个 Parker成员变量。说明parker是每线程变量，在创建线程的时候就会生成一个parker实例  // JSR166 per-thread parker private: Parker* _parker;  再看park的实现  void Parker::park(bool isAbsolute, jlong time) { //原子交换，如果_counter \u0026gt; 0,则将_counter置为0，直接返回，否则_counter为0  if (Atomic::xchg(0, \u0026amp;_counter) \u0026gt; 0) return; //获取当前线程  Thread* thread = Thread::current(); assert(thread-\u0026gt;is_Java_thread(), \u0026#34;Must be JavaThread\u0026#34;); //下转型为java线程  JavaThread *jt = (JavaThread *)thread; //如果当前线程设置了中断标志，调用park则直接返回，所以如果在park之前调用了  //interrupt就会直接返回  if (Thread::is_interrupted(thread, false)) { return; } // 高精度绝对时间变量  timespec absTime; //如果time小于0，或者isAbsolute是true并且time等于0则直接返回  if (time \u0026lt; 0 || (isAbsolute \u0026amp;\u0026amp; time == 0) ) { // don\u0026#39;t wait at all  return; } //如果time大于0，则根据是否是高精度定时计算定时时间  if (time \u0026gt; 0) { unpackTime(\u0026amp;absTime, isAbsolute, time); } //进入安全点避免死锁  ThreadBlockInVM tbivm(jt); //如果当前线程设置了中断标志，或者获取mutex互斥锁失败则直接返回  //由于Parker是每个线程都有的，所以_counter cond mutex都是每个线程都有的，  //不是所有线程共享的所以加锁失败只有两种情况，第一unpark已经加锁这时只需要返回即可，  //第二调用调用pthread_mutex_trylock出错。对于第一种情况就类似是unpark先调用的情况，所以  //直接返回。  if (Thread::is_interrupted(thread, false) || pthread_mutex_trylock(_mutex) != 0) { return; } int status ; //如果_counter大于0，说明unpark已经调用完成了将_counter置为了1，  //现在只需将_counter置0，解锁，返回  if (_counter \u0026gt; 0) { // no wait needed  _counter = 0; status = pthread_mutex_unlock(_mutex); assert (status == 0, \u0026#34;invariant\u0026#34;); OrderAccess::fence(); return; } OSThreadWaitState osts(thread-\u0026gt;osthread(), false /* not Object.wait() */); jt-\u0026gt;set_suspend_equivalent(); // cleared by handle_special_suspend_equivalent_condition() or java_suspend_self()  assert(_cur_index == -1, \u0026#34;invariant\u0026#34;); //如果time等于0，说明是相对时间也就是isAbsolute是fasle(否则前面就直接返回了),则直接挂起  if (time == 0) { _cur_index = REL_INDEX; // arbitrary choice when not timed  status = pthread_cond_wait (\u0026amp;_cond[_cur_index], _mutex) ; } else { //如果time非0  //判断isAbsolute是false还是true，false的话使用_cond[0]，否则用_cond[1]  _cur_index = isAbsolute ? ABS_INDEX : REL_INDEX; //使用条件变量使得当前线程挂起。  status = os::Linux::safe_cond_timedwait (\u0026amp;_cond[_cur_index], _mutex, \u0026amp;absTime) ; //如果挂起失败则销毁当前的条件变量重新初始化。  if (status != 0 \u0026amp;\u0026amp; WorkAroundNPTLTimedWaitHang) { pthread_cond_destroy (\u0026amp;_cond[_cur_index]) ; pthread_cond_init (\u0026amp;_cond[_cur_index], isAbsolute ? NULL : os::Linux::condAttr()); } } //如果pthread_cond_wait成功则以下代码都是线程被唤醒后执行的。  _cur_index = -1; assert_status(status == 0 || status == EINTR || status == ETIME || status == ETIMEDOUT, status, \u0026#34;cond_timedwait\u0026#34;); #ifdef ASSERT pthread_sigmask(SIG_SETMASK, \u0026amp;oldsigs, NULL); #endif //将_counter变量重新置为1  _counter = 0 ; //解锁  status = pthread_mutex_unlock(_mutex) ; assert_status(status == 0, status, \u0026#34;invariant\u0026#34;) ; // 使用内存屏障使_counter对其它线程可见  OrderAccess::fence(); // 如果在park线程挂起的时候调用了stop或者suspend则还需要将线程挂起不能返回  if (jt-\u0026gt;handle_special_suspend_equivalent_condition()) { jt-\u0026gt;java_suspend_self(); } }  再看unpark函数  void Parker::unpark() { int s, status ; //加互斥锁  status = pthread_mutex_lock(_mutex); assert (status == 0, \u0026#34;invariant\u0026#34;) ; s = _counter; _counter = 1; //将_counter置1  //如果_counter是0则说明调用了park或者没调用(初始为counter0）  //这也说明park和unpark调用没有先后顺序。  if (s \u0026lt; 1) { // 说明当前parker对应的线程挂起了，因为_cur_index初始是-1，并且等待条件变量的线程被唤醒  //后也会将_cur_index重置-1  if (_cur_index != -1) { //如果设置了WorkAroundNPTLTimedWaitHang先调用signal再调用unlock，否则相反  //这两个先后顺序都可以，在hotspot在Linux下默认使用这种方式  //即先调用signal再调用unlock  if (WorkAroundNPTLTimedWaitHang) { status = pthread_cond_signal (\u0026amp;_cond[_cur_index]); assert (status == 0, \u0026#34;invariant\u0026#34;); status = pthread_mutex_unlock(_mutex); assert (status == 0, \u0026#34;invariant\u0026#34;); } else { status = pthread_mutex_unlock(_mutex); assert (status == 0, \u0026#34;invariant\u0026#34;); status = pthread_cond_signal (\u0026amp;_cond[_cur_index]); assert (status == 0, \u0026#34;invariant\u0026#34;); } } else { //如果_cur_index == -1说明线程没在等待条件变量，则直接解锁  pthread_mutex_unlock(_mutex); assert (status == 0, \u0026#34;invariant\u0026#34;) ; } } else {//如果_counter == 1,说明线程调用了一次或多次unpark但是没调用park，则直接解锁  pthread_mutex_unlock(_mutex); assert (status == 0, \u0026#34;invariant\u0026#34;) ; }   unpark主要是根据counter和cur_index判断当前线程是否挂在条件变量上，如果是则signal，否则就什么也不做。\n  所以park和unpark和核心就是counter cur_index, mutex,cond，通过使用条件变量对counter进行操作，在调用park的时候如果counter是0则会去执行挂起的流程，否则返回，在挂起恢复后再将counter置为0。在unpark的时候如果counter是0则会执行唤醒的流程，否则不执行唤醒流程，并且不管什么情况始终将counter置为1。\n  "});index.add({'id':144,'href':'/life/docs/javadir/thread/tool/executorservice/','title':"ExecutorService",'section':"并发工具 ",'content':"ExecutorService #  "});index.add({'id':145,'href':'/life/docs/%E8%84%9A%E6%9C%AC/webpack_loader/','title':"webpack loader",'section':"脚本",'content':"first css-loader #   文件目录  ▸\\t1 ▸ \\t1\\dist ▸ \\t1\\dist\\index.js ▸ \\t1\\node_modules ▸ \\t1\\node_modules\\.bin //省略 ▸ \\t1\\node_modules\\yocto-queue\\readme.md ▸ \\t1\\package-lock.json ▸ \\t1\\package.json ▸ \\t1\\src ▸ \\t1\\src\\index.css ▸ \\t1\\src\\index.js ▸ \\t1\\webpack.config.js  webpack.config.js content  module.exports = { entry: { index :\u0026#34;./src/index.js\u0026#34; }, mode :\u0026#39;development\u0026#39; , module :{ rules:[ {test :/.css$/ ,use : \u0026#34;css-loader\u0026#34;} ] } }  package.json content  { \u0026#34;name\u0026#34;: \u0026#34;t1\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;css-loader\u0026#34;: \u0026#34;^5.2.6\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^5.44.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.7.2\u0026#34; } }  命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\u0026gt;npm init -y\rWrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\package.json:\r{\r\u0026quot;name\u0026quot;: \u0026quot;t1\u0026quot;,\r\u0026quot;version\u0026quot;: \u0026quot;1.0.0\u0026quot;,\r\u0026quot;description\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;main\u0026quot;: \u0026quot;webpack.config.js\u0026quot;,\r\u0026quot;scripts\u0026quot;: {\r\u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot;\r},\r\u0026quot;keywords\u0026quot;: [],\r\u0026quot;author\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;license\u0026quot;: \u0026quot;ISC\u0026quot;\r}\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\u0026gt;npm add -D webpack webpack-cli\rnpm notice created a lockfile as package-lock.json. You should commit this file.\rnpm WARN t1@1.0.0 No description\rnpm WARN t1@1.0.0 No repository field.\r+ webpack-cli@4.7.2\r+ webpack@5.44.0\radded 121 packages from 155 contributors in 12.283s\r16 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\u0026gt;npm run build\r\u0026gt; t1@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\r\u0026gt; webpack\rassets by status 159 bytes [cached] 1 asset\r./src/index.js 55 bytes [built] [code generated]\rWARNING in configuration\rThe 'mode' option has not been set, webpack will fallback to 'production' for this value.\rSet 'mode' option to 'development' or 'production' to enable defaults for each environment.\rYou can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/\rERROR in ./src/index.js 1:0-20\rModule not found: Error: Can't resolve 'index.css' in 'D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\src'\rDid you mean './index.css'?\rRequests that should resolve in the current directory need to start with './'.\rRequests that start with a name are treated as module requests and resolve within module directories (node_modules).\rIf changing the source code is not an option there is also a resolve options called 'preferRelative' which tries to resolve these kind of requests in the current directory too.\rresolve 'index.css' in 'D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\src'\rParsed request is a module\rusing description file: D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\package.json (relative path: ./src)\rField 'browser' doesn't contain a valid alias configuration\rresolve as module\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\src\\node_modules doesn't exist or is not a directory\rlooking for modules in D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\rsingle file module\rusing description file: D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\package.json (relative path: ./node_modules/index.css)\rno extension\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css doesn't exist\r.js\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css.js doesn't exist\r.json\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css.json doesn't exist\r.wasm\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css.wasm doesn't exist\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css doesn't exist\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\cycle\\study\\webpack\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\cycle\\study\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\cycle\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\node_modules doesn't exist or is not a directory\rD:\\node_modules doesn't exist or is not a directory\rwebpack 5.44.0 compiled with 1 error and 1 warning in 189 ms\rnpm ERR! code ELIFECYCLE\rnpm ERR! errno 1\rnpm ERR! t1@1.0.0 build: `webpack`\rnpm ERR! Exit status 1\rnpm ERR!\rnpm ERR! Failed at the t1@1.0.0 build script.\rnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\rnpm ERR! A complete log of this run can be found in:\rnpm ERR! C:\\Users\\dell\\AppData\\Roaming\\npm-cache\\_logs\\2021-07-10T09_07_28_227Z-debug.log\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\u0026gt;npm run build\r\u0026gt; t1@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\r\u0026gt; webpack\rasset index.js 2.19 KiB [emitted] (name: index)\rruntime modules 274 bytes 1 module\r./src/index.js 55 bytes [built] [code generated]\rERROR in ./src/index.js 1:0-20\rModule not found: Error: Can't resolve 'index.css' in 'D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\src'\rDid you mean './index.css'?\rRequests that should resolve in the current directory need to start with './'.\rRequests that start with a name are treated as module requests and resolve within module directories (node_modules).\rIf changing the source code is not an option there is also a resolve options called 'preferRelative' which tries to resolve these kind of requests in the current directory too.\rresolve 'index.css' in 'D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\src'\rParsed request is a module\rusing description file: D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\package.json (relative path: ./src)\rField 'browser' doesn't contain a valid alias configuration\rresolve as module\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\src\\node_modules doesn't exist or is not a directory\rlooking for modules in D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\rsingle file module\rusing description file: D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\package.json (relative path: ./node_modules/index.css)\rno extension\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css doesn't exist\r.js\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css.js doesn't exist\r.json\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css.json doesn't exist\r.wasm\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css.wasm doesn't exist\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css doesn't exist\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\cycle\\study\\webpack\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\cycle\\study\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\cycle\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\node_modules doesn't exist or is not a directory\rD:\\node_modules doesn't exist or is not a directory\rwebpack 5.44.0 compiled with 1 error in 84 ms\rnpm ERR! code ELIFECYCLE\rnpm ERR! errno 1\rnpm ERR! t1@1.0.0 build: `webpack`\rnpm ERR! Exit status 1\rnpm ERR!\rnpm ERR! Failed at the t1@1.0.0 build script.\rnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\rnpm ERR! A complete log of this run can be found in:\rnpm ERR! C:\\Users\\dell\\AppData\\Roaming\\npm-cache\\_logs\\2021-07-10T09_08_41_846Z-debug.log\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\u0026gt;npm add -D css-loader\rnpm WARN t1@1.0.0 No description\rnpm WARN t1@1.0.0 No repository field.\r+ css-loader@5.2.6\radded 21 packages from 55 contributors in 8.209s\r18 packages are looking for funding\rrun `npm fund` for details\rsecond css-loader #   文件目录  ▸\\t2\r▸ \\t2\\dist\r▸ \\t2\\dist\\index.js\r▸ \\t2\\node_modules\r▸ \\t2\\node_modules\\.bin\r▸ \\t2\\node_modules\\.bin\\acorn\r//省略\r▸ \\t2\\node_modules\\yocto-queue\r▸ \\t2\\node_modules\\yocto-queue\\index.d.ts\r▸ \\t2\\node_modules\\yocto-queue\\index.js\r▸ \\t2\\node_modules\\yocto-queue\\license\r▸ \\t2\\node_modules\\yocto-queue\\package.json\r▸ \\t2\\node_modules\\yocto-queue\\readme.md\r▸ \\t2\\package-lock.json\r▸ \\t2\\package.json\r▸ \\t2\\src\r▸ \\t2\\src\\index.css\r▸ \\t2\\src\\index.js\r▸ \\t2\\webpack.config.js\r webpack.config.js content  const path = require(\u0026#34;path\u0026#34;) ; module.exports = { entry: { index :\u0026#34;./src/index.js\u0026#34; }, mode :\u0026#39;development\u0026#39; , output: { path: path.resolve(__dirname, \u0026#39;dist\u0026#39;) }, module :{ rules:[ {test : /.css$/ , use : \u0026#34;css-loader\u0026#34;} ] } }  package.json content  { \u0026#34;name\u0026#34;: \u0026#34;t2\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;css-loader\u0026#34;: \u0026#34;^5.2.6\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^5.44.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.7.2\u0026#34; } }  命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\u0026gt;npm init -y\rWrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\\package.json:\r{\r\u0026quot;name\u0026quot;: \u0026quot;t2\u0026quot;,\r\u0026quot;version\u0026quot;: \u0026quot;1.0.0\u0026quot;,\r\u0026quot;description\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;main\u0026quot;: \u0026quot;webpack.config.js\u0026quot;,\r\u0026quot;scripts\u0026quot;: {\r\u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot;\r},\r\u0026quot;keywords\u0026quot;: [],\r\u0026quot;author\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;license\u0026quot;: \u0026quot;ISC\u0026quot;\r}\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\u0026gt;npm add -D webpack webpack-cli\rnpm notice created a lockfile as package-lock.json. You should commit this file.\rnpm WARN t2@1.0.0 No description\rnpm WARN t2@1.0.0 No repository field.\r+ webpack@5.44.0\r+ webpack-cli@4.7.2\radded 121 packages from 155 contributors in 10.062s\r16 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\u0026gt;npm add -D css-loader\rnpm WARN t2@1.0.0 No description\rnpm WARN t2@1.0.0 No repository field.\r+ css-loader@5.2.6\radded 21 packages from 55 contributors in 3.292s\r18 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\u0026gt;npm run build\r\u0026gt; t2@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\r\u0026gt; webpack\rasset index.js 7.23 KiB [emitted] (name: index)\rruntime modules 937 bytes 4 modules\rcacheable modules 1.95 KiB\r./src/index.js 57 bytes [built] [code generated]\r./src/index.css 333 bytes [built] [code generated]\r./node_modules/css-loader/dist/runtime/api.js 1.57 KiB [built] [code generated]\rwebpack 5.44.0 compiled successfully in 311 ms\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\u0026gt;node dist/index.js\rhello index.js\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\u0026gt;\r index.css || index.js content  //css content .main { color: #0d6efd; } //js content import \u0026#34;./index.css\u0026#34; ; console.log(\u0026#34;hello index.js\u0026#34;) ; second - 2 css-loader #   webpack.config.js content  module.exports = { entry: { index :\u0026#34;./src/index.js\u0026#34; }, mode :\u0026#39;development\u0026#39; , module :{ rules:[ {test : /.css$/ , use : \u0026#34;css-loader\u0026#34;} ] } }  其他和 second 内容一致  first [\u0026ldquo;style-loader\u0026rdquo;, \u0026ldquo;css-loader\u0026rdquo;] #   文件目录  ▸\\t3\r▸ \\t3\\dist\r▸ \\t3\\dist\\index.js\r▸ \\t3\\node_modules\r▸ \\t3\\node_modules\\.bin\r▸ \\t3\\node_modules\\.bin\\acorn\r//省略\r▸ \\t3\\node_modules\\yocto-queue\\index.js\r▸ \\t3\\node_modules\\yocto-queue\\license\r▸ \\t3\\node_modules\\yocto-queue\\package.json\r▸ \\t3\\node_modules\\yocto-queue\\readme.md\r▸ \\t3\\package-lock.json\r▸ \\t3\\package.json\r▸ \\t3\\src\r▸ \\t3\\src\\index.css\r▸ \\t3\\src\\index.js\r▸ \\t3\\webpack.config.js\r webpack.config.js content  const HtmlWebPackPlugin = require(\u0026#34;html-webpack-plugin\u0026#34;); module.exports = { entry: { index: \u0026#34;./src/index.js\u0026#34; }, mode: \u0026#39;development\u0026#39;, module: { rules: [ { test: /.css$/, use: [\u0026#34;style-loader\u0026#34;, \u0026#34;css-loader\u0026#34;] } ] }, plugins: [ new HtmlWebPackPlugin( { /*你帮我应用这个模板*/ template: \u0026#34;./src/indexTemplate.html\u0026#34; } ), ] }  package.json content  { \u0026#34;name\u0026#34;: \u0026#34;t4\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;css-loader\u0026#34;: \u0026#34;^5.2.6\u0026#34;, \u0026#34;html-webpack-plugin\u0026#34;: \u0026#34;^5.3.2\u0026#34;, \u0026#34;style-loader\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^5.44.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.7.2\u0026#34; } }  index.css || index.js || indexTemplate.html  \u0026lt;! -- index.css .main { color: #0d6efd; } --\u0026gt; \u0026lt;! -- index.js import \u0026#34;./index.css\u0026#34; ; console.log(\u0026#34;hello index.js\u0026#34;) ; --\u0026gt; \u0026lt;! -- indexTemplate.html \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; hello world \u0026lt;/div\u0026gt; --\u0026gt;  命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\u0026gt;npm init -y\rWrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\\package.json:\r{\r\u0026quot;name\u0026quot;: \u0026quot;t4\u0026quot;,\r\u0026quot;version\u0026quot;: \u0026quot;1.0.0\u0026quot;,\r\u0026quot;description\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;main\u0026quot;: \u0026quot;webpack.config.js\u0026quot;,\r\u0026quot;scripts\u0026quot;: {\r\u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot;\r},\r\u0026quot;keywords\u0026quot;: [],\r\u0026quot;author\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;license\u0026quot;: \u0026quot;ISC\u0026quot;\r}\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\u0026gt;npm add -D webpack webpack-cli\rnpm notice created a lockfile as package-lock.json. You should commit this file.\rnpm WARN t4@1.0.0 No description\rnpm WARN t4@1.0.0 No repository field.\r+ webpack@5.44.0\r+ webpack-cli@4.7.2\radded 121 packages from 155 contributors in 12.528s\r16 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\u0026gt;npm install -D --save-dev html-webpack-plugin\rnpm WARN t4@1.0.0 No description\rnpm WARN t4@1.0.0 No repository field.\r+ html-webpack-plugin@5.3.2\radded 33 packages from 19 contributors in 7.603s\r26 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\u0026gt;npm add -D style-loader\rnpm WARN t4@1.0.0 No description\rnpm WARN t4@1.0.0 No repository field.\r+ style-loader@3.0.0\radded 1 package from 1 contributor in 2.089s\r27 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\u0026gt;npm add -D css-loader\rnpm WARN t4@1.0.0 No description\rnpm WARN t4@1.0.0 No repository field.\r+ css-loader@5.2.6\radded 21 packages from 55 contributors in 3.031s\r29 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\u0026gt;npm run build\r\u0026gt; t4@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\r\u0026gt; webpack\rasset index.js 17.8 KiB [emitted] (name: index)\rasset index.html 94 bytes [compared for emit]\rruntime modules 937 bytes 4 modules\rcacheable modules 7.6 KiB\rmodules by path ./node_modules/ 5.69 KiB\r./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js 2.19 KiB [built] [code generated]\r./node_modules/style-loader/dist/runtime/styleDomAPI.js 1010 bytes [built] [code generated]\r./node_modules/style-loader/dist/runtime/getTarget.js 709 bytes [built] [code generated]\r./node_modules/style-loader/dist/runtime/insertStyleElement.js 261 bytes [built] [code generated]\r./node_modules/css-loader/dist/runtime/api.js 1.57 KiB [built] [code generated]\rmodules by path ./src/ 1.91 KiB\r./src/index.js 57 bytes [built] [code generated]\r./src/index.css 1.53 KiB [built] [code generated]\r./node_modules/css-loader/dist/cjs.js!./src/index.css 333 bytes [built] [code generated]\rwebpack 5.44.0 compiled successfully in 371 ms\r index.css index.js indexTemplate.html  .main {\rcolor: #0d6efd;\r}\rimport \u0026quot;./index.css\u0026quot; ;\rconsole.log(\u0026quot;hello index.js\u0026quot;) ;\r\u0026lt;div class=\u0026quot;main\u0026quot;\u0026gt;\rhello world\r\u0026lt;/div\u0026gt;\r run dist.index.html ==\u0026gt;  \u0026lt;body _c_t_common=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;div data-v-7e2550d6=\u0026#34;\u0026#34; class=\u0026#34;odm_extension image_downloader_wrapper\u0026#34;\u0026gt;\u0026lt;!----\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; hello world \u0026lt;/div\u0026gt;\u0026lt;div data-flash-app-container=\u0026#34;true\u0026#34; id=\u0026#34;flash_player_app_root\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;div id=\u0026#34;fatkun-drop-panel\u0026#34;\u0026gt; \u0026lt;a id=\u0026#34;fatkun-drop-panel-close-btn\u0026#34;\u0026gt;×\u0026lt;/a\u0026gt; \u0026lt;div id=\u0026#34;fatkun-drop-panel-inner\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;fatkun-content\u0026#34;\u0026gt; \u0026lt;svg class=\u0026#34;fatkun-icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;5892\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M494.933333 782.933333c2.133333 2.133333 4.266667 4.266667 8.533334 6.4h8.533333c6.4 0 10.666667-2.133333 14.933333-6.4l2.133334-2.133333 275.2-275.2c8.533333-8.533333 8.533333-21.333333 0-29.866667-8.533333-8.533333-21.333333-8.533333-29.866667 0L533.333333 716.8V128c0-12.8-8.533333-21.333333-21.333333-21.333333s-21.333333 8.533333-21.333333 21.333333v588.8L249.6 475.733333c-8.533333-8.533333-21.333333-8.533333-29.866667 0-8.533333 8.533333-8.533333 21.333333 0 29.866667l275.2 277.333333zM853.333333 874.666667H172.8c-12.8 0-21.333333 8.533333-21.333333 21.333333s8.533333 21.333333 21.333333 21.333333H853.333333c12.8 0 21.333333-8.533333 21.333334-21.333333s-10.666667-21.333333-21.333334-21.333333z\u0026#34; p-id=\u0026#34;5893\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;div class=\u0026#34;fatkun-title\u0026#34;\u0026gt;拖拽到此处\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;fatkun-desc\u0026#34;\u0026gt;图片将完成下载\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;iframe id=\u0026#34;redeviation-bs-sidebar\u0026#34; class=\u0026#34;notranslate\u0026#34; aria-hidden=\u0026#34;true\u0026#34; data-theme=\u0026#34;default\u0026#34; data-pos=\u0026#34;right\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\u0026lt;div id=\u0026#34;redeviation-bs-indicator\u0026#34; data-theme=\u0026#34;default\u0026#34; class=\u0026#34;redeviation-bs-fullHeight\u0026#34; style=\u0026#34;height: 100%; top: 0%;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/body\u0026gt; less-loader #   文件目录  ▸\\t6\r▸ \\t6\\dist\r▸ \\t6\\dist\\index.html\r▸ \\t6\\dist\\index.js\r▸ \\t6\\node_modules\r//省略\r▸ \\t6\\node_modules\\yocto-queue\r▸ \\t6\\node_modules\\yocto-queue\\index.d.ts\r▸ \\t6\\node_modules\\yocto-queue\\index.js\r▸ \\t6\\node_modules\\yocto-queue\\license\r▸ \\t6\\node_modules\\yocto-queue\\package.json\r▸ \\t6\\node_modules\\yocto-queue\\readme.md\r▸ \\t6\\package-lock.json\r▸ \\t6\\package.json\r▸ \\t6\\src\r▸ \\t6\\src\\base.less\r▸ \\t6\\src\\index.css\r▸ \\t6\\src\\index.js\r▸ \\t6\\src\\index.less\r▸ \\t6\\src\\indexTemplate.html\r▸ \\t6\\webpack.config.js\r webpack.config.js content  const HtmlWebPackPlugin = require(\u0026#34;html-webpack-plugin\u0026#34;); module.exports = { entry: { index: \u0026#34;./src/index.js\u0026#34; }, mode: \u0026#39;development\u0026#39;, module: { rules: [ { test: /.css$/, use: [\u0026#34;style-loader\u0026#34;, \u0026#34;css-loader\u0026#34;] , }, { test: /.less$/, use: [\u0026#34;style-loader\u0026#34;, \u0026#34;css-loader\u0026#34;,\u0026#34;less-loader\u0026#34;] , }, ] }, plugins: [ new HtmlWebPackPlugin( { /*你帮我应用这个模板*/ template: \u0026#34;./src/indexTemplate.html\u0026#34; } ), ] }  package.json content  { \u0026#34;name\u0026#34;: \u0026#34;t6\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; , \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;css-loader\u0026#34;: \u0026#34;^5.2.6\u0026#34;, \u0026#34;html-webpack-plugin\u0026#34;: \u0026#34;^5.3.2\u0026#34;, \u0026#34;less\u0026#34;: \u0026#34;^4.1.1\u0026#34;, \u0026#34;less-loader\u0026#34;: \u0026#34;^10.0.1\u0026#34;, \u0026#34;style-loader\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^5.44.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.7.2\u0026#34; } }  重要 html 相关  //base.less @primaryColor : lightcoral ; //index.less @import \u0026#34;./base.less\u0026#34;; .main { background-color: @primaryColor } //index.js import \u0026#34;./index.css\u0026#34; ; import \u0026#34;./index.less\u0026#34; ; console.log(\u0026#34;hello index.js\u0026#34;) ; //index.css .main { color: #0d6efd; } //indexTemplate.html \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; hello world \u0026lt;/div\u0026gt;  命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm init -y\rWrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\\package.json:\r{\r\u0026quot;name\u0026quot;: \u0026quot;t6\u0026quot;,\r\u0026quot;version\u0026quot;: \u0026quot;1.0.0\u0026quot;,\r\u0026quot;description\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;main\u0026quot;: \u0026quot;webpack.config.js\u0026quot;,\r\u0026quot;scripts\u0026quot;: {\r\u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot;\r},\r\u0026quot;keywords\u0026quot;: [],\r\u0026quot;author\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;license\u0026quot;: \u0026quot;ISC\u0026quot;\r}\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm add -D webpack webpack-cli\rnpm notice created a lockfile as package-lock.json. You should commit this file.\rnpm WARN t6@1.0.0 No description\rnpm WARN t6@1.0.0 No repository field.\r+ webpack-cli@4.7.2\r+ webpack@5.44.0\radded 121 packages from 155 contributors in 8.471s\r16 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm add -D style-loader\rnpm WARN t6@1.0.0 No description\rnpm WARN t6@1.0.0 No repository field.\r+ style-loader@3.0.0\radded 1 package from 1 contributor in 0.901s\r17 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm add -D css-loader\rnpm WARN t6@1.0.0 No description\rnpm WARN t6@1.0.0 No repository field.\r+ css-loader@5.2.6\radded 21 packages from 55 contributors in 1.83s\r19 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm add -D less-loader\rnpm WARN less-loader@10.0.1 requires a peer of less@^3.5.0 || ^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN t6@1.0.0 No description\rnpm WARN t6@1.0.0 No repository field.\r+ less-loader@10.0.1\radded 2 packages from 2 contributors in 1.144s\r20 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm add -D less\rnpm WARN t6@1.0.0 No description\rnpm WARN t6@1.0.0 No repository field.\r+ less@4.1.1\radded 18 packages from 18 contributors in 2.175s\r20 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm install -D --save-dev html-webpack-plugin\rnpm WARN t6@1.0.0 No description\rnpm WARN t6@1.0.0 No repository field.\r+ html-webpack-plugin@5.3.2\radded 38 packages from 19 contributors in 2.994s\r30 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm run build\rnpm ERR! missing script: build\rnpm ERR! A complete log of this run can be found in:\rnpm ERR! C:\\Users\\dell\\AppData\\Roaming\\npm-cache\\_logs\\2021-07-11T08_38_54_955Z-debug.log\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm run build\r\u0026gt; t6@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\r\u0026gt; webpack\rasset index.js 24.6 KiB [emitted] (name: index)\rasset index.html 94 bytes [emitted]\rruntime modules 937 bytes 4 modules\rcacheable modules 9.27 KiB\rmodules by path ./src/ 3.58 KiB\rmodules by path ./src/*.css 1.85 KiB 2 modules\rmodules by path ./src/*.less 1.65 KiB\r./src/index.less 1.61 KiB [built] [code generated]\r./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/index.less 39 bytes [built] [code generated] [1 error]\r./src/index.js 82 bytes [built] [code generated]\rmodules by path ./node_modules/ 5.69 KiB\r./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js 2.19 KiB [built] [code generated]\r./node_modules/style-loader/dist/runtime/styleDomAPI.js 1010 bytes [built] [code generated]\r./node_modules/style-loader/dist/runtime/getTarget.js 709 bytes [built] [code generated]\r./node_modules/style-loader/dist/runtime/insertStyleElement.js 261 bytes [built] [code generated]\r./node_modules/css-loader/dist/runtime/api.js 1.57 KiB [built] [code generated]\rERROR in ./src/index.less (./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/index.less)\rModule build failed (from ./node_modules/less-loader/dist/cjs.js):\r@primary-color:lightcoral\r^\r@primary-color rule is missing block or ending semi-colon\rError in D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\\src\\base.less (line 1, column 14)\rError:\r@primary-color:lightcoral\r^\r@primary-color rule is missing block or ending semi-colon\rError in D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\\src\\base.less (line 1, column 14)\rat Object.lessLoader (D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\\node_modules\\less-loader\\dist\\index.js:54:14)\r@ ./src/index.less 6:6-140 45:17-24 49:0-110 49:0-110 50:22-29 50:33-47 50:50-64\r@ ./src/index.js 2:0-23\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm run build\r\u0026gt; t6@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\r\u0026gt; webpack\rasset index.js 24.4 KiB [emitted] (name: index)\rasset index.html 94 bytes [compared for emit]\rruntime modules 937 bytes 4 modules\rcacheable modules 9.57 KiB\rmodules by path ./src/ 3.88 KiB\rmodules by path ./src/*.css 1.85 KiB 2 modules\rmodules by path ./src/*.less 1.94 KiB\r./src/index.less 1.61 KiB [built] [code generated]\r./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/index.less 343 bytes [built] [code generated]\r./src/index.js 82 bytes [built] [code generated]\rmodules by path ./node_modules/ 5.69 KiB\r./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js 2.19 KiB [built] [code generated]\r./node_modules/style-loader/dist/runtime/styleDomAPI.js 1010 bytes [built] [code generated]\r./node_modules/style-loader/dist/runtime/getTarget.js 709 bytes [built] [code generated]\r./node_modules/style-loader/dist/runtime/insertStyleElement.js 261 bytes [built] [code generated]\r./node_modules/css-loader/dist/runtime/api.js 1.57 KiB [built] [code generated]\rwebpack 5.44.0 compiled successfully in 425 ms\rextract-text-webpack-plugin 使用 #  const ExtractTextPlugin = require(\u0026#34;extract-text-webpack-plugin\u0026#34;); module.exports = { module: { rules: [ { test: /\\.css$/, use: ExtractTextPlugin.extract({ fallback: \u0026#34;style-loader\u0026#34;, use: \u0026#34;css-loader\u0026#34; }) } ] }, plugins: [ new ExtractTextPlugin(\u0026#34;styles.css\u0026#34;), ] }  该插件有三个参数意义分别如下  use:指需要什么样的loader去编译文件,这里由于源文件是.css所以选择css-loader\rfallback:编译后用什么loader来提取css文件\rpublicfile:用来覆盖项目路径,生成该css文件的文件路径\r  使用\n  webpack.config.js\n  const HtmlWebPackPlugin = require(\u0026#34;html-webpack-plugin\u0026#34;); const ExtractTextWebpackPlugin = require(\u0026#34;extract-text-webpack-plugin\u0026#34;); module.exports = { entry: { index: \u0026#34;./src/index.js\u0026#34; }, mode: \u0026#39;development\u0026#39;, module: { rules: [ { test: /.css$/, use: ExtractTextWebpackPlugin.extract({ fallback :\u0026#34;style-loader\u0026#34;, use : \u0026#34;css-loader\u0026#34; }) }, { test: /.less$/, use: ExtractTextWebpackPlugin.extract({ fallback : \u0026#34;style-loader\u0026#34; , use : [\u0026#34;css-loader\u0026#34;, \u0026#34;less-loader\u0026#34;] }) } ] }, plugins: [ new HtmlWebPackPlugin( { /*你帮我应用这个模板*/ template: \u0026#34;./src/indexTemplate.html\u0026#34; } ), new ExtractTextWebpackPlugin(\u0026#34;styles.css\u0026#34;) ] }  package.json 需要注意下面的依赖版本关系  { \u0026#34;name\u0026#34;: \u0026#34;t6\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;css-loader\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;extract-text-webpack-plugin\u0026#34;: \u0026#34;^4.0.0-beta.0\u0026#34;, \u0026#34;html-webpack-plugin\u0026#34;: \u0026#34;^4.4.0\u0026#34;, \u0026#34;less\u0026#34;: \u0026#34;^4.1.1\u0026#34;, \u0026#34;less-loader\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;style-loader\u0026#34;: \u0026#34;^2.0.0\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^4.12.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.1.0\u0026#34; } }  html  + base.less @primaryColor : lightcoral ; + indexTemplate.html \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; hello world \u0026lt;/div\u0026gt; + index.less @import \u0026#34;./base.less\u0026#34;; .main { background-color: @primaryColor } + index.css .main { color: #0d6efd; } + index.js import \u0026#34;./index.css\u0026#34; ; import \u0026#34;./index.less\u0026#34; ; console.log(\u0026#34;hello index.js\u0026#34;) ;  文件目录  ▸\\t6 ▸ \\t6\\dist ▸ \\t6\\dist\\index.html ▸ \\t6\\dist\\index.js ▸ \\t6\\dist\\styles.css ▸ \\t6\\node_modules ▸ \\t6\\node_modules\\.bin ▸ \\t6\\node_modules\\y18n ▸ \\t6\\node_modules\\y18n\\CHANGELOG.md ▸ \\t6\\node_modules\\y18n\\index.js ▸ \\t6\\node_modules\\y18n\\LICENSE ▸ \\t6\\node_modules\\y18n\\package.json ▸ \\t6\\node_modules\\y18n\\README.md //省略 ▸ \\t6\\package-lock.json ▸ \\t6\\package.json ▸ \\t6\\src ▸ \\t6\\src\\base.less ▸ \\t6\\src\\index.css ▸ \\t6\\src\\index.js ▸ \\t6\\src\\index.less ▸ \\t6\\src\\indexTemplate.html ▸ \\t6\\webpack.config.js ▸ \\t6\\webpack.config2.js ▸ \\t6\\webpack.config3.js  执行结果  D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;webpack [webpack-cli] Compilation finished Hash: 74f8a85ddd5d6714bb8a Version: webpack 4.12.0 Time: 347ms Built at: 2021/07/13 下午10:00:45 Asset Size Chunks Chunk Names index.js 5.02 KiB index [emitted] index styles.css 73 bytes index [emitted] index index.html 129 bytes [emitted] Entrypoint index = index.js styles.css [./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/lib/loader.js!./src/index.less] 183 bytes [built] [./node_modules/css-loader/dist/cjs.js!./src/index.css] 173 bytes [built] [./node_modules/css-loader/dist/runtime/api.js] 2.61 KiB [built] [./node_modules/less-loader/lib/stringify.loader.js!./src/base.less] 39 bytes [built] [./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js] 6.67 KiB [built] [./src/index.css] 41 bytes [built] [./src/index.js] 82 bytes {index} [built] [./src/index.less] 41 bytes [built] Child HtmlWebpackCompiler: Asset Size Chunks Chunk Names __child-HtmlWebpackPlugin_0 4.46 KiB HtmlWebpackPlugin_0 HtmlWebpackPlugin_0 Entrypoint HtmlWebpackPlugin_0 = __child-HtmlWebpackPlugin_0 [./node_modules/html-webpack-plugin/lib/loader.js!./src/indexTemplate.html] 307 bytes {HtmlWebpackPlugin_0} [built] Child extract-text-webpack-plugin node_modules/extract-text-webpack-plugin/dist node_modules/css-loader/dist/cjs.js!node_modules/less-loader/lib/loader.js!src/index.less: Entrypoint undefined = extract-text-webpack-plugin-output-filename [./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/lib/loader.js!./src/index.less] 183 bytes {0} [built] [./node_modules/css-loader/dist/runtime/api.js] 2.61 KiB {0} [built] [./node_modules/less-loader/lib/stringify.loader.js!./src/base.less] 39 bytes [built] Child extract-text-webpack-plugin node_modules/extract-text-webpack-plugin/dist node_modules/css-loader/dist/cjs.js!src/index.css: Entrypoint undefined = extract-text-webpack-plugin-output-filename [./node_modules/css-loader/dist/cjs.js!./src/index.css] 173 bytes {0} [built] [./node_modules/css-loader/dist/runtime/api.js] 2.61 KiB {0} [built] "});index.add({'id':146,'href':'/life/docs/javadir/tooldoc/jsoup/','title':"jsoup学习文档",'section':"Java公共库文档总结 ",'content':"jsoup学习文档 #  简介 #   Jsoup是用于解析HTML，就类似XML解析器用于解析XML。 Jsoup它解析HTML成为真实世界的HTML。 它与jquery选择器的语法非常相似，并且非常灵活容易使用以获得所需的结果\n +jsoup api 6个包提供用于开发jsoup应用程序的类和接口。\norg.jsoup\rorg.jsoup.examples\rorg.jsoup.helper\rorg.jsoup.nodes\rorg.jsoup.parser\rorg.jsoup.safety\rorg.jsoup.salect\r引入 #  //大多数情况使用jsoup\rorg.jsoup.nodes.Document document = Jsoup.parse(html);\rDocument doc = Jsoup.parse(new URL(\u0026quot;http://www.funi.com/\u0026quot;),7000);\r//少数情况使用httpUnit\rWebClient webClient = new WebClient() ;\rHtmlPage htmlPage = webClient.getPage(\u0026quot;http://www.89ip.cn/\u0026quot;);\rhtmlPage.asXml()//html\r使用(maven) #  \u0026lt;dependency\u0026gt;\r\u0026lt;!-- jsoup HTML parser library @ http://jsoup.org/ --\u0026gt;\r\u0026lt;groupId\u0026gt;org.jsoup\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;jsoup\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.10.2\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;!-- httpclient --\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.apache.httpcomponents\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;httpclient\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;4.5.6\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;net.sourceforge.htmlunit\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;htmlunit\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;2.26\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r解析一个body片断 #   假如你有一个HTML片断 (比如. 一个 div 包含一对 p 标签; 一个不完整的HTML文档) 想对它进行解析。这个HTML片断可以是用户提交的一条评论或在一个CMS页面中编辑body部分。\n 办法:使用Jsoup.parseBodyFragment(String html) ,Document.body() 方法能够取得文档body元素的所有子元素，与 doc.getElementsByTag(\u0026ldquo;body\u0026rdquo;)相同\nString html = \u0026quot;\u0026lt;div\u0026gt;\u0026lt;p\u0026gt;Lorem ipsum.\u0026lt;/p\u0026gt;\u0026quot;;\rDocument doc = Jsoup.parseBodyFragment(html);\rSystem.out.println(doc.html());//可以看到我们的html片段被包裹了一个body\rElement body = doc.body();\rSystem.out.println(body.html());\r/*\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r*/\r/**\r\u0026lt;div\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r*/\r从一个URL加载一个Document #   你需要从一个网站获取和解析一个HTML文档，并查找其中的相关数据。你可以使用下面解决方法\n 办法:使用 Jsoup.connect(String url)方法\nDocument doc = Jsoup.parse(new URL(\u0026quot;http://www.funi.com/\u0026quot;),6000) ;\rDocument doc2 = Jsoup.connect(\u0026quot;http://www.funi.com/\u0026quot;)\r// .data(\u0026quot;query\u0026quot;, \u0026quot;Java\u0026quot;)\r.userAgent(\u0026quot;Mozilla\u0026quot;)\r.cookie(\u0026quot;auth\u0026quot;, \u0026quot;token\u0026quot;)\r.timeout(3000)\r.get();\r从一个文件加载一个文档 #   在本机硬盘上有一个HTML文件，需要对它进行解析从中抽取数据或进行修改\n 办法:可以使用静态 Jsoup.parse(File in, String charsetName, String baseUri)方法\nFile input = new File(\u0026quot;/tmp/input.html\u0026quot;);\rDocument doc = Jsoup.parse(input, \u0026quot;UTF-8\u0026quot;, \u0026quot;http://example.com/\u0026quot;);\r下面例子都使用成都市房产透明网的网站和国家统计局\n使用DOM方法来遍历一个文档 #   你有一个HTML文档要从中提取数据，并了解这个HTML文档的结构。\n Document doc = null;\rCloseableHttpClient httpClient = HttpClients.createDefault();\rHttpGet httpGet = new HttpGet(\u0026quot;http://www.funi.com/\u0026quot;);\r//使用chrome 头伪装\rhttpGet.setHeader(\u0026quot;User-Agent\u0026quot;, \u0026quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.67 Safari/537.36\u0026quot;);\r//设置基本的配置\rRequestConfig config = RequestConfig.custom()\r.setConnectTimeout(5000) // 设置连接超时时间 5秒钟\r.setSocketTimeout(4000) // 设置读取超时时间4秒钟\r.build();\rhttpGet.setConfig(config);\rCloseableHttpResponse httpResponse = null;\rtry {\rhttpResponse = httpClient.execute(httpGet);\rHttpEntity httpEntity = httpResponse.getEntity();\rif (httpEntity == null){\rreturn;\r}\rString html = EntityUtils.toString(httpEntity, \u0026quot;utf-8\u0026quot;);\rif (StringUtils.isNotEmpty(html)) {\rdoc = Jsoup.parse(html);\r}\r} catch (Exception e) {\rlogger.error(\u0026quot;获取html失败!\u0026quot;, e);\r} finally {\r//关闭处理\rhttpResponse.close();\rhttpClient.close();\r}\rElement body = doc.body();\rElements foot = body.getElementsByClass(\u0026quot;foot\u0026quot;).first().getElementsByClass(\u0026quot;footer clearfix\u0026quot;).first().getElementsByTag(\u0026quot;dl\u0026quot;);\rfor (Element ele : foot) {\rSystem.out.println(ele.html());\rfor (int i = 0; i \u0026lt; 20; i++) {\rSystem.out.print('.');\r}\r}\r使用选择器语法来查找元素 #   你想使用类似于CSS或jQuery的语法来查找和操作元素\n Element #  查看元素\n getElementById(String id) return Element getElementsByTag(String tag) return Elements getElementsByClass(String className) return Elements getElementsByAttribute(String key) return Elements 查找具有命名属性集的元素。不区分大小写 siblingElements() return Elements 获取同级元素。如果元素没有同级元素，则返回空列表。元素不是同级元素本身，所以不会包含在返回的列表中(列表) firstElementSibling() return Element 获取此元素的第一个同级元素 lastElementSibling() return Element 获取此元素的最后一个同级元素 previousElementSibling() return Element 获取此元素的上一个同级元素 nextElementSibling() return Element 获取此元素的下一个同级元素 parents() return Elements 获取此元素的父级和父级，直到文档根 parent() return Element 获取此元素的父级 children() return Elements 获取此元素的子元素 child(int index) return Element 获取此元素的子元素，方法是使用其基于0的索引号 attributes() 获取元素的所有属性 return Attributes  元素数据\n attr(String key)获取属性attr(String key, String value)设置属性 attributes()获取所有属性 id(), className() and classNames() text()获取文本内容text(String value) 设置文本内容 html()获取元素内HTMLhtml(String value)设置元素内的HTML内容 outerHtml()获取元素外HTML内容 data()获取数据内容（例如：script和style标签) tag() and tagName()  操作HTML和文本\n append(String html), prepend(String html) appendText(String text), prependText(String text) appendElement(String tagName), prependElement(String tagName) html(String value)  选择器语法来查找元素 #   tagname: 通过标签查找元素，比如：a #id: 通过ID查找元素，比如：#logo .class: 通过class名称查找元素，比如：.masthead  Document doc = null;\rCloseableHttpClient httpClient = HttpClients.createDefault();\rHttpGet httpGet = new HttpGet(\u0026quot;http://www.stats.gov.cn/\u0026quot;);\r//使用chrome 头伪装\rhttpGet.setHeader(\u0026quot;User-Agent\u0026quot;, \u0026quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.67 Safari/537.36\u0026quot;);\r//设置基本的配置\rRequestConfig config = RequestConfig.custom()\r.setConnectTimeout(5000) // 设置连接超时时间 5秒钟\r.setSocketTimeout(4000) // 设置读取超时时间4秒钟\r.build();\rhttpGet.setConfig(config);\rCloseableHttpResponse httpResponse = null;\rtry {\rhttpResponse = httpClient.execute(httpGet);\rHttpEntity httpEntity = httpResponse.getEntity();\rString html = EntityUtils.toString(httpEntity, \u0026quot;utf-8\u0026quot;);\rif (StringUtils.isNotEmpty(html)) {\rdoc = Jsoup.parse(html);\r}\r} catch (Exception e) {\rlogger.error(\u0026quot;获取html失败!\u0026quot;, e);\r} finally {\r// 关闭处理\rhttpResponse.close();\rhttpClient.close();\r}\rElement body = doc.body();\r// Elements selects = body.select(\u0026quot;.top .top03 #nav ul li\u0026quot;);//和下面的一样\rElements selects = body.getElementsByClass(\u0026quot;top\u0026quot;).first().getElementsByClass(\u0026quot;top03\u0026quot;).first().getElementById(\u0026quot;nav\u0026quot;).getElementsByTag(\u0026quot;ul\u0026quot;).first().getElementsByTag(\u0026quot;li\u0026quot;);\rfor (Element ele : selects) {\rSystem.out.println(ele);\r}\r主要运用了上面三种选择方式\r 【attribute】: 利用属性查找元素，比如：【href】 【^attr】: 利用属性名前缀来查找元素，比如：可以用【^data-】 来查找带有HTML5 Dataset属性的元素 【attr=value】: 利用属性值来查找元素，比如：【width=500】 【attr^=value】, 【attr$=value】, 【attr*=value】: 利用匹配属性值开头、结尾或包含属性值来查找元素，比如：【href*=/path/】 【attr~=regex】: 利用属性值匹配正则表达式来查找元素，比如： img【src~=(?i).(png|jpe?g)】 *: 这个符号将匹配所有元素  Element body = doc.body();\rElements selects = body.select(\u0026quot;.top a[href]\u0026quot;);//获取拥有href属性的所有元素\r\u0026lt;a href=\u0026quot;/was5/web/search?channelid=288041\u0026amp;amp;andsen=%E6%80%BB%E4%BA%BA%E5%8F%A3\u0026quot; target=\u0026quot;_blank\u0026quot;\u0026gt;总人口\u0026lt;/a\u0026gt;\r\u0026lt;a href=\u0026quot;/was5/web/search?channelid=288041\u0026amp;amp;andsen=%E7%A4%BE%E4%BC%9A%E6%B6%88%E8%B4%B9%E5%93%81%E9%9B%B6%E5%94%AE%E6%80%BB%E9%A2%9D\u0026quot; target=\u0026quot;_blank\u0026quot;\u0026gt;社会消费品零售总额\u0026lt;/a\u0026gt;\r\u0026lt;a href=\u0026quot;./zjtj/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;./images/top03_1.png\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;./zjtj/gjtjj/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;国家统计局\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;http://jcj.ndrc.gov.cn/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;派驻纪检组\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;./zjtj/jgzn/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;机构职能\u0026lt;/a\u0026gt;\rElements selects = body.select(\u0026quot;.top a[name=PL_MENU_NAME]\u0026quot;);//获取name=PL_MENU_NAME的所有这类元素\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;./zjtj/gjtjj/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;国家统计局\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;http://jcj.ndrc.gov.cn/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;派驻纪检组\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;./zjtj/jgzn/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;机构职能\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;./tjsj/zxfb/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;最新发布\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;http://data.stats.gov.cn/\u0026quot; target=\u0026quot;_blank\u0026quot;\u0026gt;数据查询\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;./tjsj/sjjd/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;数据解读\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;./tjgz/tjdt/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;统计动态\u0026lt;/a\u0026gt;\rElements selects = body.select(\u0026quot;.top a[name^=PL]\u0026quot;);//以PL开头\rElements selects = body.select(\u0026quot;.top div[^cl]\u0026quot;); //获取div 为tag class等属性的元素\r 伪选择器selectors :lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小于三列的元素 :gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素 :eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素 :has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素  Elements selects = body.select(\u0026quot;.center div:eq(0) ul li:lt(3)\u0026quot;); //eq(0)选取第一个,lt(3)表示小于三列的元素\r  Selector选择器组合使用\n  el#id: 元素+ID，比如： div#logo\n  el.class: 元素+class，比如： div.masthead\n  el[attr]: 元素+class，比如： a[href]\n  任意组合，比如：a[href].highlight\n  ancestor child: 查找某个元素下子元素，比如：可以用.body p 查找在\u0026quot;body\u0026quot;元素下的所有 p元素\n  parent \u0026gt; child: 查找某个父元素下的直接子元素，比如：可以用div.content \u0026gt; p 查找 p 元素，也可以用body \u0026gt; * 查找body标签下所有直接子元素\n  siblingA + siblingB: 查找在A元素之前第一个同级元素B，比如：div.head + div\n  siblingA ~ siblingX: 查找A元素之前的同级X元素，比如：h1 ~ p\n  el, el, el:多个选择器组合，查找匹配任一选择器的唯一元素，例如：div.masthead, div.logo\n  伪选择器selectors\n  :lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小于三列的元素\n  :gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素\n  :eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素\n  :has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素\n  :not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class=\u0026ldquo;logo\u0026rdquo; 元素的所有 div 列表\n  :contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)\n  :containsOwn(text): 查找直接包含给定文本的元素\n  :matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)\n  :matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素\n  注意：上述伪选择器索引是从0开始的，也就是说第一个元素索引值为0，第二个元素index为1等\n  "});index.add({'id':147,'href':'/life/docs/operating_system/two_chapter/2_2_3/','title':"调度算法的评价指标",'section':"第二章 进程管理 ",'content':""});index.add({'id':148,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/wwnrfnfjmb/','title':"自信相关理论",'section':"自信",'content':" 小技巧   到春熙路这些地方送玩具然后请求接受礼物的人答应帮自己一个忙那就是在一些祝福语中抽一个出来 然后我把它念出来 可以对此分类 比如孩子,妇女,男人,学生,中年妇女\n "});index.add({'id':149,'href':'/life/docs/javadir/thread/tool/fork_join/','title':"Fork-Join",'section':"并发工具 ",'content':"Fork-Join #  简介 #  从JDK1.7开始，Java提供Fork/Join框架用于并行执行任务，它的思想就是讲一个大任务分割成若干小任务，最终汇总每个小任务的结果得到这个大任务的结果。\n这种思想和MapReduce很像（input \u0026ndash;\u0026gt; split \u0026ndash;\u0026gt; map \u0026ndash;\u0026gt; reduce \u0026ndash;\u0026gt; output）\n 主要有两步：   第一、任务切分； 第二、结果合并  它的模型大致是这样的：线程池中的每个线程都有自己的工作队列（PS：这一点和ThreadPoolExecutor不同，ThreadPoolExecutor是所有线程公用一个工作队列， 所有线程都从这个工作队列中取任务），当自己队列中的任务都完成以后，会从其它线程的工作队列中偷一个任务执行，这样可以充分利用资源。\n工作窃取（work-stealing） #  工作窃取（work-stealing）算法是指某个线程从其他队列里窃取任务来执行。工作窃取的运行流程图如下：\n那么为什么需要使用工作窃取算法呢？\n假如我们需要做一个比较大的任务，我们可以把这个任务分割为若干互不依赖的子任务，为了减少线程间的竞争，于是把这些子任务分别放到不同的队列里，并为每个队列创建一个单独的线程来执行队列里的任务，线程和队列一一对应，比如A线程负责处理A队列里的任务。但是有的线程会先把自己队列里的任务干完，而其他线程对应的队列里还有任务等待处理。干完活的线程与其等着，不如去帮其他线程干活，于是它就去其他线程的队列里窃取一个任务来执行。而在这时它们会访问同一个队列，所以为了减少窃取任务线程和被窃取任务线程之间的竞争，通常会使用双端队列，被窃取任务线程永远从双端队列的头部拿任务执行，而窃取任务的线程永远从双端队列的尾部拿任务执行。\n工作窃取算法的优点是充分利用线程进行并行计算，并减少了线程间的竞争，其缺点是在某些情况下还是存在竞争，比如双端队列里只有一个任务时。并且消耗了更多的系统资源，比如创建多个线程和多个双端队列。\nAPI介绍 #  ForkJoinPool #  ForkJoinPool与其它的ExecutorService区别主要在于它使用“工作窃取”：线程池中的所有线程都企图找到并执行提交给线程池的任务。当大量的任务产生子任务的时候，或者同时当有许多小任务被提交到线程池中的时候，这种处理是非常高效的。特别的，当在构造方法中设置asyncMode为true的时候这种处理更加高效。\nForkJoinTask #  ForkJoinTask代表运行在ForkJoinPool中的任务。\n主要方法：\n fork() 在当前线程运行的线程池中安排一个异步执行。简单的理解就是再创建一个子任务。 join() 当任务完成的时候返回计算结果。 invoke() 开始执行任务，如果必要，等待计算完成。  子类：\n RecursiveAction 一个递归无结果的ForkJoinTask（没有返回值） RecursiveTask 一个递归有结果的ForkJoinTask（有返回值）  ForkJoinWorkerThread #  ForkJoinWorkerThread代表ForkJoinPool线程池中的一个执行任务的线程。\n 类图  代码分析 #  WorkQueue是一个ForkJoinPool中的内部类，它是线程池中线程的工作队列的一个封装，支持任务窃取。\n什么叫线程的任务窃取呢？就是说你和你的一个伙伴一起吃水果，你的那份吃完了，他那份没吃完，那你就偷偷的拿了他的一些水果吃了。 存在执行2个任务的子线程，这里要讲成存在A,B两个个WorkQueue在执行任务，A的任务执行完了，B的任务没执行完， 那么A的WorkQueue就从B的WorkQueue的ForkJoinTask数组中拿走了一部分尾部的任务来执行，可以合理的提高运行和计算效率。\n submit()  可以看到：\n 1:同样是提交任务，submit会返回ForkJoinTask，而execute不会 2:任务提交给线程池以后，会将这个任务加入到当前提交者的任务队列中。  前面我们说过，每个线程都有一个WorkQueue，而WorkQueue中有执行任务的线程（ForkJoinWorkerThread owner），还有这个线程需要处理的任务（ForkJoinTask\u0026lt;?\u0026gt;[] array）。那么这个新提交的任务就是加到array中。\n ForkJoinWorkerThread  从代码中我们可以清楚地看到，ForkJoinWorkThread持有ForkJoinPool和ForkJoinPool.WorkQueue的引用，以表明该线程属于哪个线程池，它的工作队列是哪个\n  ForkJoinTask\n  fork()\n  可以看到，如果是ForkJoinWorkerThread运行过程中fork()，则直接加入到它的工作队列中，否则，重新提交任务。\n可以看到它们都会等待计算完成\n图形化处理过程 #  使用示例 #   仅仅打印  import java.util.ArrayList; import java.util.List; import java.util.concurrent.ForkJoinPool; import java.util.concurrent.RecursiveAction; import java.util.concurrent.TimeUnit; public class ForkJoinPoolDemo1 { public static class SendMsgTask extends RecursiveAction { private final int THRESHOLD = 10; private int start; private int end; private List\u0026lt;String\u0026gt; list; public SendMsgTask(int start, int end, List\u0026lt;String\u0026gt; list) { this.start = start; this.end = end; this.list = list; } @Override protected void compute() { // 做什么  //什么都不做  if ((end - start) \u0026lt;= THRESHOLD) { for (int i = start; i \u0026lt; end; i++) { //仅仅打印  System.out.println(Thread.currentThread().getName() + \u0026#34;: \u0026#34; + list.get(i)); } } else { // 拆分  int middle = (start + end) / 2; SendMsgTask left = new SendMsgTask(start, middle, list); SendMsgTask right = new SendMsgTask(middle, end, list); invokeAll(left, right); } } } public static void main(String[] args)throws Exception { List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; 123; i++) { list.add(String.valueOf(i + 1)); } ForkJoinPool pool = new ForkJoinPool(); //都行 submit 和 execute 以及 invoke // pool.submit(new SendMsgTask(0, list.size(), list)); // pool.execute(new SendMsgTask(0, list.size(), list));  pool.invoke(new SendMsgTask(0, list.size(), list)) ; pool.awaitTermination(10, TimeUnit.SECONDS); pool.shutdown(); } }  求和  import java.util.ArrayList; import java.util.List; import java.util.concurrent.ForkJoinPool; import java.util.concurrent.RecursiveTask; import java.util.concurrent.TimeUnit; public class ForkJoinPoolDemo2 { public static class SumTask extends RecursiveTask\u0026lt;Integer\u0026gt; { private final int THRESHOLD = 10; private int start; private int end; private List\u0026lt;Integer\u0026gt; list; public SumTask(int start, int end, List\u0026lt;Integer\u0026gt; list) { this.start = start; this.end = end; this.list = list; } @Override protected Integer compute() { // 做什么  //什么都不做  if ((end - start) \u0026lt;= THRESHOLD) { // 直接求和  int sum = 0; for (int i = start; i \u0026lt; end; i++) { //仅仅打印  sum += this.list.get(i); } return sum; } else { // 拆分  int middle = (start + end) / 2; SumTask left = new SumTask(start, middle, list); SumTask right = new SumTask(middle, end, list); invokeAll(left, right); return left.join() + right.join(); } } } public static void main(String[] args) throws Exception { List\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); for (int i = 1; i \u0026lt;= 123; i++) { list.add(i); } ForkJoinPool pool = new ForkJoinPool(); //都行 submit 和 execute 以及 invoke  SumTask sumTask = new SumTask(0, list.size(), list); pool.submit(sumTask); // pool.execute(sumTask); // pool.invoke(sumTask);  System.out.println(sumTask.join()); pool.awaitTermination(10, TimeUnit.SECONDS); pool.shutdown(); } } 总结 #   执行方法     方法名 说明 例     invoke(ForkJoinTask) 提交任务并一直阻塞直到任务执行完成返回合并结果。   execute(ForkJoinTask) 异步执行任务，无返回值   submit(ForkJoinTask) 异步执行任务，返回task本身，可以通过task.get()方法获取合并之后的结果。      是否有返回值\n  1.如果有返回值就继承RecursiveTask，没有返回值就继承RecursiveAction\n  2.invoke同步调用，如果想要异步调用，可以使用pool.execute(\u0026hellip;);替换invoke方法\n  "});index.add({'id':150,'href':'/life/docs/%E8%84%9A%E6%9C%AC/npm%E9%87%8D%E8%A6%81%E5%91%BD%E4%BB%A4/','title':"node js - npm 重要命令 ",'section':"脚本",'content':"npm 包管理器查询网址 #   https://www.npmjs.com/ (和java的maven仓库差不多一个意思)  全局安装 #    npm install less-loader@4.1.0\n  npm install less-loader@4.1.0 \u0026ndash;save\n  本地安装命令 #    npm install less-loader@3.0.0 \u0026ndash;save-dev\n  npm add -D less-loader@3.0.0\n   上面两条等价\n 升级到最高版本 , 更新npm到最新版本 #   npm i npm@latest -d npm i npm@latest -g  安装所有依赖 (package.json) #   npm install request  删除包问题 #    npm uninstall webpack webpack-cli -g 全局\n  npm uninstall webpack webpack-cli -d 局部\n  npm uninstall less-loader 不区分局部和全局 卸载\n  "});index.add({'id':151,'href':'/life/docs/databases/mysql/mysql_install_centos/','title':"centos7安装多个mysql",'section':"mysql学习笔记",'content':" centos7单机安装多个mysql8.0\n 一:上传 #  下载地址：https://cdn.mysql.com/archives/mysql-8.0/mysql-8.0.21-linux-glibc2.12-x86_64.tar.xz\r上传mysql-8.0.21-linux-glibc2.12-x86_64.tar.xz到服务器指定文件夹，如：/home/mysql\r二:解压 #  cd /home/mysql\rtar -xvf mysql-8.0.21-linux-glibc2.12-x86_64.tar.xz\r三:重命名文件夹 #  mv mysql-8.0.21-linux-glibc2.12-x86_64 mysql3306\r四:新建mysql用户、mysql用户组 #  cd /home/mysql/mysql3306\r#新建mysql用户、mysql用户组，如果之前已经建立过，就不用建立了\rgroupadd mysql\r#给mysql添加用户为 mysql\ruseradd mysql -g mysql\r五:在mysql3306下新增文件夹data，var，tmp，binlogs，logs备用 #  cd /home/mysql/mysql3306\rmkdir data var tmp binlogs logs\rchmod 777 ./tmp\rchmod 777 ./logs\rcd /home/mysql/mysql3306/logs\rtouch error.log\r六:在/home/mysql/mysql3306/etc下创建数据库配置文件 #  cd /home/mysql/mysql3306\rmkdir etc\rcd /home/mysql/mysql3306/etc\rtouch my.cnf\rvim my.cnf\r# my.cnf内容如下：\r[mysqld]\rport = 3306\rbasedir = /home/mysql/mysql3306\rdatadir = /home/mysql/mysql3306/data\rsocket = /home/mysql/mysql3306/tmp/mysql.sock\rmax_connections = 1000\rmax_user_connections = 500\rwait_timeout = 200\rdefault-time-zone = '+8:00'\rthread_cache_size = 64\rmax_connect_errors = 10000\rserver_id = 1 # backup上设置为2、3，主从复制时使用\rlog-bin = /home/mysql/mysql3306/binlogs/mysql-bin\rlog-bin-index = /home/mysql/mysql3306/binlogs/mysql-bin.index\rbinlog-ignore-db = mysql,information_schema #忽略写入binlogs日志的库\rauto-increment-increment = 1 #字段变化增量值\rauto-increment-offset = 1 #初始字段ID为1\rslave-skip-errors = all #忽略所有复制产生的错误\rsync_binlog = 1 #设置为1，是最安全但是性能损耗最大\r[client]\rsocket = /home/mysql/mysql3306/tmp/mysql.sock\rdefault-character-set = utf8\r[mysqld_safe]\rlog-error = /home/mysql/mysql3306/logs/error.log\rpid-file = /home/mysql/mysql3306/mysql.pid\r七:升级依赖 #  yum -y install make gcc-c++ cmake bison-devel ncurses ncurses-devel libaio-devel\r八:在mysql3306文件夹下面执行，一定要记录最后生成的初始密码 #  cd /home/mysql/mysql3306\r./bin/mysqld --defaults-file=/home/mysql/mysql3306/etc/my.cnf --initialize --user=mysql\r./bin/mysqld_safe --defaults-file=/home/mysql/mysql3306/etc/my.cnf --user=mysql \u0026amp;\r九:将support-files下的mysql.server文件内容修改成如下内容： #  cd support-files\rvim mysql.server\r#!/bin/sh\r# Copyright Abandoned 1996 TCX DataKonsult AB \u0026amp; Monty Program KB \u0026amp; Detron HB\r# This file is public domain and comes with NO WARRANTY of any kind\r# MySQL daemon start/stop script.\r# Usually this is put in /etc/init.d (at least on machines SYSV R4 based\r# systems) and linked to /etc/rc3.d/S99mysql and /etc/rc0.d/K01mysql.\r# When this is done the mysql server will be started when the machine is\r# started and shut down when the systems goes down.\r# Comments to support chkconfig on RedHat Linux\r# chkconfig: 2345 64 36\r# description: A very fast and reliable SQL database engine.\r# Comments to support LSB init script conventions\r### BEGIN INIT INFO\r# Provides: mysql\r# Required-Start: $local_fs $network $remote_fs\r# Should-Start: ypbind nscd ldap ntpd xntpd\r# Required-Stop: $local_fs $network $remote_fs\r# Default-Start: 2 3 4 5\r# Default-Stop: 0 1 6\r# Short-Description: start and stop MySQL\r# Description: MySQL is a very fast and reliable SQL database engine.\r### END INIT INFO\r# If you install MySQL on some other places than /usr/local/mysql, then you\r# have to do one of the following things for this script to work:\r#\r# - Run this script from within the MySQL installation directory\r# - Create a /etc/my.cnf file with the following information:\r# [mysqld]\r# basedir=\u0026lt;path-to-mysql-installation-directory\u0026gt;\r# - Add the above to any other configuration file (for example ~/.my.ini)\r# and copy my_print_defaults to /usr/bin\r# - Add the path to the mysql-installation-directory to the basedir variable\r# below.\r#\r# If you want to affect other MySQL variables, you should make your changes\r# in the /etc/my.cnf, ~/.my.cnf or other MySQL configuration files.\r# If you change base dir, you must also change datadir. These may get\r# overwritten by settings in the MySQL configuration files.\r# 1.这些路径根据实际路径修改\rbasedir=/home/mysql/mysql3306\rdatadir=/home/mysql/mysql3306/data\rconf=/home/mysql/mysql3306/etc/my.cnf\r# Default value, in seconds, afterwhich the script should timeout waiting\r# for server start. # Value here is overriden by value in my.cnf. # 0 means don't wait at all\r# Negative numbers mean to wait indefinitely\rservice_startup_timeout=900\r# Lock directory for RedHat / SuSE.\rlockdir='/var/lock/subsys'\rlock_file_path=\u0026quot;$lockdir/mysql\u0026quot;\r# The following variables are only set for letting mysql.server find things.\r# Set some defaults\rmysqld_pid_file_path=\rif test -z \u0026quot;$basedir\u0026quot;\rthen\rbasedir=/usr/local/mysql\rbindir=/usr/local/mysql/bin\rif test -z \u0026quot;$datadir\u0026quot;\rthen\rdatadir=/usr/local/mysql/data\rfi\rsbindir=/usr/local/mysql/bin\rlibexecdir=/usr/local/mysql/bin\relse\rbindir=\u0026quot;$basedir/bin\u0026quot;\rif test -z \u0026quot;$datadir\u0026quot;\rthen\rdatadir=\u0026quot;$basedir/data\u0026quot;\rfi\rsbindir=\u0026quot;$basedir/sbin\u0026quot;\rlibexecdir=\u0026quot;$basedir/libexec\u0026quot;\rfi\r# datadir_set is used to determine if datadir was set (and so should be\r# *not* set inside of the --basedir= handler.)\rdatadir_set=\r#\r# Use LSB init script functions for printing messages, if possible\r#\rlsb_functions=\u0026quot;/lib/lsb/init-functions\u0026quot;\rif test -f $lsb_functions ; then\r. $lsb_functions\relse\rlog_success_msg()\r{\recho \u0026quot; SUCCESS! $@\u0026quot;\r}\rlog_failure_msg()\r{\recho \u0026quot; ERROR! $@\u0026quot;\r}\rfi\rPATH=\u0026quot;/sbin:/usr/sbin:/bin:/usr/bin:$basedir/bin\u0026quot;\rexport PATH\rmode=$1 # start or stop\r[ $# -ge 1 ] \u0026amp;\u0026amp; shift\rother_args=\u0026quot;$*\u0026quot; # uncommon, but needed when called from an RPM upgrade action\r# Expected: \u0026quot;--skip-networking --skip-grant-tables\u0026quot;\r# They are not checked here, intentionally, as it is the resposibility\r# of the \u0026quot;spec\u0026quot; file author to give correct arguments only.\rcase `echo \u0026quot;testing\\c\u0026quot;`,`echo -n testing` in\r*c*,-n*) echo_n= echo_c= ;;\r*c*,*) echo_n=-n echo_c= ;;\r*) echo_n= echo_c='\\c' ;;\resac\rparse_server_arguments() {\rfor arg do\rcase \u0026quot;$arg\u0026quot; in\r--basedir=*) basedir=`echo \u0026quot;$arg\u0026quot; | sed -e 's/^[^=]*=//'`\rbindir=\u0026quot;$basedir/bin\u0026quot;\rif test -z \u0026quot;$datadir_set\u0026quot;; then\rdatadir=\u0026quot;$basedir/data\u0026quot;\rfi\rsbindir=\u0026quot;$basedir/sbin\u0026quot;\rlibexecdir=\u0026quot;$basedir/libexec\u0026quot;\r;;\r--datadir=*) datadir=`echo \u0026quot;$arg\u0026quot; | sed -e 's/^[^=]*=//'`\rdatadir_set=1\r;;\r--pid-file=*) mysqld_pid_file_path=`echo \u0026quot;$arg\u0026quot; | sed -e 's/^[^=]*=//'` ;;\r--service-startup-timeout=*) service_startup_timeout=`echo \u0026quot;$arg\u0026quot; | sed -e 's/^[^=]*=//'` ;;\resac\rdone\r}\rwait_for_pid () {\rverb=\u0026quot;$1\u0026quot; # created | removed\rpid=\u0026quot;$2\u0026quot; # process ID of the program operating on the pid-file\rpid_file_path=\u0026quot;$3\u0026quot; # path to the PID file.\ri=0\ravoid_race_condition=\u0026quot;by checking again\u0026quot;\rwhile test $i -ne $service_startup_timeout ; do\rcase \u0026quot;$verb\u0026quot; in\r'created')\r# wait for a PID-file to pop into existence.\rtest -s \u0026quot;$pid_file_path\u0026quot; \u0026amp;\u0026amp; i='' \u0026amp;\u0026amp; break\r;;\r'removed')\r# wait for this PID-file to disappear\rtest ! -s \u0026quot;$pid_file_path\u0026quot; \u0026amp;\u0026amp; i='' \u0026amp;\u0026amp; break\r;;\r*)\recho \u0026quot;wait_for_pid () usage: wait_for_pid created|removed pid pid_file_path\u0026quot;\rexit 1\r;;\resac\r# if server isn't running, then pid-file will never be updated\rif test -n \u0026quot;$pid\u0026quot;; then\rif kill -0 \u0026quot;$pid\u0026quot; 2\u0026gt;/dev/null; then\r: # the server still runs\relse\r# The server may have exited between the last pid-file check and now. if test -n \u0026quot;$avoid_race_condition\u0026quot;; then\ravoid_race_condition=\u0026quot;\u0026quot;\rcontinue # Check again.\rfi\r# there's nothing that will affect the file.\rlog_failure_msg \u0026quot;The server quit without updating PID file ($pid_file_path).\u0026quot;\rreturn 1 # not waiting any more.\rfi\rfi\recho $echo_n \u0026quot;.$echo_c\u0026quot;\ri=`expr $i + 1`\rsleep 1\rdone\rif test -z \u0026quot;$i\u0026quot; ; then\rlog_success_msg\rreturn 0\relse\rlog_failure_msg\rreturn 1\rfi\r}\r# Get arguments from the my.cnf file,\r# the only group, which is read from now on is [mysqld]\rif test -x \u0026quot;$bindir/my_print_defaults\u0026quot;; then\rprint_defaults=\u0026quot;$bindir/my_print_defaults\u0026quot;\relse\r# Try to find basedir in /etc/my.cnf\r# 2.注释掉conf=/etc/my.cnf\r# conf=/etc/my.cnf\rprint_defaults=\rif test -r $conf\rthen\rsubpat='^[^=]*basedir[^=]*=\\(.*\\)$'\rdirs=`sed -e \u0026quot;/$subpat/!d\u0026quot; -e 's//\\1/' $conf`\rfor d in $dirs\rdo\rd=`echo $d | sed -e 's/[ ]//g'`\rif test -x \u0026quot;$d/bin/my_print_defaults\u0026quot;\rthen\rprint_defaults=\u0026quot;$d/bin/my_print_defaults\u0026quot;\rbreak\rfi\rdone\rfi\r# Hope it's in the PATH ... but I doubt it\rtest -z \u0026quot;$print_defaults\u0026quot; \u0026amp;\u0026amp; print_defaults=\u0026quot;my_print_defaults\u0026quot;\rfi\r#\r# Read defaults file from 'basedir'. If there is no defaults file there\r# check if it's in the old (depricated) place (datadir) and read it from there\r#\rextra_args=\u0026quot;\u0026quot;\rif test -r \u0026quot;$basedir/my.cnf\u0026quot;\rthen\rextra_args=\u0026quot;-e $basedir/my.cnf\u0026quot;\rfi\r# 3.添加extra_args=\u0026quot;-c $conf\u0026quot;\rextra_args=\u0026quot;-c $conf\u0026quot;\rparse_server_arguments `$print_defaults $extra_args mysqld server mysql_server mysql.server`\r#\r# Set pid file if not given\r#\rif test -z \u0026quot;$mysqld_pid_file_path\u0026quot;\rthen\rmysqld_pid_file_path=$datadir/`hostname`.pid\relse\rcase \u0026quot;$mysqld_pid_file_path\u0026quot; in\r/* ) ;;\r* ) mysqld_pid_file_path=\u0026quot;$datadir/$mysqld_pid_file_path\u0026quot; ;;\resac\rfi\rcase \u0026quot;$mode\u0026quot; in\r'start')\r# Start daemon\r# Safeguard (relative paths, core dumps..)\rcd $basedir\recho $echo_n \u0026quot;Starting MySQL\u0026quot;\rif test -x $bindir/mysqld_safe\rthen\r# Give extra arguments to mysqld with the my.cnf file. This script\r# may be overwritten at next upgrade.\r# 4.增加配置\r$bindir/mysqld_safe --defaults-file=\u0026quot;$conf\u0026quot; --user=root --datadir=\u0026quot;$datadir\u0026quot; --pid-file=\u0026quot;$mysqld_pid_file_path\u0026quot; $other_args \u0026gt;/dev/null \u0026amp;\rwait_for_pid created \u0026quot;$!\u0026quot; \u0026quot;$mysqld_pid_file_path\u0026quot;; return_value=$?\r# Make lock for RedHat / SuSE\rif test -w \u0026quot;$lockdir\u0026quot;\rthen\rtouch \u0026quot;$lock_file_path\u0026quot;\rfi\rexit $return_value\relse\rlog_failure_msg \u0026quot;Couldn't find MySQL server ($bindir/mysqld_safe)\u0026quot;\rfi\r;;\r'stop')\r# Stop daemon. We use a signal here to avoid having to know the\r# root password.\rif test -s \u0026quot;$mysqld_pid_file_path\u0026quot;\rthen\r# signal mysqld_safe that it needs to stop\rtouch \u0026quot;$mysqld_pid_file_path.shutdown\u0026quot;\rmysqld_pid=`cat \u0026quot;$mysqld_pid_file_path\u0026quot;`\rif (kill -0 $mysqld_pid 2\u0026gt;/dev/null)\rthen\recho $echo_n \u0026quot;Shutting down MySQL\u0026quot;\rkill $mysqld_pid\r# mysqld should remove the pid file when it exits, so wait for it.\rwait_for_pid removed \u0026quot;$mysqld_pid\u0026quot; \u0026quot;$mysqld_pid_file_path\u0026quot;; return_value=$?\relse\rlog_failure_msg \u0026quot;MySQL server process #$mysqld_pid is not running!\u0026quot;\rrm \u0026quot;$mysqld_pid_file_path\u0026quot;\rfi\r# Delete lock for RedHat / SuSE\rif test -f \u0026quot;$lock_file_path\u0026quot;\rthen\rrm -f \u0026quot;$lock_file_path\u0026quot;\rfi\rexit $return_value\relse\rlog_failure_msg \u0026quot;MySQL server PID file could not be found!\u0026quot;\rfi\r;;\r'restart')\r# Stop the service and regardless of whether it was\r# running or not, start it again.\rif $0 stop $other_args; then\r$0 start $other_args\relse\rlog_failure_msg \u0026quot;Failed to stop running server, so refusing to try to start.\u0026quot;\rexit 1\rfi\r;;\r'reload'|'force-reload')\rif test -s \u0026quot;$mysqld_pid_file_path\u0026quot; ; then\rread mysqld_pid \u0026lt; \u0026quot;$mysqld_pid_file_path\u0026quot;\rkill -HUP $mysqld_pid \u0026amp;\u0026amp; log_success_msg \u0026quot;Reloading service MySQL\u0026quot;\rtouch \u0026quot;$mysqld_pid_file_path\u0026quot;\relse\rlog_failure_msg \u0026quot;MySQL PID file could not be found!\u0026quot;\rexit 1\rfi\r;;\r'status')\r# First, check to see if pid file exists\rif test -s \u0026quot;$mysqld_pid_file_path\u0026quot; ; then read mysqld_pid \u0026lt; \u0026quot;$mysqld_pid_file_path\u0026quot;\rif kill -0 $mysqld_pid 2\u0026gt;/dev/null ; then log_success_msg \u0026quot;MySQL running ($mysqld_pid)\u0026quot;\rexit 0\relse\rlog_failure_msg \u0026quot;MySQL is not running, but PID file exists\u0026quot;\rexit 1\rfi\relse\r# Try to find appropriate mysqld process\rmysqld_pid=`pidof $libexecdir/mysqld`\r# test if multiple pids exist\rpid_count=`echo $mysqld_pid | wc -w`\rif test $pid_count -gt 1 ; then\rlog_failure_msg \u0026quot;Multiple MySQL running but PID file could not be found ($mysqld_pid)\u0026quot;\rexit 5\relif test -z $mysqld_pid ; then if test -f \u0026quot;$lock_file_path\u0026quot; ; then log_failure_msg \u0026quot;MySQL is not running, but lock file ($lock_file_path) exists\u0026quot;\rexit 2\rfi log_failure_msg \u0026quot;MySQL is not running\u0026quot;\rexit 3\relse\rlog_failure_msg \u0026quot;MySQL is running but PID file could not be found\u0026quot;\rexit 4\rfi\rfi\r;;\r*)\r# usage\rbasename=`basename \u0026quot;$0\u0026quot;`\recho \u0026quot;Usage: $basename {start|stop|restart|reload|force-reload|status} [ MySQL server options ]\u0026quot;\rexit 1\r;;\resac\rexit 0\r十:修改完mysql.serve，在mysql3306文件夹下面执行 #  cd /home/mysql/mysql3306\rsupport-files/mysql.server start\r#查看是否已经启动\rnetstat -ntlp\r#将mysql3306加入服务\rcp /home/mysql/mysql3306/support-files/mysql.server /etc/init.d/mysql3306\r#开机自启\rchkconfig --add mysql3306\r#显示服务列表，如果3,4,5都是开的就说明是自启设置成功\rchkconfig --list\r#重启数据库的命令：\r/etc/init.d/mysql3306 restart\r十一:访问MySql，重置密码 #  #第二个数据库必须使用socket进入，否则默认为第一个数据库。因为配置了全局环境变量\rcd /home/mysql/mysql3306/bin/\r./mysql -uroot -p -h 127.0.0.1 --socket=../tmp/mysql.sock --port=3306\r#输入初始化的密码：a/NRxfzh;87p（上面保存的初始密码）\ralter user 'root'@'localhost' identified by 'suxia@cc2021!';\rflush privileges;\r#远程连接用户设置\ruse mysql;\rselect 'host' from user where user='root';\rupdate user set host = '%' where user ='root';\rflush privileges;\rselect 'host' from user where user='root';\r#退出\rexit\r十二:开放3306端口 #  #查看firewalld状态，如果是dead状态，即防火墙未开启\rsystemctl status firewalld\r#开启防火墙\rsystemctl start firewalld\r#确认firewalld状态\rsystemctl status firewalld\r#关闭\rsystemctl stop firewalld\r#开放端口\rfirewall-cmd --zone=public --add-port=3306/tcp --permanent\rfirewall-cmd --reload\rfirewall-cmd --zone=public --list-ports\r#关闭端口\rfirewall-cmd --zone=public --remove-port=3306/tcp --permanent firewall-cmd --reload\r十三:远程同步文件 #  rsync -av -e 'ssh -p 22' /home/mysql/mysql-8.0.21-linux-glibc2.12-x86_64.tar.xz root@ip:/home/mysql\r"});index.add({'id':152,'href':'/life/docs/databases/mysql/mysql_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B8%89%E8%8C%83%E5%BC%8F/','title':"mysql_数据库设计三范式",'section':"mysql学习笔记",'content':" 设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。\n  目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。\n 数据库三范式 #  第一范式（1NF） #   所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。简而言之，第一范式就是无重复的域。 说明：在任何一个关系数据库中，第一范式（1NF）是对关系模式的设计基本要求，一般设计中都必须满足第一范式（1NF）。不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的关系模型。  第二范式（2NF） #   在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖） 第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。例如在员工表中的身份证号码即可实现每个一员工的区分，该身份证号码即为候选键，任何一个候选键都可以被选作主键。在找不到候选键时，可额外增加属性以实现区分，如果在员工关系中，没有对其身份证号进行存储，而姓名可能会在数据库运行的某个时间重复，无法区分出实体时，设计辟如ID等不重复的编号以实现区分，被添加的编号或ID选作主键。（该主键的添加是在ER设计时添加，不是建库时随意添加） 第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。  第三范式（3NF） #   在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖） 第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足2NF的基础上，任何非主属性不得传递依赖于主属性。  巴斯-科德范式（BCNF） #   Boyce-Codd Normal Form（巴斯-科德范式）\n  在3NF基础上，任何非主属性不能对主键子集依赖（在3NF基础上消除对主码子集的依赖） 巴斯-科德范式（BCNF）是第三范式（3NF）的一个子集，即满足巴斯-科德范式（BCNF）必须满足第三范式（3NF）。通常情况下，巴斯-科德范式被认为没有新的设计规范加入，只是对第二范式与第三范式中设计规范要求更强，因而被认为是修正第三范式，也就是说，它事实上是对第三范式的修正，使数据库冗余度更小。这也是BCNF不被称为第四范式的原因。某些书上，根据范式要求的递增性将其称之为第四范式是不规范，也是更让人不容易理解的地方。而真正的第四范式，则是在设计规范中添加了对多值及依赖的要求。 定义：关系模式R\u0026lt;U,F\u0026gt;∈1FNF,若X→Y且Y不是X的子集时X必含有码，则R\u0026lt;U,F\u0026gt;∈BCNF。也就是说，关系模式R\u0026lt;U,F\u0026gt;中，若每一个决定因素都包含码，则R\u0026lt;U,F\u0026gt;∈BCNF。   由BCNF的定义可以得到结论，一个满足BCNF的关系模式有：\n  -所有非主属性对每一个码都是完全函数依赖。 -所有主属性对每一个不包含它的码也是完全函数依赖。 -没有任何属性完全函数依赖于非码的任何一组属性。 若R∈BCNF，按定义排除了任何属性对码的传递依赖与部分依赖，所以R∈3NF。[1] 一般关系型数据库设计中，达到BCNF就可以了！  #【数据库五大约束】\n 1.primary KEY:设置主键约束； 2.UNIQUE：设置唯一性约束，不能有重复值； 3.DEFAULT 默认值约束，height DOUBLE(3,2)DEFAULT 1.2 height不输入是默认为1,2 4.NOT NULL：设置非空约束，该字段不能为空； 5.FOREIGN key :设置外键约束。  【主键】 #   1.主键的注意事项？ 主键默认非空，默认唯一性约束，只有主键才能设置自动增长，自动增长一定是主键，主键不一定自动增长； 2.设置主键的方式？ 在定义列时设置：ID INT PRIMARY KEY 在列定义完之后设置：primary KEY（id）  【外键】 #   1.设置外键的注意事项：  只有INNODB的数据库引擎支持外键，修改my.ini文件设置default-storage-engine=INNODB 外键必须与参照列的数据类型必须相同（数值型要求长度和无符号都相同，字符串要求类型相同，长度可以不同）。\n  2设置外键的语法：\nCONSTRAINT 外键名 FOREIGN KEY (外键字段)REFERENCES 参照表 (参照字段) ON DELETE SET NULL ON UPDATE CASCADE 设置参照完整性\n  3.外键约束的参照操作？\n   参照表的完整性操作：当对参照表的参照字段进行删除或更新时，外键表中的外键如何应对；\n  参照操作可选值：\n   RESTRICT拒绝参照表删除或更新参照字段；\n  RESTRICT和NO ACTION相同，但这个指令只在mysql生效;\n  CASCADE删除或更新参照表的参照字段时，外键表的记录同步删除更新；\n  SET NULL 删除或更新参照表的参照字段时，外键表的外键设为NULL;\n   1NF, 字段不可再分。这个关系数据库强制了，想建立复合的字段也建立不起来。关系数据库出现之前才有这个问题。 2NF，主键依赖，就是一张表里面的字段，必须是跟主键相关的，不能把无关的数据放进来。主键依赖，实质就是，这个信息如果是对象的属性，就放进来，否则就不放。 3NF，就是不能重复存储相同的信息。这个情况，其实是在一个对象里引用了另外一个对象，这个时候，存一个引用就够了，而不是重复的存储这个对象的多个副本。 2NF和3NF的本质是，对象的属性依赖对象。数据库的主键，作用是什么？它用来唯一的标识这个对象，同时，用来给其他对象引用 引用 引用（重要的事情说三次） 所以，实战中，所有数据库都是用int类型做主键（int，或者bigint），而且，主键一律是自增，这是不成文的规则，凡是不遵守这个规则的，都是错的（虽然理论上可以）这样， 数据库写数据的时候，几乎是永远不写入同一个对象的重复信息的，需要重复的时候，只写这个对象的ID  create table Courses(\rCourseID int identity primary key,\rCourseName nvarchar(50) not null\r)\rcreate table Departments( DepartmentID int identity primary key,\tDepartmentName nvarchar(50) not null,\tHeadName nvarchar(50) not null);\rcreate table Students(\tStudentID int identity primary key,\tName nvarchar(50),\tDepartmentID int not null\tConstraint FkStudentDepartment foreign key (DepartmentID) references Departments(DepartmentID));\rcreate table Results(\tResultID int identity primary key,\tStudentID int not null,\tCourseID int not null,\tResult int not null,\rConstraint FkResultStudent foreign key (StudentID) references Students(StudentID));\r11.数据库设计基础原则：三范式 #   1）表必须有主键 2）字段内容不能是其他的字段加工而成 3）行数据不能相同  12.现今业界主流数据库设计原则：反三范式 #   1）表不是必须有主键 2）字段存一些加工后的中间的结果，冗余设计 3）记录冗余   三范式追求的目标存储空间尽量小；反三范式追求的目标是查询速度。 创建数据库设计时首先按三范式设计，然后局部优化。\n "});index.add({'id':153,'href':'/life/docs/javadir/tooldoc/spring%E5%B7%A5%E5%85%B7/','title':"spring工具类",'section':"Java公共库文档总结 ",'content':"spring工具类 #   Spring-core中提供了大量的工具类，常用的有StringUtils、ObjectUtils、NumberUtils、Base64Utils等，Spring工具类在spring-core.jar中的org.springframework.util包下。\n  1:StringUtils  方法名\t返回值类型\t作用\t备注\risEmpty(Object str)\tboolean\t判断字符串是否为Null或者空字符串\tnull和''都为true\rhasLength(CharSequence str)\tboolean\t判断字符串长度是否大于1\tnull和''都为false\rhasText(CharSequence str)\tboolean\t判断字符串中是否有字符\tnull和空字白符都为false\rcontainsWhitespace(CharSequence str)\tboolean\t字符串中是否含有空白字符\ttrimWhitespace(CharSequence str)\tString\t去掉字符串中首尾的空白字符\ttrimAllWhitespace(String str)\tString\t去 掉字符串中所有的空白字符\ttrimLeadingWhitespace(String str)\tString\t去掉字符串左边的空白字符\ttrimTrailingWhitespace(String str)\tString\t去掉字符串右边边的空白字符\tstartsWithIgnoreCase(String str, String prefix)\tString\t判断字符串是否以xx开头，并且忽略大小写\tgetFilename(String path)\tString\t获取文件名\t“mypath/myfile.txt” -\u0026gt; “myfile.txt”\rgetFilenameExtension(String path)\tString\t获取文件扩展名\t“mypath/myfile.txt” -\u0026gt; “txt”\rstripFilenameExtension(String path)\tString\t去掉文件扩展名\t“mypath/myfile.txt” -\u0026gt; “mypath/myfile”\rreplace(String inString, String oldPattern, String newPattern)\tString\t替换字符串\tdelete(String inString, String pattern)\tString\t从给定的字符串中删除所有匹配的字符\tdeleteAny(String inString, String charsToDelete)\tString\t删除所有指定字符\t“az\\n” will delete ‘a’s, ‘z’s and new lines\rSystem.out.println(org.springframework.util.StringUtils.containsWhitespace(\u0026quot;sfas\u0026quot;));//是否有空白 false\rSystem.out.println(org.springframework.util.StringUtils.trimWhitespace(\u0026quot; - dfasd- \u0026quot;));//去除前后空格\rSystem.out.println(org.springframework.util.StringUtils.trimAllWhitespace(\u0026quot; - - - - fshjk s j - -\u0026quot;));//去除所有空格\rSystem.out.println(org.springframework.util.StringUtils.trimLeadingWhitespace(\u0026quot; - - - - fshjk s j - - \u0026quot;));//去除第字符串开头的空格\rSystem.out.println(org.springframework.util.StringUtils.trimTrailingWhitespace(\u0026quot; - - - - fshjk s j - - \u0026quot;));//去除第字符串结尾的空格\rSystem.out.println(org.springframework.util.StringUtils.substringMatch(\u0026quot;f sdfc\u0026quot;,2,\u0026quot;sd\u0026quot;));//判断字符串第几个位置起为某值\rSystem.out.println(org.springframework.util.StringUtils.countOccurrencesOf(\u0026quot;qwertyrtttttt\u0026quot;, \u0026quot;t\u0026quot;));//判断字符串字符重复次数\rSystem.out.println(org.springframework.util.StringUtils.replace(\u0026quot;yuiyuiyui\u0026quot;, \u0026quot;y\u0026quot;, \u0026quot;m\u0026quot;));//字符替换\rSystem.out.println(org.springframework.util.StringUtils.delete(\u0026quot;yuiyuiyui\u0026quot;, \u0026quot;y\u0026quot;));//删除匹配的字符\rSystem.out.println(org.springframework.util.StringUtils.deleteAny(\u0026quot;yuiyuiyui\u0026quot;, \u0026quot;yi\u0026quot;));//删除出现且匹配的字符\rSystem.out.println(org.springframework.util.StringUtils.quote(\u0026quot;yuiyuiyui\u0026quot;));//为字符串加上''号\rSystem.out.println(org.springframework.util.StringUtils.unqualify(\u0026quot;yuiyuiy.ui\u0026quot;));//字符串截取，，从'.'号+1的未知开始\rSystem.out.println(org.springframework.util.StringUtils.unqualify(\u0026quot;yuiyuiy.ui\u0026quot;,'y'));//字符串截取，，从字符最后出现的位置+1开始\rSystem.out.println(org.springframework.util.StringUtils.capitalize(\u0026quot;yuiyuiy\u0026quot;));//首字母大写\rSystem.out.println(org.springframework.util.StringUtils.uncapitalize(\u0026quot;YuIyuiy\u0026quot;));//首字母小写\rSystem.out.println(org.springframework.util.StringUtils.uncapitalize(\u0026quot;YuIyuiy\u0026quot;));//首字母小写 changeFirstCharacterCase(String str, boolean capitalize),capitalize为true则为大写\rSystem.out.println(org.springframework.util.StringUtils.getFilename(\u0026quot;D://Java\u0026quot;));//截取最后一个\\出现的未知+1的字符串 Java\rSystem.out.println(org.springframework.util.StringUtils.getFilenameExtension(\u0026quot;D:/Java.fdsdf\u0026quot;));//获取路劲下的后缀名 fdsdf\rSystem.out.println(org.springframework.util.StringUtils.stripFilenameExtension(\u0026quot;D:/Java.fdsdf\u0026quot;));//获取路劲下的后缀名之前的部分 D:/Java\r 2:ObjectUtils  isEmpty(Object obj)\tboolean\t判断对象是否为空\t对象为null或者数组Map为空等都为true\risEmpty(Object[] array)\tboolean\t判断数组是否为空\tisArray(Object obj)\tboolean\t判断对象是否为数组\tcontainsElement(Object[] array, Object element)\tboolean\t判断数据组中是否包含给定的元素\taddObjectToArray(A[] array, O obj)\r 3:NumberUtils  convertNumberToTargetClass(Number number, Class targetClass)\t\u0026lt;T extends Number\u0026gt; T\t将Number转为指定的类型\rparseNumber(String text, Class targetClass)\t\u0026lt;T extends Number\u0026gt; T\t将字符串转为数值类型\rparseNumber(String text, Class targetClass, NumberFormat numberFormat)\t\u0026lt;T extends Number\u0026gt; T\t将字符串转为数值类型\r 4:Base64Utils  encode(byte[] src)\tbyte[]\t编码\rdecode(byte[] src)\tbyte[]\t解码\r"});index.add({'id':154,'href':'/life/docs/javadir/thread/practice/','title':"线程最佳实践",'section':"多线程与并发 ",'content':"线程最佳实践 #  "});index.add({'id':155,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/b3akcg3n8k/','title':"我自己理解的聊天技巧",'section':"自信",'content':"  1:要让对方觉得你在用心和她/他聊天\n  2:要尽可能的照顾到对方的情绪因为聊天实际意义并不大共情的意义才是最大的 特别是情侣\n  3:聊天后 你如果在意这个人 应当复盘和做相应的记录比如 生日,爱好,兴趣\n  4:假如你以前不怎么会聊天 你最好每天总结聊天技巧\n  "});index.add({'id':156,'href':'/life/docs/javadir/thread/tool/collection/','title':"并发集合框架",'section':"并发工具 ",'content':"collection #  "});index.add({'id':157,'href':'/life/docs/%E8%84%9A%E6%9C%AC/npm%E9%83%A8%E5%88%86%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/','title':"npm部分插件安装问题 ",'section':"脚本",'content':" less版本过高的解决办法  解决方法：\r卸载安装的高版本的less-loader ， 【npm uninstall less-loader】，\r安装指定低版本的less-loader 【npm install less-loader@4.1.0 --save】\r webpack Cannot read property \u0026lsquo;tap\u0026rsquo; of undefined ?  解决：\r这个报错是webpack依赖重复引入导致的，由于已经有依赖中引入的webpack，然后有自己引入的webpack。\r下面是生产的依赖，将\r“webpack”: “^4.0.0-beta.3”,\r“webpack-dev-server”: “2.7.1”,\r“webpack-manifest-plugin”: “1.2.1”,\r删掉，移除node_modules。重新npm install 。再启动项目，就搞定了\r 使用webpack打包报ERROR in TypeError: Cannot read property ‘tap‘ of undefined  降低版本 webpack\r假如降为4.44.2 则\rnpm install webpack@4.44.2 -g 全局\rnpm install webpack@4.44.2 -D 局部\r less-loader模块 TypeError: this.getOptions is not a function  原因： less-loader安装的版本过高\r解决方案： 1.npm uninstall less-loader\r2.npm install less-loader@6.0.0\r less-loader模块 Module not found: Error: Can\u0026rsquo;t resolve \u0026lsquo;less-loader\u0026rsquo;报错解决  npm install less less-loader --save-dev\r webpack打包css报错：UnhandledPromiseRejectionWarning: TypeError: this.getResolve is not a function  出错原因：\rcss-loader 和 style-loader 版本过高\r解决办法：在package.json文件中降低 css-loader 和 style-loader 版本\r extract-text-webpack-plugin 打包css报错的解决  降低webpack版本\r  如\n  webpack.config.js\n  const path = require(\u0026#39;path\u0026#39;); const ExtractTextPlugin = require(\u0026#34;extract-text-webpack-plugin\u0026#34;); module.exports = { entry: \u0026#39;./src/index.js\u0026#39;, output: { path: path.resolve(__dirname, \u0026#39;dist\u0026#39;), publicPath: \u0026#39;/dist/\u0026#39;, filename: \u0026#39;bundle.js\u0026#39; }, mode: \u0026#39;production\u0026#39;, module: { rules: [ { test: /\\.css$/, //loader: [\u0026#39;style-loader\u0026#39;,\u0026#39;css-loader\u0026#39;]  use: ExtractTextPlugin.extract({ fallback: \u0026#34;style-loader\u0026#34;, use: \u0026#34;css-loader\u0026#34; }) }, { test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/, loader: \u0026#39;url-loader\u0026#39;, options: { limit: 10000*4, name: \u0026#39;[name].[ext]?[hash]\u0026#39; } } ] }, plugins: [ new ExtractTextPlugin(\u0026#34;styles.css\u0026#34;), ] };  package.json  { \u0026#34;devDependencies\u0026#34;: { \u0026#34;css-loader\u0026#34;: \u0026#34;^0.28.7\u0026#34;, \u0026#34;extract-text-webpack-plugin\u0026#34;: \u0026#34;^4.0.0-beta.0\u0026#34;, \u0026#34;file-loader\u0026#34;: \u0026#34;^1.1.4\u0026#34;, \u0026#34;style-loader\u0026#34;: \u0026#34;^0.23.1\u0026#34;, \u0026#34;url-loader\u0026#34;: \u0026#34;^0.5.8\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^4.12.0\u0026#34; } } "});index.add({'id':158,'href':'/life/docs/databases/mysql/mysql%E4%BA%8B%E5%8A%A1/','title':"mysql事务",'section':"mysql学习笔记",'content':"什么是事务 #   一系列有序的数据库操作：  要么全部成功 要么全部回退到操作前的状态 中间状态对其他连接不可见   事务的基本操作：    基本操作 说明     start transaction 开始事务   commit 提交(全部完成)   rollback 回滚(回到初始状态)       创建一个临时表  CREATE TABLE `t_transaction` ( `id` int NOT NULL AUTO_INCREMENT, `name` varchar(255) DEFAULT NULL, `num` bigint DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;  例子事务使用  -- 开启一个事务 start TRANSACTION ; -- 或者使用(非标准sql) begin ; insert into t_transaction( `name` ,`num`) values(\u0026#39;abc\u0026#39;,ROUND(RAND()*100)); -- 事务结束，插入成功 COMMIT ;  例子 事务 回滚  START TRANSACTION ; BEGIN ; insert into t_transaction( `name` ,`num`) values(\u0026#39;kk\u0026#39;,ROUND(RAND()*100)); ROLLBACK ; -- 不会插入一条数据   事务回滚点  START TRANSACTION ; BEGIN ; insert into t_transaction( `name` ,`num`) values(\u0026#39;s1x\u0026#39;,ROUND(RAND()*100)); -- 设置回滚点1 savepoint a_point_1; insert into t_transaction( `name` ,`num`) values(\u0026#39;s1\u0026#39;,ROUND(RAND()*100)); -- 回滚到指定点 ROLLBACK to a_point_1; commit ; 自动提交 #   autocommit可以在session级别设置 每个DML操作都自动提交 DDL永远都是自动提交，无法通过rollback回滚  事务的四个基本属性(ACID) #   原子性(Atomicity) 一致性(Consistency) 隔离性(Isolation) 持久性(Durability)  事务的原子性 #   包含在事务中的操作要么全部被执行，要么都不执行 中途数据库或应用发生异常，未提交的事务都应该被回滚  事务的一致性 #   数据的正确性，合理性，完整性 数据一致性应该符合应用需要规则：  余额不能是负数 交易对象必须先有账号 用户账号不能重复   事务的结果需要满足数据的一致性约束  事物的持久性 #   提交完成的事务对数据库的影响必须是永久性的  数据库异常不会丢失事务更新 通常认为成功写入磁盘的数据即为持久化成功    事务的持久化的实现 #   数据文件持久化  随机同步刷新(慢)   事务日志持久化与实例恢复  顺序同步刷新(快) -\u0026gt; 事务日志 随机异步刷新 -\u0026gt; 磁盘 事务日志 -\u0026gt; 磁盘(实例恢复)    事务的隔离性 #   数据库事务在提交完成前，中间的任何数据变化对其他的事务都是不可见的。  数据库隔离现象 #     隔离现象 描述     脏读(Dirty Read) 事务B读到事务A尚未提交的数据变更   不可重复读(NonRepeatable Read) 事务B读取前后两次读取一条记录之间该记录被事务A修改并提交，于是事务B读到了不一样的结果   幻读(Phantom Read) 事务B按条件匹配到了若干行记录并修改。但是由于修改过程中事务A新插入了符合条件记录，导致B更新完成后发现仍有符合条件却未被更新的记录。    数据库隔离等级 #     隔离等级 脏读 不可重复读 幻读     未提交读 可能 可能 可能   已提交读 不可能 可能 可能   可重复读 不可能 不可能 可能   可串行化读 不可能 不可能 不可能    MySQL的事务隔离级别 #   InnoDB默认标记为可重复读 InnoDB并不是标准定义上的课重复读 InnoDB默认在可重复读的基础上避免幻读  MySQL事务隔离级别设置 #   可在global/session/下个事务，级别分别进行设置 建议使用Read committed(同Oracle) 或者建议使用默认的Repeatable read  set tx_isolation = \u0026#39;\u0026#39; -- 设置隔离级别 事务与并发写 #   某个正在更新的记录再提交或回滚前不能被其他事务同时更新  事务回滚的实现 #   回滚段(rollback segment)与数据前像  "});index.add({'id':159,'href':'/life/docs/javadir/tooldoc/spring%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/','title':"spring常用的工具类",'section':"Java公共库文档总结 ",'content':"spring常用的工具类 #  内置的resouce类型 #  UrlResource\rClassPathResource\rFileSystemResource\rServletContextResource\rInputStreamResource\rByteArrayResource\rEncodedResource 也就是Resource加上encoding, 可以认为是有编码的资源\rVfsResource(在jboss里经常用到, 相应还有 工具类 VfsUtils)\rorg.springframework.util.xml.ResourceUtils 用于处理表达资源字符串前缀描述资源的工具. 如: \u0026amp;quot;classpath:\u0026amp;quot;. 有 getURL, getFile, isFileURL, isJarURL, extractJarFileURL 工具类 #  org.springframework.core.annotation.AnnotationUtils 处理注解\rorg.springframework.core.io.support.PathMatchingResourcePatternResolver 用 于处理 ant 匹配风格(com/*.jsp, com/**/*.jsp),找出所有的资源, 结合上面的resource的概念一起使用,对于遍历文件很有用. 具体请详细查看javadoc\rorg.springframework.core.io.support.PropertiesLoaderUtils 加载Properties资源工具类,和Resource结合\rorg.springframework.core.BridgeMethodResolver 桥接方法分析器. 关于桥接方法请参考: http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.12.4.5\rorg.springframework.core.GenericTypeResolver 范型分析器, 在用于对范型方法, 参数分析.\rorg.springframework.core.NestedExceptionUtils\rxml工具 #  org.springframework.util.xml.AbstractStaxContentHandler\rorg.springframework.util.xml.AbstractStaxXMLReader\rorg.springframework.util.xml.AbstractXMLReader\rorg.springframework.util.xml.AbstractXMLStreamReader\rorg.springframework.util.xml.DomUtils\rorg.springframework.util.xml.SimpleNamespaceContext\rorg.springframework.util.xml.SimpleSaxErrorHandler\rorg.springframework.util.xml.SimpleTransformErrorListener\rorg.springframework.util.xml.StaxUtils\rorg.springframework.util.xml.TransformerUtils\r其它工具集 #  org.springframework.util.xml.AntPathMatcherant风格的处理\rorg.springframework.util.xml.AntPathStringMatcher\rorg.springframework.util.xml.Assert断言,在我们的参数判断时应该经常用\rorg.springframework.util.xml.CachingMapDecorator\rorg.springframework.util.xml.ClassUtils用于Class的处理\rorg.springframework.util.xml.CollectionUtils用于处理集合的工具\rorg.springframework.util.xml.CommonsLogWriter\rorg.springframework.util.xml.CompositeIterator\rorg.springframework.util.xml.ConcurrencyThrottleSupport\rorg.springframework.util.xml.CustomizableThreadCreator\rorg.springframework.util.xml.DefaultPropertiesPersister\rorg.springframework.util.xml.DigestUtils摘要处理, 这里有用于md5处理信息的\rorg.springframework.util.xml.FileCopyUtils文件的拷贝处理, 结合Resource的概念一起来处理, 真的是很方便\rorg.springframework.util.xml.FileSystemUtils\rorg.springframework.util.xml.LinkedCaseInsensitiveMap\rkey值不区分大小写的LinkedMap\rorg.springframework.util.xml.LinkedMultiValueMap一个key可以存放多个值的LinkedMap\rorg.springframework.util.xml.Log4jConfigurer一个log4j的启动加载指定配制文件的工具类\rorg.springframework.util.xml.NumberUtils处理数字的工具类, 有parseNumber 可以把字符串处理成我们指定的数字格式, 还支持format格式, convertNumberToTargetClass 可以实现Number类型的转化. org.springframework.util.xml.ObjectUtils有很多处理null object的方法. 如nullSafeHashCode, nullSafeEquals, isArray, containsElement, addObjectToArray, 等有用的方法\rorg.springframework.util.xml.PatternMatchUtilsspring里用于处理简单的匹配. 如 Spring's typical \u0026amp;quot;xxx*\u0026amp;quot;, \u0026amp;quot;*xxx\u0026amp;quot; and \u0026amp;quot;*xxx*\u0026amp;quot; pattern styles\rorg.springframework.util.xml.PropertyPlaceholderHelper用于处理占位符的替换\rorg.springframework.util.xml.ReflectionUtils反映常用工具方法. 有 findField, setField, getField, findMethod, invokeMethod等有用的方法\rorg.springframework.util.xml.SerializationUtils用于java的序列化与反序列化. serialize与deserialize方法\rorg.springframework.util.xml.StopWatch一个很好的用于记录执行时间的工具类, 且可以用于任务分阶段的测试时间. 最后支持一个很好看的打印格式. 这个类应该经常用\rorg.springframework.util.xml.StringUtils\rorg.springframework.util.xml.SystemPropertyUtils\rorg.springframework.util.xml.TypeUtils用于类型相容的判断. isAssignable\rorg.springframework.util.xml.WeakReferenceMonitor弱引用的监控 和web相关的工具 #  org.springframework.web.util.CookieGenerator\rorg.springframework.web.util.HtmlCharacterEntityDecoder\rorg.springframework.web.util.HtmlCharacterEntityReferences\rorg.springframework.web.util.HtmlUtils\rorg.springframework.web.util.HttpUrlTemplate\r这个类用于用字符串模板构建url, 它会自动处理url里的汉字及其它相关的编码. 在读取别人提供的url资源时, 应该经常用 String url = \u0026amp;quot;http://localhost/myapp/{name}/{id}\u0026amp;quot;\rorg.springframework.web.util.JavaScriptUtils\rorg.springframework.web.util.Log4jConfigListener\r用listener的方式来配制log4j在web环境下的初始化\rorg.springframework.web.util.UriTemplate\rorg.springframework.web.util.UriUtils处理uri里特殊字符的编码\rorg.springframework.web.util.WebUtils\rorg.springframework.web.util.\r"});index.add({'id':160,'href':'/life/docs/physics/','title':"physics",'section':"Docs",'content':"physics\n"});index.add({'id':161,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/6ngdcha8bk/','title':"使自己成熟稳重",'section':"自信",'content':"如何改变性格 #  case1 #  1、自我反省 #  稻盛和夫说，要每天反省。 他非常强调反省，他每天都会不断地问自己：今天有没有让别人感到不愉快？待人是否亲切？是否傲慢？有没有自私的行为？\n通过这样的一些问题，不断回望自己，回顾自己的一天。 对照做人最基本的准则，确认自己的言行举止是否得当。 自我反省是人生的最高境界，通过过不断检讨自己的行为，更好地适应他人，也让自己变得更好。 正是这种正面的自我反省，才会让我们始终不偏离正确的航向，成功的步伐就会越迈越大。\n2、注重自己有深刻感受的地方 #  只有我们自己有深刻感受的地方，才能容易改。 如果我们没有那些经历和感受，别人说太多，自己用再多的方法，也起不到任何作用。 我们要注重自己的亲身体验。 只有经常吃亏、经常碰壁并且反思自己，才能够慢慢改变自己。 时间长了性格自然会变好。\n3、改变自己的习惯 #  习惯是很容易影响一个人的，如果自己以前的生活、说话做事的习惯有不好的地方，我们都要学会改变。 想要改变自己，养成所希望的性格，我们要学会尝试去做一些跟以前截然不同的事，并且不断形成新的习惯。 这样子别人对你的看法就会发生改变，情感也会发生变化。 这样我们也会受到积极的鼓舞，就会更加有信心，性格也会变得更好。\n4、打开自己的心门 #  我们要学会敞开自己的心门，只有敞开心扉，我们才能成为阳光乐观的人。 坚持下去你就会发现你会变得更加开朗。 我们不要总是沉浸在自己的世界之中。你 要知道生活中某些重要的事情对我们的影响非常巨大，能够改变我们的观点和做法，这样子就会慢慢影响着我们为人处世得方式，性格也会慢慢改变。\n5、虚心接受意见 #  生活中很多人会很自我，觉得自己认为的就是对的。 这种人大多数是固执已见，很难听得进去别人的意见或建议，只认准自己的理论，觉得自己的就是对的，很多时候我们并不想跟这样的人深交。 所以如果你觉得自己属于这种人，就要学会去改变下自己。 学会接受他人的意见，学会倾听和尝试。 这样子我们才能够更好跟别人走在一起，并且有更多的共同话题\n6、敢于尝试 #  有句话说得好：“不管舞台有多大，你不上台演讲，永远只是个观众；不管平台有多好，不参与就赚不到钱；不管胆子有多大，都不敢闯入，永远发挥不了作用。只有敢于尝试、敢想敢干、敢于突破的人才会成功！”\n每一个优秀的人，都是敢于去尝试，去不断折腾。\n因为只有敢于去尝试，你才能知道自己究竟有多么优秀，你才能配得上当初努力付出的自己。\n反之，做任何事情都不敢去尝试，那么只会原地踏步，甚至往后退。\n一件事情，如果你下定决心去做，有可能成功，也有可能不成功。\n但是，只要你去做，就要百分之五十的成功率，你不去做，就一点可能都没有。 任何事如果仅仅是停留在想的阶段，那么都不会有进展，有结果的。 人要敢于尝试，才能遇见不一样的自己。\n要想改变性格，必须要坚持。\n只有坚持才有希望，只有坚持才能得到自己想要的。\ncase2 #  从小到大我就被长辈朋友说傻、呆、笨、二。一直以来也比较佛系，因为有一堆爱我的人，他们也认可我的才华。直到最近一次，被一个人再次提起。我才开始意识到，很多时候某些聪明人第一眼就能看出我的气质，不是偶然，也不是不够了解我（然而我之前一直以为他们并不懂我）。而是我的确有这样的性格特点，当然这不是缺陷，只要不影响工作和生活，完全可以继续我行我素地活下去。但是我开始不甘心了，我希望自己在处理专业以外事情上能够通畅无阻、游刃有余。如果每次都被打上这样的标签，我不会愿意。我也不愿一辈子都这样。以前安慰自己傻人有傻福，单纯坦率没有心机很难得。直到我发现有另外一种人，他们的确没有心机，但是他们有趣，懂得察言观色，又很真性情。这就是把聪明用在对的地方，而且学识丰富，活出自我的人。我想，这会是我的目标，以下是我的自我缺点分析和解决方法。自己想了一些办法，怕忘记才写下来的，共勉：\n1.不爱思考（笨）\n多思考，观察事情，寻找规律和共性，总结经验，用于下一次相似问题的处理。\n2.说话不经过大脑（一根筋）\n宁可晚回复，也要说对的话、精准的话。如此反复训练，逐渐训练话术与语速。\n3.没有时间观念（拖延）\n超强计划力，不断给自己定目标，绝对不浪费任何时间。\n4.没有说服能力，容易妥协，不维护自我利益，总被人坑（傻）\n多用逻辑清楚三点表达法，交流前自己先用辩证法辩一遍，没有逻辑漏洞了，再去说服别人。\n5.不懂拒绝，没有主见（弱）\n先自我认定观点三次，认为没有问题，大胆说出自己的观点。凡事多说，我觉得，我想，我要，我不要，拒绝。多说，可以吗？好不好？求你啦！把征服欲激发出来。\n6.不有趣，不幽默、反应慢（愣）\n多看综艺、奇葩说、吐槽大会。多与人说话，观察别人说话的话术，学以致用。开始接不上话是正常，慢慢多接几句就会逐渐掌握沟通的节奏。\n7.怂、做傻事、出糗（二）\n凡事注意形象，我行我素是对的，但是不可以不注重形象，觉得我是这样就这样了。一定要强硬，行为干练、说话中气足、眼神坚定对视，给人超强的无形气场。可以保持文艺气质（打扮），但要有独立自主的感觉。并且小心谨慎，凡事多个心眼。该要面子的时候要一些面子，在出于自己都觉得丢脸的情况下，低级的错误绝对不允许自己犯。\n8.敏感、不自信（情绪化）\n太过在意别人对自己的恶言恶语，意味着内心不够强大。显得非常蠢，别人说两句话就把自己搞得地动山摇。对于熟悉的人，过份迁就。需要宁我负天下人，休让天下人负我。不要害怕自己得罪了他，会给穿小鞋。你怕得罪她，她也怕得罪你。若有实力，自然有人跪舔。人生过客说的话无需太过在意，你的人生的缺点和性格需要自己来扭转和把握。不信你看，她的人生也过的一塌糊涂。你可以把她当作是嫉妒。好友说的可听，但他们看到你的闪光点，觉得你的问题不是问题。一般的交涉者，他们说的可听一半，客观但是也对你很不公平。因为他们忘记了你的过人之处。所以表太过在意，但是缺点是一定要改的，晚改不如早改，否则处理很多事情都会很被动。\n9.怕做决定、怕担责、反复、纠结（乱）\n每天从小事纠结到大事也纠结，纠结完还要把事情说给别人听。因为怕做决定，所以很依赖询问别人的意见，试图让别人帮自己做决定。其实又是怕担责任的表现。试着大胆地，在分析完所有之后，做一个最痛快的决定，之后出了事情及时站出。绝对不推卸责任，避免因为自己的判断失误而背锅，但是锅来了就要勇敢承担。\n10.手忙脚乱、慌慌张张、大惊小怪（神经大条、弱）\n遇事则乱，第一是没有事先预估好风险，没有想好处理办法。没见过大风大浪，没经验也是一点原因，多看多感受吧。看到别人被虐，可以多想想发生在自己身上时会咋做。\n11.专注力差，浮躁易怒情绪化\n心不够静，浮浮躁躁。碎片式的工作模式要改掉，要持续投入一件事情，并且做到心无杂念。工作没一会，就偷偷看看微信、看看消息这样会完蛋。学会情绪管理，任何时候都要peace，心如止水。办公室不是展示真性情的地方，只能是表达观点的地方。\ncase3 #  基因，家庭资源，以及人物初始性格。\n注意，我的用词，是人物的初始性格。\n而不是人物的终极性格。\n也就是说，人物的初始性格到终极性格这个区间是可以有所作为的。\n也是我们唯一能够改变的东西了。 也就是说，改变命运的确需要改变性格。 为什么性格对于命运的作用非常大呢？ 这个我仔细分析一下。所谓的性格。 不过是一种固定的对待外界事物的习惯反应。 下面我会列一些单因素的影响，但我提这个单因素的时候，是控制变量法。 比如所有其他条件不变的情况下，只有这个因素起作用的时候，不然就没法讨论了。\n我举个例子，害羞的人面对陌生人就不会主动勾搭，只会被动接受； 胆大的人面对事情就会去尝试，但会担很多风险； 风骚的女人会获得男人的资源，而害羞的女人也许资源就会少很多； 勤奋的人会容易做的比别人出彩； 爱干净的人就不容易得病；做爱戴套的人自律的人，不容易得性病； 说话很谨慎不说大话的人，会让人觉得靠谱； 一个爱嘲讽别人的人，是没有什么真心朋友的。\n我简单列举了一些性格，对于事物的影响。\n大家首先不要把自己当做人来看待。\n只是把自己当做一个客观物体。 你不过是有了这么多行为模式，条件反射罢了。\n你就可以很冷静的分析出自己的性格了。\n这些性格，在恒定不变的情况下，他会对同样的事物，同样的人，做出相同的反应。 如果是这样的话，你的命运轨迹，会以5厘米做为半径画圆，画出一个小圆。 这就是你的命运，你所获得的所有馈赠都是在这个圆之内的。 但如果，你本来是个很胆小的人，但你突然很勇敢了，比如像我过去的自己一样。\n本来是个社交恐惧患者，如今却可以很自然的交朋友了。\n那么，你的半径，会变大，比如变成10里面了。\n那你的画出来的圆，就比过去大很多了。\n再假如，你原来很懒惰，你变勤奋了；你从浮躁，变的冷静； 你从虚伪变的真诚，你从纵欲变的节欲。 你的半径就会越来越大，那么通过时间的积累加上事物推移到你命运， 你这个人物面前的馈赠，事物就会发生神奇的反应。\n因为这个世界上的所有客观存在物体，人或者事都是一样的， 但你的反馈方式变了，也就是你的行为方式，性格变了， 那么事物，人对你的反应也会变化。 你的命运，将会从过去的一条路，走向另外一条路，这就是改变命运。\n改变命运并不玄幻，这是很简单的事情。\n但同时很难，难在改变性格。\n简单是性格一变，你的反馈方式一变，人和事对你的影响一变，你的选择一变，你的习惯一变，命运就变。\n比如我现在天天起来写作，跑步，跑步对我的健康会越来越有帮助，帮我脱离抑郁症，同时让我精力更加充沛，\n我就有更多的时间，更多的精力做更多的事情，不然每天上了班就没有心情做业余的事情了，只要坚持跑步，我就比不跑步的时候，其实专注力高很多，效率也高很多。\n一天就可以多出2-3个小时，因为之前的2-3个小时都是浪费的，\n当然，这是个理想状态，但至少可以多1个小时还要减掉跑步的时间。\n而且跑步，让我更加有动力，更有好奇心，更有欲望和人接触，这样，无形中多了很多意外的惊喜。\n所有的馈赠都来源于你的经历，而你的经历，都来源于你是不是多做了一些事，多接触了一些人。\n而做自媒体这件事情，就可以帮助我接触很多人，提高对社会的认知等等。\n所以，坚持跑步，写作这两件事情，本质上对于我来说就是改变命运的手段之一。\n因为积累的东西，在变化，在影响着我，但这两个东西的核心还是性格。\n因为我好为人师，因为我追求深度，真理，知识，智慧，加上我喜欢自律。\n如果我经常不自律，我会不舒服，我的性格会迫使我去做到自律。\n这样我才会很开心。\n每一个人一样的，也许家庭的初始性格给你设定的是。\n内向，自卑，懒惰，不爱干净，说大话，情绪化，安贫乐道，节约，纵欲，沉迷，贪财等等。\n这些东西，只要你超越了，比如从自卑变自信了，那你的性格就变了，命运轨迹也变了。\n好，说了半天，只说了原因。\n现在说一下如何做。\nHow to do。\n因为，每一个人，都是客观存在的物体，我刚刚提到过。\n都是很多条件组成的个体。\n比如A：自信，强势，暴躁，攻击性强，体育能力强。\nB:自卑，懦弱，温柔，被动，学习能力强。\n不同的条件，组成不同的人，相似的人，只是条件相似罢了，只是因为人过于负责，所以人会觉得自己是魔幻的个体。\n但任何一个人都无法逃脱物理学的定律。\n决定整个宇宙基础的学科，就是物理。\n所以都可以用控制变量法，或者一些物理学的研究方法。\nx904LK\u0026quot;\u0026gt;唯物主义讲。\n世界是物质的，物质是运动的，运动是有规律的。\n没错，人也是物质的，人的运动也是有规律的。\n人的运动不是外在的走动，而是内心的运动。\n人类的内心运动叫做人性，人的个体的运动叫做个性。\n但个性是属于这个人性的子集里面的。\n你要改变个性，首先了解人性。\n了解人性是了解不可改变的边界，然后着眼个性，找到可改变的因素。\n就是说共性一般不可改变，但个性是可以改变的。\n或者说，如果你不顺着共性走，客观规律走，你是做无用功。\n就是我们要按规律办事。\n不按规律去改造自己的性格，那么就是愚蠢。\n那么发现规律，并且发现运用规律并且实践出来的真理，我把它统称为。\n智慧。\n如何发现规律呢。\n这个我以前讲过如何独立思考。\n运用里面的三个方法就可以了。\n第一，怀疑一切。\n第二，分析，调查，研究。\n第三，实证，实践，以及不断通过实践得出的反馈来进一步完善理论，从而理论再进一步指导实践，完成知行合一。\n举个例子，如果你觉得你天生是个懦弱的人。\n第一件事情，先要学会怀疑。\n怀疑自己这种想法是错误的。\n好，那就说明，你认为自己不是个懦弱的人，这个思维逻辑是有问题的。\n下一步，要进行分析，调查，研究。 看看自己过去的行为，看看有没有勇敢的行为，什么时候，什么情况下你很勇敢，什么情况下你很软弱。 结果你调查发现。 那个胆子很大的人去鬼屋的时候胆子很小，你却比他胆子大。 但他平时在学校，在人群中是很胆大的，你的胆子却比他小。\n好这一下你就确立了一个范围，你懦弱，仅仅是对于人， 但不是对于神魔鬼怪。 也就是说，你的恐惧，仅仅是因为人。 然后你可以进一步追问。\n这种追问，就是要觉察。 为什么，自己会怕这些人。 到底是怕什么。\n你可能通过觉察，就发现了，原来你怕人，其实是怕失去爱。 怕失去别人对你的认可，怕别人不理你，怕别人抛弃你，怕别人嘲笑你，讽刺你。 这统称为怕失去爱。\n当然觉察到了这件事情，很可能需要很长时间。 同时需要学习很多心理学的材料，你才能发现。\n好，既然是怕失去爱，有没有办法治愈呢。 首先是爱自己。\n那么如何爱自己呢，那就是尊重自己的欲望，自己感受，表达自己欲望，和感受。 如何表达呢。 勇敢。\n所以，就要说到第三步，实践，检验真理。 比如你可以搭讪陌生人，挑战自己的恐惧边界，你越怕什么，越做什么。 当然只要做这件事情的不会对你造成什么风险，不犯法，不触及你的生命安危，你大可以做。\n比如我当时最怕美女了，那我就疯狂接触美女，搭讪美女，后来。 这个神经的链条重新被塑造了。 我的社交恐惧消失了，取而代之是一个新的神经反馈回路，就是看见美女会兴奋，而非恐惧。\n这就是进一步通过行为，改变了，神经。 属于心理学和神经科学的领域。\n当然，爱的作用才是根本，要持续爱自己，尊重自己感受，表达自己想法，然后试错，找到一个平衡。 然后不断的再去强化自己的理论，找到调整理论，进一步实践，指导行为。\n大家有没有发现，这三步最难的是哪一步。 其实是觉察。 当你真的觉察到了，你就可以悟道了。 你就可以理性的去做，理性的面对了。 或者做正确的事情了。\n当你知道你在做正确且有意义的事情的时候，这本来就很能够给你勇气。 因为你是掌握真理的，你有真理这个强大的后盾。 但是需要通过实践来检验，不断的调整真理，也就是说，当真正你实践检验成功了，这才是真正的真理，属于你个人的真理，不代表属于别人。\n那么如何觉察呢，这个就是佛家的方式，我经常提到过的。 身受心法。 这是通过自己来觉察。 也可以通过学习知识，观察生活，实践，观察人物，来觉察。 方法多种多样。\n都必不可少，都可以起到帮助你修行的目的。 找到那些客观存在的规律，这个规律不属于别人，只属于你自己。 当然还有一些大规律，比如刚刚说的学习，观察，实践，这些都是指导生活的理性方法，可以好好用之。\n当你不断的通过努力，通过学习，觉察，克服痛苦和恐惧，不断自律，你就再不断的改变自己的命运。\n但这个过程极其艰难。即是告诉了你，也许你也做不到，因为本来改变命运的人都是少数。 不过佛渡有缘人，这篇文章写的还是比较晦涩，但我已经尽量简单了。 没有一个成功是随随便便的，都是需要极大的付出。 付出你的心情，精力，舒适程度，暂时的快乐。你才能走过这条荆棘之路，获得一个重生。\n再次强调，改变性格的过程是不断实践加学习的过程，这个过程注定是痛苦的。 但成长过后的快乐也是很美好的，而且能够让你更加强大。 至于要不要去承受，这是自己的选择。\n"});index.add({'id':162,'href':'/life/docs/%E8%84%9A%E6%9C%AC/my-plugins/','title':"webpack 应用自己插件 ",'section':"脚本",'content':" webpack.config.js  const ConsoleLogOnBuildWebpackPlugin = require(\u0026#34;./src/console_log_on_build_webpack_plugin.js\u0026#34;); module.exports = { entry: { index: \u0026#34;./src/index.js\u0026#34; }, mode: \u0026#39;development\u0026#39;, plugins: [ new ConsoleLogOnBuildWebpackPlugin() ] };  package.json  { \u0026#34;name\u0026#34;: \u0026#34;demo08\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34; : \u0026#34;webpack\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;webpack\u0026#34;: \u0026#34;^5.44.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.7.2\u0026#34; } }  src console_log_on_build_webpack_plugin.js index.js  // console_log_on_build_webpack_plugin.js const pluginName = \u0026#39;ConsoleLogOnBuildWebpackPlugin\u0026#39;; class ConsoleLogOnBuildWebpackPlugin { apply(compiler) { compiler.hooks.run.tap(pluginName, compilation =\u0026gt; { console.log(\u0026#34;webpack 构建过程开始！\u0026#34;); }); } } module.exports = ConsoleLogOnBuildWebpackPlugin; //index.js console.log(\u0026#34;print \u0026#34;+ Math.random()) ;  命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo08\u0026gt;npm add -D webpack webpack-cli npm WARN demo08@1.0.0 No description npm WARN demo08@1.0.0 No repository field. + webpack-cli@4.7.2 + webpack@5.45.1 added 121 packages from 155 contributors in 6.969s 16 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\study\\webpack\\demo08\u0026gt;npm run build \u0026gt; demo08@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo08 \u0026gt; webpack webpack 构建过程开始！ asset index.js 1.22 KiB [emitted] (name: index) ./src/index.js 38 bytes [built] [code generated] webpack 5.45.1 compiled successfully in 75 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo08\u0026gt;node dist/index.js print 0.9374784084603167 D:\\IdeaProjects\\cycle\\study\\webpack\\demo08\u0026gt; "});index.add({'id':163,'href':'/life/docs/databases/mysql/mysql%E5%87%BD%E6%95%B0/','title':"mysql函数",'section':"mysql学习笔记",'content':"日期函数 #    返回当前日期，只包含年月日 select curdate()\n  返回当前时间，只包含时分秒 select curtime()\n  返回当前的日期和时间，年月日时分秒全都包含 select now()\n  提取具体日期类型 #   year() yearweek() ,hour(),month()等等   select year(now()) as \u0026lsquo;年\u0026rsquo;,yearweek(now()) as \u0026lsquo;年,周\u0026rsquo;,hour(now()) as \u0026lsquo;周\u0026rsquo;,minute(now()) as \u0026lsquo;小时\u0026rsquo;,month(now()) \u0026lsquo;月\u0026rsquo;,monthname(now()) \u0026lsquo;月名字\u0026rsquo;,dayofmonth(now()) as \u0026lsquo;当月多少日\u0026rsquo;   EXTRACT() 函数用于返回日期/时间的单独部分，比如年、月、日、小时、分钟等等。   (select extract(year from now()),extract(month from now()),extract(day from now()),extract(hour from now()),extract(minute from now()))  日期格式 #   DATE_FORMAT(date,fmt)函数：按字符串 fmt 格式化日期 date 值 (select date_format(now(),'%Y-%m-%d'))  日期运算 #    date_add(date,interval number dateType) example (select date_add(now(),interval 2 year) as \u0026lsquo;add 2 year date\u0026rsquo;) (select date_add(now(),interval -2 hour) as \u0026lsquo;add 2\u0026rsquo;)也可以传入负数即回到过去某个时间\n  date_sub(date,interval number dateType) example (select date_sub(now(),interval 2 year))\n  datediff(date,date) 计算两个日期之间相差的天数 (select datediff(now(),date_add(now(),interval 2 month)) as \u0026lsquo;计算两个日期之间相差天数\u0026rsquo;)\n  流程函数 #   if 函数  create table salary (userid int,salary decimal(9,2));\rinsert into salary values(1,1000),(2,2000), (3,3000),(4,4000),(5,5000), (1,null);\r (select if(s.salary\u0026gt;2000,\u0026lsquo;high\u0026rsquo;,\u0026lsquo;low\u0026rsquo;),s.salary from salary s)   IFNULL(value1,value2)函数：这个函数一般用来替换 NULL 值的，我们知道 NULL 值是不能参与数值运算的   (select ifnull(s.salary,0),s.salary from salary s)当检测到值的时候用0代替  数值函数 #   ABS(x)函数：返回 x 的绝对值   select abs(-56),abs(round(rand()*10))   cell(x)函数 返回大于 x 的最大整数值 相当于向上取   SELECT ceil(0.6),ceiling(0.3),ceil(round(rand()))   floor()返回小于 x 的最大整数值 相当于向下取   SELECT floor(0.6),floor(0.3),floor(round(rand()))   mod(x,y) 返回 x/y 的模   SELECT mod(5,3)   rand() 返回 0 到 1 内的随机值 ROUND(x,y) 返回参数 x 的四舍五入的有 y 位小数的值   SELECT round(2.5,3)   sum()函数   select sum(f.f_price) as \u0026lsquo;总价格\u0026rsquo; from fruits f  字符串函数 #   CANCAT(S1,S2,…Sn) 连接 S1,S2,…Sn 为一个字符串   SELECT concat(\u0026lsquo;hello\u0026rsquo;,\u0026lsquo;wrold\u0026rsquo;),concat(curdate(),' \u0026lsquo;,curtime())   INSERT(str,x,y,instr) 将字符串 str 从第 x 位置开始，y 个字符长的子串替换为字符串 instr(可以用作修改和删除以及增加)   SELECT insert(\u0026lsquo;Highlights of Premier Li'\u0026rsquo;s news conference\u0026rsquo;,11,0,'\u0026mdash;') 在index=11 取0个字符串替换为xxx   REPEAT(str,x) 返回 str 重复 x 次的结果   select REPEAT(\u0026lsquo;Tech aims to help restless sleepers \\n\u0026rsquo;,3) 字符串重复3次   REPLACE(str,a,b)函数：用字符串 b 替换字符串 str 中所有出现的字符串 a。   select replace(\u0026lsquo;hello_world!\u0026rsquo;,'_\u0026rsquo;,' \u0026lsquo;) 把下划线替换为空格   SUBSTRING(str,x,y)函数：返回从字符串 str 中的第 x 位置起 y 个字符长度的字串。此函数经常用来对给定字符串进行字串的提取(ps也可以用作随机字符串)   select substring(\u0026lsquo;Century-old folding fan store attracts foreign apprentice\u0026rsquo;,12,8) 截取字符串函数   length() 获取字符串长度 select length(''+uuid_short()) as uuidShort , length(uuid()) 这里使用了mysql的uuid  "});index.add({'id':164,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/swtj6fgd6s/','title':"复盘",'section':"自信",'content':"复盘 #  复盘，借鉴于围棋的一个术语。在围棋中的意思是：下完一盘棋之后，要重新在棋盘上走一遍， 看看那些棋子下得好，哪些棋子下得不好等等。重新走一遍并且思考的过程就称为复盘或者复局。 这种走一遍不是简单地重新将棋子按照原来顺序摆满棋盘，而是要对每一手重新进行思考， 一方面是还原当时的思考逻辑，另一方面因为是事后的重来，可以过滤对局时的情绪， 获得一种站在画面外看画的角度，给自己理解重新思考的机会。\n把复盘用于企业经营管理是柳传志柳总最先提出来，指通过对已经发生的事情进行回顾， 总结得失总结经验教训，从而掌握规律和方法，以便更好地达成终极目标， 或者再次发生同类事情时更好地处理。\n复盘，可以流于形式，也可以非常深刻，取决于两方面因素，一方面是心态——开放的心态可以让我们正视问题、坦诚表达， 从而带来深刻的复盘，抵触防御的心态只能带来流于形式的复盘；一个是方法，复盘是有方法的，有高手在实践中，总结出复盘四步法：\n Step1.回顾目标  回忆下你做这件事之前，你的目的或期望是什么？ 这个目标设定得靠谱、精确吗？应用“SMART法则”扫描目标 有没有发生“目标损耗”？事前定了个高目标，事后没达到，安慰自己说：“还是有成长的”。 团队是否还记得目标？是否对于目标有共同的认知？\n Step2. 评估结果  满分100分，你给自己打多少分？ 差了多少分？差在哪里? 如果能够再提高10分，你希望提高在哪里？\n Step3.分析原因  情景再现，一个个环节回顾事情的事前、事中、事后全流程，分析成功或失败的关键原因。 可控的：有没有更好的做法？是不是全力以赴？ 需要合作的 :自己的部分做好了吗？需要合作部分,是否为别人留出了足够的空间、时间和支持？ 不可控的：是否有充分沟通，即时跟进进度？ 有没有方式纳入控制？有没有控制风险？\n Step4. 总结经验  哪些事情应该坚持做，哪些应该马上停止做？ 哪些人、行为的价值值得重新评估？ 哪些事可以做得更好？具体该如何做？ 对整个事情背后的规律，你有什么新的认识？ 有没有哪些“经验”，其实是假设？\n 参考  "});index.add({'id':165,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/8m3fmhf6t3/','title':"如何变得更加成熟",'section':"自信",'content':" 顺境做事,逆境读书,绝境养生 不要因为自己受到不公就否定这个世界上的公平\n 一:成熟的标志是什么 #   拿事儿  这个词，既包括一个人具有独立主持完成一项工作所需要的专业技术能力和沟通交流能力，也包括 了一个人在决策和执行中有权拒绝他人干扰的权威性以及主动承担其可能造成不良后果的诚信度。 一个人能拿住一件事儿，大到治理一家单位，小到能带老丈人去医院看病，就表明了他是一个可以 被视作拥有公民权的独立成年个体。\n人平事，事评人。成熟不成熟，还得事上见。每个人的能力有大有小，但只要能拿住一件事，就是 一个成熟的人。 不管男人女人，成年了，就都得拿事儿。\n 不再憧憬爱情  人和人是有巨大的不同的，人和人的差别比哈士奇和泰迪的差别更大。\n有的人年纪轻轻，就混吃等死，有的人年过半百，仍旧坚守信念。\n有的人少年老成，喜怒不形于色，有的人头发花白，仍旧叽叽喳喳。\n有的人，勇于承担责任，在家里，在单位，都是顶呱呱，但有的人，一辈子的妈宝，能留就留，能滑就滑。\n有的人，年少荒唐，但成年之后，顶天立地。但也有的人，年轻的时候人模狗样，年纪大了，为了利益，无所不用其极，毫无底线，一切皆可交易。\n那你说什么叫做成熟？\n难道那些没有承担，没有大脑，连人品都没有的人就永远不成熟了？？虽然是歪瓜裂枣，但也不能青春永驻不是。\n但是，所有的人，不管男女，当你有了一定的社会经验，你都天然的会懂得，爱情这玩意，是属于少男少女的青春荷尔蒙。\n有就有，没有就是没有，你没办法强求。\n当你还在憧憬爱情，你就还没有经受过社会的毒打。当你放弃了这种想法，有一天爱情或许会来找你，但概率也并不高。\n人生这场游戏，每个人都认为自己独一无二，但其实大家都是生产线上批量生产的，每个人大脑中都有一些出厂就有的先天设置。在社会上摸爬滚打之后，这些设置有的就必须改变，有的或许可以长久保留。每个人的境遇不同而不同。\n但是，相同的是，在经过社会的洗礼之后，成熟的人会懂得，自己的依靠和寄托，可以是事业，可以是金钱，也可以是情怀。同样，可以是无耻，可以是没有底线，可以是一切皆可交易，也可以是匍匐脚下，\n但，唯独不会是爱情。\n如果你的寄托是爱情，那只是你选择了匍匐脚下，而又死要面子活受罪的不愿意承认罢了。\n爱情只不过是性心理驱动的大脑逆向合理化之后的自我幻想。\n世间真有这种东西，不用怀疑。\n但就像海市蜃楼，你千万不要把这当成真实。\n 自我维持  最核心的标志是自我维持。其他都是衍生品或具体个性化选择\n自我维持必然意味着，对权利和义务、收益和成本、机会和代价，首先有默认，其次有全面和较为准确的评估。而不是，仅能看到权利、收益和机会，无视义务、成本和代价，或假想该由他人承担 — 这本质上是巨婴。\n在此基础上，个性化选择的方向，是完全无所谓的。有些人选择入世，有些人选择出世；有些人选择积极地照耀他人，有些人选择守好自己的城堡；有些人天然esfj，有些人天然intp……都可以很成熟，也都可以不成熟，核心不是这些具体方向的选择或天性特征，而依然是是否能做到自我维持，认清权责，并全套接受。\n另一个常见的衍生品，则是情绪相对较为稳定。想清楚权责，就会建立合理预期 — 对潜在收益的预期，对可能的不确定性即风险的预期。实现收益时，会明白这是承担了对应风险的溢价实现，于是不会喜出望外；无法实现收益乃至出现损失时，也会明白这是预期必然对应的随机性，于是也不会过于失落。\n总之，成熟的根本特征是自我维持。其他特征，或者，仅是自我维持的自然衍生；或者，并非成熟的必然特征，仅是一种个性化的具体选择。\n 放弃和取舍  懂得且愿意，为了最少数的原则（或欲望），而放弃最大多数的原则（或执念）。\n人生的成熟过程，其实就是一个被现实不断打磨的过程。\n而打磨本身其实就是一次次大大小小的挫折组成的。\n生活像锉刀一样，锉去了你的理想，你的锐气，你的欲望。\n在这样的历程中，学会了取舍，学会了坚强，学会了隐忍，学会了放弃。\n而所有的一切，只是你想要集中所有的力量去保护好你心中最重要的东西。\n所以，成熟其实至少包涵着两个层面的问题：\n1.在认知上，经过历练、筛选和左右权衡，认识到什么东西才是对自己最重要的。\n哪些东西是不能放弃的，而哪些东西是可以完全放弃的或暂时放弃的。\n这就是关于取舍的认知。没有经历过打磨的人，其实是很难清楚地知道取舍的。\n他们总觉得再努力一下，什么都有可能拥有，所以是舍不得舍弃某些欲望的。\n就像一个人被无数次灌输健康很重要的观点，但是在他经历严重病痛折磨前，其实很难真正体会这一点的。\n2.在实践上，能够真正做到放下，且豁达、坦然。\n认知是一回事儿，实践是另一回事儿。\n在成熟这个问题上，知难，行也难。\n因为很多取舍，本身就是两难。\n你必须在两个都非常重要的东西之间，选择保留一个而放弃一个。\n而很多人往往在痛苦的纠结中，犹豫不决，错失良机。 即便做了选择，也一辈子或长期处于懊丧之中，自责之中。 只有真正成熟的人，才能活得通透，活得坦然，哪怕是在别人看来错误的选择，他也能坦然视之。 活得理性而坚定，淡定而从容，这个时候，一个男生自然而然会由内而外地散发出成熟的气质。 所以，成熟，不是能装出来的，也不是有钱有势就行，甚至不是办事能力，恰恰相反，成熟更像是一种在应对灾难时所表现出来的心理抗性或抵抗力。 譬如面对死亡，谁也没有能力解决，成熟与不成熟的一个表现就是你能否坦然面对死亡。 对于失败，也是如此。\n对于割舍，亦复如是！\n 这事我搞定 按我个人经验的话，主要看他说“这事我搞定”的频次。 年轻的小男生其实是很怕担责的，我前两年招了个新人小弟，211研究生，刚来的时候一看小伙长 得挺高挺帅，没想到工作起来那么菜…… 干啥啥不行，甩锅第一名。 遇到问题或者惹麻烦了就把我推出去，说是我安排的…… 关键是人菜脾气大，每件事都有自己的想法，不仅经常我行我素按自己的思路开展工作。 最令人头大的是他还有一套自己的歪理邪说，把什么事都能说得振振有词。 比如这个宣传工作要拍照为什么没拍，说这不是宣传口的工作，不能助长对方的嚣张气焰。 比如这个材料要写为什么没写，说这个材料都是假话空话套话，写了也没人看，何必要写。 比如这个记者采访专题为什么拒绝，说这些记者都是骗钱的，来了就要收费，多一事不如少一事。 基本上第一年第二年，我每次和领导谈话的主要课题之一，就包括能不能把这倒霉孩子开除了。 当然了，国企是很难裁员的……即便裁员用完部门招聘指标的我也很难再招人，只能硬着头皮用…… 但疫情结束后，我感觉他的工作态度发生了天翻地覆的改变。 基本上自己负责的工作，都能正常按时弄完，如果有难处，也不吭气，自己熬夜到1到2点，也一定要当晚发给我。 遇到不会弄的会主动问了，问了但是不再是甩锅给我，而是自己学会，弄好了再交给我。 最令人惊讶的是，他会主动看我做的东西，然后主动找我要活儿干了。 这基本上以前是不可想象的。 我后面有次单独吃饭就问他，到底是什么改变了他。 他说他爹这几年一直在工地打工，每个月只给自己留300块生活费，其余的钱都打给自己，希望自己早点在武汉立足，买房结婚。 他说他知道自己之前在混，但是反正混我们也会包容他，他没必要认真弄，挨骂就挨骂，死猪不怕开水烫。  他沉默了几秒钟，说爹年纪大了，以后不能再这么混下去了。 到了去年，翻过年来，他已经可以独当一面了。 遇到什么急活儿脏活儿，或者是周末要加班处理的事情，他会很干脆的说： “这事我搞定！” 而且真的能基本搞定，虽然细节上依然有粗糙和稚嫩之处，但的确看得出来是用心做的了。 一个男孩，在面对世界时终于下定决心，要把责任主动扛起来，而且他真的咬咬牙能扛住时。 我觉得这就是跨过了那条属于男人的分界线。 从此以后，知难而进，一往无前，再无半点怯懦。\n 坚持目标  有很多，但我只说心里最明显的答案。 他开始主动或被动地放弃了一向坚持的原则，为了某个更重要的目的而忍受，甚至明知道自己在践踏自己的原则，还要学会适应、学习、甚至擅长自己曾经鄙视的游戏规则。 他成了一个为了重要目标而卑贱苟且的人。 他在心里装着对错，但在行为上已经没有对错了。 这些目标可以是，家人的生活、事业的成功以及理想的实现，但有时候，仅仅是为了生存。 我愿你永远不需要变得“成熟”。人到中年仍然可以保持赤子之心行为的人，一定具有超强的能力，所以在某些方面，仅仅是某些方面，仍然可以坚持少年时期坚信的对错。\n"});index.add({'id':166,'href':'/life/docs/%E8%84%9A%E6%9C%AC/webpack%E7%83%AD%E6%9B%B4%E6%96%B0/','title':"webpack 热更新 ",'section':"脚本",'content':" package.json  { \u0026#34;name\u0026#34;: \u0026#34;demo09\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;webpack-dev-server\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;html-webpack-plugin\u0026#34;: \u0026#34;^5.3.2\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^5.45.1\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^3.3.12\u0026#34;, \u0026#34;webpack-dev-server\u0026#34;: \u0026#34;^3.11.2\u0026#34; } }  webpack.config.js  const path = require(\u0026#34;path\u0026#34;); const webpack = require(\u0026#34;webpack\u0026#34;); const HtmlWebpackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;); module.exports = { entry: { \u0026#34;index\u0026#34;: \u0026#34;./src/index.js\u0026#34; }, mode: \u0026#34;development\u0026#34;, output: { path: path.resolve(__dirname, \u0026#39;dist\u0026#39;) }, plugins: [ new HtmlWebpackPlugin({ title : \u0026#34;hot module replacement\u0026#34; }), new webpack.HotModuleReplacementPlugin() ], devServer: { contentBase: path.join(__dirname, \u0026#39;dist\u0026#39;), compress: true, port: 9000, hot:true } }  src/index.js  function randomString(e) { e = e || 32; var t = \u0026#34;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678\u0026#34;, a = t.length, n = \u0026#34;\u0026#34;; for (i = 0; i \u0026lt; e; i++) n += t.charAt(Math.floor(Math.random() * a)); return n; } console.log(\u0026#34;---\u0026#34; + randomString(22) + \u0026#34;----\u0026#34;); const el = document.createElement(\u0026#34;div\u0026#34;) ; el.innerText = randomString(20) ; document.body.append(el) ;  命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm init -y Wrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo09\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm install --save-dev html-webpack-plugin npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN html-webpack-plugin@5.3.2 requires a peer of webpack@^5.20.0 but none is installed. You must install peer dependencies yourself. npm WARN demo09@1.0.0 No description npm WARN demo09@1.0.0 No repository field. + html-webpack-plugin@5.3.2 added 37 packages from 56 contributors in 4.007s 10 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm add -D webpack webpack-cli npm WARN demo09@1.0.0 No description npm WARN demo09@1.0.0 No repository field. + webpack@5.45.1 + webpack-cli@4.7.2 added 117 packages from 155 contributors in 8.096s 26 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm add -D webpack-dev-server npm WARN deprecated chokidar@2.1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies. npm WARN deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2. npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated npm WARN deprecated querystring@0.2.0: The npm WARN demo09@1.0.0 No description npm WARN demo09@1.0.0 No repository field. npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026#34;os\u0026#34;:\u0026#34;darwin\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;any\u0026#34;} (current: {\u0026#34;os\u0026#34;:\u0026#34;win32\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;x64\u0026#34;}) + webpack-dev-server@3.11.2 added 366 packages from 222 contributors in 22.282s 38 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm i --save-dev npm WARN demo09@1.0.0 No description npm WARN demo09@1.0.0 No repository field. npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026#34;os\u0026#34;:\u0026#34;darwin\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;any\u0026#34;} (current: {\u0026#34;os\u0026#34;:\u0026#34;win32\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;x64\u0026#34;}) up to date in 1.964s 38 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;webpack asset index.js 40.2 KiB [emitted] (name: index) asset index.html 243 bytes [emitted] runtime modules 25.8 KiB 9 modules ./src/index.js 412 bytes [built] [code generated] webpack 5.45.1 compiled successfully in 136 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;  到目前为止未出现任何问题\n  执行运行开发服务器命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm run dev \u0026gt; demo09@1.0.0 dev D:\\IdeaProjects\\cycle\\study\\webpack\\demo09 \u0026gt; webpack-dev-server internal/modules/cjs/loader.js:905 throw err; ^ Error: Cannot find module \u0026#39;webpack-cli/bin/config-yargs\u0026#39; Require stack: - D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\\node_modules\\webpack-dev-server\\bin\\webpack-dev-server.js at Function.Module._resolveFilename (internal/modules/cjs/loader.js:902:15) at Function.Module._load (internal/modules/cjs/loader.js:746:27) at Module.require (internal/modules/cjs/loader.js:974:19) at require (internal/modules/cjs/helpers.js:92:18) at Object.\u0026lt;anonymous\u0026gt; (D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\\node_modules\\webpack-dev-server\\bin\\webpack-dev-server.js:65:1) at Module._compile (internal/modules/cjs/loader.js:1085:14) at Object.Module._extensions..js (internal/modules/cjs/loader.js:1114:10) at Module.load (internal/modules/cjs/loader.js:950:32) at Function.Module._load (internal/modules/cjs/loader.js:790:14) at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:76:12) { code: \u0026#39;MODULE_NOT_FOUND\u0026#39;, requireStack: [ \u0026#39;D:\\\\IdeaProjects\\\\cycle\\\\study\\\\webpack\\\\demo09\\\\node_modules\\\\webpack-dev-server\\\\bin\\\\webpack-dev-server.js\u0026#39; ] } npm ERR! code ELIFECYCLE npm ERR! errno 1 npm ERR! demo09@1.0.0 dev: `webpack-dev-server` npm ERR! Exit status 1 npm ERR! npm ERR! Failed at the demo09@1.0.0 dev script. npm ERR! This is probably not a problem with npm. There is likely additional logging output above. npm ERR! A complete log of this run can be found in: npm ERR! C:\\Users\\dell\\AppData\\Roaming\\npm-cache\\_logs\\2021-07-18T08_20_36_958Z-debug.log   找到解决办法就是降低webpack-cli版本\n  接下来的命令\n  D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm uninstall webpack-cli npm WARN demo09@1.0.0 No description npm WARN demo09@1.0.0 No repository field. npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026#34;os\u0026#34;:\u0026#34;darwin\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;any\u0026#34;} (current: {\u0026#34;os\u0026#34;:\u0026#34;win32\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;x64\u0026#34;}) removed 40 packages in 2.099s 33 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm install webpack-cli@3 -D npm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself. npm WARN demo09@1.0.0 No description npm WARN demo09@1.0.0 No repository field. npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026#34;os\u0026#34;:\u0026#34;darwin\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;any\u0026#34;} (current: {\u0026#34;os\u0026#34;:\u0026#34;win32\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;x64\u0026#34;}) + webpack-cli@3.3.12 added 42 packages from 27 contributors in 5.207s 33 packages are looking for funding run `npm fund` for details  运行  D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm run dev \u0026gt; demo09@1.0.0 dev D:\\IdeaProjects\\cycle\\study\\webpack\\demo09 \u0026gt; webpack-dev-server i ｢wds｣: Project is running at http://localhost:9000/ i ｢wds｣: webpack output is served from / i ｢wds｣: Content not from webpack is served from D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\\dist i ｢wdm｣: asset index.js 407 KiB [emitted] (name: index) asset index.html 243 bytes [emitted] runtime modules 25.9 KiB 10 modules cacheable modules 339 KiB modules by path ./node_modules/webpack-dev-server/client/ 20.9 KiB 10 modules modules by path ./node_modules/html-entities/lib/*.js 61 KiB 5 modules modules by path ./node_modules/webpack/hot/*.js 4.3 KiB 4 modules modules by path ./node_modules/url/ 37.4 KiB ./node_modules/url/url.js 22.8 KiB [built] [code generated] ./node_modules/url/node_modules/punycode/punycode.js 14.3 KiB [built] [code generated] ./node_modules/url/util.js 314 bytes [built] [code generated] modules by path ./node_modules/querystring/*.js 4.51 KiB ./node_modules/querystring/index.js 127 bytes [built] [code generated] ./node_modules/querystring/decode.js 2.34 KiB [built] [code generated] ./node_modules/querystring/encode.js 2.04 KiB [built] [code generated] ./node_modules/webpack/hot/ sync nonrecursive ^\\.\\/log$ 170 bytes [built] [code generated] webpack 5.45.1 compiled successfully in 424 ms i ｢wdm｣: Compiled successfully.   链接http://localhost:9000/得到结果\n  结束 webpack-dev-server\n  ctrl + c 终止批处理操作吗(Y/N)? Y D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt; "});index.add({'id':167,'href':'/life/docs/think/not_control/','title':"失控",'section':"思维",'content':" 失控  "});index.add({'id':168,'href':'/life/docs/databases/mysql/mysql%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/','title':"mysql存储引擎",'section':"mysql学习笔记",'content':"MySQL 存储引擎概述 #   MySQL 5.0 支持的存储引擎包括 MyISAM、 InnoDB、 BDB、 MEMORY、 MERGE、 EXAMPLE、 NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED 等，其中 InnoDB 和 BDB 提供事务安 全表，其他存储引擎都是非事务安全表。\n  查看当前引擎 show ENGINES  MyISAM存储引擎 #   不支持事务、也不支持外键，优势是访问速度快，对事务完整性没有 要求或者以select，insert为主的应用基本上可以用这个引擎来创建表\n  支持3种不同的存储格式，分别是：静态表；动态表；压缩表   静态表：表中的字段都是非变长字段，这样每个记录都是固定长度的，优点存储非常迅速，容易缓存，出现故障容易恢复；缺点是占用的空间通常比动态表多（因为存储时会按照列的宽度定义补足空格）ps：在取数据的时候，默认会把字段后面的空格去掉，如果不注意会把数据本身带的空格也会忽略。 动态表：记录不是固定长度的，这样存储的优点是占用的空间相对较少；缺点：频繁的更新、删除数据容易产生碎片，需要定期执行OPTIMIZE TABLE或者myisamchk-r命令来改善性能 压缩表：因为每个记录是被单独压缩的，所以只有非常小的访问开支\n  动态表：记录不是固定长度的，这样存储的优点是占用的空间相对较少；缺点：频繁的更新、删除数据容易产生碎片，需要定期执行OPTIMIZE TABLE或者myisamchk-r命令来改善性能\n  压缩表：因为每个记录是被单独压缩的，所以只有非常小的访问开支\n InnoDB存储引擎 #   nnoDB 存储表和索引有两种方式\n  使用共享表空间存储，这种方式创建的表的表结构保存在.frm 文件中，数据和索引 保存在 innodb_data_home_dir 和 innodb_data_file_path 定义的表空间中，可以是 多个文件。 使用多表空间存储，这种方式创建的表的表结构仍然保存在.frm 文件中，但是每个 表的数据和索引单独保存在.ibd 中。如果是个分区表，则每个分区对应单独的.ibd 文件，文件名是“表名+分区名” ，可以在创建分区的时候指定每个分区的数据文件 的位置，以此来将表的 IO 均匀分布在多个磁盘 多表空间的数据文件没有大小限制，不需要设置初始大小，也不需要设置文件的最大限 制、扩展大小等参数。 对于使用多表空间特性的表，可以比较方便地进行单表备份和恢复操作，但是直接复 制.ibd 文件是不行的，因为没有共享表空间的数据字典信息，直接复制的.ibd 文件和.frm 文 件恢复时是不能被正确识别的，但可以通过以下命令：  ALTER TABLE tbl_name DISCARD TABLESPACE;\rALTER TABLE tbl_name IMPORT TABLESPACE;\rMEMORY存储引擎 #   Memory存储引擎使用存在于内存中的内容来创建表。每个memory表只实际对应一个磁盘文件，格式是.frm。 memory类型的表访问非常的快，因为它的数据是放在内存中的，并且默认使用HASH索引，但是一旦服务关闭，表中的数据就会丢失掉。 MEMORY存储引擎的表可以选择使用BTREE索引或者HASH索引，两种不同类型的索引有其不同的使用范围\n  Hash索引优点： Hash 索引结构的特殊性，其检索效率非常高，索引的检索可以一次定位，不像B-Tree 索引需要从根节点到枝节点，最后才能访问到页节点这样多次的IO访问，所以 Hash 索引的查询效率要远高于 B-Tree 索引。 Hash索引缺点： 那么不精确查找呢，也很明显，因为hash算法是基于等值计算的，所以对于“like”等范围查找hash索引无效，不支持；\n  Memory类型的存储引擎主要用于哪些内容变化不频繁的代码表，或者作为统计操作的中间结果表，便于高效地对中间结果进行分析并得到最终的统计结果，。 对存储引擎为memory的表进行更新操作要谨慎，因为数据并没有实际写入到磁盘中，所以一定要对下次重新启动服务后如何获得这些修改后的数据有所考虑。\n MERGE存储引擎 #   Merge存储引擎是一组MyISAM表的组合，这些MyISAM表必须结构完全相同，merge表本身并没有数据，对merge类型的表可以进行查询，更新，删除操作，这些操作实际上是对内部的MyISAM表进行的。\n "});index.add({'id':169,'href':'/life/docs/%E8%84%9A%E6%9C%AC/webpack-other-loader/','title':"webpack 其他 loader ",'section':"脚本",'content':"url-loader file-loader #   package.json  { \u0026#34;name\u0026#34;: \u0026#34;demo10\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;webpack-dev-server\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;css-loader\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;file-loader\u0026#34;: \u0026#34;^6.2.0\u0026#34;, \u0026#34;html-webpack-plugin\u0026#34;: \u0026#34;^5.3.2\u0026#34;, \u0026#34;less\u0026#34;: \u0026#34;^4.1.1\u0026#34;, \u0026#34;less-loader\u0026#34;: \u0026#34;^10.0.1\u0026#34;, \u0026#34;style-loader\u0026#34;: \u0026#34;^3.1.0\u0026#34;, \u0026#34;url-loader\u0026#34;: \u0026#34;^2.2.0\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^5.45.1\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^3.3.12\u0026#34;, \u0026#34;webpack-dev-server\u0026#34;: \u0026#34;^3.11.2\u0026#34; } }  webpack.config.js  const path = require(\u0026#34;path\u0026#34;); const webpack = require(\u0026#34;webpack\u0026#34;); const HtmlWebpackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;); module.exports = { entry: { \u0026#34;index\u0026#34;: \u0026#34;./src/main.js\u0026#34; }, mode: \u0026#34;development\u0026#34;, output: { path: path.resolve(__dirname, \u0026#39;dist\u0026#39;), // publicPath: \u0026#39;dist/\u0026#39; ,  assetModuleFilename: \u0026#39;images/[hash][ext][query]\u0026#39; , // filename: \u0026#39;[name].js\u0026#39;,  }, module : { rules: [ { test: /.css$/, use: [\u0026#34;style-loader\u0026#34;, \u0026#34;css-loader\u0026#34;] , }, { test: /.less$/, use: [\u0026#34;style-loader\u0026#34;, \u0026#34;css-loader\u0026#34;,\u0026#34;less-loader\u0026#34;] , }, { test: /\\.(png|jpg|gif)$/,//匹配png/jpg/gif格式图片  use: [ { loader: \u0026#39;url-loader\u0026#39;, options: { limit: 8192,//图片小于8KB时候将图片转成base64字符串，大于8KB需要使用file-loader  name: \u0026#39;[name].[hash:8].[ext]\u0026#39;//img表示文件父目录，[name]表示文件名,[hash:8]表示将hash截取8位[ext]表示后缀  } } ] } ] } , plugins: [ new HtmlWebpackPlugin({ title : \u0026#34;hot module replacement\u0026#34; }), new webpack.HotModuleReplacementPlugin() ], devServer: { contentBase: path.join(__dirname, \u0026#39;dist\u0026#39;), compress: true, port: 9000, hot:true } }  目录  ▸\\demo10\r▸ \\demo10\\dist\r▸ \\demo10\\dist\\beautifulGirl.ee61b496.jpg\r▸ \\demo10\\dist\\big.95b47a61.jpg\r▸ \\demo10\\dist\\index.html\r▸ \\demo10\\dist\\index.js\r▸ \\demo10\\dist\\small.af5d0583.jpg\r▸ \\demo10\\package.json\r▸ \\demo10\\src\r▸ \\demo10\\src\\css\r▸ \\demo10\\src\\css\\normal.css\r▸ \\demo10\\src\\css\\special.less\r▸ \\demo10\\src\\img\r▸ \\demo10\\src\\img\\beautifulGirl.jpg\r▸ \\demo10\\src\\img\\big.jpg\r▸ \\demo10\\src\\img\\small.jpg\r▸ \\demo10\\src\\js\r▸ \\demo10\\src\\js\\utils.js\r▸ \\demo10\\src\\main.js\r▸ \\demo10\\webpack.config.js\r 命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm init -y\rWrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo10\\package.json:\r{\r\u0026quot;name\u0026quot;: \u0026quot;demo10\u0026quot;,\r\u0026quot;version\u0026quot;: \u0026quot;1.0.0\u0026quot;,\r\u0026quot;description\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;main\u0026quot;: \u0026quot;webpack.config.js\u0026quot;,\r\u0026quot;scripts\u0026quot;: {\r\u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot;\r},\r\u0026quot;keywords\u0026quot;: [],\r\u0026quot;author\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;license\u0026quot;: \u0026quot;ISC\u0026quot;\r}\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D webpack webpack-cli@3.3.12\rnpm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated\rnpm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated\rnpm notice created a lockfile as package-lock.json. You should commit this file.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\r+ webpack@5.45.1\r+ webpack-cli@3.3.12\radded 259 packages from 205 contributors in 10.071s\r11 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D webpack webpack-cli\rnpm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated\rnpm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\r+ webpack-cli@3.3.12\r+ webpack@5.45.1\rupdated 2 packages in 6.122s\r1 package is looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D css-loader style-loader less-loader\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN less-loader@10.0.1 requires a peer of less@^3.5.0 || ^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\r+ less-loader@10.0.1\r+ css-loader@6.1.0\r+ style-loader@3.1.0\radded 18 packages from 49 contributors in 2.728s\r15 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D file-loader\rnpm WARN less-loader@10.0.1 requires a peer of less@^3.5.0 || ^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\r+ file-loader@6.2.0\radded 3 packages from 5 contributors in 2.354s\r16 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D html-webpack-plugin\rnpm WARN less-loader@10.0.1 requires a peer of less@^3.5.0 || ^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\r+ html-webpack-plugin@5.3.2\radded 33 packages from 19 contributors in 3.392s\r26 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D webpack-dev-server\rnpm WARN deprecated chokidar@2.1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.\rnpm WARN deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2.\rnpm WARN deprecated querystring@0.2.0: The\rnpm WARN less-loader@10.0.1 requires a peer of less@^3.5.0 || ^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\rnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents):\rnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026quot;os\u0026quot;:\u0026quot;darwin\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;any\u0026quot;} (current: {\u0026quot;os\u0026quot;:\u0026quot;win32\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;x64\u0026quot;})\r+ webpack-dev-server@3.11.2\radded 204 packages from 137 contributors in 13.658s\r38 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm i --save-dev\rnpm WARN less-loader@10.0.1 requires a peer of less@^3.5.0 || ^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\rnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents):\rnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026quot;os\u0026quot;:\u0026quot;darwin\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;any\u0026quot;} (current: {\u0026quot;os\u0026quot;:\u0026quot;win32\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;x64\u0026quot;})\rup to date in 1.955s\r38 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D url-loader@2.2.0\rnpm WARN less-loader@10.0.1 requires a peer of less@^3.5.0 || ^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN url-loader@2.2.0 requires a peer of webpack@^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\rnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents):\rnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026quot;os\u0026quot;:\u0026quot;darwin\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;any\u0026quot;} (current: {\u0026quot;os\u0026quot;:\u0026quot;win32\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;x64\u0026quot;})\r+ url-loader@2.2.0\radded 3 packages from 3 contributors in 2.921s\r39 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D less\rnpm WARN url-loader@2.2.0 requires a peer of webpack@^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\rnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents):\rnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026quot;os\u0026quot;:\u0026quot;darwin\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;any\u0026quot;} (current: {\u0026quot;os\u0026quot;:\u0026quot;win32\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;x64\u0026quot;})\r+ less@4.1.1\radded 11 packages from 13 contributors in 3.771s\r39 packages are looking for funding\rrun `npm fund` for details\r//\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D css-loader@3.0.0\rnpm WARN url-loader@2.2.0 requires a peer of webpack@^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN css-loader@3.0.0 requires a peer of webpack@^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\rnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents):\rnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026quot;os\u0026quot;:\u0026quot;darwin\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;any\u0026quot;} (current: {\u0026quot;os\u0026quot;:\u0026quot;win32\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;x64\u0026quot;})\r+ css-loader@3.0.0\radded 13 packages from 10 contributors and removed 35 packages in 3.166s\r38 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm run build\r\u0026gt; demo10@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo10\r\u0026gt; webpack\rassets by status 160 KiB [cached] 2 assets\rassets by path . 82.9 KiB\rasset index.js 82.7 KiB [emitted] (name: index)\rasset index.html 243 bytes [compared for emit]\rruntime modules 26.6 KiB 12 modules\rcacheable modules 20.8 KiB\rmodules by path ./src/ 12.6 KiB\rmodules by path ./src/css/ 5.44 KiB\rmodules by path ./src/css/*.css 2.85 KiB 2 modules\rmodules by path ./src/css/*.less 2.59 KiB 2 modules\rmodules by path ./src/img/*.jpg 6.43 KiB 3 modules\r./src/main.js 517 bytes [built] [code generated]\r./src/js/utils.js 257 bytes [built] [code generated]\rmodules by path ./node_modules/ 8.13 KiB\rmodules by path ./node_modules/style-loader/dist/runtime/*.js 5.02 KiB 6 modules\rmodules by path ./node_modules/css-loader/dist/runtime/*.js 3.11 KiB\r./node_modules/css-loader/dist/runtime/api.js 2.61 KiB [built] [code generated]\r./node_modules/css-loader/dist/runtime/getUrl.js 511 bytes [built] [code generated]\rwebpack 5.45.1 compiled successfully in 437 ms\r 重要文件内容  css/normal.css\rbody{\r/* background-color: red; */\rbackground: url(\u0026quot;../img/small.jpg\u0026quot;);\r/*background: url(\u0026quot;../img/big.jpg\u0026quot;);*/\r}\rbody {background-image:url(../img/big.jpg);}\rcss/special.less\r@fontSize:50px;//定义变量字体大小\r@fontColor:orange;//定义变量字体颜色\rbody{\rfont-size: @fontSize;\rcolor: @fontColor;\r}\rjs/utils.js\rexport default function randomString(e) {\re = e || 32;\rvar t = \u0026quot;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678\u0026quot;,\ra = t.length,\rn = \u0026quot;\u0026quot;;\rfor (i = 0; i \u0026lt; e; i++) n += t.charAt(Math.floor(Math.random() * a));\rreturn n;\r}\rmain.js\rimport img from './img/beautifulGirl.jpg';\rimport utils from './js/utils';\r//依赖css文件\rrequire('./css/normal.css');\r//依赖less文件\rrequire('./css/special.less');\r// console.log(\u0026quot;---\u0026quot; + utils.randomString(22) + \u0026quot;----\u0026quot;);\rconst el = document.createElement(\u0026quot;div\u0026quot;) ;\r// el.innerText = utils.randomString(20) ;\rel.innerText = \u0026quot;sdhsdhhds\u0026quot; ;\rdocument.body.append(el) ;\rconst elimg = document.createElement(\u0026quot;img\u0026quot;) ;\rdocument.body.append(elimg) ;\relimg.setAttribute(\u0026quot;src\u0026quot;,img) ;\rimg/beautifulGirl.jpg big.jpg small.jpg\r"});index.add({'id':170,'href':'/life/docs/databases/mysql/mysql_procedure/','title':"mysql存储过程",'section':"mysql学习笔记",'content':"MySQL mysql存储过程概述 #   存储过程是存储在数据库的一组SQL语句集，用户可以通过存储过程名和传参多次调用的程序模块。\n 特点： #   使用灵活，可以使用流控制语句，自定义变量等完成复杂的业务逻辑。 提高数据安全性，屏蔽应用程序直接对表的操作，易于进行审计。 减少网络传输。 提高代码维护的复杂度，实际使用中要评估场景是否适合。  存储过程-基本语法： (非常重要) #  CREATE\r[DEFINER = { user | CURRENT_USER }]\rPROCEDURE sp_name ([proc_parameter[,...]])\r[characteristic ...] routine_body\rproc_parameter:\r[ IN | OUT | INOUT ] param_name type\rtype:\rAny valid MySQL data type\rcharacteristic:\rCOMMENT 'string'\r| [NOT] DETERMINISTIC\rroutine_body:\rValid SQL routine statement\r-- $ 可以改为分号 假如你直接是在控制台那么建议用$\rdelimiter $ --将sql语句结束符号修改为$,这样只有sql遇到$时才开始执行\rcreate procedure 存储过程名(参数列表)\rbegin\rsql语句集合\rend$\rdelimiter ; --将结束符修改为默认的分号 例子 #  -- 创建一个表 CREATE TABLE `t_user` ( `USER_ID` int NOT NULL AUTO_INCREMENT, `USER_NAME` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, `USER_PASSWORD` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, `USER_EMAIL` char(80) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, PRIMARY KEY (`USER_ID`), KEY `IDX_NAME` (`USER_NAME`) ) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8; -- 插入2000条数据  DROP PROCEDURE IF EXISTS proc_initData;--如果存在此存储过程则删掉 DELIMITER $ CREATE PROCEDURE proc_initData() BEGIN DECLARE i INT DEFAULT 1; WHILE i\u0026lt;=2000 DO INSERT INTO t_user(USER_NAME,USER_PASSWORD,USER_EMAIL) VALUES(MD5(UUID()),MD5(UUID()), CONCAT(substring(UUID(),1,7) , \u0026#39;@\u0026#39;, substring(UUID(),4,8) ,\u0026#39;.com\u0026#39;) ); SET i = i+1; END WHILE; END $ CALL proc_initData(); -- 执行完成后 到 mysql函数中可以查到proc_initData这个函数 实际上存储过程也是一种函数  -- $ 可以用分号代替  DROP PROCEDURE IF EXISTS proc_initData;--如果存在此存储过程则删掉 DELIMITER ; CREATE PROCEDURE proc_initData() BEGIN DECLARE i INT DEFAULT 1; WHILE i\u0026lt;=3 DO INSERT INTO t_user(USER_NAME,USER_PASSWORD,USER_EMAIL) VALUES(MD5(UUID()),MD5(UUID()), CONCAT(substring(UUID(),1,7) , \u0026#39;@\u0026#39;, substring(UUID(),4,8) ,\u0026#39;.com\u0026#39;) ); SET i = i+1; END WHILE; END ; CALL proc_initData(); 查看存储结构 #  SHOW CREATE PROCEDURE proc_initData ; SHOW PROCEDURE STATUS LIKE \u0026#39;%pro%\u0026#39;; 删除存储过程 #  Drop procedure [if exists] sp_name; 例子 #  drop procedure if exists pro_insert_user; 修改存储过程 (实际无法修改 修改的是存储特征) #  -- ALTER PROCEDURE 存储过程名 [ 特征 ... ] Alter procedure proc_name[characteristic…]  特征指定了存储过程的特性，可能的取值有：\n  CONTAINS SQL 表示子程序包含 SQL 语句，但不包含读或写数据的语句。 NO SQL 表示子程序中不包含 SQL 语句。 READS SQL DATA 表示子程序中包含读数据的语句。 MODIFIES SQL DATA 表示子程序中包含写数据的语句。 SQL SECURITY { DEFINER |INVOKER } 指明谁有权限来执行。 DEFINER 表示只有定义者自己才能够执行。 INVOKER 表示调用者可以执行。 COMMENT \u0026lsquo;string\u0026rsquo; 表示注释信息。  例子 #  -- 创建 delimiter ; Alter procedure pro_t11(IN param1 varchar(255), IN param2 varchar(255), OUT result varchar(2000)) begin set result = concat(param1, \u0026#39;_---_\u0026#39;,param2); end; call pro_t11(uuid(), md5(uuid()), @param); select @param; -- 修改 ALTER PROCEDURE pro_t11 MODIFIES SQL DATA SQL SECURITY INVOKER; -- 结果 ALTER PROCEDURE pro_t11 MODIFIES SQL DATA SQL SECURITY INVOKER \u0026gt; OK \u0026gt; 时间: 0.077s 传递参数 #   语法结构\n create procedure 存储过程名([in/out/inout] 参数名 参数类型)\r...\r IN : 该参数可以作为输入，也就是需要调用方传入值 , 默认 OUT: 该参数作为输出，也就是该参数可以作为返回值 INOUT: 既可以作为输入参数，也可以作为输出参数  IN #   in类型传参示例：对于之前创建的查看db1数据库中有哪些存储过程的get_project_plan_details_count，我们可以给get_project_plan_details_count一个输入参数，实现查看项目任务数量。\n --创建table CREATE TABLE `tb_project_plan_details` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT \u0026#39;id\u0026#39;, `project_work_stage_id` int(11) DEFAULT NULL COMMENT \u0026#39;工作阶段编号\u0026#39;, `plan_id` int(11) DEFAULT NULL COMMENT \u0026#39;项目计划编号\u0026#39;, `project_id` int(11) DEFAULT NULL COMMENT \u0026#39;项目编号\u0026#39;, `project_phase_id` int(11) DEFAULT NULL COMMENT \u0026#39;任务节点编号\u0026#39;, `project_phase_details_id` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;工作内容编号\u0026#39;, `project_phase_name` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;工作事项\u0026#39;, `plan_start_date` datetime DEFAULT NULL COMMENT \u0026#39;计划开始日期\u0026#39;, `plan_end_date` datetime DEFAULT NULL COMMENT \u0026#39;计划结束日期\u0026#39;, `plan_hours` decimal(18,2) DEFAULT NULL COMMENT \u0026#39;计划工时\u0026#39;, `plan_remarks` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;计划说明\u0026#39;, `execute_user_account` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;执行人\u0026#39;, `execute_department_id` int(11) DEFAULT NULL COMMENT \u0026#39;执行部门编号\u0026#39;, `bis_enable` bit(1) DEFAULT b\u0026#39;1\u0026#39; COMMENT \u0026#39;是否启用\u0026#39;, `proportion` decimal(18,2) DEFAULT \u0026#39;100.00\u0026#39; COMMENT \u0026#39;权重占比\u0026#39;, `sorting` int(11) DEFAULT \u0026#39;1\u0026#39; COMMENT \u0026#39;排序\u0026#39;, `pid` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;上级编号\u0026#39;, `first_pid` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;第一级上级，如果为第一级则为0\u0026#39;, `bis_start` bit(1) DEFAULT b\u0026#39;0\u0026#39; COMMENT \u0026#39;任务是否已开始\u0026#39;, `process_ins_id` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;流程实例编号\u0026#39;, `task_submit_time` datetime DEFAULT NULL COMMENT \u0026#39;最终成果提交时间\u0026#39;, `task_remarks` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;工作成果描述\u0026#39;, `actual_hours` decimal(18,2) DEFAULT NULL COMMENT \u0026#39;实际工时\u0026#39;, `bis_all_submit` bit(1) DEFAULT b\u0026#39;0\u0026#39; COMMENT \u0026#39;是否整体提交\u0026#39;, `bis_again_submit` bit(1) DEFAULT b\u0026#39;0\u0026#39; COMMENT \u0026#39;是否是多次提交\u0026#39;, `status` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT \u0026#39;running\u0026#39; COMMENT \u0026#39;流程状态\u0026#39;, `bis_partake` bit(1) DEFAULT b\u0026#39;1\u0026#39; COMMENT \u0026#39;是否参与\u0026#39;, `return_details_id` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;退回前任务编号\u0026#39;, `return_process_ins_id` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;退回流程实例编号\u0026#39;, `bis_new` bit(1) DEFAULT b\u0026#39;1\u0026#39; COMMENT \u0026#39;是否最新任务\u0026#39;, `sign_filed` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;用户标识，无其它用途\u0026#39;, `bis_last_layer` bit(1) DEFAULT b\u0026#39;1\u0026#39; COMMENT \u0026#39;是否最后一个层级\u0026#39;, `return_details_reason` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;退回说明\u0026#39;, `creator` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;创建人\u0026#39;, `gmt_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT \u0026#39;创建时间\u0026#39;, `gmt_modified` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;最后更新时间，记录变化后会自动更新时间戳\u0026#39;, `project_work_stage_key` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;阶段KEY\u0026#39;, `bis_finish` bit(1) DEFAULT NULL COMMENT \u0026#39;任务是否完成\u0026#39;, `task_status` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;任务状态\u0026#39;, `select_project_tree_node` json DEFAULT NULL COMMENT \u0026#39;选择的项目树任务,json\u0026#39;, `submit_count` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;提交统计(提交了多少次-任务重做了几次)\u0026#39;, `bis_supplement` bit(1) DEFAULT b\u0026#39;0\u0026#39; COMMENT \u0026#39;是否是补充任务\u0026#39;, `other_remark` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;其他说明\u0026#39;, `new_report_number` bit(1) DEFAULT b\u0026#39;0\u0026#39; COMMENT \u0026#39;如果是报告任务，是否需要重新获取文号\u0026#39;, `task_model` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;任务类型\u0026#39;, `form_code` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;表单编号\u0026#39;, `other_task_user` json DEFAULT NULL COMMENT \u0026#39;其他任务责任人\u0026#39;, `material_class_id` int(11) DEFAULT NULL COMMENT \u0026#39;资料分类\u0026#39;, `service_bean_name` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;自定义服务bean名称\u0026#39;, `track_audit_class_id` int(11) DEFAULT NULL COMMENT \u0026#39;审计事项分类\u0026#39;, `simple_task` bit(1) DEFAULT b\u0026#39;0\u0026#39; COMMENT \u0026#39;是否简单任务方式填写\u0026#39;, PRIMARY KEY (`id`) USING BTREE, KEY `index_plan_id` (`plan_id`) USING BTREE, KEY `work_stage_id_index` (`project_work_stage_id`) USING BTREE, KEY `phase_id_index` (`project_phase_id`) USING BTREE, KEY `project_id_index` (`project_id`) USING BTREE, KEY `un_index` (`submit_count`,`status`,`sorting`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=14273 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC; --准备数据 INSERT INTO `pmcc_costs`.`tb_project_plan_details`(`id`, `project_work_stage_id`, `plan_id`, `project_id`, `project_phase_id`, `project_phase_details_id`, `project_phase_name`, `plan_start_date`, `plan_end_date`, `plan_hours`, `plan_remarks`, `execute_user_account`, `execute_department_id`, `bis_enable`, `proportion`, `sorting`, `pid`, `first_pid`, `bis_start`, `process_ins_id`, `task_submit_time`, `task_remarks`, `actual_hours`, `bis_all_submit`, `bis_again_submit`, `status`, `bis_partake`, `return_details_id`, `return_process_ins_id`, `bis_new`, `sign_filed`, `bis_last_layer`, `return_details_reason`, `creator`, `gmt_created`, `gmt_modified`, `project_work_stage_key`, `bis_finish`, `task_status`, `select_project_tree_node`, `submit_count`, `bis_supplement`, `other_remark`, `new_report_number`, `task_model`, `form_code`, `other_task_user`, `material_class_id`, `service_bean_name`, `track_audit_class_id`, `simple_task`) VALUES (50, 8, 59, 14, 13, 0, \u0026#39;收集资料\u0026#39;, \u0026#39;2018-06-20 00:00:00\u0026#39;, \u0026#39;2018-06-20 00:00:00\u0026#39;, 1.00, \u0026#39;1\u0026#39;, \u0026#39;luohong\u0026#39;, 8, b\u0026#39;1\u0026#39;, 20.00, 1, 0, 0, b\u0026#39;0\u0026#39;, \u0026#39;362948\u0026#39;, \u0026#39;2018-06-20 18:21:19\u0026#39;, \u0026#39;1\u0026#39;, 1.00, b\u0026#39;0\u0026#39;, b\u0026#39;0\u0026#39;, \u0026#39;finish\u0026#39;, b\u0026#39;1\u0026#39;, 0, NULL, b\u0026#39;1\u0026#39;, NULL, b\u0026#39;1\u0026#39;, NULL, NULL, \u0026#39;2019-10-08 16:18:28\u0026#39;, \u0026#39;2019-10-08 16:18:28\u0026#39;, NULL, NULL, NULL, NULL, 0, b\u0026#39;0\u0026#39;, NULL, b\u0026#39;0\u0026#39;, NULL, NULL, NULL, NULL, NULL, NULL, b\u0026#39;0\u0026#39;); INSERT INTO `pmcc_costs`.`tb_project_plan_details`(`id`, `project_work_stage_id`, `plan_id`, `project_id`, `project_phase_id`, `project_phase_details_id`, `project_phase_name`, `plan_start_date`, `plan_end_date`, `plan_hours`, `plan_remarks`, `execute_user_account`, `execute_department_id`, `bis_enable`, `proportion`, `sorting`, `pid`, `first_pid`, `bis_start`, `process_ins_id`, `task_submit_time`, `task_remarks`, `actual_hours`, `bis_all_submit`, `bis_again_submit`, `status`, `bis_partake`, `return_details_id`, `return_process_ins_id`, `bis_new`, `sign_filed`, `bis_last_layer`, `return_details_reason`, `creator`, `gmt_created`, `gmt_modified`, `project_work_stage_key`, `bis_finish`, `task_status`, `select_project_tree_node`, `submit_count`, `bis_supplement`, `other_remark`, `new_report_number`, `task_model`, `form_code`, `other_task_user`, `material_class_id`, `service_bean_name`, `track_audit_class_id`, `simple_task`) VALUES (54, 9, 60, 14, 19, 0, \u0026#39;招标施工图\u0026#39;, \u0026#39;2018-06-20 00:00:00\u0026#39;, \u0026#39;2018-06-20 00:00:00\u0026#39;, 1.00, \u0026#39;1\u0026#39;, \u0026#39;luohong\u0026#39;, 8, b\u0026#39;1\u0026#39;, 10.00, 5, 0, 0, b\u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, NULL, NULL, NULL, b\u0026#39;0\u0026#39;, b\u0026#39;0\u0026#39;, \u0026#39;running\u0026#39;, b\u0026#39;1\u0026#39;, 0, NULL, b\u0026#39;1\u0026#39;, NULL, b\u0026#39;1\u0026#39;, NULL, NULL, \u0026#39;2019-10-08 16:18:28\u0026#39;, \u0026#39;2021-05-13 14:27:51\u0026#39;, NULL, NULL, NULL, NULL, 0, b\u0026#39;0\u0026#39;, NULL, b\u0026#39;0\u0026#39;, NULL, NULL, NULL, NULL, NULL, NULL, b\u0026#39;0\u0026#39;); INSERT INTO `pmcc_costs`.`tb_project_plan_details`(`id`, `project_work_stage_id`, `plan_id`, `project_id`, `project_phase_id`, `project_phase_details_id`, `project_phase_name`, `plan_start_date`, `plan_end_date`, `plan_hours`, `plan_remarks`, `execute_user_account`, `execute_department_id`, `bis_enable`, `proportion`, `sorting`, `pid`, `first_pid`, `bis_start`, `process_ins_id`, `task_submit_time`, `task_remarks`, `actual_hours`, `bis_all_submit`, `bis_again_submit`, `status`, `bis_partake`, `return_details_id`, `return_process_ins_id`, `bis_new`, `sign_filed`, `bis_last_layer`, `return_details_reason`, `creator`, `gmt_created`, `gmt_modified`, `project_work_stage_key`, `bis_finish`, `task_status`, `select_project_tree_node`, `submit_count`, `bis_supplement`, `other_remark`, `new_report_number`, `task_model`, `form_code`, `other_task_user`, `material_class_id`, `service_bean_name`, `track_audit_class_id`, `simple_task`) VALUES (58, 9, 60, 14, 20, 0, \u0026#39;施工图\u0026#39;, \u0026#39;2018-06-20 00:00:00\u0026#39;, \u0026#39;2018-06-20 00:00:00\u0026#39;, 1.00, \u0026#39;2\u0026#39;, \u0026#39;luohong\u0026#39;, 8, b\u0026#39;1\u0026#39;, 30.00, 9, 0, 0, b\u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;2018-06-21 11:25:08\u0026#39;, \u0026#39;1\u0026#39;, 1.00, b\u0026#39;0\u0026#39;, b\u0026#39;0\u0026#39;, \u0026#39;finish\u0026#39;, b\u0026#39;1\u0026#39;, 0, NULL, b\u0026#39;1\u0026#39;, NULL, b\u0026#39;1\u0026#39;, NULL, NULL, \u0026#39;2019-10-08 16:18:28\u0026#39;, \u0026#39;2019-10-08 16:18:28\u0026#39;, NULL, NULL, NULL, NULL, 0, b\u0026#39;0\u0026#39;, NULL, b\u0026#39;0\u0026#39;, NULL, NULL, NULL, NULL, NULL, NULL, b\u0026#39;0\u0026#39;); -- 开始  DROP PROCEDURE IF EXISTS get_project_plan_details_count; DELIMITER ; CREATE PROCEDURE get_project_plan_details_count( in custom_id int(20)) BEGIN SELECT count(id) as count FROM `tb_project_plan_details` where `project_id` = custom_id ; END ; CALL get_project_plan_details_count(14); OUT #   out类型传参示例：根据传入的身高变量，获取当前身高的所属的身材类型\n DROP PROCEDURE IF EXISTS pro_t4; create procedure pro_t4(in height int , out description varchar(100)) begin if height \u0026gt;= 180 then set description=\u0026#39;高挑\u0026#39;; elseif height \u0026gt;= 170 and height \u0026lt; 180 then set description=\u0026#39;标准\u0026#39;; else set description=\u0026#39;一般\u0026#39;; end if; end; -- 调用 call pro_t4(180,@res); select @res ; -- 在变量前添加@符号的变量叫做用户会话变量，这种的作用于是整个会话过程。 INOUT #  -- 带INOUT的存储过程  DROP PROCEDURE IF EXISTS sp_inout; DELIMITER ; CREATE PROCEDURE sp_inout(INOUT p_num INT) BEGIN SET p_num=p_num*10; END ; -- 调用并输出结果 SET @p_num=2; call sp_inout(@p_num); SELECT @p_num; 随机练习 #  -- 练习1 drop procedure if exists pro_t10 ; DELIMITER ; create procedure pro_t10(INOUT param int) begin set param = param*10; end; set @param = 2; call pro_t10(@param); select @param ; -- 练习2 drop procedure if exists pro_t11; delimiter ; create procedure pro_t11(in param1 varchar(255), in param2 varchar(255), out result varchar(2000)) begin set result = concat(param1, \u0026#39;---\u0026#39;,param2); end; call pro_t11(uuid(), md5(uuid()), @param); select @param; 存储过程体 (非常重要) #   存储过程体中可以使用各种sql语句和过程式语句的组合，来封装数据库应用中复杂的业务逻辑和处理规则，以实现数据库应用的灵活编程。下面主要介绍几个用于构造存储过程体的常用语法元素。\n 局部变量 #   在存储过程体中可以声明局部变量，用来存储存储过程体中临时结果\n DECLARE var_name[,…] type [DEFAULT value] Var_name:指定局部变量的名称 Type:用于声明局部变量的数据类型 default子句:用于为局部变量指定一个默认值。若没有指定，默认为null.\r 例如 Declare cid int(10);  使用说明 #   局部变量只能在存储过程体的begin…end语句块中声明。 局部变量必须在存储过程体的开头处声明。 局部变量的作用范围仅限于声明它的begin..end语句块，其他语句块中的语句不可以使用它。 局部变量不同于用户变量，两者区别：局部变量声明时，在其前面没有使用@符号，并且它只能在begin..end语句块中使用；而用户变量在声明时，会在其名称前面使用@符号，同时已声明的用户变量存在于整个会话之中。  例子 #  drop procedure if exists pro_add_t1; delimiter ; create procedure pro_add_t1(in a1 int,in a2 int ,out result int ) begin declare x int default 0; set x = a1 + a2; set result = x; -- 虽然可以 result = a1 + a2 但是我们为了用上局部变量还是多走一步  end; call pro_add_t1(1,2,@result) ; select @result ; set语句 #   使用set语句为局部变量赋值\n  Set var_name=expr Set cid=910;  例子 #  drop procedure if exists pro_set_example_t1; delimiter ; create procedure pro_set_example_t1(in a1 int(12),in text_v1 longtext,in f_float float(12,7),in d_double double(14,6),out result longtext) begin declare spl varchar(200) default \u0026#39; \u0026#39; ; set result = concat(a1,spl,text_v1,spl,f_float,spl,d_double) ; end; call pro_set_example_t1(1,uuid(),rand(),rand(),@result) ; select @result ;  set 中 := 和 =作用一致  drop procedure if exists pro_set_example_t2; delimiter ; create procedure pro_set_example_t2(in a1 int(12),out result longtext) begin declare par1 int default 0 ; declare par2 int default 0 ; set par1 := par1 + 1 ; set par2 = par2 + 1 ; set a1 = a1 + 1; set result = CONCAT_WS(\u0026#39;-\u0026#39;, par1 , par2 , a1) ; end; call pro_set_example_t2(round(rand()*10),@result) ; select @result ;  := 特殊作用 (用变量实现行号时，必须用:=)  CREATE TABLE `temp_date` ( `id` int NOT NULL AUTO_INCREMENT, `age` float(14,2) DEFAULT NULL COMMENT \u0026#39;age\u0026#39;, `name` varchar(255) DEFAULT NULL, `birthday` date DEFAULT NULL COMMENT \u0026#39;生日\u0026#39;, `gmt_created` datetime DEFAULT CURRENT_TIMESTAMP, `gmt_modified` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=\u0026#39;临时用户表\u0026#39;; set @param = ROUND(RAND()*100); SELECT @param as param_one , @param := @param + 1 as param_two ; -- 来看下在具体例子中的妙处吧 -- (SELECT @rownum := 0) new_table 表示派生出来了一个新的临时表 SELECT * FROM temp_date , (SELECT @rownum := 0) new_table ; -- 然后在赋值上去 SELECT * ,( @rownum := @rownum + 1)as rownum FROM temp_date , (SELECT @rownum := 0) new_table ; 流程控制语句 #  (1)条件判断语句 #   If语句  If search_condition then statement_list [elseif search_condition then statement_list]… [else statement_list] End if -- 参考\rif 满足条件 then\r执行语句\relseif 满足条件 then\r执行语句\relse 执行语句\rend if;\r例子 #  drop procedure if exists pro_if_example_t ; delimiter ; create procedure pro_if_example_t(in input double,inout text_value longtext) begin declare remark_ varchar(200) default \u0026#39;学生\u0026#39; ; if input \u0026gt;= 90 then set text_value = concat(\u0026#39;a+\u0026#39; ,remark_) ; elseif input\u0026lt;90 and input \u0026gt;= 80 then set text_value = concat(\u0026#39;a\u0026#39; ,remark_) ; elseif input\u0026lt;80 and input \u0026gt;= 70 then set text_value = concat(\u0026#39;a-\u0026#39; ,remark_) ; elseif input \u0026gt;= 60 and input \u0026lt; 70 then set text_value = concat(\u0026#39;b+\u0026#39; ,remark_) ; else set text_value = concat(\u0026#39;c\u0026#39; ,remark_) ; end if; end; set @input = 100*rand(); call pro_if_example_t(@input,@result) ; select @result ; -- 不能字符串和数字相加 如 \u0026#39;b+\u0026#39; + remark_ 可以考虑 concat(\u0026#39;b+\u0026#39; ,remark_) (2)循环语句 #   While语句、repeat语句和loop语句。\n while #  [begin_label:] while search_condition do Statement_list End while [end_label]\rwhile 满足的条件 do\r执行sql语句\rend while;\r例子 #  drop procedure if exists pro_example_while_t; delimiter ; create procedure pro_example_while_t(in len int,out result longtext) begin declare i int default 0; declare v_text longtext default \u0026#39;\u0026#39; ; while i \u0026lt;= len do set v_text = concat(v_text,\u0026#39;,\u0026#39;,i) , i = i+1; end while ; set result = v_text ; end ; call pro_example_while_t(200,@result) ; select @result ; -- 其他 drop procedure if exists pro_example_while_t3; delimiter ; create procedure pro_example_while_t3(in len int,out result int) begin declare total int default 0; declare i int default 0; while i \u0026lt; len do set i = i +1; set total = total + i ; end while ; set result = total ; end; call pro_example_while_t3(100,@result) ; select @result ; repeat结构 #  repeat\r执行sql语句\runtil 不满的条件\rend repeat;\r例子 #  drop procedure if exists pro_example_repeat_t; delimiter ; create procedure pro_example_repeat_t(in len_value int,out result_value longtext) begin declare i int default 0; declare v_text longtext default \u0026#39;\u0026#39; ; repeat set i = i +1; set v_text = concat( v_text,i,\u0026#39;-\u0026#39;) ; until i \u0026gt;= len_value end repeat; set result_value = v_text ; end ; call pro_example_repeat_t(200,@result) ; select @result; loop和leave语句 #  [loop标签名:] loop\r执行sql语句(sql语句中应该包括，退出循环的命令：leave loop标签名;如果没有将会造成死循环)\rend loop [loop标签名];\r例子 #  drop procedure if exists pro_loop_example_t; delimiter ; create procedure pro_loop_example_t(in len_value int, inout result int) begin declare i int default 0; declare total int default 0; label_loop:loop if i \u0026gt;= len_value then leave label_loop; end if; set i = i + 1; set total = total + i; end loop label_loop; set result = total; end; call pro_loop_example_t(100,@result) ; select @result; (3)Case 语句 #  case when 条件 then\r执行sql语句\rwhen 条件 then\r执行sql语句\r...\relse\r执行sql语句\rend case;\rdrop procedure if exists pro_case_example_t2; delimiter ; create procedure pro_case_example_t2(in number_value double, out result longtext) begin declare temp_value longtext; case when number_value \u0026gt;= 90 then set temp_value = \u0026#39;非常优秀\u0026#39;; when number_value \u0026lt; 90 and number_value \u0026gt;= 80 then set temp_value = \u0026#39;优秀\u0026#39;; when number_value \u0026lt; 80 and number_value \u0026gt;= 70 then set temp_value = \u0026#39;良\u0026#39;; when number_value \u0026lt; 70 and number_value \u0026gt;= 60 then set temp_value = \u0026#39;及格\u0026#39;; when number_value \u0026lt; 60 then set temp_value = \u0026#39;未及格\u0026#39;; end case; set result = temp_value; end; set @input = rand() * 100 + rand() * 100; call pro_case_example_t2(@input, @result); select @result; select … into 语句 (通过select … into 方式进行赋值操作) #   把选定列的值直接存储到局部变量中，语法格式\n  说明:存储过程体中的select…into语句返回的结果集只能有一行数据。\n Select col_name[,…] into var_name[,…] table_expr Col_name:用于指定列名 Var_name:用于指定要赋值的变量名 Table_expr:表示select语句中的from字句及后面的语法部分  例子1  drop procedure if exists pro_select_into_example_t2; delimiter ; create procedure pro_select_into_example_t2(out result longtext) begin declare name_value longtext; declare password_value longtext; select USER_NAME , USER_PASSWORD into name_value , password_value from `t_user` where USER_ID=\u0026#39;2019\u0026#39;; set result = concat(name_value,\u0026#39;-\u0026#39;,password_value); end; call pro_select_into_example_t2( @result); select @result;  例子2  DROP PROCEDURE IF EXISTS pro_set_example_ty; delimiter ; CREATE PROCEDURE pro_set_example_ty ( INOUT result VARCHAR ( 255 ) ) BEGIN DECLARE\tc1 DOUBLE DEFAULT 0; DECLARE\tc2 DOUBLE DEFAULT 0; -- INTO函数不一定需要from字句及后面的语法部分 \tSELECT\tround( rand( ) * 10 ),\tround( rand( ) * 10 ) INTO c1,\tc2; SET result = CONCAT_WS( \u0026#39;-\u0026#39;, c1, c2 ); END; SET @result = \u0026#39;\u0026#39;; CALL pro_set_example_ty ( @result ); SELECT @result; 定义处理程序 #   是事先定义程序执行过程中可能遇到的问题。并且可以在处理程序中定义解决这些问题的办法。这种方式可以提前预测可能出现的问题，并提出解决方法\n DECLARE handler_type HANDLER FOR condition_value[,…] sp_statement handler_type:CONTINUE | EXIT | UNDO Condition_value:Sqlwarning | not found | sqlexception\r handler_type(自定义程序类型)   为错误处理方式，参数取值有三个\n  CONTINUE continue 表示遇到错误不处理，继续执行 EXIT 退出 UNDO 撤销   表示遇到错误后，撤销之前的操作，MysqL中，暂时不支持这样的操作\n   Condition_value\n  例子一 违反完整性约束 SQLSTATE \u0026lsquo;23000\u0026rsquo;\n  -- 先创建一个表 drop table if EXISTS t_table_x ; CREATE TABLE t_table_x (s1 int,primary key (s1)); -- 定义第一个存储过程 没有任何错误的 (SET @x2 = 1)表示发生了错误就把 @x2 = 1 drop procedure if exists pro_handler_example_t1; delimiter ; CREATE PROCEDURE pro_handler_example_t1() BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE \u0026#39;23000\u0026#39; SET @x2 = 1; SET @x = 1; INSERT INTO t_table_x VALUES (10); SET @x = 2; INSERT INTO t_table_x VALUES (20); SET @x = 3; END; call pro_handler_example_t1() ; SELECT @x; -- @x = 3 -- 表数据 10 20 -- SELECT @x2 = 1;  -- 定义第二个存储过程 第三条语句违反约束 drop procedure if exists pro_handler_example_t2; delimiter ; CREATE PROCEDURE pro_handler_example_t2() BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE \u0026#39;23000\u0026#39; SET @x2 = 1; SET @x = 1; INSERT INTO t_table_x VALUES (10); SET @x = 2; INSERT INTO t_table_x VALUES (20); SET @x = 3; INSERT INTO t_table_x VALUES (20); SET @x = 4; END; call pro_handler_example_t2() ; SELECT @x; -- @x = 4 -- 表数据 10 20 -- 可以看到一共插入了三条语句 由于其中一条违反了约束只有两条语句,但是SET @x = 4依然被执行了是为什么呢，就是因为handler_type=CONTINUE(表示遇到错误不处理，继续执行) -- 我们对上面的handler_type定义的值作改动 改为 EXIT 定义是退出 那么实际结果如何呢  -- 定义第三个存储过程 drop procedure if exists pro_handler_example_t3; delimiter ; CREATE PROCEDURE pro_handler_example_t3() BEGIN DECLARE EXIT HANDLER FOR SQLSTATE \u0026#39;23000\u0026#39; SET @x2 = 1; SET @x = 1; INSERT INTO t_table_x VALUES (10); SET @x = 2; INSERT INTO t_table_x VALUES (20); SET @x = 3; INSERT INTO t_table_x VALUES (20); SET @x = 4; END; call pro_handler_example_t3() ; SELECT @x; -- @x = 3 -- 表数据 10 20 -- 可以看到 SET @x = 4; 正如预期的那样没有执行这正是handler_type=EXIT 的作用 在发生错误的时候就退出了 -- 最后我们把 handler_type=EXIT 改为 handler_type=UNDO 虽然mysql不支持但是还是把它写一下 drop procedure if exists pro_handler_example_t4; delimiter ; CREATE PROCEDURE pro_handler_example_t4() BEGIN DECLARE UNDO HANDLER FOR SQLSTATE \u0026#39;23000\u0026#39; SET @x2 = 1; SET @x = 1; INSERT INTO t_table_x VALUES (10); SET @x = 2; INSERT INTO t_table_x VALUES (20); SET @x = 3; INSERT INTO t_table_x VALUES (20); SET @x = 4; END; -- 就不执行了 因为mysql不支持嘛 理论上 @x=\u0026#39;\u0026#39; 并且t_table_x没有这其中插入的任意数据  例子二 NOTFOUND条件用于游标(这个经常用)  -- 我们使用游标 并且结合mysql临时表的语法作一个遍历查询  drop procedure if exists pro_handler_example_cursor_not_found; delimiter ; CREATE PROCEDURE pro_handler_example_cursor_not_found() begin declare id_value int default 0; declare password_value varchar(100) default \u0026#39;\u0026#39;; declare name_value varchar(100) default \u0026#39;\u0026#39;; -- 定义 游标结束的变量 declare v_finished INTEGER DEFAULT 0; -- 定义游标结束后到底该咋办 必须在游标定义语句的下一行 declare get_user_data_list_cursor cursor for select USER_NAME, USER_PASSWORD,USER_ID from `t_user`; declare continue handler for not found set v_finished = 1; -- 定义一个临时表 (临时表只在会话中或者会话结束以后mysql自动删除)  DROP TEMPORARY TABLE if exists t_user_temp_print; CREATE TEMPORARY TABLE t_user_temp_print( id INT , name varchar(100), password varchar(100) ); -- 打开光标  open get_user_data_list_cursor; while v_finished != 1 do FETCH get_user_data_list_cursor into name_value, password_value , id_value; INSERT INTO t_user_temp_print(`id`,`name`,`password`) values(id_value,name_value,password_value) ; end while ; -- 关闭光标  close get_user_data_list_cursor; -- 打印数据 \tselect * from t_user_temp_print; -- 删除临时表 \tDROP TABLE t_user_temp_print ; end; call pro_handler_example_cursor_not_found(); id name password 9\t8d80af597433177f201f86f1fe0f9d9d\t64a3680910b95bc6361b560fc5e07970 10\td0e1cc42e2774e52cce412e9f5027491\tea346e9806c5f80b2a2eda551b45827b 11\t88693fb73cab1f860ccfaf80de83e204\ta624aa6c82faa32379892106b6daa249 12\t6d47c9fffc66612fbc057201a4d910bd\t1e34c1122675a45e525a1ab1b6348ca2 13\t418f57775bfcdb3e0687e6c423e57d05\t0a7089f91c7ab7850df0802e5ca3bc12 14\tea0f6876c57dcc3f82a36208a97afea6\tb6a8591804f06e9bd99fb2114cb50861 15\t3d0a07879b2e826e0b29d8ced8e92b4c\t875e61c2fe9025fa30326bad73e070ca 16\t877b734119235886088a5124a7fe8ddf\tc293b45da05a29a3e9204625831977c5 17\tf3f3c624bb418b63bdc3f580dd5039b0\t860514262f38d33545d6c8301d5921b2 18\tbffcad8fdfd4a95d2062d6e83098186d\t2fff3c910cca03887ab6b26ee2b76cf3 19\t2f1e409ea4569648270507e424a09621\t78ffe25a4e2ef08605f2c25a2392f611 20\t2f87b8d6988cd55c4361768735955861\te4dd44e0bf104610f915c26854f0e6f2 21\t94879aadb598a19ab612b97fa0f0c769\t92912589c3a3ddb4457ccc5f183df822 22\t69cbf1919065ce7a04f0cb486d7a0320\t03bed78d5031fd536f0af3a6f0e3cc1f 23\tb77b1800acc41f27d8158c05c53ca743\tfb1001ca32eea35a0a561416e9bd1996 24\t57dab3aacd9776d067f7f42f1adf92d3\tddc141fef43e5d6f87659fdc5455333c 25\t1208d1d73683c335a8e601f6eef5a5b4\tc45e0d126705c9f83c35ed218e1b9a4e 26\tfe85827612e43eee230250d8f94f12ac\t301a625913e87498b656836118294225 26\tfe85827612e43eee230250d8f94f12ac\t301a625913e87498b656836118294225 游标（光标） #   游标又称光标是用来存储查询结果集的数据类型，在存储过程和函数中可以使用光标对结果集进行循环的处理。类似高级编程语言中的集合类型。 光标的使用包括光标的声明、open、fetch和 close，其语法分别如下\n  声明光标  declare 光标名称 cursor for sql语句;\r 打开光标  open 光标名;\r 获取光标(将光标当前数据存储到变量中)  fetch 光标名 into 变量名[,变量名...];\r 关闭光标  close 光标名;\r 简单例子  drop procedure if exists pro_cursor_example_t2; delimiter ; create procedure pro_cursor_example_t2() begin declare name_value longtext; declare password_value longtext; -- 定义光标  declare get_user_data_list cursor for select USER_NAME, USER_PASSWORD from `t_user`; -- 打开光标  open get_user_data_list; -- 获取光标  fetch get_user_data_list into name_value, password_value; -- 打印 获取到的数据  select concat(\u0026#39;name: \u0026#39;,name_value,\u0026#39; password: \u0026#39;,password_value) as print_data; -- 关闭光标  close get_user_data_list; end; call pro_cursor_example_t2();  复杂例子  CREATE TABLE `t_user` ( `USER_ID` int NOT NULL AUTO_INCREMENT, `USER_NAME` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, `USER_PASSWORD` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, `USER_EMAIL` char(80) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, PRIMARY KEY (`USER_ID`), KEY `IDX_NAME` (`USER_NAME`) ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb3; drop procedure if exists pro_cursor_example_t_3; delimiter ; create procedure pro_cursor_example_t_3() begin declare name_value varchar(100) default \u0026#39;\u0026#39;; declare v_finished INTEGER DEFAULT 0; declare id_value int default 0; declare password_value varchar(100) default \u0026#39;\u0026#39;; -- 定义光标  declare get_user_data_list_cursor cursor for select USER_NAME, USER_PASSWORD,USER_ID from `t_user`; DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_finished = 1; DROP TEMPORARY TABLE if exists t_user_temp_print; CREATE TEMPORARY TABLE t_user_temp_print( id INT PRIMARY KEY, name varchar(100), password varchar(100) ); -- 打开光标  open get_user_data_list_cursor; label_while_loop : LOOP FETCH get_user_data_list_cursor into name_value, password_value , id_value; IF v_finished = 1 THEN\tLEAVE label_while_loop; END IF; INSERT INTO t_user_temp_print(`id`,`name`,`password`) values(id_value,name_value,password_value) ; END LOOP label_while_loop; -- 关闭光标  close get_user_data_list_cursor; -- 打印数据 \tselect * from t_user_temp_print; -- 删除临时表 \tDROP TABLE t_user_temp_print ; end; call pro_cursor_example_t_3(); drop procedure if exists pro_cursor_example_t_4; delimiter ; create procedure pro_cursor_example_t_4() begin declare name_value varchar(100) default \u0026#39;\u0026#39;; declare v_finished INTEGER DEFAULT 0; declare id_value int default 0; declare password_value varchar(100) default \u0026#39;\u0026#39;; -- 定义光标  declare get_user_data_list_cursor cursor for select USER_NAME, USER_PASSWORD,USER_ID from `t_user`; DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_finished = 1; DROP TEMPORARY TABLE if exists t_user_temp_print; CREATE TEMPORARY TABLE t_user_temp_print( id INT , name varchar(100), password varchar(100) ); -- 打开光标  open get_user_data_list_cursor; while v_finished != 1 do FETCH get_user_data_list_cursor into name_value, password_value , id_value; INSERT INTO t_user_temp_print(`id`,`name`,`password`) values(id_value,name_value,password_value) ; end while ; -- 关闭光标  close get_user_data_list_cursor; -- 打印数据 \tselect * from t_user_temp_print; -- 删除临时表 \tDROP TABLE t_user_temp_print ; end; call pro_cursor_example_t_4(); -- 创建结构基于现有表的临时表  CREATE TEMPORARY TABLE temp_table_name SELECT * FROM original_table LIMIT 0; 参考1(重点)\n参考2\n参考3\n参考4\n"});index.add({'id':171,'href':'/life/docs/%E8%84%9A%E6%9C%AC/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%80%E6%9C%AF%E5%8F%82%E8%80%83/','title':"小程序技术总结参考 ",'section':"脚本",'content':"多端比较 #     框架名称 h5 小程序 weex Native 可否使用其它ui     taro Y Y N Y ui根据修改就可以适配taro如 vant,light-ui,WeUI,Antd Design Mobile,自带的,京东ui等   uniapp Y Y Y N 只能用它自己的   Chameleon Y Y Y N ui根据修改就可以适配Chameleon light-ui,自带的,滴滴ui   mpvue Y Y N N 只能使用自己的 例如美团外卖     weex和Native 可以以一定的方式转为app 比如android ios  Chameleon #   CML (Chameleon) 是一个跨多端开发的统一解决方案，它可以像变色龙一样适应不同的环境。一次开发，多端运行，一端所见即多端所见。\n  点评  滴滴的开源小程序框架 使用的是类vue语法 安装它自己的规范开发 比如 c-model 和v-model功能差不多但是不能直接使用v-model,一定要使用得这样 //注意这个 lang=\u0026#39;vue\u0026#39; \u0026lt;template lang=\u0026#39;vue\u0026#39;\u0026gt; \u0026lt;page title=\u0026#34;chameleon\u0026#34;\u0026gt; \u0026lt;view\u0026gt;\u0026lt;text\u0026gt;message:{{message}}\u0026lt;/text\u0026gt;\u0026lt;/view\u0026gt; \u0026lt;input v-model=\u0026#34;message\u0026#34;\u0026gt;\u0026lt;/input\u0026gt; \u0026lt;/page\u0026gt; \u0026lt;/template\u0026gt; 实际上uniapp照样也是使用的类vue 只不过uniapp模拟了几乎绝大多数的vue api 其实这种类vue挺恐怖的 框架自己把vue拿来魔改或者自己研发了一种数据驱动的响应式js框架 uniapp #   uni-app 是一个使用 Vue.js 开发小程序、H5、App的统一前端框架。 开发者使用 Vue 语法编写代码，uni-app 框架将其编译到 小程序（微信/支付宝/百度/字节跳动/QQ/钉钉）、App（iOS/Android）、H5等多个平台，保证其正确运行并达到优秀体验\n  点评  类vue语法目前有说法是已经用的全套vue语法了 ,支持多端 比如 小程序,h5,app 可以以一定的约束下达成一次编写多端运行 但是前提条件你必须用它的组件, 否则就会出问题 taro #   Taro 一套 遵循React 语法规范的多端开发解决方案。使用 Taro，只书写一套代码，再通过 Taro 的编译工具，将源代码分别编译出可以在不同端（微信小程序、H5、App 端等）运行的代码。同时 Taro 还提供了开箱即用的语法检测和自动补全等功能\n  点评  支持非常多的数据驱动响应式js框架如vue,react,Nerv 也可以从某程度上支持android和ios 目前是转为Native应用然后到android和ios 然后就是ui 支持非常的多 可以使用非自带的ui,目前它的设计的框架和理念在小程序框架应该是最好的,有很多人看好它 最好当你使用vue的时候你基本上可以使用任何vue语法使用react也是如此 似乎没做这些限制 对开发极其的友好   taro ui 参考demo\n  Antd Design Mobile\n  WeUI\n  vant UI\n  Taro UI 可以一定程度的定制化 定制化\n  taro 内置组件\n  经验总结 #  法律法规微信小程序总结 #  最开始的时候我们都没有做过微信小程序 然后到网上去调研了下 其实用原生微信小程序的逻辑写的项目其实很少的,因为很多企业都认为是没有必要为了微信小程序就单独去学习 小程序编写页面的那种规范,大多是选择使用第三方的框架然后反编译为微信小程序格式 最开始是选择的 chameleon 然后在看chameleon 的时候发现的taro 然后相比较之下觉得taro更适合一点 taro 接入的成本也比较低 也利于后续升级 假如项目性能不够了 还可以改为react模型的应用 期间的话 也需要一些东西 没接触过的比如获取手机号码，获取微信小程序 以及和后端联调所幸都依依解决了 也有一些问题比如vuex在h5调试的刷新F5刷新页面 变量状态就消失和环境变量只能在linux下才行,打包后应用体积超过2M等 后面陆续的把这些都处理了 本次应用是vue2+vuex+taro+vant Taro Vant开发配置攻略 #   Taro v3.3+\n 在 Taro 中使用有赞前端团队开源的移动端组件库Vant。\nVant 官方示例：https://vant-contrib.gitee.io/vant/mobile.html#/zh-CN。\n能直接兼容使用的组件大概为 70%，具体适配情况请见下文。\nGetting Start #  # 安装 CLI npm i @tarojs/cli@alpha -g # 启动项目 cd taro-vant npm i taro build --type weapp --watch # 预览项目时需要以 prod 模式打包 taro build --type weapp 目录结构 #  项目目录结构 #  ├── dist 编译结果目录\r|\r├── config 项目编译配置目录\r| ├── index.js 默认配置\r| ├── dev.js 开发环境配置\r| └── prod.js 生产环境配置\r|\r├── src 源码目录\r| ├── pages 页面文件目录\r| | └── index index 页面目录\r| | ├── index.js index 页面逻辑\r| | ├── index.css index 页面样式\r| | └── index.config.js index 页面配置\r| |\r| ├── app.js 项目入口文件\r| ├── app.css 项目总通用样式\r| └── app.config.js 项目入口配置\r|\r├── project.config.json 微信小程序项目配置 project.config.json\r├── project.tt.json 字节跳动小程序项目配置 project.tt.json\r├── project.swan.json 百度小程序项目配置 project.swan.json\r├── project.qq.json QQ 小程序项目配置 project.qq.json\r|\r├── babel.config.js Babel 配置\r├── tsconfig.json TypeScript 配置\r├── .eslintrc ESLint 配置\r|\r└── package.json\r 编译配置  └── config 项目编译配置目录\r├── index.js 默认配置\r├── dev.js 开发环境配置\r└── prod.js 生产环境配置\r  用于配置 Taro 项目的编译行为、修改 Webpack 配置等，详情请参考编译配置和编译配置详情。\n  源码组织\n  和小程序规范一样，Taro 包含一个描述整体程序的 app 和多个描述各自页面的 page。\n  app\r└── src 源码目录\r├── app.js 项目入口文件\r├── app.css 项目总通用样式\r└── app.config.js 项目入口配置\r小程序的主体由下面三个文件组成： #    文件\t必须\t作用\n  app.js\t是\t小程序入口逻辑\n  app.css\t否\t小程序全局样式\n  app.config.js\t是\t小程序全局配置\n  代码示例请根据你选择的框架进行查看：React, PReact, Vue, Vue3。\n   小程序全局配置    app.config.js 对应小程序规范的全局配置文件 app.json，优势在于它是 JS 文件可以编写逻辑。配置以微信小程序的全局配置为规范。详情请参考全局配置。\n  小程序全局样式    小程序全局样式文件可以通过 ES6 规范的 import 进行引入。\n  app.js\rimport './app.css';\rpage\n└── src 源码目录\r└── pages 页面文件目录\r└── index index 页面目录\r├── index.js index 页面逻辑\r├── index.css index 页面样式\r└── index.config.js index 页面配置\r一个小程序页面由三个文件组成，如下： #    文件\t必须\t作用\n  page.js\t是\t页面入口逻辑\n  page.css\t否\t页面样式\n  page.config.js\t否\t页面配置\n   页面配置    page.config.js 对应小程序规范的页面配置文件 page.json，优势在于它是 JS 文件可以编写逻辑。配置以微信小程序的页面配置为规范。详情请参考页面配置。\n  页面样式    页面的样式文件可以通过 ES6 规范的 import 进行引入。\n  pages/index/index.js\rimport './index.css';\r  页面路由    页面路由与小程序规范一致，需要在小程序全局配置 app.config.js 中进行配置。\n  项目配置\n  └──project.config.json 微信小程序项目配置 project.config.json\r  各类小程序平台均有自己的项目配置文件，Taro 支持对它们进行适配，详情请参考项目配置。\n  Babel 配置\n  └── babel.config.js Babel 配置\r  请参考 Babel 配置\n  ESLint 配置\n  └── .eslintrc ESLint 配置\r建议的配置 #   打包压缩  //config -\u0026gt; dev.js module.exports = { env: { NODE_ENV: \u0026#39;\u0026#34;development\u0026#34;\u0026#39; }, defineConstants: { }, mini: { webpackChain: (chain, webpack) =\u0026gt; { chain.merge({ plugin: { install: { plugin: require(\u0026#39;terser-webpack-plugin\u0026#39;), args: [{ terserOptions: { compress: true, // 默认使用terser压缩  // mangle: false,  keep_classnames: true, // 不改变class名称  keep_fnames: true // 不改变函数名称  } }] } } }) } }, h5: {} }   环境变量 (taro原生只能是linux)\n  考虑使用 cross-env\n  关于分享好友和朋友圈可以考虑 用一个公共js 来处理这些便于加密和后续的解密等操作\n  当环境不一致参考package.json #  {\r\u0026quot;name\u0026quot;: \u0026quot;kbs_station_weapp\u0026quot;,\r\u0026quot;version\u0026quot;: \u0026quot;1.0.0\u0026quot;,\r\u0026quot;private\u0026quot;: true,\r\u0026quot;description\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;templateInfo\u0026quot;: {\r\u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;,\r\u0026quot;typescript\u0026quot;: true,\r\u0026quot;css\u0026quot;: \u0026quot;less\u0026quot;\r},\r\u0026quot;scripts\u0026quot;: {\r\u0026quot;build:weapp\u0026quot;: \u0026quot;cross-env NODE_ENV=development taro build --type weapp\u0026quot;,\r\u0026quot;build:weapp:p\u0026quot;: \u0026quot;cross-env NODE_ENV=production taro build --type weapp\u0026quot;,\r\u0026quot;build:p\u0026quot;: \u0026quot;cross-env NODE_ENV=production taro build --type weapp\u0026quot;,\r\u0026quot;build:d\u0026quot;: \u0026quot;cross-env NODE_ENV=development taro build --type weapp\u0026quot;,\r\u0026quot;build:p:linux\u0026quot;: \u0026quot;set NODE_ENV=production \u0026amp;\u0026amp; taro build --type weapp\u0026quot;,\r\u0026quot;build:d:linux\u0026quot;: \u0026quot;set NODE_ENV=development \u0026amp;\u0026amp; taro build --type weapp\u0026quot;,\r\u0026quot;build:swan\u0026quot;: \u0026quot;taro build --type swan\u0026quot;,\r\u0026quot;build:alipay\u0026quot;: \u0026quot;taro build --type alipay\u0026quot;,\r\u0026quot;build:tt\u0026quot;: \u0026quot;taro build --type tt\u0026quot;,\r\u0026quot;build:h5\u0026quot;: \u0026quot;cross-env NODE_ENV=development taro build --type h5\u0026quot;,\r\u0026quot;build:h5:p\u0026quot;: \u0026quot;cross-env NODE_ENV=production taro build --type h5\u0026quot;,\r\u0026quot;build:rn\u0026quot;: \u0026quot;taro build --type rn\u0026quot;,\r\u0026quot;build:qq\u0026quot;: \u0026quot;taro build --type qq\u0026quot;,\r\u0026quot;build:jd\u0026quot;: \u0026quot;taro build --type jd\u0026quot;,\r\u0026quot;build:quickapp\u0026quot;: \u0026quot;taro build --type quickapp\u0026quot;,\r\u0026quot;dev:weapp\u0026quot;: \u0026quot;cross-env NODE_ENV=development taro build --type weapp --watch\u0026quot;,\r\u0026quot;dev:weapp:p\u0026quot;: \u0026quot;cross-env NODE_ENV=production taro build --type weapp --watch\u0026quot;,\r\u0026quot;dev:swan\u0026quot;: \u0026quot;npm run build:swan -- --watch\u0026quot;,\r\u0026quot;dev:alipay\u0026quot;: \u0026quot;npm run build:alipay -- --watch\u0026quot;,\r\u0026quot;dev:tt\u0026quot;: \u0026quot;npm run build:tt -- --watch\u0026quot;,\r\u0026quot;dev:h5\u0026quot;: \u0026quot;cross-env NODE_ENV=development taro build --type h5 --watch\u0026quot;,\r\u0026quot;dev:h5:p\u0026quot;: \u0026quot;cross-env NODE_ENV=production taro build --type h5 --watch\u0026quot;,\r\u0026quot;dev:rn\u0026quot;: \u0026quot;npm run build:rn -- --watch\u0026quot;,\r\u0026quot;dev:qq\u0026quot;: \u0026quot;npm run build:qq -- --watch\u0026quot;,\r\u0026quot;dev:jd\u0026quot;: \u0026quot;npm run build:jd -- --watch\u0026quot;,\r\u0026quot;dev:quickapp\u0026quot;: \u0026quot;npm run build:quickapp -- --watch\u0026quot;\r},\r\u0026quot;browserslist\u0026quot;: [\r\u0026quot;last 3 versions\u0026quot;,\r\u0026quot;Android \u0026gt;= 4.1\u0026quot;,\r\u0026quot;ios \u0026gt;= 8\u0026quot;\r],\r\u0026quot;author\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;dependencies\u0026quot;: {\r\u0026quot;@babel/runtime\u0026quot;: \u0026quot;^7.7.7\u0026quot;,\r\u0026quot;@tarojs/cli\u0026quot;: \u0026quot;3.4.12\u0026quot;,\r\u0026quot;@tarojs/components\u0026quot;: \u0026quot;3.4.12\u0026quot;,\r\u0026quot;@tarojs/plugin-framework-vue2\u0026quot;: \u0026quot;^3.4.12\u0026quot;,\r\u0026quot;@tarojs/plugin-html\u0026quot;: \u0026quot;3.4.12\u0026quot;,\r\u0026quot;@tarojs/runtime\u0026quot;: \u0026quot;3.4.12\u0026quot;,\r\u0026quot;@tarojs/taro\u0026quot;: \u0026quot;3.4.12\u0026quot;,\r\u0026quot;qrcode\u0026quot;: \u0026quot;^1.5.1\u0026quot;,\r\u0026quot;vant\u0026quot;: \u0026quot;^2.12.13\u0026quot;,\r\u0026quot;vue\u0026quot;: \u0026quot;^2.5.0\u0026quot;,\r\u0026quot;vue-template-compiler\u0026quot;: \u0026quot;^2.5.0\u0026quot;,\r\u0026quot;vuex\u0026quot;: \u0026quot;^3.0.0\u0026quot;,\r\u0026quot;vuex-persist\u0026quot;: \u0026quot;^3.1.3\u0026quot;\r},\r\u0026quot;devDependencies\u0026quot;: {\r\u0026quot;@babel/core\u0026quot;: \u0026quot;^7.8.0\u0026quot;,\r\u0026quot;@tarojs/mini-runner\u0026quot;: \u0026quot;3.4.12\u0026quot;,\r\u0026quot;@tarojs/plugin-less\u0026quot;: \u0026quot;^2.2.10\u0026quot;,\r\u0026quot;@tarojs/webpack-runner\u0026quot;: \u0026quot;3.4.12\u0026quot;,\r\u0026quot;@types/webpack-env\u0026quot;: \u0026quot;^1.13.6\u0026quot;,\r\u0026quot;@typescript-eslint/eslint-plugin\u0026quot;: \u0026quot;^4.15.1\u0026quot;,\r\u0026quot;@typescript-eslint/parser\u0026quot;: \u0026quot;^4.15.1\u0026quot;,\r\u0026quot;babel-plugin-import\u0026quot;: \u0026quot;^1.13.3\u0026quot;,\r\u0026quot;babel-preset-taro\u0026quot;: \u0026quot;3.4.12\u0026quot;,\r\u0026quot;cross-env\u0026quot;: \u0026quot;^7.0.3\u0026quot;,\r\u0026quot;eslint\u0026quot;: \u0026quot;^6.8.0\u0026quot;,\r\u0026quot;eslint-config-taro\u0026quot;: \u0026quot;3.4.12\u0026quot;,\r\u0026quot;eslint-plugin-vue\u0026quot;: \u0026quot;^6.x\u0026quot;,\r\u0026quot;less\u0026quot;: \u0026quot;^4.1.3\u0026quot;,\r\u0026quot;less-loader\u0026quot;: \u0026quot;^11.0.0\u0026quot;,\r\u0026quot;sass\u0026quot;: \u0026quot;^1.25.0\u0026quot;,\r\u0026quot;sass-loader\u0026quot;: \u0026quot;^8.0.2\u0026quot;,\r\u0026quot;stylelint\u0026quot;: \u0026quot;9.3.0\u0026quot;,\r\u0026quot;typescript\u0026quot;: \u0026quot;^4.1.0\u0026quot;,\r\u0026quot;vue-loader\u0026quot;: \u0026quot;^15.9.2\u0026quot;,\r\u0026quot;webpack\u0026quot;: \u0026quot;^4.26.1\u0026quot;\r}\r}\r"});index.add({'id':172,'href':'/life/docs/databases/mysql/mysql_procedure_function/','title':"mysql存储函数",'section':"mysql学习笔记",'content':"参考1(重点)\n参考2\n"});index.add({'id':173,'href':'/life/docs/databases/mysql/mysql_operation_maintenance/','title':"mysql运维",'section':"mysql学习笔记",'content':"一: 备份 #  1: 备份内容 #    数据 (数据文件或文本格式数据)\n  操作日志(binlog) (数据库变更日志)\n  2:冷备份与热备份 #    冷备份 (关闭数据库服务，完整拷贝数据文件)\n  热备份 (在不影响数据库读写服务的情况下备份数据库)\n  3:本地备份与远程备份 #    本地备份 (在数据库服务器本地进行备份)\n  远程备份 (远程连接数据库进行备份)\n  4:全量备份与增量备份 #    全量备份 (备份完整的数据库)\n  增量备份 (只备份上一次备份以来发生修改的数据)\n  5:备份周期 #   考虑因素： 数据库大小(决定备份时间) 恢复速度要求(快速or慢速) 备份方式(全量or增量)  6:常用工具及用法 #   mysqldump - 逻辑备份，热备 xtrabackup - 物理备份， 热备 Lvm/zfs snapshot - 物理备份 mydumper - 逻辑备份，热备 cp - 物理备份，冷备  常用工具及用法 - mysqldump #   逻辑备份  -- 备份全部数据库的数据库结构 mysqldump -h localhost -p3307 -uroot -p123456 -A -d \u0026gt; D:\\data\\mysql_all.sql -- 备份全部数据库的数据和结构 mysqldump -h localhost -p3307 -uroot -p123456 -A \u0026gt; D:\\data\\mysql_all_2.sql -- 备份单个数据库的结构和数据 mysqldump -h localhost -p3307 -uroot -p123456 --databases test3 \u0026gt; D:\\data\\test3_all.sql -- 备份单个数据库的结构(当你需要备份结构和数据同时的时候移除-d 参数即可) mysqldump -h localhost -p3307 -uroot -p123456 --databases test3 -d \u0026gt; D:\\data\\test3_all_1.sql -- 备份单个数据库的数据 mysqldump -h localhost -p3307 -uroot -p123456 --databases test3 -t \u0026gt; D:\\data\\test3_data_1.sql -- 备份单个数据库的结构 mysqldump -h localhost -p3307 -uroot -p123456 test3 -d \u0026gt; D:\\data\\test3_jiegou.sql -- 备份单个数据库的结构和数据 mysqldump -h localhost -p3307 -uroot -p123456 --databases test3 \u0026gt; D:\\data\\test3.sql -- 登录数据库 mysql -h localhost -p3307 -uroot -p123456 "});index.add({'id':174,'href':'/life/docs/%E8%84%9A%E6%9C%AC/vue%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/','title':"vue脚手架创建方式 ",'section':"脚本",'content':"第一种方式 #     npm i -g @vue/cli-init or npm install @vue/cli-init@5.0.8 -g    D:\\IdeaProjects\\cycle\\study\\vuecli\\demoB\u0026gt;vue init webpack learnrouter ? Project name learnrouter ? Project description \u0026#39;这是一个vue路由器\u0026#39; ? Author zch ? Vue build runtime ? Install vue-router? Yes ? Use ESLint to lint your code? No ? Set up unit tests Yes ? Pick a test runner noTest ? Setup e2e tests with Nightwatch? Yes ? Should we run `npm install` for you after the project has been created? (recommended) npm vue-cli · Generated \u0026#34;learnrouter\u0026#34;. # Installing project dependencies ... # ======================== npm WARN deprecated extract-text-webpack-plugin@3.0.2: Deprecated. Please use https://github.com/webpack-contrib/mini-css-extract-plugin npm WARN deprecated html-webpack-plugin@2.30.1: out of support npm WARN deprecated browserslist@2.11.3: Browserslist 2 could fail on reading Browserslist \u0026gt;3.0 config used in other tools. npm WARN deprecated core-js@2.6.12: core-js@\u0026lt;3.3 is no longer maintained and not recommended for usage due to the number of issues. Because of the V8 engine whims, feature detection in old core-js versions could cause a slowdown up to 100x even if nothing is polyfilled. Please, upgrade your dependencies to the actual version of core-js. npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142 npm WARN deprecated uglify-es@3.3.9: support for ECMAScript is superseded by `uglify-js` as of v3.13.0 npm WARN deprecated bfj-node4@5.3.1: Switch to the `bfj` package for fixes and new features! npm WARN deprecated chokidar@2.1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies. npm WARN deprecated har-validator@5.1.5: this library is no longer supported npm WARN deprecated mkdirp@0.5.1: Legacy versions of mkdirp are no longer supported. Please update to mkdirp 1.x. (Note that the API surface has changed to use Promises in 1.x.) npm WARN deprecated json3@3.3.2: Please use the native JSON object instead of JSON 3 npm WARN deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2. npm WARN deprecated browserslist@1.7.7: Browserslist 2 could fail on reading Browserslist \u0026gt;3.0 config used in other tools. npm WARN deprecated socks@1.1.10: If using 2.x branch, please upgrade to at least 2.1.6 to avoid a serious bug with socket data flow and an import issue introduced in 2.1.0 npm WARN deprecated querystring@0.2.0: The npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated \u0026gt; chromedriver@2.46.0 install D:\\IdeaProjects\\cycle\\study\\vuecli\\demoB\\learnrouter\\node_modules\\chromedriver \u0026gt; node install.js Current existing ChromeDriver binary is unavailable, proceding with download and extraction. Downloading from file: https://chromedriver.storage.googleapis.com/2.46/chromedriver_win32.zip Saving to file: C:\\Users\\dell\\AppData\\Local\\Temp\\2.46\\chromedriver\\chromedriver_win32.zip Received 781K... Received 1568K... Received 2352K... Received 3134K... Received 3920K... Received 4523K total. Extracting zip contents Copying to target path D:\\IdeaProjects\\cycle\\study\\vuecli\\demoB\\learnrouter\\node_modules\\chromedriver\\lib\\chromedriver Done. ChromeDriver binary available at D:\\IdeaProjects\\cycle\\study\\vuecli\\demoB\\learnrouter\\node_modules\\chromedriver\\lib\\chromedriver\\chromedriver.exe \u0026gt; core-js@2.6.12 postinstall D:\\IdeaProjects\\cycle\\study\\vuecli\\demoB\\learnrouter\\node_modules\\core-js \u0026gt; node -e \u0026#34;try{require(\u0026#39;./postinstall\u0026#39;)}catch(e){}\u0026#34; Thank you for using core-js ( https://github.com/zloirock/core-js ) for polyfilling JavaScript standard library! The project needs your help! Please consider supporting of core-js on Open Collective or Patreon: \u0026gt; https://opencollective.com/core-js \u0026gt; https://www.patreon.com/zloirock Also, the author of core-js ( https://github.com/zloirock ) is looking for a good job -) \u0026gt; uglifyjs-webpack-plugin@0.4.6 postinstall D:\\IdeaProjects\\cycle\\study\\vuecli\\demoB\\learnrouter\\node_modules\\webpack\\node_modules\\uglifyjs-webpack-plugin \u0026gt; node lib/post_install.js npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\webpack-dev-server\\node_modules\\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026#34;os\u0026#34;:\u0026#34;darwin\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;any\u0026#34;} (current: {\u0026#34;os\u0026#34;:\u0026#34;win32\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;x64\u0026#34;}) npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\watchpack-chokidar2\\node_modules\\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026#34;os\u0026#34;:\u0026#34;darwin\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;any\u0026#34;} (current: {\u0026#34;os\u0026#34;:\u0026#34;win32\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;x64\u0026#34;}) npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {\u0026#34;os\u0026#34;:\u0026#34;darwin\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;any\u0026#34;} (current: {\u0026#34;os\u0026#34;:\u0026#34;win32\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;x64\u0026#34;}) added 1406 packages from 1012 contributors in 64.416s 57 packages are looking for funding run `npm fund` for details # Project initialization finished! # ======================== To get started: cd learnrouter npm run dev Documentation can be found at https://vuejs-templates.github.io/webpack 第二种方式 #   npm install vue @vue/cli -g or npm install @vue/cli@5.0.3 -g  D:\\IdeaProjects\\cycle\\study\\vuecli\\demoC\u0026gt;vue create cli-test2 Vue CLI v4.5.13 ? Please pick a preset: Manually select features ? Check the features needed for your project: Choose Vue version, Babel, Router, CSS Pre-processors ? Choose a version of Vue.js that you want to start the project with 2.x ? Use history mode for router? (Requires proper server setup for index fallback in production) Yes ? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less ? Where do you prefer placing config for Babel, ESLint, etc.? In package.json ? Save this as a preset for future projects? Yes ? Save preset as: y � Preset y saved in C:\\Users\\dell\\.vuerc Vue CLI v4.5.13 ✨ Creating project in D:\\IdeaProjects\\cycle\\study\\vuecli\\demoC\\cli-test2. ⚙️ Installing CLI plugins. This might take a while... \u0026gt; core-js@3.16.1 postinstall D:\\IdeaProjects\\cycle\\study\\vuecli\\demoC\\cli-test2\\node_modules\\core-js \u0026gt; node -e \u0026#34;try{require(\u0026#39;./postinstall\u0026#39;)}catch(e){}\u0026#34; \u0026gt; ejs@2.7.4 postinstall D:\\IdeaProjects\\cycle\\study\\vuecli\\demoC\\cli-test2\\node_modules\\ejs \u0026gt; node ./postinstall.js added 1218 packages from 636 contributors in 51.798s 78 packages are looking for funding run `npm fund` for details � Invoking generators... � Installing additional dependencies... added 16 packages from 69 contributors in 5.772s 78 packages are looking for funding run `npm fund` for details ⚓ Running completion hooks... � Generating README.md... � Successfully created project cli-test2. � Get started with the following commands: $ cd cli-test2 $ npm run serve D:\\IdeaProjects\\cycle\\study\\vuecli\\demoC\u0026gt;cd cli-test2 D:\\IdeaProjects\\cycle\\study\\vuecli\\demoC\\cli-test2\u0026gt;npm run serve \u0026gt; cli-test2@0.1.0 serve D:\\IdeaProjects\\cycle\\study\\vuecli\\demoC\\cli-test2 \u0026gt; vue-cli-service serve INFO Starting development server... 98% after emitting CopyPlugin DONE Compiled successfully in 2258ms 下午9:46:24 App running at: - Local: http://localhost:8080/ - Network: http://192.168.31.246:8080/ Note that the development build is not optimized. To create a production build, run npm run build. "});index.add({'id':175,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/pqpys8speb/','title':"每天保持心情的5句话",'section':"自信",'content':"每天保持好心情的5句话 #    1:如果自己不伤害自己,这世界没有人能伤害我。面对一切外在风雨,我就对自己说一句话,我爱自己\n  2:身体和心灵是自己的,没有人能代替我照顾自己,往后余生,一定好好照顾自己,一心一意让自己快乐健康。\n  3:把时间浪费在美好的事情,比如读书 运动旅游。不要浪费在无聊的事情和人上。\n  4:允许自己做不到 做不好。完美不是苛责自己,而是接纳自己,然后,继续前行\n  5:不必讨好任何人,不要依赖任何人,自己和别人是平等的,抬起头生活。\n  假如你遇到难事 这个时候最应该做的就是什么都不做 这个时候要让自己内心平静下来 否则你会干出你事后后悔的事情来 #  "});index.add({'id':176,'href':'/life/docs/%E8%84%9A%E6%9C%AC/javascript/','title':"javascript ",'section':"脚本",'content':"目录 #   ECMAScript 6  "});index.add({'id':177,'href':'/life/docs/javadir/groovy/','title':"groovy 学习与使用 ",'section':" Java技术栈",'content':" Groovy是一种面向对象的动态类型语言，跟Java一样运行在JVM上。\n（注：给Java静态世界带来动态能力的语言）\n 目录 #    groovy中对象的比较以及非空判断\n  groovy使用场景\n  groovy变量\n  groovy变量和数据类型加强\n  groovy基本概念\n  groovy学习\n  groovy数据类型\n  如何在groovy中获取以另一个变量命名的变量的值\n  "});index.add({'id':178,'href':'/life/docs/javadir/tooldoc/','title':"Java公共库文档总结 ",'section':" Java技术栈",'content':"目录 #   Apache Commons 工具类介绍及简单使用 org.apache.commons.io.FilenameUtils 操作 dom4j 处理 xml Guava 基于java1.6的类库集合的扩展项目 常用 Console 调试命令 jsoup学习文档 spring工具 spring常用的工具类  "});index.add({'id':179,'href':'/life/docs/databases/mysql_163%E8%AF%BE%E5%A0%82/%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%BE%E5%A0%82mysql_chapter1/','title':"MySQL数据库基础",'section':"网易云课堂MySQL微专业学习笔记",'content':"MySQL数据库基础 #  1.1-认识MySQL #  什么是数据库 #   计算机处理和存储的一切信息都是数据。 计算机系统中一种用于存取数据的程序。 一种：  计算机系统中有很多种能够存取数据的程序 它们各有特征和长处，有自己的适用范围。   存取：  能够保存数据避免丢失。 能够按照需求找到符合条件的数据。    为什么要使用数据库 #  数据库帮助我们解决一下数据存取难题：\n 较大数据量 网络控制 并发访问 高性能要求 事务控制 持久化和数据安全 查询数据需求逻辑复杂  数据库分类 #    关系型数据库\n MySQL Oracle SQL Server PostgreSQL    非关系型数据库\n hadoop：存放大数据 mongoDB： 文档型数据库 redis：键值型数据库 Cassandra：分布式数据库    最显著的区别：是否使用结构化查询语句（SQL）\n为什么学习MySQL #  MySQL：The world\u0026rsquo;s most popular open source database\n  最流行\n  开源\n  并不是最先进\n  前三强中唯一的开源数据库。\n  在互联网企业中占据绝对主流地位。\n  基于GPL协议开放源代码\n  社区版完全免费\n  代码允许自由的进行修改\n  易于学习：\n MySQL具备关系型数据库核心功能但是特性并不繁多。 架构设计上趋于精简。 非常适合新手学习关系型数据库，入门后可向其他数据库发展。    谁需要学习MySQL #   应用开发者 DBA  学习目标 - 应用开发者 #  有助于利用MySQL开发出性能优异的应用程序\n学习目标 - DBA #  为企业提供可靠的数据库技术保障\n1.2-轻松安装MySQL #  轻松部署MySQL #   Windows下安装MySQL  图形化工具安装， MySQL Installer   Linux（Ubuntu）下安装MySQL  包管理安装，apt-get    Windows安装时在安装中间starting server时报错解决办法是手动进入服务管理把MySQL服务的登录方式改为用本地账户且允许与桌面交互\n在Ubuntu下可以用apt-cache search mysql-server查看可用的软件包\n使用sudo apt-get install mysql-server-5.6安装MySQL5.6\n启动与停止MySQL服务：\n# 启动 sudo /etc/init.d/mysql start # 或者 sudo service mysql start # 停止 sudo /etc/init.d/mysql stop # 或者 sudo service mysql stop # 重启 sudo service mysql restart # 查看状态 sudo /etc/init.d/mysql status 1.3-MySQL数据库连接 #  工作中常用到的三种连接方式 #   Java App + JDBC client（其他语言也有，比如Python的MySQLdb） MySQL client \u0026ldquo;MySQL\u0026rdquo; utility  使用应用程序连接MySQL #   应用程序使用驱动（connector/driver）客户端连接MySQL MySQL驱动程序涵盖各种主流语言  使用命令行连接MySQL #   安装MySQL客户端软件包 设置环境变量（Linux）  如何安装MySQL-client #   从软件源安装sudo apt-get install mysql-client  验证MySQL的安装 #  mysql -V\n命令行连接MySQL的两种方式 #   Socket连接（本地连接） TCP/IP连接（远程连接）  使用Socket连接 #  # 需要指定socket文件和用户名、密码 mysql -S/tmp/mysql.sock -uroot -p 远程连接 #  # 需要指定IP和端口 mysql -h127.0.0.1 -P3306 -uroot -p 本地连接VS远程连接 #   本地连接只能在MySQL服务器上创建，常用作为MySQL状态检查，或程序和MySQL部署在一台机器上。 远程连接在MySQL服务器内外都能生效，适合应用服务器和MySQL部署在不同机器上的场景。  在Windows下用命令行连接MySQL #  mysql -hlocalhost -P3306 -uroot -p 连接进入之后可以做什么 #  # 数据库状态 status; # 展示当前连接 show processlist; 使用命令行连接MySQL的注意事项 #   socket一般存储路径为：/tmp/mysql.sock  # 如果找不到文件可以通过tcp连接进来然后通过如下命令查找 show global variables like \u0026#39;socket\u0026#39;;  socket文件的权限必须是777 不要将密码直接输入在命令行里，存在安全风险！  命令行连接MySQL的特点 #   MySQL命令行里有丰富的扩展参数 DBA运维管理工具大多使用命令行方式 多台机器可以同时操作，对于DBA来说非常有效率  使用图形客户端连接MySQL #   常用的图形客户端工具  Navicat MySQLWorkBench    图形GUI工具的优势 #   操作简单易于上手 支持图形化的导入、导出 可视化界面输出，输出可视化  总结 #   应用程序需要使用API接口连接MySQL 开发工程师可以使用图形工具连接MySQL 命令行客户端才是DBA的最爱  1.4-SQL语言入门 #  关系型数据库 #   数据存放在表中 表的每一行被称为记录 表中所有记录都有相同的字段（列）  SQL是什么 #   Structured Query Language 是一种特殊目的的编程语言，用于关系型数据库中的标准数据存取操作 与数据库进行沟通的钥匙  SQL语言与数据库 #   用SQL创建表，定义表中的字段 用SQL向表中增加，删除，修改记录 用SQL从表中查询到想要的记录 用SQL操作数据库的一切  SQL语句的分类 #     SQL语句的分类 大致用途     DDL(Data Definition Language) 创建表，删除表，修改表……   DML(Data Manipulation Language) 向表中插入记录，修改或者删除表中的记录……   select 根据条件从表中查询出想要得到的记录   DCL(Data Control Language) 控制数据库的访问权限等设置   TCL(Transaction Control Language) 控制事务进展     DDL  CREATE TABLE DROP TABLE ALTER TABLE   DML  SELECT FROM TABLE INSERT INTO TABLE UPDATE TABLE SET DELETE FROM TABLE   DCL  GRANT REVOKE   TCL  COMMIT ROLLBACK    example:\n# 查看当前有哪些数据库 show databases; # 使用名为test的数据库 use test; # 创建一张学生表 create table stu( id int(10), name varchar(20), age int(10), primary key(id)); # 每一张表都需要包含一个主键，主键唯一标识一条记录，唯一的字段，不可重复不能为空，通过`primary key`关键字来定义。 # 查看创建好的表 show create table stu; # 新加一个字段 alter table stu add column gender varchar(20); # 修改一个字段 alter table stu modify column gender varchar(40); # 删除一个字段 alter table stu drop column gender; # 删除表 drop table stu; # 查看当前数据库中的表 show tables; # 向表中插入数据 insert into stu(id,name,age) values(1,\u0026#39;pw\u0026#39;,28); # 插入全部字段时可以只写表名 insert into stu values(2,\u0026#39;nss\u0026#39;,29); # 查看刚才添加的数据,\u0026#34;*\u0026#34;代表查询全部字段 select * from stu; # 如果只想查询两个字段，则只写要查询的字段名 select name, age from stu; # 也可以根据某个条件进行查询，比如只查询id为1的记录 select name age from stu where id=1; # 更新语句 update stu set age=29 where id=1; # 删除表中的数据 delete from stu where id=1; 1.5-认识DBA #  什么是DBA #  DBA是数据库管理员，就像是足球队的守门员，是业务最后一道屏障，是业务稳定运行的基石，可以提供更畅快的用户体验\n为什么需要DBA #   小公司  没有专职DBA 但肯定有懂数据库的人   大公司  专职DBA 数据存储技术专家    互联网业务有以下严格要求：\n 高性能（数据库是重要的一环） 高可用（需要业务不中断的运行） 可扩展（支撑海量数据和业务，数据库拓展） 安全性（核心业务数据敏感）  没有DBA，就没有稳定的数据库，请求变慢，数据丢失，安全问题，用户投诉，无穷无尽\nDBA要做哪些工作 #   基础运维工作  安装部署 监控 故障处理   安全运维工作  数据备份与恢复 安全访问、安全漏洞 审计   性能调优  数据库优化 容量评估、软硬件升级   开发支持工作  存储方案制定 数据库设计 数据库变更、SQL Review   流程与培训  数据库开发规范 运维流程标准化 业务培训    DBA需要哪些技能 #   专业技能  数据库原理 Linux与Shell 计算机体系结构 网络原理 数据库系统与操作 服务器硬件 业务架构设计   软技能  责任心、执行力 坚韧、抗压 学习与沟通能力 正直、诚信 耐心，注重细节 分析能力 团队协作    DBA如何发展 #   小公司or大公司 发展通道：  DBA -\u0026gt; 业务架构师 DBA -\u0026gt; 运维专家 DBA -\u0026gt; 数据库研发    小结 #   认识DBA 管理好数据库 DBA工作很重要 专业技能与软技能并重 不错的发展前景 互联网公司很缺优秀的DBA  "});index.add({'id':180,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/talk_theme/girl/seiffjx8c7/','title':"和女孩聊天话题",'section':"聊天话题",'content':"认知聊天基础 #   高情商的聊天，并不一定要学会固定的话术，学会揣摩对方的情绪，避免话术的客套，让双方都能发自内心的感受到舒服，这才是真正的\n  聊天前做好准备，要了解你的聊天对象喜欢什么，在意什么，忌讳什么；赞美，每个人都喜欢得到对方的认同，而赞美是最好的认同方式；找对方感兴趣的话题；倾听；表示交谈愉快。\n  社交方式有各种各样，最重要的是底层逻辑。聊天技巧很多,但是主要的核心，技巧、话术、都是辅助，核心是——让和你聊天的人感觉到舒服。聊天技巧包括情商，完全是可以通过后天提升的，无他为手熟尔，多聊多反思，终会有所收获。\n  1、聊天前做好准备  首先，你要了解你的聊天对象喜欢什么，在意什么，忌讳什么，这样才不会在聊天中出现尴尬。想要了解聊天对象的信息，可以问问他（她）周围要好的朋友，亲戚等。\n 2、赞美  每个人都喜欢得到对方的认同，而赞美是最好的认同方式。比如，他穿了一件很帅气的T恤，你可以说“哇，不知道是你衬托了这件衣服，还是衣服衬托了你”。\n 3、找对方感兴趣的话题  之前的准备，现在就有所大用了，你应该专找对方喜欢的话题来谈论，这样可以大大的提高对方对你的好感。\n 4、倾听  当看到对方说的滔滔不绝的时候，千万不要打断他，他正处于兴奋中，倾听也是一种很好的得到他人好感的方式。\n 5、表示交谈愉快  在聊天快结束时，不得不加一句“今天的谈话，我感到很愉快”\n一级话题 #  适用阶段：初始期（相识0~2周）\n  愉悦度：★★★☆☆\n  门槛度：☆☆☆☆☆\n  要点：先讲自己，再问对方\n这一阶段，聊天的核心目的不是拉进亲密度\n而在于建立基本好感➕消除女生对我们的防卫心态\n多数人对初次交流的目的是极度模糊的——没有想清楚我要在第一次聊天时达到什么目的\n因而容易进退失据\n不是放不开手脚，就是过分热络——共同的结局是尴尬收场、难有下文\n如果在第一阶段就冒冒失失地去聊有门槛度的话题\n大部分女生都不愿接茬\n该阶段，应当从如下话题入手\n 1，你好，我是xxx的xxx  “我是xxx”不足以给对方留下印象\n“我是xxx的xxx”属于异化表达，会引起对方的好奇心\n当然了，两个xxx绝对不是人名哈\n是方式／状态＋人名\n举例\n你好，我是那天被迫相亲但吃了不少还认识了你的xxx\n你好，我是那天说要加你结果真加了你的xxx\n你好，我是练习时长两年半的个人练习生蔡徐坤（狗头.jgp）\n诸如此类，灵活运用～\n 2，不要问对方“在干嘛”  要先主动分享当下状态，再去询问她的状态\n例如“我刚吃完饭 / 刚结束手头的工作，你呢？”\nps：很多学员在咨询中问到“为什么我要先分享我的状态”\n这里统一解答一下：\n不分享自身状态的情况下，直接询问对方的状态\n这样的行事态度，会显得我们很有窥探欲\n尽管男生们常常是无心之失——压根没意识到这回事\n但无心又如何呀？就算是是无心，女生也照样能感觉得到你的窥探欲\n在交往初期——也就是双方还不熟的阶段\n一旦给人留下窥探欲很旺、不怎么交代自己情况却老爱问三问四的印象\n是断然不会被纳入考虑范围的——连做备胎的资格都没有，就问你，绝不绝？\n接着继续⬇️\n 3，对方分享完她的状态后，不要因为急着接话去做评价  比如女生说“我正在吃饭呢~”\n大量男学员立马接一句“这么晚才吃饭啊！”\nnonono～\n男生思维下这是一种关心\n女生视角下这简直就聊不下去\n为什么呢？因为你已经对她做出了评价\n一来女生们很反感『刚认识的男生』评价她的生活\n起初她们接到评价时，只会觉得隐隐约约不舒服\n一旦次数多了，她们的内心活动直接就是——\n“大哥，你谁啊？对我说三道四？”\n二来是，既然你已经做出了评价\n那她下一句只能接受或拒绝评价\n而不管她的回复是“是啊/ 还好吧/ 不会吧/ 没有很晚啊”（接受or拒绝）\n你都会发现——我好像没话回了\n于是聊天开始一路跑尬\n所以，正确的做法是反客为主\n女生的回复涉及什么，你就扒拉什么\n她说自己还没吃饭 / 正准备吃饭 / 在吃饭 / 吃完饭\n那么我们就回复饮食相关话题，比如\n她：“我刚吃完午饭~”\n你：“我还没点餐，有没有什么推荐？”\n有的男生可能会好奇\n老师，我为什么不直接问她“你中午吃什么”呢？\n原因很简单——因为这会暴露我们的窥探欲和目的性\n属于下策\n而让她给你推荐菜色\n一来你能慢慢摸清她平时爱吃什么\n二来她本人也不会因为被问及隐私而感到尴尬或不快\n一举两得\n 4只是让你问菜，不是让你真的和她聊菜  不得不说\n很多男女学员一到聊天框前，脑子就不中用了\n整场聊天都像是在找浮木\n一旦找到一根浮木就死死抱住，连换一根都不敢\n而健康的聊天应该像你和你朋友那样\n从单位领导聊到996福报\n再聊到房价聊到韭菜最后聊到活什么活啊死了算了\n你看，是发散式的，是谈天说地的\n所以规范又高效的展开是这样的\n你：“我常吃xxx和xxxx，看来今天中午要改改口味了~”\n她：【哭笑】哈哈哈，偶尔换换口味也不错嘛~\n你：确实啊，我在大学期间变得很爱吃辣，偶尔换换口味能打开新世界的\n表达赞成＋分享自己的口味变迁\n点到为止，不要变成倾诉\n毕竟这一阶段，人家没打算倾听你（无兴趣➕无精力）\n不点到为止，而是大讲特讲，其实是暴露自己情商低\n接下来女生要么也分享自己的口味变迁史，要么问为什么\n如果是前者，你可以问一些小问题\n比如，“我是接触了四川火锅后才爱上吃辣的，你的口味转折点是哪一道菜？”\n如果是后者，那就要简略分享自己的口味变迁史，末了再加一个很空的观点\n比如\n“小时候是甜食爱好者，后来上了大学，室友都爱吃辣，大家常常一同吃火锅，慢慢地我就爱上火锅了，\n环境很大程度上会改变一个人\n会聊的女孩开始能接话＆反向分享自己\n而不会聊的女生，即使搭不上话\n也会觉得你蛮有内涵，不会很干、很空\nps：基础教学完毕，下面直接扔备选话题\n备选话题本质都是高安全度的引子\n核心是用引子去发散式聊\n 5 近期的天气  天气(喜欢or讨厌)\n→天气带来的不便/感受\n→去年这种天气下我在干什么等等等等\n 6 近期的时事热点  刚刚看到推送，说xxx（附截图）\n→表达浅层看法（不评价当事双方，仅评价事件本身）\n→你怎么看？\n 7 近期身边的偶然性事件  遇到狗狗/看到某某路段发生xxx事件等等\n 8 近期工作强度  有利于给她开个窗吐槽自己生活工作\n 9 实时社交动态分享  正和朋友吃饭/正在和朋友玩xxx/正在\u0026hellip;\u0026hellip;\n 10 爱好共享  倾听她＆让她了解你\n 11 生活习惯共享  不要挑太普通的习惯来共享，否则对方会觉得这很无聊\n找点和别人不一样的习惯去同她分享\n备选话题的本质是高安全度的引子\n优质交流的核心\n是利用合适的引子去发散式聊天\n另，初期忌查户口/问个不停却不分享自己\n为什么查户口式聊天会被女生们口诛笔伐？\n根源在于，查户口之前没有交户口\n交户口是个简单粗暴的说法\n往细了讲，就是给出自己的隐私，再去获取对方的隐私\n这一行为的作用是抵消女方在隐私被探取时的不安全感\n同时也能让女方感觉到被尊重\n运用到具体聊天当中，就是先说自己，再问对方\n二级话题 #  适用阶段：关键期（相识1~2个月）\n愉悦度：★★★★☆\n门槛度：★★☆☆☆\n操作要点：高低频交错、同步情绪\n在二阶段，聊天的目的不再是消除防卫\n而是拉近距离+自我展示\n以拉近距离为目的，话题选择面非常广\n主要集中在回忆共享＆观点交流二个大面\n以自我展示为目的时，不能单独摘话题\n打个比方\n没头没尾的发自家五菱宏光的方向盘给她，这就是不对的\n这会吸引到嫌富爱贫的女孩（可是世界上没有这样的女孩啊hhh\n极端点说\n炫得过于直接，哪怕经济实力碾压对方，终究还是落了下乘\n直接展示经济实力，你喜欢的女孩会有不适感\n所以自我展示，要结合话题来做（下面会举例）\n话不多说，直接给话题！\n 话题1，童年  非常重要，必须要聊\n一旦聊及童年，女生给出的信息都非常重要（可以知悉她的亲密模式、长期心理状态）\n但童年作为一个信息量极大的内容\n不宜直接去聊\n如果你直接问她：\n“那个，你童年过得咋样啊”\n人家就这表情\n正确的做法是自己撬开一个口子\n这种零食我小时候常吃”\n“对，记得小时候好像就有看过”\n“你这样一说我才想起来，我小时候老爸还经常说我xxx”\n再来就是，要选择最有可能产生共鸣的、相对愉悦的话题去聊\n例如小学放学后的回家路上\n童年干过的糗事(偷用爸爸妈妈东西等等\n回外婆家跟表兄弟们玩耍的快乐等等，都是合适的话题\n另:在她打字的时候，不要急着接话\n只要足够沉默，对方都会不自觉地多说一些\n且女生一旦开始大段打字叙事，就会很烦对面频频接话，这点切记\n 话题2,学生时代  同样要聊，但不宜聊多\n因为学生时代最好放在暧昧期升温用\n放在这里属于砍柴用牛刀\n所以最好是“随便提一嘴”\n除非女生自己聊嗨起来，否则不要在这个阶段刻意做引导\n 短期目标  注意，是短期目标，不是梦想／理想\n考证、考级、考驾照、瘦八斤等等，这些就算作短期目标\n讨论短期目标的好处有两个\n一是方便观察对方的近期状态 有目标意味着近期会更忙一些，对方的上进心也更好一些\n二是培养衍生话题\n自我剖白会为她带来一定的愉悦感\n可以问她为什么会有这个目标，在她向你阐述原因时，你就提供了一定的情绪价值;\n也可以关心她的目标进度，加重自己在她生活中的参与感;\n如果你本身已经达成了该目标，还可以给她提供一定的帮助（实质价值）\n 双方爱好  聊到爱好时，无需因为两个人爱好不一致而害怕\n事实上，哪怕二人爱好完全不相同也不打紧\n爱好方面，只要不涉及观念冲突就ok\n打个比方，一位热爱赌博，另一位喜欢攒钱，那么这两人的观念冲突就很大\n至于一位喜欢读书、宅家，另一位热爱户外运动这种情况，初期反而更容易互相吸引到彼此\n交流爱好好处有二\n一是明确对方自我取悦的方式\n二是借爱好以言明自身之性情\n尽量选择爱好中比较小众的一项作为展示 不宜言之过甚（对方一般不会对你的爱好有太大兴趣） 如果没有小众爱好，就选择利他性较高的一样活动充作爱好（如爱做家务、爱读书、爱攒钱等等\n如若没有爱好，建议先培养爱好。\n另，如果爱好是健身，不要一言不合发肌肉照\n年纪小的女孩会被吓到\n青涩的女生对于男性性张力，有害怕➕抵触这两层情绪\n对她们来讲，肌肉带来的「攻击力印象」＞魅力\n25+的女生：可能会对你的好身材产生一点想法\n但更多的女生，还是会不由自主地觉得“这男好像有点油腻？”\n收集话题1 #    聊热剧，比如说最近热映的电影，热播的网剧，女生都是喜欢追剧的（当然也不能一概而论，但大概率是这样的哈），比如说前一段很火的《庆余年》。\n  聊热点问题，比如说最近的热点资讯或者大家都在关注的东西。这样能保证最起码你们能有的聊不至于冷场哈，像《奇葩说》或者《吐槽大会》这种话题性的节目就是不错的选择。\n  聊宠物，是不是经常会在校园里看到有女孩子给流浪狗或者流浪猫喂东西，所以说女生还是比较喜欢这些小萌物的。而且你如果和女生聊宠物的话，会给人一种比较有爱心的感觉。\n  聊爱好，这里不是让你聊自己的爱好哈，当然如果你和女生有爱好的交集是最好的。切忌巴拉巴拉说一堆自己喜欢但是女生无感的话题。如果不知道女孩子爱好是啥，去看看朋友圈，问问她的同学最好是闺蜜，做好功课啊喂……\n  聊美食，路边摊烧烤啥的还是和你的兄弟盟聊吧，女生还是比较喜欢甜点、奶茶之类的小零食。附近你去过什么比较好的奶茶店，蛋糕店等等，可以和她分享一下。\n  不聊毫无连续性的话题 #  「你吃饭了没？」，回答肯定就是吃了或者没吃啊……\n「你多大了？」，回答肯定是永远十八岁啊，而且你知道岁数也没用啊……\n「有男朋友吗？」，咋地还想捷足先登吗……\n收集话题2 #   1.聊旅行  如何聊？你可以先讲一个你之前旅游时发生的故事，比如发生过的有意思的事或者一些经验。比如 你可以说之前你去旅游，路过一段盘山公路，司机是个老司机，开车技术一流，但是把全车人都 搞吐了，你是不知道，那车上的味道真是\u0026hellip;（你先开口分享，打开自己的心扉）\n然后问她最近几年去过认为最美的地方，让她主动和你分享。或者看她朋友圈分享的去过的地方然 后找她感兴趣的话题聊。这个时候就要打开对方的心扉了，让对方讲自己的经历，当她愿意说的越 多的时候，你的成功率越高。\n  聊吃喝玩乐    电影，美食，音乐，或者参加过的一些活动。同理，先聊自己，再引导对方聊她自己。如果对方放 不开或者不知道聊什么，你一定要主动去引导，这就需要你提前通过她在朋友圈，微博等社交网络 中发现她的兴趣所在，然后找她感兴趣的话题聊\n 3 聊你的朋友，她的朋友  同理，你自己先聊一个关于你的朋友有趣的事，比如你的一个朋友曾经在学校全体师生会议时，抢 过了校长的话筒，当着全校人的面表白\u0026hellip;.. 然后引导她多分享，多说话。\n  聊你至今为止，做过最疯狂，最炫酷或者最有趣的事    比如你跳过伞，海里潜过水，蹦极，见过你的偶像，单人旅行过等，然后引导她分享自己的故事。\n  聊彼此癖好，怪癖    如果前面的聊天铺垫的不错，成功吸引了女生和你聊天的兴趣，那么你才能聊这个话题 因为这个话题比较隐私，如果女生愿意和你分享，可以瞬间拉近关系\n  问女生的看法和建议    为什么要问女生的看法？因为这样会让她觉得自己很特别，有价值\n比如男女感情问题，你有个朋友和前女友还保持联系，问她怎么看，通过这个问题她的回答，可以看她的三观是否和你相符\n 7.聊她的激情/人生  这个问题主要是要了解什么事清让她有动力，她的价值观，人生，事业，兴趣。如果有共同的价值观，你俩会瞬间产生心的共鸣。\n最关键的是这种话题她可能更想说，会滔滔不绝，特别是对内向的女生。\n参考\n"});index.add({'id':181,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/esxjjecmn5/','title':"PDCA循环工作法",'section':"自信",'content':"一、PDCA循环理念 #  PDCA的4个阶段： ①P计划：设定目标、提出课题、制定KPI指标、找出解决方法； ②D实施：行动措施、制定KDI指标、落实为具体行动； ③C检查：检验KGI指标、检查KDI指标、检查KPI指标、找出成功和失败； ④A调整：找出调整方案、为下一个循环做准备。\n二、计划的8个步骤 #  ①定量化目标管理； ②找出目标与现状差距； ③制定课题，提出解决方案； ④课题排序，锁定三个主要课题； ⑤课题的KPI指标化； ⑥制定解决方案，达成KPI指标； ⑦将解决方案按优先顺序排序； ⑧将计划可视化。\n三、执行的5个步骤 #  ①将解决方案转换为行动措施； ②将行动措施排除优先顺序，确定重点； ③量化行动措施KDI； ④将行动措施落实为“TODO”，待办任务； ⑤逐步推进具体任务；\n四、反思的5个步骤 #  ①确定KGI达成率； ②确定KPI达成率； ③确定KDI达成率； ④查明失败原因； ⑤分析成功经验；\n五、调整的3个步骤 #  ①根据验证结果提出解决方案；\n②将调整方案排除优先顺序；\n③连接下一轮PDCA循环。\n"});index.add({'id':182,'href':'/life/docs/javadir/middleware/','title':"中间件 ",'section':" Java技术栈",'content':"目录 #   Redis 学习与使用 nginx 学习与使用  "});index.add({'id':183,'href':'/life/docs/databases/mysql_163%E8%AF%BE%E5%A0%82/%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%BE%E5%A0%82mysql_chapter2/','title':"MySQL数据库对象与应用",'section':"网易云课堂MySQL微专业学习笔记",'content':"MySQL数据库对象与应用 #  2.1-MySQL数据类型 #  Number不止一种 #   整形 浮点型  整形 #   INT SMALLINT MEDIUMINT BIGINT     type Storage Minumun Value Maximum Value      (Bytes) (Signed/Unsigned) (Signed/Unsigned)   TINYINT 1 -128 127     0 255   SMALLINT 2 -32768 32767     0 65535   MEDIUMINT 3 -8388608 8388607     0 16777215   INT 4 -2147483648 2147483647     0 4294967295   BIGINT 8 -9223372036854775808 9223372036854775807     0 18446744073709551615    老生常谈的问题 #  int(11) VS int(21) 存储空间，还是存储范围有区别？\n答案是：两者完全一样，只是在显示的时候补全0的位数不一样。\n可以通过下面的例子来验证：\ncreate table t(a int(11) zerofill, b int(21) zerofill); insert into t values (1, 1); select * from t; MySQL默认是不带0补全的。\n只是在一些特殊情况下两者显示有区别，其本质完全一样。\n浮点型 #   FLOAT(M, D) DOUBLE(M, D)     属性 存储空间 精度 精确性     Float 4 bytes 单精度 非精确   Double 8 bytes 双精度 比Float精度高    精度丢失问题 #   精度丢失  一个例子：\ncreate table t(a int(11), b float(7, 4)); insert into t values (2, 123.12345); select * from t; 定点数-更精确的数字类型 #   DECIMAL  高精度的数据类型，常用来存储交易相关的数据 DECIMAL(M,N).M代表总精度，N代表小数点右侧的位数（标度） 1 \u0026lt; M \u0026lt; 254, 0 \u0026lt; N \u0026lt; 60; 存储空间变长    性别、省份信息 #  一般使用tinyint、char(1)、enum类型。\n经验之谈 #   存储性别、省份、类型等分类信息时选择TINYINT或者ENUM BIGINT存储空间更大，INT和BIGINT之间通常选择BIGINT 交易等高精度数据选择使用DECIMAL  存储用户名的属性 #   CHAR VARCHAR TEXT  CAHR与VARCHAR #   CHAR和VARCHAR存储的单位都是字符 CHAR存储定长，容易造成空间的浪费 VARCHAR存储变长，节省存储空间  字符与字节的区别 #     编码\\输入字符串 网易 netease     gbk(双字节) varchar(2)/4 bytes varchar(7)/7 bytes   utf8(三字节) varchar(2)/6 bytes varchar(7)/7 bytes   utf8mb4(四字节) varchar(2) ? varchar(7)/7 bytes    对于utf8mb4号称占用四字节但是并不绝对。如果在utf8可以覆盖到的范围则仍然占用3字节。\nutf8mb4最有优势的应用场景是用于存储emoji表情\nemoji表情 #   MySQL版本 \u0026gt; 5.5.3 JDBC驱动版本 \u0026gt; 5.1.13 库和表的编码设为utf8mb4  TEXT与CHAR和VARCHAR的区别 #   CHAR和VARCHAR存储单位为字符 TEXT存储单位为字节，总大小为65535字节，约为64KB CHAR数据类型最大为255字符 VARCHAR数据类型为变长存储，可以超过255个字符 TEXT在MySQL内部大多存储格式为溢出页，效率不如CHAR  一个例子：\ncreate table t (a char(256)); create table t (a varchar(256)); 存储头像 #   BLOB BINARY  性能太差，不推荐\n经验之谈 #   CHAR与VARCHAR定义的长度是字符长度不是字节长度 存储字符串推荐使用VARCHAR(N),N尽量小 虽然数据库可以存储二进制数据，但是性能低下，不要使用数据库存储文件音频等二进制数据  存储生日信息 #   DATE TIME DATETIME TIMESTAMP BIGINT  时间类型的区别在哪里 #    存储空间上的区别\n DATE三字节，如：2015-05-01 TIME三字节，如：11:12:00 TIMESTAMP，如：2015-05-01 11::12:00 DATETIME八字节，如：2015-05-01 11::12:00    存储精度的区别\n DATE精确到年月日 TIME精确到小时分钟和秒 TIMESTAMP、DATETIME都包含上述两者    TIMESTAMP VS DATETIME #   存储范围的区别  TIMESTAMP存储范围：1970-01-01 00::00:01 to 2038-01-19 03:14:07 DATETIME的存储范围：1000-01-01 00:00:00 to 9999-12-31 23:59:59    MySQL在5.6.4版本之后，TimeStamp和DateTime支持到微妙\n 字段类型与市区的关联关系  TIMESTAMP会根据系统时区进行转换，DATETIME则不会    字段类型和时区的关系 #   国际化的系统  一个例子：\ncreate table test (a datetime, b timestamp); select now(); insert into test values (now(), now()); select * from test; set time_zone = \u0026#39;+00:00\u0026#39;; select * from test; BIGINT如何存储时间类型 #   应用程序将时间转换为数字类型  2.2-MySQL数据对象 #  MySQL常见的数据对象有哪些 #   DataBase/Schema Table Index View/Trigger/Function/Procedure  库、表、行层级关系 #   一个DataBase对应一个Schema 一个Schema包含一个或多个表 一个表里面包含一个或多个字段 一个表里包含一条或多条记录 一个表包含一个或多个索引  多DataBase用途 #   业务隔离 资源隔离  表上有哪些常用的数据对象 #   索引 约束 视图、触发器、函数、存储过程  什么是数据库索引 #   读书的时候如何快速定位某一章节  查找书籍目录 在自己喜欢的章节加书签，直接定位   索引就是数据库中的数据的目录（索引和数据是分开存储的）  索引和数据是两个对象 索引主要是用来提高数据库的查询效率 数据库中数据变更同样需要同步索引数据的变更    如何创建索引（一） #  CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name [index_type] ON tbl_name (index_col_name,...) [index_option] [algorithm_option | lock_option] ... index_col_name: col_name [(length)] [ASC | DESC] index_type: USING {BTREE | HASH} 如何创建索引（二） #  ALTER [IGNORE] TABLE tbl_name [alter_specification [, alter_specification] ...] [partition_options] alter_specification: table_options | ADD [COLUMN] col_name column_definition [FIRST | AFTER col_name] ADD [COLUMN] (col_name column_definition,...) ADD {INDEX|KEY} [index_name] [index_type] (index_col_name,...) [index_option] ... | ADD [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name,...) [index_option] ... | ADD [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY] [index_name] 约束 #   生活中的约束有哪些  每个人的指纹信息必须唯一 每个人的身份证要求唯一 网上购物需要先登录才能下单   唯一约束  对一张表的某个字段或者某几个字段设置唯一键约束，保证在这个表里对应的数据必须唯一，如：用户ID、手机号、身份证等。    创建唯一约束 #   唯一约束是一种特殊的索引 唯一约束可以是一个或者多个字段 唯一约束可以在创建表的时候建好，也可以后面再补上 主键也是一种唯一约束  唯一约束 #  以如下这张表为例\nCREATE TABLE `order` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, `orderid` int(10) unsigned NOT NULL, `bookid` int(10) unsigned NOT NULL DEFAULT \u0026#39;0\u0026#39;, `userid` int(10) unsigned NOT NULL DEFAULT \u0026#39;0\u0026#39;, `number` tinyint(3) unsigned NOT NULL DEFAULT \u0026#39;0\u0026#39;, `address` varchar(128) NOT NULL DEFAULT \u0026#39;\u0026#39;, `postcode` varchar(128) NOT NULL DEFAULT \u0026#39;\u0026#39;, `orderdate` datetime NOT NULL DEFAULT \u0026#39;0000-00-00 00:00:00\u0026#39;, `status` tinyint(3) unsigned zerofill DEFAULT \u0026#39;000\u0026#39;, PRIMARY KEY (`id`), UNIQUE KEY `idx_orderid` (`orderid`), UNIQUE KEY `idx_uid_orderid` (`userid`, `orderid`), KEY `bookid` (`bookid`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8  索引有哪些  主键索引 ID 单键索引 orderid 单键索引 bookid 组合索引 (userid + orderid)   唯一约束有哪些  主键约束 (ID) 单键唯一索引 (orderid) 组合唯一索引 (userid + orderid)    添加唯一约束 #   添加主键  alter table `order` add primary key (id);   添加唯一索引  alter table `order` add unique key idx_uk_orderid (orderid);    外键约束 #   外键指两张表的数据通过某种条件关联起来  创建外键约束 #   将用户表和订单表通过外键关联起来  alter table `order` add CONSTRAINT constraint_uid FOREIGN KEY (userid) REFERENCES user(userid);   使用外键的注意事项  必须是INNODB表，Myisam和其他引擎不支持外键 相互约束的字段类型必须要求一样 主表的约束字段要求有索引 约束名称必须要唯一，即使不在一张表上    View #   产品需求  假如有其他部门的同事想查询我们数据库里的数据，但是我们并不想暴露表结构，并且只提供给他们部分数据    View的作用 #   视图将一组查询语句构成的结果集，是一种虚拟结构，并不是实际数据 视图能简化数据库的访问，能够将多个查询语句结构化为一个虚拟结构 视图可以隐藏数据库后端表结构，提高数据库安全性 视图也是一种权限管理，只对用户提供部分数据  创建View #   创建已完成订单的视图  create view order_view as select * from `order` where status=1;    Trigger #   产品需求  随着客户个人等级的提升， 系统需要自动更新用户的积分，其中一共有两张表，分别为：用户信息表和积分表   Trigger俗称触发器，指可以在数据写入表A之前或者之后可以做一些其他动作 使用Trigger在每次更新用户表的时候出发更新积分表  除此之外还有哪些 #   Function Procedure  2.3-MySQL权限管理 #  连接MySQL的必要条件 #   网络要通畅 用户名和密码要正确 数据库需要加IP白名单 更细粒度的验证（库、表、列权限类型等等）  数据有哪些权限 #  show privileges命令可以查看全部权限\n权限粒度 #   Data Privileges  DATA: SELECT, INSERT, UPDATE, DELETE   Definition Privileges  DataBase: CREATE, ALTER, DROP Table: CREATE, ALTER, DROP VIEW/FUNCTION/TRIGGER/PROCEDURE: CREATE, ALTER, DROP   Administrator Privileges  Shutdown DataBase Replication Slave Replication Client File Privilege    MySQL赋权操作 #  GRANT priv_type [(column_list)] [, priv_type [column_list]] ... ON [object_type] priv_level TO user_specification [, user_specification] ... [REQUIRE {NONE | ssl_option [[AND] ssl_option] ...}] [WITH with_option ...] GRANT PROXY ON user_specification TO user_specification [, user_specification] ... [WITH GRANT OPTION] 如何新建一个用户并赋权 #   使用MySQL自带的命令  CREATE USER 'netease'@'localhost' IDENTIFIED BY 'netease163'; GRANT SELECT ON *.* TO 'netease'@'localhost' WITH GRANT OPTION;    其他方法 #   更改数据库记录  首先向User表里面插入一条记录，根据自己的需要选择是否向db和table_pirv表插入记录 执行flush privileges命令，让权限信息生效    更简单的办法 #   GRANT语句会判断是否存在该用户，如果不存在则新建  GRANT SELECT ON *.* TO 'NETEASE'@'localhost' IDENTIFIED BY 'netease163' WITH GRANT OPTION;    查看用户的权限信息 #   查看当前用户的权限  show grants;   查看其它用户的权限  show grants for netease@'localhost';    如何更改用户的权限 #   回收不需要的权限  revoke select on *.* from netease@'localhost';   重新赋权  grant insert on *.* to netease@'localhost';    如何更改用户密码 #   用新密码，grant语句重新授权 更改数据库记录，Update User表的Password字段  注意：用这种办法，更改完需要flush privileges刷新权限信息，不推荐    删除用户 #  DROP USER user [, user] ... With Grant Option #   允许被授予权利的人把这个权利授予其他的人  MySQL权限信息存储结构 #   MySQL权限信息是存在数据库表中 MySQL账号对应的密码也加密存储在数据库表中 每一种权限类型在元数据里都是枚举类型，表明是否有该权限  有哪些权限相关的表 #   user db table_pirv columns_pirv host  权限验证流程 #  查询时从user-\u0026gt;db-\u0026gt;table_pirv-\u0026gt;columns_pirv依次验证，如果通过则执行查询。\n小结 #   MySQL权限信息都是以数据记录的形式存储在数据库的表中。 MySQL的权限验证相比网站登录多了白名单环节，并且粒度更细，可以精确到表和字段。  MySQL权限上有哪些问题 #   使用Binary二进制安装管理用户没有设置密码 MySQL默认的test库不受权限控制，存在安全风险  mysql_secure_installation #   You can set a Password for root accounts. You can remove root accounts that are accessible from outside the localhost. You can remove anonymous-user accounts. You can remove the test database.  小结 #   权限相关的操作不要直接操作表，统一使用MySQL命令。 使用二进制安装MySQL安装后，需要重置管理用户(root)的密码。 线上数据库不要留test库  实践课：数据库对象 #  何为表结构设计 #   表结构设计需要在正式进行开发之前完成 根据产品需求将复杂的业务模型抽象出来  设计表的时候需要注意哪些 #   理解各个表的依赖关系 理解各个表的功能特点  字段之间的约束、索引 字段类型、字段长度    收集表属性 #   昵称 生日 性别 手机号码 住宅号码 邮编 住宅地址 注册地址 登录IP 上一次登录时间 邮件地址  理解表的功能特点——数据用途 #  create table tb_account( account_id int not null auto_increment primary key, nick_name varchar(20), true_name varchar(20), sex char(1), mail_address varchar(50), phone1 varchar(20) not null, phone2 varchar(20), password varchar(30) not null, create_time datetime, account_state tinyint, last_login_time datetime, last_login_ip varchar(20) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 create table tb_goods( good_id bigint not null auto_increment primary key, goods_name varchar(100) not null, pic_url varchar(500) not null, store_quantity int not null, goods_note varchar(4096), producer varchar(500), category_id int not null ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 create table tb_goods_category( category_id int not null auto_increment primary key, category_level smallint not null, category_name varchar(500), upper_category_id int not null ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 create table tb_order( order_id bigint not null auto_increment primary key, account_id int not null, create_time datetime, order_amount decimal(12,2), order_state tinyint, update_time datetime, order_ip varchar(20), pay_method varchar(20), user_notes varchar(500) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 create table tb_order_item( order_item_id bigint not null auto_increment primary key, order_id bigint not null, goods_id bigint not null, goods_quantity int not null, goods_amount decimal(12,2), uique key uk_order_goods(order_id, goods_id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 数据类型——命名规范 #   所有表名，字段名全部使用小写字母 不同业务，表名使用不同前缀区分。 生成环境表名字段名要有实际意义 单个字段尽量使用字段全名；多个字段之间用下划线分隔  字段设计规范 #   字段类型选择，尽量选择能满足应用要求的最小数据类型 尽量使用整形代替字符型。整形在字段长度、索引大小等方面开销小效率更高，如邮编字段，手机号码等 注释，每个字段必须以comment语句给出字段的作用 经常访问的大字段需要单独放到一张表中，避免降低sql效率，图片、电影等大文件数据禁止存数据库 新业务统一建议使用utf8mb4字符集  用户赋权 #   理解用户到底需要什么权限  普通用户只有数据读写权限 系统管理员具有super权限   权限粒度要做到尽可能的细  普通用户不要设置with grant option属性 权限粒度：系统层面\u0026gt;库层面\u0026gt;表层面\u0026gt;字段层面   禁止简单密码  线上密码要求随机    2.4-SQL语言进阶 #  本课程涉及建表SQL\n-- ---------------------------- -- Table structure for `play_fav` -- ---------------------------- DROP TABLE IF EXISTS `play_fav`; CREATE TABLE `play_fav` ( `userid` bigint(20) NOT NULL COMMENT \u0026#39;收藏用户id\u0026#39;, `play_id` bigint(20) NOT NULL COMMENT \u0026#39;歌单id\u0026#39;, `createtime` bigint(20) NOT NULL COMMENT \u0026#39;收藏时间\u0026#39;, `status` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;状态，是否删除\u0026#39;, PRIMARY KEY (`play_id`,`userid`), KEY `IDX_USERID` (`userid`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=\u0026#39;歌单收藏表\u0026#39;; -- ---------------------------- -- Records of play_fav -- ---------------------------- INSERT INTO play_fav VALUES (\u0026#39;2\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_fav VALUES (\u0026#39;116\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1430223383\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_fav VALUES (\u0026#39;143\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_fav VALUES (\u0026#39;165\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_fav VALUES (\u0026#39;170\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_fav VALUES (\u0026#39;185\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_fav VALUES (\u0026#39;170\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_fav VALUES (\u0026#39;170\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;); -- ---------------------------- -- Table structure for `play_list` -- ---------------------------- DROP TABLE IF EXISTS `play_list`; CREATE TABLE `play_list` ( `id` bigint(20) NOT NULL COMMENT \u0026#39;主键\u0026#39;, `play_name` varchar(255) DEFAULT NULL COMMENT \u0026#39;歌单名字\u0026#39;, `userid` bigint(20) NOT NULL COMMENT \u0026#39;歌单作者账号id\u0026#39;, `createtime` bigint(20) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;歌单创建时间\u0026#39;, `updatetime` bigint(20) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;歌单更新时间\u0026#39;, `bookedcount` bigint(20) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;歌单订阅人数\u0026#39;, `trackcount` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;歌曲的数量\u0026#39;, `status` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;状态,是否删除\u0026#39;, PRIMARY KEY (`id`), KEY `IDX_CreateTime` (`createtime`), KEY `IDX_UID_CTIME` (`userid`,`createtime`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=\u0026#39;歌单\u0026#39;; -- ---------------------------- -- Records of play_list -- ---------------------------- INSERT INTO play_list VALUES (\u0026#39;1\u0026#39;, \u0026#39;老男孩\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1430223383\u0026#39;, \u0026#39;1430223383\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_list VALUES (\u0026#39;2\u0026#39;, \u0026#39;情歌王子\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;1430223384\u0026#39;, \u0026#39;1430223384\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_list VALUES (\u0026#39;3\u0026#39;, \u0026#39;每日歌曲推荐\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;1430223385\u0026#39;, \u0026#39;1430223385\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_list VALUES (\u0026#39;4\u0026#39;, \u0026#39;山河水\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;1430223386\u0026#39;, \u0026#39;1430223386\u0026#39;, \u0026#39;5\u0026#39;, null, \u0026#39;0\u0026#39;); INSERT INTO play_list VALUES (\u0026#39;5\u0026#39;, \u0026#39;李荣浩\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1430223387\u0026#39;, \u0026#39;1430223387\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;10\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_list VALUES (\u0026#39;6\u0026#39;, \u0026#39;情深深\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;1430223388\u0026#39;, \u0026#39;1430223389\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;); -- ---------------------------- -- Table structure for `song_list` -- ---------------------------- DROP TABLE IF EXISTS `song_list`; CREATE TABLE `song_list` ( `id` bigint(20) NOT NULL COMMENT \u0026#39;主键\u0026#39;, `song_name` varchar(255) NOT NULL COMMENT \u0026#39;歌曲名\u0026#39;, `artist` varchar(255) NOT NULL COMMENT \u0026#39;艺术节\u0026#39;, `createtime` bigint(20) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;歌曲创建时间\u0026#39;, `updatetime` bigint(20) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;歌曲更新时间\u0026#39;, `album` varchar(255) DEFAULT NULL COMMENT \u0026#39;专辑\u0026#39;, `playcount` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;点播次数\u0026#39;, `status` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;状态,是否删除\u0026#39;, PRIMARY KEY (`id`), KEY `IDX_artist` (`artist`), KEY `IDX_album` (`album`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=\u0026#39;歌曲列表\u0026#39;; -- ---------------------------- -- Records of song_list -- ---------------------------- INSERT INTO song_list VALUES (\u0026#39;1\u0026#39;, \u0026#39;Good Lovin\\\u0026#39; Gone Bad\u0026#39;, \u0026#39;Bad Company\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;Straight Shooter\u0026#39;, \u0026#39;453\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO song_list VALUES (\u0026#39;2\u0026#39;, \u0026#39;Weep No More\u0026#39;, \u0026#39;Bad Company\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;Straight Shooter\u0026#39;, \u0026#39;280\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO song_list VALUES (\u0026#39;3\u0026#39;, \u0026#39;Shooting Star\u0026#39;, \u0026#39;Bad Company\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;Straight Shooter\u0026#39;, \u0026#39;530\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO song_list VALUES (\u0026#39;4\u0026#39;, \u0026#39;大象\u0026#39;, \u0026#39;李志\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1701\u0026#39;, \u0026#39;560\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO song_list VALUES (\u0026#39;5\u0026#39;, \u0026#39;定西\u0026#39;, \u0026#39;李志\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1701\u0026#39;, \u0026#39;1023\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO song_list VALUES (\u0026#39;6\u0026#39;, \u0026#39;红雪莲\u0026#39;, \u0026#39;洪启\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;红雪莲\u0026#39;, \u0026#39;220\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO song_list VALUES (\u0026#39;7\u0026#39;, \u0026#39;风柜来的人\u0026#39;, \u0026#39;李宗盛\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;作品李宗盛\u0026#39;, \u0026#39;566\u0026#39;, \u0026#39;0\u0026#39;); -- ---------------------------- -- Table structure for `stu` -- ---------------------------- DROP TABLE IF EXISTS `stu`; CREATE TABLE `stu` ( `id` int(10) NOT NULL DEFAULT \u0026#39;0\u0026#39;, `name` varchar(20) DEFAULT NULL, `age` int(10) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=latin1; -- ---------------------------- -- Records of stu -- ---------------------------- -- ---------------------------- -- Table structure for `tbl_proc_test` -- ---------------------------- DROP TABLE IF EXISTS `tbl_proc_test`; CREATE TABLE `tbl_proc_test` ( `id` int(11) NOT NULL AUTO_INCREMENT, `num` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8; -- ---------------------------- -- Records of tbl_proc_test -- ---------------------------- INSERT INTO tbl_proc_test VALUES (\u0026#39;11\u0026#39;, \u0026#39;1\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;12\u0026#39;, \u0026#39;2\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;13\u0026#39;, \u0026#39;6\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;14\u0026#39;, \u0026#39;24\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;15\u0026#39;, \u0026#39;120\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;16\u0026#39;, \u0026#39;720\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;17\u0026#39;, \u0026#39;5040\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;18\u0026#39;, \u0026#39;40320\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;19\u0026#39;, \u0026#39;362880\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;20\u0026#39;, \u0026#39;3628800\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;21\u0026#39;, \u0026#39;1\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;22\u0026#39;, \u0026#39;2\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;23\u0026#39;, \u0026#39;6\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;24\u0026#39;, \u0026#39;24\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;25\u0026#39;, \u0026#39;1\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;26\u0026#39;, \u0026#39;2\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;27\u0026#39;, \u0026#39;6\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;28\u0026#39;, \u0026#39;24\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;29\u0026#39;, \u0026#39;120\u0026#39;); -- ---------------------------- -- Table structure for `tbl_test1` -- ---------------------------- DROP TABLE IF EXISTS `tbl_test1`; CREATE TABLE `tbl_test1` ( `user` varchar(255) NOT NULL COMMENT \u0026#39;主键\u0026#39;, `key` varchar(255) NOT NULL, `value` varchar(255) NOT NULL, PRIMARY KEY (`user`,`key`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=\u0026#39;行列转换测试\u0026#39;; -- ---------------------------- -- Records of tbl_test1 -- ---------------------------- INSERT INTO tbl_test1 VALUES (\u0026#39;li\u0026#39;, \u0026#39;age\u0026#39;, \u0026#39;18\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;li\u0026#39;, \u0026#39;dep\u0026#39;, \u0026#39;2\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;li\u0026#39;, \u0026#39;sex\u0026#39;, \u0026#39;male\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;sun\u0026#39;, \u0026#39;age\u0026#39;, \u0026#39;44\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;sun\u0026#39;, \u0026#39;dep\u0026#39;, \u0026#39;3\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;sun\u0026#39;, \u0026#39;sex\u0026#39;, \u0026#39;female\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;wang\u0026#39;, \u0026#39;age\u0026#39;, \u0026#39;20\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;wang\u0026#39;, \u0026#39;dep\u0026#39;, \u0026#39;3\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;wang\u0026#39;, \u0026#39;sex\u0026#39;, \u0026#39;male\u0026#39;); -- ---------------------------- -- Procedure structure for `proc_test1` -- ---------------------------- DROP PROCEDURE IF EXISTS `proc_test1`; DELIMITER ;; CREATE DEFINER=`root` PROCEDURE `proc_test1`(IN total INT,OUT res INT) BEGIN DECLARE i INT; SET i = 1; SET res = 1; IF total \u0026lt;= 0 THEN SET total = 1; END IF; WHILE i \u0026lt;= total DO SET res = res * i; INSERT INTO tbl_proc_test(num) VALUES (res); SET i = i + 1; END WHILE; END ;; DELIMITER ; 说明 #   本课程介绍以MySQL SQL语法为基础，不同数据库SQL语法存在差异，并未完全遵照ANSI标准。 本课程结合一个实际项目（云音乐），介绍各种SQL语言在实际应用中如何实现业务功能。  SQL进阶语法——order by #  场景1：歌单按时间排序\n-- 查看全部歌单 select * from play_list; -- 按创建时间排序 select * from play_list order by createtime; -- MySQL默认升序，如果按降序排列，则使用如下语句。 select * from play_list order by createtime desc; -- 也可以按照多个字段来排序 select * from play_list order by bookedcount, trackcount; SQL进阶语法——distinct #  场景2：统计云音乐创建歌单的用户\n-- 有重复 select userid from play_list; -- 去重 select distinct userid from play_list; -- 多个字段 select distinct userid, play_name from play_list;  distinct用于返回唯一不同的值 可以返回多列的唯一组合 底层实现使用排序，如果数据量大会消耗较多的IO和CPU  SQL进阶语法——group by #  场景3-1：统计云音乐创建歌单的用户列表和每人创建歌单的数量。\n-- 每个用户歌单的最大订阅数 select userid, max(bookedcount) from play_list group by userid; -- 每个用户歌单的数量 select userid, count(*) from play_list group by userid;  group by 根据单列或多列对数据进行分组，通常结合聚合函数使用，如count(*).  SQL进阶语法——group by having #  场景3-2：统计云音乐创建歌单的用户列表和每人创建歌单的数量，并且只显示歌单数量排序大于等于2的用户\nselect userid, count(*) from play_list group by userid having count(*) \u0026gt;= 2;  having 是对结果进行过滤  SQL进阶语法-like\nselect * from play_list where play_name like \u0026#39;%男孩%\u0026#39;;    通配符 描述     % 代替一个或多个字符   _ 代替单个字符   [charlist] 中括号中的任何一个字符   [^charlist] 或者 [!charlist] 不在中括号中的任何单一字符     除了百分号在最右面的情况以外，他会对这个表中所有的记录进行一次查询匹配，而没办法使用索引，效率较低。大表中需要慎用like。可以使用全文检索的手段。  SQL进阶语法-limit, offset #  场景4：查询一个月内创建歌单（从第6行开始显示10条记录）\nselect * from play_list where (createtime between 1427791323 and 1430383307) limit 10 offset 6;  offset后的值不建议太大，需要消耗的IO较大  case when #   case when 实现类似编程语言的if else功能，可以对SQL的输出结果进行选择判断。  场景5：对于未录入歌曲的歌单(trackcount = null)，输出结果时歌曲数返回0.\nselect case when play_name, trackcount is null then 0 else trackcount end from play_list; select相关进阶语法 #  SELECT [DISTINCT] select_expr [, select_expr ...] [FROM table_references [WHERE where_condition] [GROUP BY {col_name | expr | position} [ASC | DESC], ... [WITH ROLLUP]] [HAVING where_condition] [ORDER BY {col_name | expr | position} [ASC | DESC], ...] [LIMIT { [offset, ] row_count | row_count OFFSET offset}] [FOR UPDATE | LOCK IN SHARE MODE]] 连接-Join #  连接的作用是用一个SQL语句把多个表中相互关联的数据查出来\n场景6：查询收藏“老男孩”歌单的用户列表\nselect * from play_list, play_fav where play_list.id=play_fav.play_id; select play_fav.userid from play_list, play_fav where play_list.id=play_fav.play_id and play_list.play_name=\u0026#39;老男孩\u0026#39;; -- 另一种写法 select f.userid from play_list lst join play_fav f on lst.id=f.play_id where lst.play_name = \u0026#39;老男孩\u0026#39;; 子查询 #   MySQL还有另一种写法，可以实现同样的功能。  select userid from play_fav where play_id=(select id from play_list where play_name = \u0026#39;老男孩\u0026#39;); 子查询：内层查询的结果作为外层的比较条件。一般子查询都可以转换成连接，推荐使用连接。\n 不利于MySQL的查询优化器进行优化，可能存在性能问题 连接的实现是嵌套循环，选择一个驱动表，遍历驱动表，查询内层表，依次循环。驱动表会至少查询一边，如果有索引等，内层表可以非常快，查询优化器会选择数据小的表作为驱动表。 子查询由人为规定驱动表和内层表  连接- left Join #  select lst.play_name from play_list lst left join play_fav f on lst.id = f.play_id where f.play_id is null;  LEFT JOIN从左表(play_list)返回所有的行，即使在右表中(play_fav)中没有匹配的行。 与LEFT JOIN相对应的有RIGHT JOIN关键字，会从右表那里返回所有的行，即使在左表中没有匹配的行。  场景7：查询出没有用户收藏的歌单\nSQL进阶语法-union #  场景8：老板想看创建和收藏歌单的所有用户，查询play_list和play_fav两表中所有的userid\nselect userid from play_list union select userid from play_fav; -- 默认会去重， 不想去重的话使用union all代替union。 DML进阶语法 #   多值插入： insert into table values(\u0026hellip;.),(\u0026hellip;.)  可以一次插入多行数据，减少与数据库的交互提高效率 eg： insert into A values(4, 33), (5, 33);   覆盖插入： replace into table values (\u0026hellip;.)  可以简化业务逻辑的判断   忽略插入： insert ignore into table value (\u0026hellip;.)  可以简化业务逻辑的判断   查询插入： insert into table_a select * from table_b  常用于导表操作   insert主键重复则update  INSERT INTO TABLE tbl VALUES (id, col1, col2) ON DUPLICATE KEY UPDATE col2=....; eg: insert into A values(2, 40) on duplicate key update age=40; 可以简化前端业务逻辑的判断   连表update  A表：id, age B表：id, name, age A表id与B表id关联，根据B表的age值更新A表的age。 eg: update A,B set A.age=B.age where A.id=B.id;   连表删除  A表：id, age B表：id, name, age A表id与B表id关联，根据B表的age值删除A表的数据。 eg: delete A from A,B where A.id=B.id and B.name='pw';    总结 #   select查询进阶语法  order by/distinct/group by having (聚合函数) /like (%前缀后缀)   连接语法  内连接、左连接、右连接、 Union [ALL]   DML进阶语法  insert/连表update/连表delete    2.5-内置函数 #  聚合函数 #   聚合函数面向一组数据，对数据进行聚合运算后返回单一的值。 MySQL聚合函数的基本语法：SELECT function(列) from 表 常用聚合函数：     函数 描述     AVG() 返回列的平均值   COUNT(DISTINCT) 返回列去重后的行数   COUNT() 返回列的行数   MAX() 返回列的最大值   MIN() 返回列的最小值   SUM() 返回列的总和   GROUP_CONCAT() 返回一组值的连接字符串(MySQL独有)    实例还是上节中的那些表\n场景1：查询每张专辑总的点播次数和每首歌的平均点播次数。\nselect album, sum(playcount), avg(playcount) from song_list group by album; 场景2：查询全部歌曲中的最大的播放次数和最小的播放次数。\nselect max(playcount), min(playcount) from song_list; 场景2续：查询播放次数最多的歌曲\n-- 错误查法 select song_name, max(playcount) from song_list; -- 正确查法 select song_name, playcount from song_list order by playcount desc limit 1;  select count(*) from song_list; select count(1) from song_list; select count(song_name) from song_list;  count(*)和count(1)基本一样，没有明显的性能差异。 count(*)和count(song_name)差别在于count(song_name)会除去song_name is null的情况\n场景3：显示每张专辑的歌曲列表\nselect album, GROUP_CONCAT(song_name) from song_list group by album; -- 默认最大只能连接1024个字符，但是可以通过改数据库参数来改变。 使用聚合函数做数据库行列转换 #  select user, max(case when \u0026#39;key\u0026#39;=\u0026#39;age\u0026#39; then value end) age, max(case when \u0026#39;key\u0026#39;=\u0026#39;sex\u0026#39; then value end) sex, max(case when \u0026#39;key\u0026#39;=\u0026#39;dep\u0026#39; then value end) dep, from tbl_test1 group by user; 预定义函数 #   预定义函数面向单值数据，返回一对一的处理结果(聚合函数可以理解成多对一)。 预定义函数基本语法： select function(列) from 表; select * from 表 where 列 = function(value) ...   预定义函数-字符串函数 #     函数 描述     LENGTH() 返回列的字节数   CHAR_LENGTH() 返回列的字符数   TRIM()/RTRIM()/LTRIM() 去除两边空格/去除右边空格/去除左边空格   SUBSTRING(str, pos, [len]) 从pos位置截取字符串str，截取len长度   LOCATE(substr, str, [pos]) 返回substr在str字符串中的位置   REPLACE(str, from_str, to_str) 将str字符串中的from_str替换成to_str   LOWER(), UPPER() 字符串转换为小写/大写     字符串函数 - 实例  SELECT SUBSTRING(\u0026#39;abcdef\u0026#39;, 3); -- \u0026#39;cdef\u0026#39; SELECT SUBSTRING(\u0026#39;abcdef\u0026#39;, -3); -- \u0026#39;def\u0026#39; SELECT SUBSTRING(\u0026#39;abcdef\u0026#39;, 3, 2); -- \u0026#39;cd\u0026#39; SELECT LOCATE(\u0026#39;bar\u0026#39;, \u0026#39;foobarbar\u0026#39;); -- 4 SELECT LOCATE(\u0026#39;xbar\u0026#39;, \u0026#39;foobar\u0026#39;); -- 0 SELECT LOCATE(\u0026#39;bar\u0026#39;, \u0026#39;foobarbar\u0026#39;, 5); -- 7 预定义函数-时间处理函数 #     函数 描述     CURDATE() 当前日期   CURTIME() 当前时间   NOW() 显示当前时间日期(常用)   UNIX_TIMESTAMP() 当前时间戳   DATE_FORMAT(date, format) 按指定格式显示时间   DATE_ADD(date, INTERVAL unit) 计算指定日期向后加一段时间的日期   DATE_SUB(date, INTERVAL unit) 计算指定日期向前减一段时间的日期     实例：  SELECT NOW() + INTERVAL 1 MONTH; SELECT NOW() - INTERVAL 1 WEEK; 预定义函数-数字处理函数 #     函数 描述     ABS() 返回数值的绝对值   CEIL() 对小数向上取整 CEIL(1.2)=2   ROUND() 四舍五入   POW(num, n) num的n次幂 POW(2, 2)=4   FLOOR() 对小数向下取整 CELL(1.2)=1   MOD(N, M) 取模(返回n除以m的余数)=N % M   RAND() 取0~1之间的一个随机数    算数、逻辑运算 #   比较运算     函数 描述     IS, IS NOT 判定布尔值 IS True, IS NOT False, IS NULL   \u0026gt;, \u0026gt;= 大于，大于等于   \u0026lt;, \u0026lt;= 小于，小于等于   = 等于   !=, \u0026lt;\u0026gt; 不等于   BETWEEN M AND N 取M和N之间的值   IN, NOT IN 检查是否在或不在一组值之中    实例：查询一个月内userid为1,3,5的用户创建的歌单\nselect * from play_list where (createtime between 1427791323 and 1430383307) and userid in (1,3,5);  *,/,DIV,%,MOD,-,+ NOT, AND, \u0026amp;\u0026amp;, XOR, OR, ||  2.6-触发器与存储过程 #  触发器 #   是什么  触发器是加在表上的一个特殊程序，当表上出现特定的事件(INSERT/UPDATE/DELETE)时触发该程序执行。   做什么  数据订正；迁移表；实现特定的业务逻辑。    触发器-基本语法 #  CREATE [DEFINER = { user | CURRENT_USER }] TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_body t trigger_time: { BEFORE | AFTER } trigger_event: { INSERT | UPDATE | DELETE } 触发器-实例 #  学生表：\nCREATE TABLE `stu` ( `name` varchar(50), `course` varchar(50), `score` int(11), PRIMARY KEY (`name`) ) ENGINE=InnoDB; 用于更正成绩的触发器：\nDELIMITER // CREATE TRIGGER trg_upd_score BEFORE UPDATE ON `stu` FOR EACH ROW BEGIN IF NEW.score \u0026lt; 0 THEN SET NEW.score = 0; ELSEIF NEW.score \u0026gt; 100 THEN SET NEW.score = 100; END IF; END; // DELIMITER ; 注意事项 #   触发器对性能有损耗，应慎重使用。 同一类事件在一个表中只能创建一次。 对于事务表，触发器执行失败则整个语句回滚。 Row格式的主从复制，触发器不会在从库上执行。 使用触发器时应防止递归执行。  存储过程 #   定义：存储过程是存储在数据库的一组SQL语句集，用户可以通过存储过程名和传参多次调用的程序模块。 特点：  使用灵活，可以使用流控制语句，自定义变量等完成复杂的业务逻辑。 提高数据安全性，屏蔽应用程序直接对表的操作，易于进行审计。 减少网络传输。 提高代码维护的复杂度，实际使用中要评估场景是否适合。    存储过程-基本语法 #  CREATE [DEFINER = { user | CURRENT_USER }] PROCEDURE sp_name ([proc_parameter[,...]]) [characteristic ...] routine_body proc_parameter: [ IN | OUT | INOUT ] param_name type type: Any valid MySQL data type characteristic: COMMENT \u0026#39;string\u0026#39; | [NOT] DETERMINISTIC routine_body: Valid SQL routine statement 存储过程-实例 #  CREATE PROCEDURE proc_test1 (IN total INT, OUT res INT) BEGIN DECLARE i INT; SET i = 1; SET res = 1; IF total \u0026lt;= 0 THEN SET total = 1; END IF; WHILE i \u0026lt;= total DO SET res = res * i; INSERT INTO tbl_proc_test(num) VALUES (res); SET i = i + 1; END WHILE; END; 存储过程-流控制语句 #     流控制 描述     IF IF search_condition THEN statement_list [ELSEIF search_condition THEN statement_list][ELSE statement_list] END IF   CASE CASE case_value WHEN when_value THEN statement_list [ELSE statement_list] END CASE   WHILE WHILE search_condition DO statement_list END WHILE   REPEAT REPEAT statement_list UNTIL search_condition END REPEAT    存储过程-调用 #  set @total=10; set @res=1; call proc_test1(@total, @res); select @res; 自定义函数 #   自定义函数与存储过程类似，但是必须带有返回值(RETURN)。 自定义函数与sum(), max()等MySQL原生函数使用方法类似： SELECT func(val); SELECT * from tbl where col=func(val);  由于自定义函数可能在遍历数据中使用，要注意性能损耗  自定义函数-基本语法 #  CREATE [DEFINER = { user | CURRENT_USER}] FUNCTION sp_name ([func_parameter[,...]]) RETURNS type [characteristic ...] routine_body func_parameter: param_name type type: Any valid MySQL data type characteristic: COMMENT \u0026#39;string\u0026#39; | [NOT] DETERMINISTIC routine_body: Valid SQL routine statement 自定义函数-实例 #  CREATE FUNCTION func_test1 (total INT) RETURNS INT BEGIN DECLARE i INT; DECLARE res INT; SET i = 1; SET res = 1; IF total \u0026lt;= 0 THEN SET total = 1; END IF; WHILE i \u0026lt; total DO SET res = res * i; SET i = i + 1; END WHILE; RETURN res; END; 自定义函数-调用 #  select func_test1(4); 小结 #   知识点：触发器、存储过程、自定义函数 互联网场景：触发器和存储过程不利于水平扩展，多用于统计和运维操作中。  2.7-MySQL字符集 #  字符集基础 #   字符集：数据库中的字符集包含两层含义  各种文字和符号的集合，包括各国家文字、标点符号、图形符号、数字等。 字符的编码方式，即二进制数据与字符的映射规则。    字符集-分类 #   ASCII：美国信息互换标准编码；英语和其他西欧语言；单字节编码，7位表示一个字符，共128字符。 GBK：汉字内码扩展规范；中日韩汉字、英文、数字；双字节编码；共收录了21003个汉字，GB2312的扩展。 UTF-8:Unicode标准的可变长度字符编码；Unicode标准（统一码），业界统一标准，包括世界上数十种文字的系统；UTF-8使用一至四个字节为每个字符编码。 其他常见字符集：UTF-32，UTF-16，Big5，latin1  MySQL字符集 #   查看字符集  SHOW CHARACTER SET;  新增字符集  # 编译时加入： --with-charset= ./configure --prefix=/usr/local/mysql3 --with-plugins=innobase --with-charset=gbk 字符集与字符序 #   charset和collation  collation：字符序，字符的排序与比较规则，每个字符集都有对应的多套字符序。 不同的字符序决定了字符串在比较排序中的精度和性能不同。    查看字符序\nshow collation; mysql的字符序遵从命名惯例：以_ci(表示大小写不敏感)，以_CS(表示大小写敏感)，以_bin(表示用编码值进行比较)。\n字符集设置级别 #   charset和collation的设置级别：  服务器级 \u0026raquo; 数据库级 \u0026raquo; 表级 \u0026raquo; 列级   服务器级  系统变量(可动态设置)：  character_set_server：默认的内部操作字符集 character_set_system：系统元数据(各字段名等)字符集      字符集设置级别 #   服务器级  配置文件\r[mysqld]\rcharacter_set_server=utf8\rcollation_server=utf8_general_ci\r 数据库级  CREATE DATABASE db_name CHARACTER SET latin1 COLLATE latin1_swedish_ci;  character_set_database：当前选中数据库的默认字符集  主要影响load data等语句的默认字符集，CREATE DATABASE的字符集如果不设置，默认使用character_set_server的字符集。\n 表级  CREATE TABLE tbl1 (....) DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_bin;  列级  CREATE TABLE tbl1 (col1 VARCHAR(5) CHARACTER SET latin1 COLLATE latin1_german1_ci); 字符集设置级别 #   数据存储字符集使用规则：  使用列集的CHARACTER SET设定值； 若列级字符集不存在，则使用对应表级的DEFAULT CHARACTER SET设定值； 若表级字符集不存在，则使用数据库级的DEFAULT CHARACTER SET设定值； 若数据库级字符集不存在，则使用服务器级character_set_server设定值。    -- 查看字符集 show [global] variables like \u0026#39;character%\u0026#39;; show [global] variables like \u0026#39;collation%\u0026#39;; -- 修改字符集 set global character_set_server=utf8; -- 全局 alter table xxx convert to character set xxx; -- 表 客户端连接与字符集 #   连接与字符集  character_set_client：客户端来源数据使用的字符集。 character_set_connection：连接层字符集。 character_set_results：查询结果字符集。    mysql \u0026gt; set names utf8;\r配置文件设置：\r[mysql]\rdefault-character-set=utf8\r 字符转换过程  client \u0026gt; character_set_client \u0026gt; character_set_connection \u0026gt; Storage \u0026gt; character_set_results \u0026gt;client\n推荐使用统一的字符集\n  常见乱码原因：\n 数据存储字符集不能正确编码(不支持)client发来的数据：client(utf8)-\u0026gt;Storage(latin1) 程序连接使用的字符集与通知mysql的character_set_client等不一致或不兼容。    使用建议\n 创建数据库/表时显式的指定字符集，不使用默认。 连接字符集与存储字符集设置一致，推荐使用utf8。 驱动程序连接时显式指定字符集(set names XXX).    mysql CAPI:初始化数据库句柄后马上用mysql_options设定MYSQL_CHARSET_NAME属性为utf8.\n  mysql php API:连接到数据库以后显式用SET NAMES语句设置一次连接字符集。\n  mysql JDBC: url=\u0026ldquo;jdbc:mysql://localhost:3306/blog_dbo?user=xx\u0026amp;password=xx\u0026amp;userUnicode=true\u0026amp;characterEncoding=utf8\u0026rdquo;\n  小结 #   字符集：表示的字符集和/字符编码方式 字符的设置级别：服务器/数据库/表/列 客户端字符集：乱码产生的原因与解决方式  2.8程序连接MySQL #  程序连接MySQL基本原理 #  JDBC客户端应用 -\u0026gt; java.sql.*或javax.sql.* -\u0026gt; 驱动程序 -\u0026gt; SQLserver/Oracle/MySQL\nJava代码示例 #  结构：\nDriverManager -\u0026gt; Driver(是驱动程序对象的接口，指向具体数据库驱动程序对象)=DriverManager.getDriver(String URL) -\u0026gt; Connectinon(是连接对象接口，指向具体数据库连接对象)=DriverManager.getConnection(String URL) -\u0026gt; Statement(执行静态SQL语句接口)=Connection.CreateStatement() -\u0026gt; ResultSet(是指向结果集对象的接口)=Statement.excuteXXX()\nimport java.sql.*; /** * 使用JDBC连接MySQL */ public class DBTest { public static Connection getConnection() throws SQLException, java.lang.ClassNotFoundException { //第一步：加载MySQL的JDBC的驱动  Class.forName(\u0026#34;com.mysql.jdbc.Driver\u0026#34;); //设置MySQL连接字符串,要访问的MySQL数据库 ip,端口,用户名,密码  String url = \u0026#34;jdbc:mysql://localhost:3306/blog\u0026#34;; String username = \u0026#34;blog_user\u0026#34;; String password = \u0026#34;blog_pwd\u0026#34;; //第二步：创建与MySQL数据库的连接类的实例  Connection con = DriverManager.getConnection(url, username, password); return con; } public static void main(String args[]) { Connection con = null; try { //第三步：获取连接类实例con，用con创建Statement对象类实例 sql_statement  con = getConnection(); Statement sql_statement = con.createStatement(); /************ 对数据库进行相关操作 ************/ //如果同名数据库存在，删除  sql_statement.executeUpdate(\u0026#34;drop table if exists user;\u0026#34;); //执行了一个sql语句生成了一个名为user的表  sql_statement.executeUpdate(\u0026#34;create table user (id int not null auto_increment,\u0026#34; + \u0026#34; name varchar(20) not null default \u0026#39;name\u0026#39;, age int not null default 0, primary key (id) ); \u0026#34;); //向表中插入数据  System.out.println(\u0026#34;JDBC 插入操作:\u0026#34;); String sql = \u0026#34;insert into user(name,age) values(\u0026#39;liming\u0026#39;, 18)\u0026#34;; int num = sql_statement.executeUpdate(\u0026#34;insert into user(name,age) values(\u0026#39;liming\u0026#39;, 18)\u0026#34;); System.out.println(\u0026#34;execute sql : \u0026#34; + sql); System.out.println(num + \u0026#34; rows has changed!\u0026#34;); System.out.println(\u0026#34;\u0026#34;); //第四步：执行查询，用ResultSet类的对象，返回查询的结果  String query = \u0026#34;select * from user\u0026#34;; ResultSet result = sql_statement.executeQuery(query); /************ 对数据库进行相关操作 ************/ System.out.println(\u0026#34;JDBC 查询操作:\u0026#34;); System.out.println(\u0026#34;------------------------\u0026#34;); System.out.println(\u0026#34;userid\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;name\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;age \u0026#34;); System.out.println(\u0026#34;------------------------\u0026#34;); //对获得的查询结果进行处理，对Result类的对象进行操作  while (result.next()) { int userid = result.getInt(\u0026#34;id\u0026#34;); String name = result.getString(\u0026#34;name\u0026#34;); int age = result.getInt(\u0026#34;age\u0026#34;); //取得数据库中的数据  System.out.println(\u0026#34; \u0026#34; + userid + \u0026#34; \u0026#34; + name + \u0026#34; \u0026#34; + age); } //关闭 result,sql_statement  result.close(); sql_statement.close(); //使用PreparedStatement更新记录  sql = \u0026#34;update user set age=? where name=?;\u0026#34;; PreparedStatement pstmt = con.prepareStatement(sql); //设置绑定变量的值  pstmt.setInt(1, 15); pstmt.setString(2, \u0026#34;liming\u0026#34;); //执行操作  num = pstmt.executeUpdate(); System.out.println(\u0026#34;\u0026#34;); System.out.println(\u0026#34;JDBC 更新操作:\u0026#34;); System.out.println(\u0026#34;execute sql : \u0026#34; + sql); System.out.println(num + \u0026#34; rows has changed!\u0026#34;); //关闭PreparedStatement  pstmt.close(); //流式读取result，row-by-row  query = \u0026#34;select * from user\u0026#34;; PreparedStatement ps = (PreparedStatement) con.prepareStatement (query,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY); ps.setFetchSize(Integer.MIN_VALUE); result = ps.executeQuery(); /************ 对数据库进行相关操作 ************/ System.out.println(\u0026#34;JDBC 查询操作:\u0026#34;); System.out.println(\u0026#34;------------------------\u0026#34;); System.out.println(\u0026#34;userid\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;name\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;age \u0026#34;); System.out.println(\u0026#34;------------------------\u0026#34;); //对获得的查询结果进行处理，对Result类的对象进行操作  while (result.next()) { int userid = result.getInt(\u0026#34;id\u0026#34;); String name = result.getString(\u0026#34;name\u0026#34;); int age = result.getInt(\u0026#34;age\u0026#34;); //取得数据库中的数据  System.out.println(\u0026#34; \u0026#34; + userid + \u0026#34; \u0026#34; + name + \u0026#34; \u0026#34; + age); } //关闭 result,ps  result.close(); ps.close(); con.close(); } catch(java.lang.ClassNotFoundException e) { //加载JDBC错误,所要用的驱动没有找到  System.err.print(\u0026#34;ClassNotFoundException\u0026#34;); //其他错误  System.err.println(e.getMessage()); } catch (SQLException ex) { //显示数据库连接错误或查询错误  System.err.println(\u0026#34;SQLException: \u0026#34; + ex.getMessage()); } } } JDBC使用技巧 #   Statement与PreparedStatement的区别 connection, Statement与ResultSet关闭的意义 jdbc连接参数的使用 ResultSet游标的使用(setFetchSize)  Statement与PreparedStatement的区别 #   PreparedStatement在数据库端预编译，效率高，可以防止SQL注入。 对数据库执行一次性存取的时候，用Statement对象进行处理。 线上业务推荐使用PreparedStatement.  PreparedStatement背后的故事 #  PREPARE -\u0026gt; EXECUTE -\u0026gt; DEALLOCATE PREPARE\nPREPARE stmt1 FROM \u0026#39;SELECT productCode, productName From products WHERE productCode = ?\u0026#39;; SET @pc = \u0026#39;S10_1678\u0026#39;; EXECUTE stmt1 USING @pc; DEALLOCATE PREPARE stmt1; connection, Statement与ResultSet关闭的意义 #   MySQL数据库端为connection与ResultSet维护内存状态，一直不关闭会占用服务端资源。 MySQL最大连接数受max_connections限制，不能无限创建连接，所以用完要及时关闭。 JDBC connection关闭后ResultSet, Statement会自动关闭。但是如果使用连接池将不会关闭，因此推荐主动关闭。  jdbc连接参数的使用 #   字符集设置：  url=\u0026ldquo;jdbc:mysql://localhost:3306/blog_dbo?userUnicode=true\u0026amp;characterEncoding=utf8\u0026rdquo;;\n 超时设置：  url=\u0026ldquo;jdbc:mysql://localhost:3306/blog_dbo?connectionTimeout=1000\u0026amp;socketTimeout=30000\u0026rdquo;;\nResultSet游标的使用 #   默认的ResultSet对象不可更新，仅有一个向前移动的指针。因此，只能迭代它一次，并且只能按从第一行到最后一行的顺序进行。可以生成可滚动和/或可更新的ResultSet对象。 setFetchSize()是设置ResultSet每次向数据库取的行数，防止数据返回量过大将内存爆掉。  Python连接MySQL #   Python：脚本语言，无需编译、易开发 DBA使用Python的一般场景是编写自动化运维工具、报表、数据迁移 Python MySQL驱动：python-mysqldb  import MySQLdb # 建立和mysql数据库的连接 conn = MySQLdb.connect(host=\u0026#39;localhost\u0026#39;, port=3306,user=\u0026#39;bloguser\u0026#39;,passwd=\u0026#39;xxxx\u0026#39;) # 获取游标 curs = conn.cursor() # 选择数据库 conn.select_db(\u0026#39;blog\u0026#39;) # 执行SQL，创建一个表 curs.execute(\u0026#34;create table blog (id int, name varchar(200))\u0026#34;) # 插入一条记录 value = [1, \u0026#39;user1\u0026#39;] curs.execute(\u0026#34;insert into blog values(%s, %s)\u0026#34;, value) # 插入多条记录 values = [(2, \u0026#34;user2\u0026#34;), (3, \u0026#34;user3\u0026#34;)] curs.executemany(\u0026#34;insert into blog values(%s, %s)\u0026#34;, values) # 提交 conn.commit() # 关闭游标 curs.close() # 关闭连接 conn.close() 2.9-DAO框架的使用 #  DAO框架 #   在应用程序中使用数据访问对象(DAO),使我们可以将底层数据访问逻辑与业务逻辑分离开来。DAO框架构建了为每一个数据源提供CRUD(创建、读取、更新、删除)操作的类。 DAO模式是标准J2EE设计模式之一。开发人员用这种模式将底层数据访问操作与高层业务逻辑分离开。一个典型的DAO框架实现有以下组操作：  一个DAO工厂类 一个DAO接口(select/insert/delete/update) 一个实现了DAO接口的具体类 数据传输对象    DAO框架的特点 #   屏蔽底层数据访问细节，实现业务逻辑和数据访问逻辑的分离。 简化代码开发，提高代码复用率。 相较于原生的SQL可能会带来额外的 性能损耗(利用反射机制封装对象，SQL转换等)  MyBatis简介 #   MyBatis是一个主流的DAO框架，是apache的一个开源项目iBatis的升级版。 MyBatis支持普通SQL查询，存储过程和高级映射，消除就几乎所有JDBC代码和参数的手工设置以及结果集的检索。 接口丰富、使用简单 相较于hibernate更加轻量级，支持原生的sql语句。 支持查询缓存  MyBatis代码示例 #   环境搭建，数据源于映射配置文件的编写 单值、多值查询 增删改数据 连表查询  示例代码在sorence/DAO框架代码示例.rar\nMyBatis工作流程 #   加载配置并初始化，内部生成MappedStatement对象。 调用MyBatis提供的API(SqlSession.select/insert\u0026hellip;.)，将SQL ID与数据对象传递给处理层。 处理层解析MappedStatement对象，获取MySQL的连接，执行相应的SQL语句，接收返回结果。 MyBatis将接收到的返回结果封装成对应的数据对象返回。  MyBatis使用技巧 #   区分#{}和${}的不同应用场景： #{}会生成预编译SQL，会正确的处理数据的类型，而${}仅仅是文本替换。 注意MyBatis封装数据时的性能损耗： 只返回需要的行数和字段。 使用MyBatis自带的连接池功能： \u0026lt;dataSource type=\u0026quot;POOLED\u0026quot;\u0026gt;  "});index.add({'id':184,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/talk_theme/girl/dpa4wtnhf8/','title':"耍朋友",'section':"聊天话题",'content':"  女生都特别在意细节 所以一定要认真 做一些事可以多向别人请教 多上网查看 多演练\n  其实任何事情都是这样 一定要认真仔细\n  一旦开始就要百分之百尽力\n  和女生聊天不要一个人滔滔不绝的讲个不停 尽量要讲两个人共同的话题 尽量讲 女生感兴趣的话题 当然了 如果实在找不到话题 那么自己讲自己活跃气氛也不错 对了可以讲自己被父母逼相亲 亲戚朋友聚会的事情\n  case1\n  并不是看着清纯的一定没谈过恋爱，更不是看着可爱的一定没谈过恋爱， 如果非要说的话，最可靠的评判标准就是这个女人是否老实。 对于男人来说，老实的男人不会撩妹，反过来呢，那些老实的女生，傻傻的，十有八九没谈过恋爱。 为什么这么说？因为无论是平淡的一段感情，还是刻骨铭心的一段感情，或者是伤痕累累的一段感情， 甚至是过眼云烟的短暂经历，都会改变一个女生对爱情和男人的看法、想法以及行为和表现，所以只要感情经历足够多，傻子也可以蜕变成情圣。就拿渣女来说，学会了温柔撩人也就算了，如果连男生想什么都能猜出来十有八九必定已经阅人无数。相反，如果一个女生不骚不婊不可爱不机灵，差不多没谈过恋爱，所以原谅她的不懂事，这个女生并非不爱你！我不否认有的人天生双商高，没谈过恋爱也表现得成熟而有魅力，也不否认有高手扮猪吃老虎，假装老实人打你个措手不及。每次讲到这一点时，我总是忍不住想要长篇大论――那继续和大家分享，如果你遇到的人是装出来的老实你怎么办？或者是天生的完美人格你却怀疑对方？我们都知道，很多事情并不像看上去那样，但是，我们可以从现象探寻本质。但是我知道大多数人是做不到“从现象探寻本质这一点的”。最可怕的人就是装傻的人和真傻的人，如果你想看透对方的本质，那么请你继续往下看。当你遇到只问你的信息，但对自己的信息却小心翼翼的姑娘，小心一些。她是在以居高临下的姿态考察你，筛选你，这种女的会因为你外在条件好和你在一起，但是她永远不会爱你。这种女的，说白了，不真诚。你作为一个爷们儿，一定要摆好框架，不要被对方牵着鼻子走。老实人之所以廉价，就是因为没原则无底线，也不敢跟姑娘提要求，毕竟有个姑娘跟自己约会就足够自己满足自豪好几天了。所谓有自己的框架，应该时不时停下来问问自己的人生目标是什么，想成为什么人。当她离你而去的时候你还有一技傍身，而不是几张朋友圈的恩爱照和一无是处的青春回忆。小心对方的回头，因为你不知道对方回头的动机。女人善变，但大部分情况下她们回头找你的理由都是暂时找不到更好的了，就找你先凑合一下吧。我不否认有的女生怀念旧情，不舍得，但是你也要想想当初她离开你的原因是什么。别被她感人的台词骗得泪流满面。如果你想了解一个女生，先看她的圈子。她的闺蜜没什么水准的话，她也不会好到哪里去。物以类聚人以群分这句话不是没有道理的，想法不同的人不会不谋而合，想法不同的朋友时间久了也会把人带跑偏。找机会参加女生的朋友聚会，你会有意外收获的！女人属猫，一直招惹她会让女生烦你。等你身上有了她想要的东西自然会回来找你，别怕错过。错过了，说明还是不喜欢你，没什么可惋惜的。喜欢你的人一定会主动，性格慢热或者天性凉薄都是借口。说自己慢热的女生，大概率是对你没感觉却又想长期吊着你的绿茶。真慢热的女的一般不会直接说自己慢热，除非脑子不太灵光。经常去夜店的女生，要远离。她们口中的“偶尔去”就是经常去。我也去过夜店，灯红酒绿肆无忌惮确实令人着迷，但是我知道它的样子，那些姑娘很性感。虽然很可能有误伤，但是老实人玩不起概率游戏，就这么简单，还不如选择远离。以前爱玩儿现在收心了也就算了，人品差点的，让你头上长草，你怕不怕？约不出来微信不回就放弃吧。我知道存在技术差异和魅力差异，但是女生不认可咱们，真没必要上赶着。大家都是成年人，第一次邀约说明不了啥，再二再三拒绝那就算了吧，拒绝邀约的理由不管怎么美化，本质就是我看不上你。但是，这个姑娘你先留着，冷处理就行了，别再为她花心思，谁知道以后会怎么样呢。追逐过程中，感觉自己负面情绪过多的话，这姑娘八成不适合你。问题是，很多人早早就意识到了却还是无法控制自己继续付出。毕竟付出越多越难以放弃，舔狗也是越舔越难以自拔，我都理解。但是看了这篇文章就再次提醒提醒自己。身边有个懂女人的朋友出谋划策很重要。让你闷头死追无脑献殷勤的是狗头军师，别信。然而大部分女人给别人教的泡妞手段，无非就是买买买送送送，感动感动加感动。这不是误人子弟呢嘛，说实话，私信我买套课程，你会发觉自己会脱胎换骨。摸清对方的段位再做决策。如果自己段位远低于对方，比如姑娘长得特好看，天天有人惦记着，你却没谈过恋爱。趁早撒手，强行在一起基本上是被吃到死的份。游戏中的越级闯关都应该知道：级别差太多，结局只能是自己费力之后一无所得。我的建议就是提升自己，不然就算闯关成功，耗费的装备和药水值得你这么做？想体验相对纯粹些的爱情，越早越好。不论男女一过三十，基本都认清了生活和现实，出来工作越早的越现实。离异女的能别碰就别碰。女人是感性动物是这个社会上最大的谎言。离异之后但凡有点脑子的，都会在婚前把婚后的利益算的清清楚楚。这也不怪她们，毕竟之前感性一次吃了大亏。时不时评估一下自己和对方的付出，维持一段关系，保持相对的平衡。花小钱要果断，花大钱还是免了吧，这不是你的责任。你下注了，她跟了，你们就继续玩；你下注了，她还不下注，不管她怎么跟你花言巧语“我要下注了”，别信！说什么女人的青春值钱，那男人的青春不值钱？真正的爱情永远是平等的。不要闷头给追求对象送礼物。送礼物可以，要么她先送了，你回礼；要么，你俩确定关系以后你再送。喜欢你的姑娘，不会因为你忘记一次生日礼物就拒绝你你，而一个她看不上的挫男，年年送生日礼物她也不会高看对方一眼。别自己感动自己了，追是吸引而不是讨好。碰到人品好的，徒增对方的社交压力；碰到人品差的，等于给对方把你当提款机的机会。什么时候一个人急不可耐地给对方送礼？是求人办事的时候。问题是，感情这东西，它也不是求来的啊。相对应的，无缘无故送你礼物的姑娘八成对你有兴趣，一般也是新司机。真诚是对的，要么狠要么稳，别徘徊。如果你精通pua，我支持你通过这种方式吸引女生；如果你你不精通，班门弄斧的样子真的很搞笑。老实人其实挺受欢迎的，你单位的阿姨肯定不会殷勤地给一个流里流气的痞子介绍对象，不过你要有点儿眼力见儿。那些臭毛病你得离远点，想改变对方是痴心妄想。朋友圈爱炫富的，远离；网红脸的，远离；脾气不好一点就炸的，有时候你买错一瓶水她就炸了，其实也不是脾气不好，也可能是单纯不喜欢你然后顺便拿你出气而已，远离；虚荣心爆棚的，远离；很多姑娘会把虚荣心延伸到感情上，攀比过后要么你累死，要么你被绿；有纹身的，要么有故事要么就是社会姐，私密部位也有的，自求多福吧。永远不要当舔狗。有机会有能力翻翻对方的微博，再看看知乎上秀腿秀胸回答下边的评论，你就知道一个女人每天能被舔多少次了。舔她的人那么多，你又和他们有何不同？就让她们迷失在舔狗的舌头里好了，过了三十，一个人真实的斤两才会显现出来。其实大部分姑娘不会一开始就把对她有好感的男人当舔狗的，舔狗的帽子是那些低自尊、没脾气的男的自己戴上去的。说自己没有追求者的，别信。人家肯定不会对外说一个月薪不多长得巨丑的人在追她，因为太丢人了。最擅长从男人身上攫取利益的女人总是对外宣称单身，同时多线发展，以吸引傻子们对其不断投资。宣称自己追求者众多的姑娘，别怂，直接默认这些竞争者们不存在就可以了。说自己的追求者多，要么是在对外营造“洛阳纸贵”的氛围，实际上追她的没多少个。要么，就是追她的她一个都没看上，根本无法构成你的威胁，否则她早脱单了，还能等到你碰上她？不要开口问她们喜欢什么样的男人。寻找渠道了解一下对方的前任，总结一下他们的共同点。那个共同点就是她眼中一个男人的核心价值，不过挺麻烦的何必这么累呢。所以说，一个人的选择，往往比他的嘴巴更能反映出内心真实的想法。不要信她们的嘴巴或者自己在朋友圈发的所谓的择偶标准。你也不要附和她那些所谓的择偶标准，这么做也会暴露出你有迎合她口味的倾向，只有低价值的人才会想法迎合别人。门当户对太重要了，中华文化源远流长是有原因的。和一个姑娘聊的特别投缘，很大原因是你俩出身背景相似，有时候跟喜不喜欢没啥关系。分清自己是有钱还是有魅力。大部分姑娘在这个二十六七岁以前更多关注的是男方提供的情绪价值，这个年纪以后则更多关注的是男方提供的物质价值。爱情这东西，往往跟情绪价值联系在一起，所以以前不理你，现在回头来找你的姑娘八成并不爱你，而是年纪到了人家需求变了而已。就别沾沾自喜地认为自己这几年挣了钱魅力就大了，两码事儿。女人大部分喜欢找能令自己仰望的男人，小部分会找跟自己能够势均力敌的男人，但没有一个愿意找比自己弱的男人。这话背后的含义是，如果你看到一个女人找了个条件比自己差很多的男人，那么那个男人在某一你看不见的方面一定有强过她的地方。追到了也别得意，注意观察细节，看看对方是在玩儿还是真的爱你。很多情侣动辄朝另一半撒泼，就是不够喜欢，真的不是什么性格问题，彭于晏当她男朋友她会随便发脾气找茬子？有钱并不能帮你得到爱情。你可能只能得到姑娘的人，却永远得不到她的心。这件事将会极大增加自己被绿的概率。所以分辨出一个人是不是真的爱你，很重要。这句话的另一半是，别先画地为牢地认为自己在一无所有的时候没资格谈恋爱。其实当你一无所有的时候，碰到的姑娘才是最真的。一定不要上头，记得给自己划条时间线。这个不行就赶紧放弃。明明人家不鸟你或者明明你条件比她好你却还是执迷不悟死追不放；你这不是傻吗？从现实利益的考量角度来说，找个喜欢你的比找个你喜欢的舒服很多。而且很多时候喜欢你的各方面的条件是优于你喜欢的那个。好姑娘真的很多，别放弃。被渣女玩过一次的话，问题在她；如果次次遇人不淑的人是你，那有问题的人是你。保持忠诚和专一其实是非常难得的品质。可惜女孩子希望的是她们喜欢的人有这个品质然后反过来对她们忠诚专一。换句话说，人家不喜欢你，你再专一都没用。看清对方对你的态度，分清好坏。女人的高傲都是摆给自己不喜欢的人看的，碰到喜欢的瞬间化身小女人。不要死皮赖脸地追，勉强追到了你还得继续无底线付出，长期看也难以维系。人都是自作聪明的生物，那就不要自作聪明。想让对方知道你的价值和优点，不要过于明显地展示，而是要让她以为是她自己发现的。明显地展示自己价值的，比如朋友圈秀豪车钥匙，坐头等舱，出席所谓社会名流会议的，吸引来的也就是没什么层次的女人。好姑娘看到你这么炫，直接会排除你。追求阶段，在确定自己没有犯原则性错误的情况下，注意，绝对不要低头道歉。宁可冷酷到底也别装绅士，唯唯诺诺的男人一点儿魅力都没有。舔狗最擅长的事就是反复道歉，结果就是本来不是什么大事，他搞成了大事，然后继续舔。千万千万不要让对方知道你在揣测她的心思。你会被她朋友圈发的每一条状态玩到心态崩溃。女人早期天然比男人擅长情感博弈，特别擅长玩弄弱势地位者的感情。你需要做的是对她永远保留三分神秘你追不到的，大概率是综合评分远高于你的姑娘。如果有女孩追你，你一直都看不上，想通背后的道理，你就知道自己应不应该反过来追女生。水平强于你太多的，根本就入不了对方的眼，你怎么追都没用；水平低于你太多的，人家倒贴你；水平和你差不多的，根本不需要太追。这个评分包括很多方面，其中对于感情的把控和pua能力指数作为评分标准，真正的高手还是有的，比如我。喜欢不喜欢你，细节足以说明一切。注意力从头到尾压根就没在你身上的人，就别瞎费心思了。约出来了，但是长时间低头玩手机不说话，不主动开启话题，不问你的个人消息，这就是对你没兴趣。女人爱不爱你跟你优不优秀没有什么关系。她们的感情是毫无逻辑的。 我朋友婚前房车一概没有，俩人靠女朋友死工资过，然而他有车有房了之后，这姑娘居然先提出分手。迷信“有车有房有钱就会有姑娘喜欢”的理论的人，最终结果要么就是累死在挣钱的路上，要么就是吸引来看重金钱的绿茶。事业上的优秀和感情上的优秀完全是两码事。我常说你十座金钱换不来的姑娘我一颗糖能追回来，这句话不是骗人的。但是大部分人两者都不优秀；少数人有能力把握其中之一；两者能兼顾的人，我很敬佩。事业优秀、外表光鲜的成熟大叔，往往都有不为人知的黑暗面；情场上顺风顺水的浪子事业、学业基本看不成；人其实经不起细看。永远别贪恋远高于自己阶层的女人，更别相信“捡漏”这种事情会在自己身上发生。不要觉得找个低于自己阶层的女人就万事大吉了。对低于自己阶层的女人，同样不可松懈。对穷人家庭出身，还有点姿色的女人，尤其要警惕。忽冷忽热未必就是把你当备胎。对方一开始对你感兴趣的可能仅仅是你的附加价值，并不是对你感兴趣。女人在男女之事上的洞察力极高，一旦她们发现自己想要的东西你身上其实并没有，她们自然会脱身走人，并且没有丝毫犹豫。另一方面，确实有把男人当备胎的女人。当然她们也会用所谓的“考察期”来使自己的逻辑自洽——只是她们从来不告诉你，碰到自己喜欢的，确定关系能有多快，快到能立刻献身的地步。这个时候她们又会告诉你她找到了真爱，哦，我的老天，真是完美的理由啊！用考察期作理由的，就是不够喜欢你。追姑娘特简单，只要别对她太上心就好。开车的时候，新司机最容易犯的错误是注意力过于集中。追求女生也是一样，注意力太集中的弊端太多了，无论是吸引力还是感情维护都会让你很累。女人说“我有钱，我不在乎另一半有没有钱，无所谓”，别太相信这句话。事实上，说这句话的人，要的是物质需求加精神需求，只不过披了个“只要精神需求”的外衣而已。毕竟聪明点的美女勾搭富豪，第一步就是要先表现出对金钱的鄙夷，本来富豪最怕的就是人家冲着你的钱来。你真的以为一个用惯卡地亚香奈儿的女人，会喜欢上一个不懂摄影、没多少旅游见闻、没什么品味的男人？哪一项不需要钱？有些东西，你有钱甚至都未必接触的到。浅薄的小资产阶级有点小钱之后便阵阵作响，恨不得把自己能秀的东西秀个遍：男的秀车秀表，女的秀旅游秀包秀舔狗，用所谓的“品味”来包装自己，以求得一个高于自己原生阶层的人。不要觉得对方足够主动了你就能吃定她。散步时拉你的手、私底下对你撒娇、坐公交时睡着靠在你肩膀上——这些最容易让男人精虫上脑了。人家今天能对你这么做，明天就能对别人这么做。脑袋里那根弦请一直搭上，绿茶最喜欢用的就是这招。货悖而入者，亦悖而出。以不正当的手段得来的“爱情”，最后一定会以不正当的手段失去。别觉得自己能挖墙脚有多厉害，人家只不过从功利的角度考量了一下你而已，等有更好的了，照样蹬了你。在一起以后，想和你结婚过日子的，会把你当存钱罐。而不想结婚只想和你玩玩的，会把你当提款机。虽然价值观可能不同，但总的来说你感受到的都是真的。长得漂亮、家里有钱的姑娘啥都不缺，就缺一个能虐她的人。所以跟她们打交道，开舔必死。反倒是你越不把她们当回事，她们越对你感兴趣。但是想虐别人，得先有那个实力。所以归根到底，还是要提升自己的竞争力。这个世界上真正独立自主的女性极少。当然你问周围的姑娘，她们独立自主吗？她们一定会告诉你是的。但问题是，为什么这些姑娘的择偶标准里都有一条“男方收入不能低于我”。既然独立自主了，为什么还惦记别人的工资有多少呢？忙事业归忙事业，有时候还是要抬头看看前边的路和旁边的人。男人，还是要多交些异性朋友。跟异性打交道太少，最终的结果就是经验不足被吃到死。在微信朋友圈动辄抱怨自己没有男朋友、想要谈恋爱的女的，别去招惹。这种人，十个里面九个是绿茶。还有，朋友圈喜欢配一句心灵鸡汤加上一张自拍的，大概率是绿茶，微商除外。傻小子就知道盯着膜看。奉劝你们不要把找个处女或者不接受婚前性行为的姑娘当做终极目标。让你开心的非处和天天生气的处女你咋选？何况有的女生和自己不满意的男人谈恋爱时，向对方强调自己洁身自好，不接受婚前性行为。男的一听，“哇，碰到这么洁身自好的姑娘是自己的福气”，然后死心塌地。姑娘则趁此机会享受对方的好，同时寻找下家。所有不认可婚前性行为的理由，本质就一个，那就是你太丑，还没有进入我身体的资格。最恶心的就是技术性处女，边缘性行为玩了个遍，还对外宣称自己是处女的人，极其恶心人。真诚确实有用，尤其是在感情上受过重大创伤的女人。这种女人要么从此彻底不信男人，要么只信给自己花钱的男人。跟她们相处，你花言巧语越多，越会被对方拒绝。问题是在感情上受过重大创伤的，男人女人都会有执念，所以这种人你敢要么？对外声称自己希望找个灵魂有趣的人的人，不分男女，择偶方面天生具有优越感。这种优越感来自于对自身条件的过高估计，过高估计的后果你们明白的，说实话这一点影响的方面太大了。 "});index.add({'id':185,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/h847ijsjzr/','title':"表达能力提高",'section':"自信",'content':" “一个人的成功，15％靠技术支持，85％靠ロ才艺术” 无论在工作还是生活中 表达能力都是一项稀缺又非常重要的能力 如果你曾因为表达能力差吃过亏 那就要好好提升你的表达力了\n  1朗读  睡前20分钟朗读一篇新闻或者你喜欢的文章,切记不要默读,一定要高于平常说话的音量读出来,可以慢读、快读的方式\n 2录制视频  每天三分钟 尝试着用手机录制视频演讲 多次对着镜头表达自己观点 分享自己想法 在分析视频你自己讲话是否自然 语言是否磕巴 有停顿 及时发现问题去调整它 你会越来越优秀的\n  3跟读 每天花10分钟跟着主持人一起去读 ,像康辉老师,董卿老师啊 因为他们吐字清晰 发音标准\n  4镜子练习\n  每天早上 你对着镜子说一些鼓励自己的话 比如\u0026quot;小周 早上好啊 你今天一定要努力哦 你是最棒的 你只要坚持你就可以获得自己想要的 加油 \u0026quot; 时间久了你就会变得从容越来越自信\n 5速读训练  找一段喜欢的文字 慢慢的加快阅读速度 训练自己的口齿\n 6背诵法  背诵跟自己有共鸣的文字 慢慢的增加自己的素材储备\n 7即兴演讲  就是每天你任选3个词 你把那三个词组成一段话或者一个故事 你表达出来\n 8公开表达  你可以把自己录制的视频 给自己身边的朋友看 所谓\u0026quot;当局者迷,旁边者清\u0026quot; 这一点是让他们帮你挑出存在的问题,并且公开你的视频 也可以锻炼你自己的胆量 不要不好意识 不好意思的人是没有办法提高自己的自信的\n 9多观察思考 多看辩论赛或者电影 综艺节目 他们人物之间的对话 哪个人说话是比较高情商的  "});index.add({'id':186,'href':'/life/docs/databases/mysql_163%E8%AF%BE%E5%A0%82/%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%BE%E5%A0%82mysql_chapter3/','title':"MySQL事务与存储引擎",'section':"网易云课堂MySQL微专业学习笔记",'content':"MySQL事务与存储引擎 #  3.1-数据库事务 #  什么是事务 #   一系列有序的数据库操作：  要么全部成功 要么全部回退到操作前的状态 中间状态对其他连接不可见   事务的基本操作：    基本操作 说明     start transaction 开始事务   commit 提交(全部完成)   rollback 回滚(回到初始状态)      -- 开启一个事务 start transaction; -- 或者使用(非标准sql) begin; insert into t values (1, 1, 1); -- 事务结束，插入成功 commit; begin; insert into t values (2, 1, 1); insert into t values (3, 1, 1); insert into t values (4, 1, 1); -- 事务结束，没有插入数据 rollback; begin; insert into t values (1, 1, 1); savepoint a1; insert into t values (2, 1, 1); -- 回滚到指定的保存点 rollback to a1; commit; 自动提交 #   autocommit可以在session级别设置 每个DML操作都自动提交 DDL永远都是自动提交，无法通过rollback回滚  事务的四个基本属性(ACID) #   原子性(Atomicity) 一致性(Consistency) 隔离性(Isolation) 持久性(Durability)  事务的原子性 #   包含在事务中的操作要么全部被执行，要么都不执行 中途数据库或应用发生异常，未提交的事务都应该被回滚  事务的一致性 #   数据的正确性，合理性，完整性 数据一致性应该符合应用需要规则：  余额不能是负数 交易对象必须先有账号 用户账号不能重复   事务的结果需要满足数据的一致性约束  事物的持久性 #   提交完成的事务对数据库的影响必须是永久性的  数据库异常不会丢失事务更新 通常认为成功写入磁盘的数据即为持久化成功    事务的持久化的实现 #   数据文件持久化  随机同步刷新(慢)   事务日志持久化与实例恢复  顺序同步刷新(快) -\u0026gt; 事务日志 随机异步刷新 -\u0026gt; 磁盘 事务日志 -\u0026gt; 磁盘(实例恢复)    事务的隔离性 #   数据库事务在提交完成前，中间的任何数据变化对其他的事务都是不可见的。  数据库隔离现象 #     隔离现象 描述     脏读(Dirty Read) 事务B读到事务A尚未提交的数据变更   不可重复读(NonRepeatable Read) 事务B读取前后两次读取一条记录之间该记录被事务A修改并提交，于是事务B读到了不一样的结果   幻读(Phantom Read) 事务B按条件匹配到了若干行记录并修改。但是由于修改过程中事务A新插入了符合条件记录，导致B更新完成后发现仍有符合条件却未被更新的记录。    数据库隔离等级 #     隔离等级 脏读 不可重复读 幻读     未提交读 可能 可能 可能   已提交读 不可能 可能 可能   可重复读 不可能 不可能 可能   可串行化读 不可能 不可能 不可能    MySQL的事务隔离级别 #   InnoDB默认标记为可重复读 InnoDB并不是标准定义上的课重复读 InnoDB默认在可重复读的基础上避免幻读  MySQL事务隔离级别设置 #   可在global/session/下个事务，级别分别进行设置 建议使用Read committed(同Oracle) 或者建议使用默认的Repeatable read  set tx_isolation = \u0026#39;\u0026#39; -- 设置隔离级别 事务与并发写 #   某个正在更新的记录再提交或回滚前不能被其他事务同时更新  事务回滚的实现 #   回滚段(rollback segment)与数据前像  3.2-存储引擎概述 #  MySQL程序层次架构 #  MySQL存储引擎 #   有多种可选方案，可插拔，可修改存储引擎 基于表选择使用何种存储引擎  主要存储引擎 #     存储引擎 常用度 支持事务     InnoDB 主要，推荐 是   MyISAM 古老，偶尔有用，系统表 否   MEMORY 偶尔临时表有用，纯内存 否   BLACKHOLE 不用来存放数据，个别特殊用处 否   TokuDB 新颖，个别特殊场景有奇效 是   Cluster 新颖，分布式，内存，线上不要用 是    InnoDB存储引擎 #   索引组织表 支持事务 支持行级锁 数据块缓存 日志持久化 稳定可靠，性能好，线上尽量使用InnoDB  MyISAM存储引擎 #   堆表 不支持事务 只维护索引缓存池，表数据缓存交给操作系统 锁粒度较大 数据文件可以直接拷贝，偶尔可能会用上 不建议线上业务数据使用  MWMORY存储引擎 #   数据全内存存放，无法持久化 性能较高 不支持事务 适合偶尔作为临时表使用 create temporary table tmp (id int) engine = memory ;  BLACKHOLE存储引擎 #   数据不作任何存储 利用MySQL Replicate，充当日志服务器 在MySQL Replicate环境中充当代理主  TokuDB #   分形树存储结构 支持事务 行锁 压缩效率较高 适合大批量insert的场景  MySQL Cluster #   多主分布式集群 数据节点间冗余，高可用 支持事务 设计上易于扩展 面向未来，线上慎用  改变表的存储引擎 #  alter table m ENGINE=innodb;\n3.3-InnoDB存储引擎 #  InnoDB存储引擎体系架构 #  InnoDB相关的磁盘文件 #     文件 名称 数量 位置     系统表空间 ibdata1 一个实例一个 innodb_data_home_dir   日志文件 ib_logfile0/1 一个实例两个(可配置) innodb_log_group_home_dir   表定义文件 表名.frm 每张表一个 Schema目录下   表数据文件 表名.ibd 如果innodb_file_per_table = 1, 则每张表一个 Schema目录下    InnoDB系统表空间文件 #   ibdata1里存放了什么:  回滚段 所有InnoDB表元数据信息 Double Write, Insert buffer dump等等\u0026hellip;.   自动扩展机制  InnoDB与磁盘文件有关的参数 #     参数 样例值 备注     innodb_data_home_dir /data/mysql/node_1 数据主目录   innodb_log_group_home_dir /data/mysql/node_1 一般同上   innodb_data_file_path ibdata1:512M:autoextned 请开启autoextned   innodb_autoextend_increment 128 MB,勿太大或太小   innodb_file_per_table 1 强烈建议开启   innodb_log_file_size 100MB 性能相关   innodb_log_files_in_group 2 性能相关    InnoDB数据文件存储结构 #   索引组织表(聚簇表) 根据表逻辑主键排序 数据节点每页16K 根据主键寻址速度很快 主键值递增的insert插入效率较好 主键值随机insert插入效率差 因此，InnoDB表必须指定主键，建议使用自增数字  InnoDB数据块缓存池 #   数据的读写需要经过缓存 数据以整页(16K)为单位读取到缓存中 缓存中的数据以LRU策略换出 IO效率高，性能好  InnoDB Buffer Pool相关参数 #     参数 样例值 备注     innodb_buffer_pool_size 10G 根据总物理内存设置    InnoDB数据持久化与事务日志 #   事务日志实时持久化 内存变化数据(脏数据)增量异步刷出到磁盘 实例故障靠重放日志恢复 性能好，可靠，恢复快  InnoDB日志持久化相关参数 #     参数 样例值 备注     innodb_flush_log_at_trx_commit 1 可选：0：每隔1s写入并持久化一次日志。1：每次commit都写入并持久化日志。2：每次提交日志写到内存，每1s持久化一次    InnoDB行级锁 #   写不阻塞读 不同行间的写互相不阻塞 并发性能好  InnoDB与事务ACID #   事务ACID特性完整支持  回滚段失败回滚 支持主外键约束 事务版本+回滚段=MVCC 事务日志持久化   默认可重复读隔离级别，可以调整  3.4-InnoDB事务锁 #  什么是计算机程序锁 #   计算机程序锁  控制对共享资源进行并发访问 保护数据的完整性和一致性    数据库中的锁 #   分为两个大类      lock latch/mutex     对象 事务 线程   保护 数据库逻辑内容 内存数据结构   持续时间 事务过程中 临界资源争抢     我们主要关心的是事务锁  数据库事务并发 #   对同一行记录的修改必须串行化  事务锁粒度 #   行锁  InnoDB, Oracle   页锁  SQL Server   表锁  MyISAM, Memory   锁升级  InnoDB存储引擎中的锁模式与粒度 #   四种基本锁模式  共享锁(S) - 读锁 - 行锁 排他锁(X) - 写锁 - 行锁 意向共享锁(IS) - 表级 意向排他锁(IX) - 表级   意向锁  意向锁总是自动先加，并且意向锁自动加自动释放 意向锁提示数据库这个session将要在接下来施加何种锁 意向锁和X/S锁级别不同，除了阻塞全表级别的X/S锁外其他任何锁    InnoDB锁模式互斥 #  数据库加锁操作 #   一般的select语句不加任何锁，也不会被任何事物锁阻塞  读的隔离性由MVCC确保   S锁  手动：select * from tb_test lock in share mode; 自动：insert前   X锁  手动：select * from tb_test lock for update; 自动：update，delete前    InnoDB行锁的实现 #   通过索引项加锁实现  只有条件走索引才能实现行级锁 索引上有重复值，可能锁住多个记录 查询有多个索引可以走，可以对不同索引加锁 是否对索引加锁实际上取决于MySQL执行计划   自增主键做条件更新，性能最好  没有索引的话会对整张表加锁。\nInnoDB的gap lock #   什么是幻读 gap lock消灭幻读  InnoDB消灭幻读仅仅为了确保statement模式replicate的主从一致性   小心gap lock 自增主键做条件更新，性能最好  死锁 #    什么是死锁\n A、B两个事务，A先更新t1，同时B更新t2，A再更新t2，B再更新t1就发生了死锁。    死锁数据库自动解决\n 数据库挑选冲突事务中回滚代价较小的事务回滚    死锁预防\n 单表死锁可以根据批量更新里的更新条件排序 可能冲突的跨表事务尽量避免并发 尽量缩短事务长度    业务逻辑加锁 #    业务流程中的悲观锁\n 任何的并发修改都有可能造成我们的业务逻辑最终的错误，在事务流程中一开始就加锁，最后释放    如何缩短锁的时间\n  "});index.add({'id':187,'href':'/life/docs/databases/mysql_163%E8%AF%BE%E5%A0%82/%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%BE%E5%A0%82mysql_chapter4/','title':"MySQL应用优化",'section':"网易云课堂MySQL微专业学习笔记",'content':"MySQL应用优化 #  4.1-MySQL索引优化与设计 #  什么是索引 #   索引的意义 —— 快速定位要查找的数据  数据库索引查找 #   全表扫描 VS 索引查找  如何根据首字母找到所在行 #   二分查找 B+tree  InnoDB表聚簇索引 #  索引中只放着排序字段和ID\n创建索引 #   单列索引  create index idx_test1 on tb_student (name);  联合索引  create index idx_test2 on tb_student (name, age);  索引中先根据name排序，name相同的情况下，根据age排序  索引维护 #   索引维护由数据库自动完成 插入/修改/删除每一个索引行都会变成一个内部封装的事务 索引越多，事务越长，代价越高 索引越多对表的插入和索引字段修改就越慢 控制表上索引的数量，切忌胡乱添加无用索引  如何使用索引 #   依据WHERE查询条件建立索引  select a, b from tab_a where c=? ; idx_c (c) select a, b from tab_a where c=? and d=?; idx_cd (c, d)  排序order by, group by, distinct字段添加索引  select * from tb_a order by a; select a, count(*) from tb_a group by a; idx_a (a) select * from tb_a order by a, b; idx_a_b (a, b) select * from tb_a order where c=? by a; idx_c_a (c, a) 索引与字段选择性 #    某个字段其值的重复程度\n  选择性很差的字段通常不适合创建单列索引\n 男女比例相仿的列表中性别不适合创建单列索引 如果男女比例极不平衡，要查询的又是少数方(理工院校查女生)可以考虑使用索引    联合索引中选择性好的字段应该排在前面\n  select * from tab_a where gender=? and name=?; idx_a1 (name, gender) 联合索引与前缀查询 #   联合索引能为前缀单列，复列查询提供帮助  idx_smp (a, b, c) where a=? ; where a=? and b=? ; where a=? and c=? ;(部分ok)  合理创建联合索引，避免冗余 (a) , (a, b) , (a, b, c) X (a, b, c) ok  长字段上的索引 #   在非常长的字段上建立索引影响性能 InnoDB索引单字段(utf8)只能取前767 bytes 对长字段处理的方法  Email类，建立前缀索引  Mail_addr varchar(2048) idx_mailadd (Mail_addr(30)) ok  住址类，拆分字段  Home_address varchar(2048) idx_mailadd (Mail_addr(30)) ? -- 很可能前半段都是相同的省市区街道名称 Province varchar(1024), City varchar(1024), District varchar(1024), Local_address varchar(1024) ... -- 建立联合索引或单列索引   索引覆盖扫 #   最核心SQL考虑索引覆盖 select Name from tb_user where UserID=? Key idx_uid_name(UserID, Name)  不需要回表获取name字段，IO最小，效率最高  无法使用索引的情况 #   索引列进行数学运算或函数运算 where id+1=10; X where id = (10-1); ok year(col) \u0026lt; 2007; X col \u0026lt; \u0026#39;2007-01-01\u0026#39;; ok  未含符合索引的前缀字段 Idx_abc (a, b, c): where b=? and c=?; X (b, c) ok  前缀通配,'_\u0026lsquo;和\u0026rsquo;%\u0026lsquo;通配符 Like \u0026#39;%xxx%\u0026#39;; X Like \u0026#39;xxx%\u0026#39;; ok  where 条件使用NOT, \u0026lt;\u0026gt;, != 字段类型匹配  并不绝对，但是无法预测地会造成问题，不要使用  a int(11), idx_a (a) where a = \u0026#39;123\u0026#39;; X where a = 123 ; ok   利用索引排序 #  idx_a_b (a, b)\n 能够使用索引帮助排序的查询：  order by a a = 3 order by b order by a, b order by a desc, b desc a \u0026gt; 5 order by a  不能使用索引帮助排序的查询：  order by b a \u0026gt; 5 order by b a in (1, 3) order by b order by a asc, b desc 如何确定一个查询走没走索引，走了哪个索引 #   explain是确定一个查询如何走索引最简便有效的方法 explain select * from tb_test ; 关注的项目  type:查询access的方式 key:本次查询最终选择使用哪个索引，NULL为未使用索引 key_len:选择的索引使用的前缀长度或者整个长度 rows:可以理解为查询逻辑读，需要扫描过的记录行数 extra:额外信息，主要指的fetch data的具体方式    4.2-MySQL数据库设计 #  什么是Schema设计 #   设计数据库的表，索引，以及表和表的关系  在数据模型的基础上将关系模型转化为数据库表 满足业务模型需要基础上根据数据库和应用特点优化表结构    为什么Schema需要设计 #   Schema关系到应用程序功能与性能  满足业务功能需要 同性能密切相关 数据库扩展性 满足周边需求(统计，迁移等)   关系型数据库修改Schema经常是高危操作  Schema设计要体现一定的前瞻性    完全由开发者主导的Schema设计 #   着眼于实现当前功能 完全基于功能的设计可能存在一些隐患  不合理的表结构或索引设计造成性能问题 没有合理评估到数据量的增长造成空间紧张而且难以维护 需求频繁修改造成表结构经常变更 业务重大调整导致数据经常需要重构订正    基于性能的表设计 #   根据查询需要设计好索引 根据核心查询需求，适当调整表结构 基于一些特殊业务需求，调整实现方式  索引 #   正确使用索引 更新尽可能使用主键或唯一索引 主键尽可能使用自增ID字段 核心查询覆盖扫描  用户登录需要根据用户名返回密码用于验证create index idx_uname_passwd on tb_user (username, password); 建立联合索引避免回表取数据    反范式，冗余必要字段 #   针对核心SQL保留查询结果所必须的冗余字段，避免频繁join  例：消息表中冗余了每次读消息必须返回的nickname字段，避免每次读消息都变成join操作。代价是用户修改nickname成本变高。    拆分大字段 #   拆分大字段到单独表中，避免范围扫描代价大  例：博文表拆分两份，标题表只保留标题和内容缩略部分，用于快速批量返回标题列表，正文表保存大段博文内容，用于点开文章单个读取    避免过多字段或过长行 #   根据SQL必要返回设计字段，有必要就拆表，避免过多字段 一次没有必要获取那么多列数据 行过长导致表数据页记录变少，范围扫描性能降低 更新数据也代价增加 16K也最少放2行，可能出现行迁移  分页查询 #   避免limit + offset过大 应该使用自增主键ID模拟分页  第一页，直接查 得到第一页的max(id)=123(一般是最后一条记录) 第二页，带上id\u0026gt;123查询：where id\u0026gt;123 limit 100 这样每次只需要扫描100条数据   要求业务上禁止查询XX页之后的数据  热点读数据特殊处理 #   根据数据获取的频率或数量不同对热点数据做特殊处理  例1：论坛系统中置顶帖、公告贴，可以单独拆分存储，由于每次访问都要全部读出来，单独放在一起，避免每次都到普通表中随机找出来    热点写数据特殊处理 #   根据数据获取的频率或数量不同对热点数据做特殊处理  例2：微博系统中对于大量关注的热点账号消息从\u0026quot;推\u0026quot;改为\u0026quot;拉\u0026quot;，避免过量insert操作。    准实时统计 #   对不需要精确结果的计数等统计要求，建立定期更新结果表  例：首页要求展示动态成交总金额，维护一个计数表，每分钟根据原表注册时间获取增量sum值更新计数表，避免每次用户刷新都要扫描交易全记录表    实时统计改进1 - 触发器实时统计 #   对需要精确统计的计数利用数据库触发器维护计数表  例：用户量冲亿活动要求实时统计，用户表上加触发器，每次有新用户插入就同时在计数表+1    实时统计改进2 - 缓存实时统计 #   对需要精确统计的计数利用前端缓存实时维护计数  例：用户量冲亿活动要求实时统计，注册数量在缓存中实时维护，每注册一个就+1，完全避免数据库读写操作。缓存万一故障失效，可从数据库整体count重新获取。    实时统计改进2 - 最大自增ID获取总数 #   很多逻辑可以利用自增ID主键最大值直接作为总数  例：用户量冲亿活动要求实时统计，用户表加上自增ID作为主键，只要取当时max(ID)就可以得到用户总数    课拓展性设计 #   可拓展性  硬件资源增长有极限的情况下处理尽可能久的线上业务   数据分级，冷数据归档与淘汰  可以不断释放空间供新数据使用   为数据分布式做准备  分库分表 水平拆分 牺牲一定的关系模型支持    分区表与数据淘汰 #   range分区 适合数据需要定期过期的大表 单个分区扫描迁移数据到历史库避免全表扫描IO开销 删除单个分区非常高效  分区表与垂直分区 #   list分区 适合将来可能要基于地区，类目等方式垂直拆分数据的方式 清理节点上不要的数据非常高效  分区表与水平分区 #   hash分区 适合将来需要做水平拆分的表 清理节点上不要的数据非常高效  MySQL分区表的局限 #   主键或唯一键必须包含在分区字段内 分区字段必须是整数类型，或者加上返回整数的函数  满足周边需求 #   为周边需求额外增加表设计  为后台统计任务增加特殊索引 为数据迁移或统计需求增加时间戳    统计和后台需求 #   统计运行SQL往往和线上有很大不同  利用MySQL——主多从，主从可以建不同索引的特性将统计分流到特定从库 包括一些特殊用户批量查询等，所有对线上有IO压力的查询都要读写分离    自动更新时间戳 #   统计需求经常要求从线上读走增量数据 表的第一个timestamp类型字段再写入时如果不填值，会自动写入系统时间戳 表的第一个timestamp类型字段每次记录发生更新后都会自动更新 在update_time字段上建索引用于定时导出增量数据  Schema设计与前瞻性 #   基于历史经验教训，预防和解决同类问题 把折腾DBA够呛的所有Schema改造的原因记录并分析总结 例： 业务为例用户信息加密做了大改造  数据库结果大量改动，增加了加密字段，验证策略表，所有表重新订正数据等等 是否所有用到用户信息管理的应用都要去上线就用密文？   程序bug误删数据，线上风险大  改造业务流程，不再删除数据，加入is_deleted标记位，经常给各种表加 今后的类似表是否一上线就都用标记位的方式，并加上修改原因字段？   支付类应用后期做了风控改造  对线上订单大表改造，加了限额，终端类型等字段 遇到支付类应用，是否一上线就提示业务是否需要考虑风控并留好相关字段？    4.3-MySQL容量评估 #  性能容量评估 #   分析线上业务场景 评估数据库服务器所需性能指标 预估可能成为瓶颈的服务器资源 帮助数据库性能调优  数据库服务器硬件性能指标 #   磁盘IO性能 内存容量 CPU 网络吞吐量 磁盘容量  数据库业务特点关键词 #   OLTP/OLAP类型 并发请求 读写比例 数据量 冷热数据比 数据分级存储  OLTP/OLAP #   T = Transaction 面向广大用户，高并发，较短事务操作 互联网应用绝大部分属于OLTP OLTP看重服务器CPU，内存，写事务较多或内存不够则依赖磁盘IO A = Analytical 通常面向内部人员，大规模复查询 OLAP看重磁盘扫描的IO能力，部分依赖内存排序  并发请求 - 衡量线上业务繁忙程度 #   业务高峰时数据库的每秒并发访问量是多少 通过应用服务器数量，连接池配置判断 通过产品估算初上线用户规模和用户增长速度判断 通过实际业务业务类型判断 并发量相关资源：CPU  读写比例 - 描述应用程序如何使用数据库 #   线上业务select只读与update/delete/insert写操作比例 delete/update通常都是先读再写 insert需要区分数据写入时持续insert还是大量导入数据 根据业务实际场景分析 多读场景相关资源：内存 多写场景相关资源：磁盘IO  数据量 - 总量 #   数据库服务器存储设备可扩容能力的上限 根据估算的业务量，写入模式，分析数据增长量 预估一个硬件升级周期内数据库可存放数据的总量，上线时要留好余量 数据总量相关资源：磁盘容量  冷数据与热数据 - 有用数据的实时集合 #   热数据，线上最新一定周期内将被反复访问的数据 冷数据，线上保存着的，最近不会被在线用户用到的数据 估算活跃用户量，数据增长量等预估热数据量 内存大小尽可能足够存放线上实时热数据 热数据相关资源：内存  线上数据分层存储 - 缓解线上磁盘空间压力 #   最新热数据确保放在内存中 还可能访问到的较早数据存放在线上库磁盘中 更早的不会常规访问的数据定期迁移至历史库中 区分哪些数据时效性强可以迁移  服务器资源选型 - 将可选方案列出来 #     资源指标 可选方案     磁盘IO性能 单盘 -\u0026gt; 盘阵; SATA -\u0026gt; SAS; HDD -\u0026gt; SSD   内存容量 较小内存 -\u0026gt; 较大内存   CPU 普通 -\u0026gt; 多核，超线程   网络吞吐量 千兆 -\u0026gt; 万兆; 单网卡 -\u0026gt; 多路;   磁盘容量 单盘 -\u0026gt; 盘阵; 单盘 -\u0026gt; LVM    案例一，网易云音乐曲库数据库服务器评估 #   用于存放线上数千万歌曲信息 确定属于OLTP线上类型数据库 并发请求量  50台应用服务器，每台最大连接数100 可能峰值5000qps，并发请求量较大   CPU需求高 读写比例  访问模式以用户列出歌单和播放歌曲时查询歌曲信息为主，用户只有只读查询 写数据发生在录入新歌或修改歌曲信息时后台操作，写比例小，且为批量导入 读写比100:1   数据总量  估算每首歌信息8K，总计5000万，总量400G 数据总量增长相对缓慢   冷热数据  5000万歌曲中大约40%可能被访问，10%属于热点歌曲 热数据大约\u0026lt;=40G   数据分级存储需求  由于没有用户产生的数据，歌曲信息无法分级存储   内存需求一般，\u0026gt;=40G 磁盘IO能力需求一般 网络流量要求，8k*2500/1024 ≈ 20MB/S，一般     资源指标 可选方案     磁盘IO性能 两块SAS做RAID1   内存容量 96G内存   CPU 2c8core超线程 相当于32核   网络吞吐量 千兆双网卡bunding   磁盘容量 900G    案例二，网易理财销售数据库服务器评估 #   用于存放理财用户线上订单 确定属于OLTP线上类型数据库 业务场景有明显特征  特定高息产品秒杀销售时间窗有大量并发订单写入 平时只有少量订单查询和请求，和较低的常规产品购买请求   评估应以满足最关键的业务高峰为基准 并发请求量  秒杀期间持续时间短，但是并发量预估30台应用服务器约2000tps   读写比例  高峰时写订单是主要开销操作   CPU要求高 磁盘IO要求很高 数据总量  根据业务分析，订单属于写入瞬时量大，总量较小，单笔金额较高 总量预估一年成交百万级别，增长较稳定 判断数据存储需求小于200G   冷热数据  峰值写入为主，内存要求存放热点期间产生的脏数据即可   数据分级存储需求  用户订单业务约定页面展示最近半年订单，半年前的需要到历史查询页面专门查询 因此可以做分级存储，迁移所有半年前的订单至历史库   内存需求一般， \u0026gt;= 30G 磁盘空间需求一般， \u0026gt;=200G 磁盘IO能力需求很高 网络要求较高  并发流量较高 响应速度要求高       资源指标 可选方案     磁盘IO性能 两块SSD做RAID1   内存容量 64G内存   CPU 2c8core超线程 相当于32核   网络吞吐量 万兆双网卡bunding   磁盘容量 600G    4.4-MySQL性能测试 #  为什么需要性能测试 #   对线上产品缺乏心理预估 重现线上异常 规划未来的业务增长 测试不同硬件软件配置  性能测试的分类 #   设备层的测试 业务层的测试 数据库层的测试  设备层的测试 #   关注的指标  服务器、磁盘性能 磁盘坏块率 服务器寿命    业务层测试 #   针对业务进行测试  数据库层测试 #   什么情况下要做MySQL的测试  测试不同的MySQL分支版本 测试不同的MySQL版本 测试不同的MySQL参数搭配    MySQL测试分类 #   CPU Bound IO Bound  写入测试 更新测试 纯读测试 混合模式\n常用的测试工具 #   开源的MySQL性能测试工具  sysbench tpcc-mysql mysqlslap   针对业务编写性能测试工具  blogbench    性能测试衡量指标 #   服务吞吐量(TPS, QPS) 服务响应时间 服务并发性  Sysbench #   业界较为出名的性能测试工具 可以测试磁盘、CPU、数据库 支持多种数据库：Oracle, DB2, MySQL 需要自己下载编译安装 建议版本：sysbench0.5  编译安装Sysbench #   下载sysbench  git clone https://github.com/akopytov/sysbench.git   编译\u0026amp;安装  ./autogen.sh ./configure make \u0026amp;\u0026amp; make install    Sysbench流程 #   常见的做法  初始化数据 -\u0026gt; 运行测试 -\u0026gt; 清理数据\nPrepare语法 #  sysbench --test=parallel_prepare.lua --oltp_tables_count=1 --rand-init=on --oltp-table-size=500000000 --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=sys --mysql-password=netease --mysql-db=sbtest --max-requests=0 prepare    参数 含义     \u0026ndash;test=parallel_prepare.lua 运行导数据的脚本   \u0026ndash;oltp_tables_count 测试需要几张表   \u0026ndash;oltp-table-size 每张表的大小   \u0026ndash;mysql-host MySQL Host   \u0026ndash;mysql-port MySQL Port   \u0026ndash;mysql-db MySQL DB   \u0026ndash;mysql-user MySQL User   \u0026ndash;mysql-password MySQL Password   \u0026ndash;rand-init 是否随机初始化数据   \u0026ndash;max-requests 执行多少个请求之后停止   prepare 执行导数据    Sysbench表结构 #  create table \u0026#39;sbtest1\u0026#39;( \u0026#39;id\u0026#39; int(10) unsigned not null AUTO_INCREMENT, \u0026#39;k\u0026#39; int(10) unsigned not null DEFAULT \u0026#39;0\u0026#39;, \u0026#39;c\u0026#39; char(120) not null DEFAULT \u0026#39;\u0026#39;, \u0026#39;pad\u0026#39; char(60) not null DEFAULT \u0026#39;\u0026#39;, PRIMARY KEY (\u0026#39;id\u0026#39;), KEY \u0026#39;k_1\u0026#39; (\u0026#39;k\u0026#39;) ) ENGINE=InnoDB AUTO_INCREMENT=3000000001 DEFAULT CHARSET=utf8 MAX_ROWS=1000000 Run语法 #  sysbench --test=oltp.lua --oltp_tables_count=1 --num-threads=100 --oltp-table-size=500000000 --oltp-read-only=off --report-interval=10 --rand-type=uniform --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=sys --mysql-password=netease --mysql-db=sbtest --max-time=1000 --max-requests=0 run    参数 含义     \u0026ndash;test=oltp.lua 需要运行的lua脚本   \u0026ndash;oltp_tables_count 测试需要几张表   \u0026ndash;oltp-table-size 每张表的大小   \u0026ndash;num-threads 测试并发线程数   \u0026ndash;oltp-read-only 是否为只读测试   \u0026ndash;report-interval 结果输出间隔   \u0026ndash;rand-type 数据分布模式，热点数据或者随机数据   \u0026ndash;max-time 最大运行时间   \u0026ndash;max-requests 执行多少个请求之后停止   prepare 开始测试    特殊情况 #   写入测试  写入数据进行测试 -\u0026gt; 清理数据\ncleanup #   手动drop掉表和database 使用sysbench提供的cleanup命令  sysbench --test=parallel_prepare.lua --oltp_tables_count=1 --rand-init=on --oltp-table-size=500000000 --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=sys --mysql-password=netease --mysql-db=sbtest --max-requests=0 cleanup Tpcc-mysql #    TPC-C是专门针对联机交易处理系统(OLTP系统)的规范\n  Tpcc-mysql由percona根据规范实现\n  下载Tpcc-mysql\n bzr branch lp:~percona-dev/perconatools/tpcc-mysql    编译安装\n  使用Tpcc-mysql的步骤 #  创建表结构和索引 -\u0026gt; 导数据 -\u0026gt; 运行测试 -\u0026gt; 数据清理\n创建表结构 #   create_table.sql add_fkey_idx.sql  Tpcc-load #  tpcc_load [server] [DB] [user] [pass] [warehouse]\n   函数 含义     server 数据库IP   DB DB名称   user 用户名   pass 密码   warehouse 仓库数量    Tpcc-start #  tpcc_start -h server_host -P port -d database_name -u mysql_user -p mysql_password -w warehouse -c connections -r warmup_time -I running_time -i report-interval -f report-file    函数 含义     warehouse 仓库数量   connections 并发线程数   warmup_time 预热时间   running_time 运行时间   report_interval 输出时间间隔   report_file 输出文件    总结 #   IO Bound测试数据量要远大于内存、CPU Bound测试数据量要小于内存 测试时间建议大于60分钟，减小误差 Sysbench更倾向于测试MySQL性能、TPCC更接近于业务 运行测试程序需要同时监控机器负载，MySQL各项监控指标  "});index.add({'id':188,'href':'/life/docs/databases/mysql_163%E8%AF%BE%E5%A0%82/%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%BE%E5%A0%82mysql_chapter5/','title':"MySQL运维实践",'section':"网易云课堂MySQL微专业学习笔记",'content':"MySQL运维实践 #  5.1-MySQL日志系统 #  什么是日志 #   日志(log)是一种顺序记录事件流水的文件 记录计算机程序运行过程中发生了什么 多种多样的用途  帮助分析程序问题 分析服务请求的特征、流量等 判断工作是否成功执行 等等……    MySQL日志的分类 #   服务器日志  记录进程启动运行过程中的特殊事件，帮助分析MySQL服务遇到的问题 根据需求抓取特定的SQL语句，追踪性能可能存在的问题的业务SQL   事务日志  记录应用程序对数据的所有更改 可用于数据恢复 可用于实例间数据同步       分类 日志名称     服务器日志 服务错误日志   服务器日志 慢查询日志   服务器日志 综合查询日志   事务日志 存储引擎事务日志   事务日志 二进制日志    服务错误日志 #   记录实例启动运行过程中重要消息 配置参数  log_error = /data/mysql_data/node-1/mysql.log   内容并非全是错误消息 如果mysqld进程无法正常启动首先查看错误日志  慢查询日志 #   记录执行时间超过一定阈值的SQL语句 配置参数  slow_query_log = 1 slow_query_log_file = /data/mysql_data/node-1/mysql-slow.log long_query_time = 5  用于分析系统中可能存在性能问题的SQL  综合查询日志 #   如果开启将会记录系统中所有SQL语句 配置参数  general_log = 1 general_log_file = /data/mysql_data/node-1/mysql-slow.log  偶尔用于帮助分析系统问题，对性能有影响  查询日志的输出与文件切换 #   日志输出参数  log_output={file|table|none}\n 如果日志文件过大，可以定期截断并切换新文件  flush log;\n存储引擎事务日志 #   部分存储引擎拥有重做日志(redo log) 如InnoDB, TokuDB等WAL(Write Ahead Log)机制存储引擎 日志随着事务commit优先持久化，确保异常恢复不丢数据 日志顺序写性能较好  InnoDB事务日志重用机制 #   InnoDB事务日志采用两组文件交替重用  二进制日志binlog #   binlog (binary log) 记录数据引起数据变化的SQL语句或数据逻辑变化的内容 MySQL服务层记录，无关存储引擎 binlog的主要作用：  基于备份恢复数据 数据库主从同步 挖掘分析SQL语句    开启binlog #   主要参数  log_bin = c:/tmp/mylog/mysql-bin\rsql_log_bin = 1\rsync_binlog = 1\r 查看binlog  show binary logs;\nbinlog管理 #   主要参数  max_binlog_size = 100MB\rexpire_logs_days = 7\r  binlog始终生成新文件，不会重用\n  手工清理binlog\n  purge binary logs to 'mysql-bin.000009';\rpurge binary logs before '2016-4-2 21:00:40'\r查看binlog内容 #   日志  show binlog events in 'mysql-bin.000011';\rshow binlog events in 'mysql-bin.000011' from 60 limit 3;\r mysqlbinlog工具  mysqlbinlog c:/tmp/mylog/mysql-bin.000001\r--start-datetime | --stop-datetime\r--start-position | --stop-position\rbinlog格式 #   主要参数  binlog_format = {ROW|STATEMENT|MIXED}\n 查看row模式的binlog内容  mysqlbinlog --base64-output=decode-rows -v c:/tmp/mylpg/mysql-bin.000001\n5.2-MySQL数据备份 #  基本指数 - 备份用途 #   数据备灾  应对硬件故障数据丢失 应对人为或程序bug导致数据删除   制作镜像库以供服务  需要将数据迁移、统计分析等用处 需要为线上数据建立一个镜像    基本知识 - 备份内容 #   数据  数据文件或文本格式数据   操作日志(binlog)  数据库变更日志    基本知识 - 冷备份与热备份 #   冷备份  关闭数据库服务，完整拷贝数据文件   热备份  在不影响数据库读写服务的情况下备份数据库    基本知识 - 物理备份与逻辑备份 #   物理备份  以数据页的形式拷贝数据   逻辑备份  导出为裸数据或者SQL(insert)语句    基本知识 - 本地备份与远程备份 #   本地备份  在数据库服务器本地进行备份   远程备份  远程连接数据库进行备份    基本知识 - 全量备份与增量备份 #   全量备份  备份完整的数据库   增量备份  只备份上一次备份以来发生修改的数据    基本知识 - 备份周期 #  考虑因素：\n 数据库大小(决定备份时间) 恢复速度要求(快速or慢速) 备份方式(全量or增量)  常用工具及用法 #   mysqldump - 逻辑备份，热备 xtrabackup - 物理备份， 热备 Lvm/zfs snapshot - 物理备份 mydumper - 逻辑备份，热备 cp - 物理备份，冷备  常用工具及用法 - mysqldump #  MySQL官方自带的命令行工具\n主要示例：\n 演示使用mysqldump备份表、库、实例  # 备份所有数据库 mysqldump -uroot -p123456 --socket=/var/run/mysqld/mysqld.sock --all-databases \u0026gt; /dbbackup/all_db.sql # 备份指定的数据库 mysqldump -uroot -p123456 --socket=/var/run/mysqld/mysqld.sock --databases db2 \u0026gt; /dbbackup/db2.sql # 备份单个表 mysqldump -uroot -p123456 --socket=/var/run/mysqld/mysqld.sock db2 t1 \u0026gt;/dbbackup/db2_t1.sql # 还原表 mysql \u0026gt; source /dbbackup/db2_t1.sql  演示使用mysqldump制作一致性备份  mysqldump --single-transaction -uroot -p123456 --all-databases \u0026gt; /dbbackup/add_db_2.sql  演示使用mysqldump远程备份一个数据库  mysqldump -utest -ptest -h192.168.0.68 -P3306 --all-databases \u0026gt; /dbbackup/remote_bakall.sql  演示使用mysqldump导出数据为csv格式  mysqldump -uroot -p123456 --single-transaction --fields-terminated-by=, db1 -T /tmp 常用工具及用法 - xtrabackup #  特点：\n 开源，在线备份InnoDB表 支持限速备份，避免对业务造成影响 支持流备 支持增量备份 支持备份文件压缩与加密 支持并行备份与恢复，速度快  xtrabackup备份原理 #   基于InnoDB的crash-recovery功能 备份期间允许用户读写，写请求产生redo日志 从磁盘上拷贝数据文件 从InnoDB redo log file实时拷贝走备份期间产生的所有redo日志 恢复的时候 数据文件 + redo日志 = 一致性数据  实用脚本innobackupex #   开源Perl脚本，封装调用xtrabackup及一系列相关工具与OS操作，最终完成备份过程 支持备份InnoDB和其他引擎的表 备份一致性保证  innobackupex备份基本流程 #  start xtrabackup_log -\u0026gt; copy .ibd; ibdata1 -\u0026gt; FLUSH TABLE WITH READ LOCK -\u0026gt; copy .FRM; MYD; MYI; misc files -\u0026gt; Get binary log position -\u0026gt; UNLOCK TABLES -\u0026gt; stop and copy xtrabackup_log\ninnobackupex使用 #  主要示例：\n 全量备份  innobackupex --user=root --password=123456 --defaults-file=/etc/mysql/my.cnf /dbbackup  增量备份  innobackupex --user=root --password=123456 --defaults-file=/etc/mysql/my.cnf --incremental --incremental-dir /dbbackup/2016-4-3_13:24:32 /dbbackup  流方式备份  innobackupex --user=root --password=123456 --defaults-file=/etc/mysql/my.cnf --stream=xbstream /dbbackup/ \u0026gt; /dbbackup/stream.bak  并行备份  innobackupex --user=root --password=123456 --defaults-file=/etc/mysql/my.cnf --parallel=4 /dbbackup/  限流备份  innobackupex --user=root --password=123456 --defaults-file=/etc/mysql/my.cnf --throttle=10 /dbbackup/  压缩备份  innobackupex --user=root --password=123456 --defaults-file=/etc/mysql/my.cnf --compress --compress-thread 4 /dbbackup/ 如何制定备份策略 #  需要考虑的因素\n 数据库是不是都是innodb引擎表 -\u0026gt; 备份方式，热备or冷备 数据量大小 -\u0026gt; 逻辑备份or物理备份，全量or增量 数据库本地磁盘空间十分充足 -\u0026gt; 备份到本地or远程 需要多块恢复 -\u0026gt; 备份频率 小时or天  5.3-MySQL数据恢复 #  什么时候需要恢复数据 #   硬件故障(如磁盘损坏) 人为删除(如误删除数据、被黑) 业务回滚(如游戏bug需要回档) 正常需求(如部署镜像库、查看历史某时刻数据)  数据恢复的必要条件 #   有效备份 完整的数据库操作日志(binlog)  数据恢复思路 #   最新一次备份 + binlog恢复到故障时间点(适用于各种数据丢失场景) 挖掘最后一次备份到故障点之间的binlog获取相关SQL语句，构造反转SQL语句并应用到数据库(只是用于记录丢失，且binlog必须是row格式)  反转SQL语句 #  例：\nt1(id primary key, a int)\n反转SQL语句：\ninsert into t(id, a) values(1, 1) -\u0026gt; delete t1 where id=1 and a=1 update t1 set a=5 where id=1 -\u0026gt; update t1 set a=1 where id=1 delete from t1 where id=1 -\u0026gt; insert into t(id, a) values(1, 1)\n数据库恢复工具与命令 #   mysqldump备份 -\u0026gt; source恢复 xtrabackup备份 -\u0026gt; xtrabackup恢复 binlog备份 -\u0026gt; mysqlbinlog恢复  详细示例讲解 #   恢复某几条误删数据 恢复误删表、库 将数据库恢复到指定时间点  恢复误删除数据 #  case：误操作，删除数据忘记带完整条件，执行delete from user where age \u0026gt; 30 [and sex=male]\n需求：将被删除的数据还原\n恢复前提：完整的数据库操作日志(binlog)\ndelete from user where sex=\u0026#39;female\u0026#39;; # 首先需要找到binlog里的信息 mysqlbinlog -vv mysql-bin.000001 # 找出sql语句，然后写出反转sql语句 恢复误删表、库 #  case：业务被黑，表被删除了(drop teble user)\n需求：将表恢复\n前提：备份 + 备份以来完整binlog\ninnobackupex --apply-log /dbbackup/filename # 查看binlog的位置点 cat xtrabackup_binlog_info # 查看结束点 mysqlbinlog -vv filename mysqlbinlog -vv --start-position=2556990 -- stop-position=2776338 mysqlbinlog -vv --start-position=2556990 -- stop-position=2776338 | mysql -uroot -p123456 --sock=/dbbackup/mysql_3309/mysqld.sock 课程小结 #   恢复是已经非常苦逼的差事，尽量避免做。我们要做数据卫士而不是救火队员。(线上应该严格把控权限，数据变更操作应事先测试，操作时做好备份) 有效备份(+binlog)是重中之重，对数据库定期备份是必须的 备份是一切数据恢复的基础  5.4-MySQL线上部署 #  MySQL线上部署 #  考虑因素：\n 版本选择， 5.1、5.5还是5.6？ 分支选择，官方社区版？ percona server？ Mariadb？ 安装方式，包安装？二进制包安装？源码安装？ 路径配置，参数配置(尽量模板化、标准化) 一个实例多个库 or 多个实例单个库？  二进制安装MySQL #   下载软件包 解压放到指定目录(比如/usr/local) 将MySQL目录放到PATH中 初始化实例，编辑配置文件并启动 账户安全设置  编译安装MySQL #   下载MySQL源码安装包 安装必要包(make cmake bison-devel ncurses-devel build-essential) Cmake配置MySQL编译选项，可以定制需要安装的功能 make \u0026amp;\u0026amp; make install 初始化实例，编辑配置文件并启动 账户安全设置  MySQL升级 #   下载MySQL5.6安装包并配置MySQL5.6安装包安装路径 关闭MySQL5.5实例，修改部分参数，使用MySQL5.6软件启动 执行MySQL5.6路径下mysql_upgrade脚本 验证是否成功升级  MySQL多实例安装 #   部署好mysql软件 编辑多个配置文件，初始化多个实例 启动MySQL实例  MySQL多实例部署 #  为啥多实例部署？\n 充分利用系统资源 资源隔离 业务、模块隔离  MySQL线上安装小结 #   根据需求选择合适的版本以及分支，建议使用或升级到较高版本5.5或5.6 如果需要定制MySQL功能的话，可以考虑编译安装，否则的话建议使用二进制包安装，比较省事 根据机器配置选择部署多个MySQL实例还是单个实例，机器配置非常好的话，建议部署多实例  5.5-MySQL主从复制 #  MySQL主从复制 #   一主一从 主主复制 一主多从 多主一从 联级复制  MySQL主从复制用途 #   实时灾备，用于故障切换 读写分离，提供查询服务 备份，避免影响业务  MySQL主从复制部署 #  主从部署必要条件\n 主库开启binlog日志(设置log-bin参数) 主从server-id不同 从库服务器能连通主库  主从部署步骤：\n 备份还原(mysqldump或xtrabackup) 授权(grant replication slave on .) 配置复制，并启动(change master to) 查看主从复制信息(show slave status\\G)  MySQL复制存在的问题 #  存在的问题\n 主机宕机后，数据可能丢失 从库只有一个sql thread，主库写压力大，复制很可能延时  解决方法：\n 半同步复制 并行复制  MySQL semi-sync(半同步复制) #  半同步复制\n 5.5集成到MySQL，以插件形式存在，需要单独安装 确保事务提交后binlog至少传输到一个从库 不保证从库应用完这个事务的binlog 性能有一定的降低，响应时间更长 网络异常或从库宕机，卡住主库，直到超时或从库恢复  MySQL异步复制 #  MySQL semi-sync(半同步复制) #  配置MySQL半同步复制 #  只需一次：\n主库：\nINSTALL PLUGIN rpl_semi_sync_master SONAME 'semisync_master.so';\n从库：\nINSTALL PLUGIN rpl_semi_sync_slave SONAME 'semisync_slave.so';\n动态设置：\n主库：\nSET GLOBAL rpl_semi_sync_master_enabled=1; SET GLOBAL rpl_semi_sync_master_timeout=N; master 延迟切异步\n从库：\nSET GLOBAL rpl_semi_sync_slave_enabled=1;\n配置MySQL并行复制 #  并行复制\n 社区版5.6中新增 并行是指从库多线程apply binlog 库级别并行应用binlog，同一个数据库更改还是串行的(5.7版并行复制基于事务组)  设置\nset global slave_parallel_workers=10; 设置sql线程数为10\n联级复制 #  A -\u0026gt; B -\u0026gt; C\nB中添加参数： log_slave_updates B将把A的binlog记录到自己的binlog日志中\n复制监控 #  查询从库状态：\nshow slave status\\G\n复制出错处理 #  常见：1062(主键冲突) 1032(记录不存在) 解决：手动处理 或： 跳过复制出错 set global sql_slave_skip_counter=1\n总结 #   MySQL主从复制是MySQL高可用性、高性能(负载均衡)的基础 简单、灵活，部署方式多样，可以根据不同业务场景部署不同复制结构 MySQL主从复制目前也存在一些问题，可以根据需要部署复制增强功能来解决问题 复制过程中应该时刻监控复制状态，复制出错或延时可能给系统造成影响 MySQL复制是MySQL数据库工程师必知必会的一项基本技能  5.6-MySQL日常运维 #  DBA运维工作 #  日常\n 导数据、数据修改、表结构变更 加权限、问题处理 其他 数据库选型部署、设计、监控、备份、优化等  导数据及注意事项 #   数据最终形式(csv、sql文本 还是直接导入某库中) 导数据方法(mysqldump、select into outfile) 导数据注意事项  导出为csv格式需要file权限，而且只能数据库本地导 避免锁库锁表(mysqldump使用——single-transaction选项不锁表) 避免对业务造成影响，尽量在镜像库做    数据修改及注意事项 #   修改前切记做好备份 开事务做，修改完检查好了再提交 避免一次 修改大量数据，可以分批修改 避免业务高峰期做  表结构变更注意事项 #   在低峰期做 表结构变更是否会有锁？(5.6包含online ddl功能) 使用pt-online-schema-change完成表结构变更  可以避免主从延时 可以避免负载过高，可以限速    加权限及注意事项 #   只给符合需求的最低权限 避免授权时修改密码 避免给应用账号super权限  问题处理(数据库慢？) #   数据库慢在哪？ show processlist查看mysql连接信息 查看系统状态(iostat, top, vmstat)  小结 #   日常工作比较简单，但是任何一个操作都可能影响线上服务 结合不同环境，不同要求选择最合适的方法处理 日常工作应该求稳不求快，保障线上稳定是DBA的最大责任  5.7-MySQL参数调优 #  为什么要调整参数 #   不同服务器之间的配置、性能不一样 不同业务场景对数据的需求不一样 MySQL的默认参数只是个参考值，并不适合所有的应用场合  优化之前我们需要知道什么 #   服务器相关的配置 业务相关的情况 MySQL相关的配置  服务器上需要关注哪些 #   硬件情况 操作系统版本 CPU、网卡节电模式 服务器numa设置 RAID卡缓存  磁盘调度策略-write back #   数据写入cache既返回，数据异步的从cache刷入存储介质  磁盘调度策略-write through #   数据同时写入cache和存储介质才返回写入成功  Write Back VS Write Through #   write Back 性能优于 Write Through Write Through 比 Write Back安全性高  RAID #   RAID Redundant Array of Independent Disks  生产环境里一般不太会用裸设备，通常会使用RAID卡对一块盘或多块盘做RAID RAID卡会预留一块内存，来保证数据高效存储与读取 常见的RAID类型有:RAID1、RAID0、RAID10和RAID5    RAID0 VS RAID1 #   RAID 0 - Block Striped. No Mirror. No Parity. RAID 1 - Block Mirrored. No Stripe. No Parity.  RAID5 VS RAID10 #   RAID 5 - Block Striped. Distributed Parity.(至少三块盘，每块里有两个数据块和一个校验块) RAID 10 - Block Mirrored.(每两块盘做RAID1，然后再按组做RAID0，至少四块盘)  RAID如何保证数据安全 #   BBU(Backup Battery Unit)  BBU保证在WB策略下，即使服务器发生掉电或者宕机，也能够将缓存数据写入到磁盘，从而保证数据的安全    MySQL有哪些注意事项 #   MySQL的部署安装 MySQL的监控 MySQL参数调优  部署MySQL的要求 #   推荐的MySQL版本: \u0026gt;= MySQL5.5 推荐的MySQL存储引擎: InnoDB  系统调优的依据：监控 #   实时监控MySQL的slow log 实时监控数据库服务器的负载情况 实时监控MySQL内部状态值  通常关注哪些MySQL Status #   Com_Select/Update/Delete/Insert Bytes_received/Bytes_sent Buffer Pool Hit Rate Threads_connected/Threads_created/Threads_running  MySQL参数调优 #   为什么要调整MySQL的参数  MySQL是通用数据库，但业务是多变的，默认参数无法满足所有业务需求 MySQL内部一些参数是在MySQL一些很老的版本时候做的，可能之前是做限流和保护用的，但随着机器性能的提高，这些保护类的参数可能会成为性能瓶颈    读优化 #   合理利用索引对MySQL查询性能至关重要 适当的调整参数也能提升查询性能  innodb_buffer_pool_size #   InnoDB存储引擎自己维护一块内存区域完成新老数据的替换 内存越大越能缓存更多的数据  innodb_thread_concurrency #   innoDB内部并发控制参数，设置为0代表不做控制 如果并发请求较多，参数设置较小，后进来的请求将会排队  写优化 #   表结构设计上使用自增字段作为表的主键 只对合适的字段加索引，索引太多影响写入性能 监控服务器磁盘IO情况，如果写延迟较大则需要扩容 选择正确的MySQL版本，合理设置参数  哪些参数有助于提高写入性能 #   innoDB_flush_log_at_trx_commit \u0026amp;\u0026amp; sync_binlog innodb log file size innodb_io_capacity innodb insert buffer  主要影响MySQL写性能的两个参数 #   innoDB_flush_log_at_trx_commit sync_binlog  innoDB_flush_log_at_trx_commit #   控制InnoDB事务的刷新方式，一共有三个值：0,1,2  N=0 - 每隔一秒，把事务日志缓存区的数据写到日志文件中，以及把日志文件的数据刷新到磁盘上(高效，但不安全) N=1 - 每个事务提交时候，把事务日志从缓存区写到日志文件中，并且刷新日志文件的数据到磁盘上，优先使用此模式保障数据安全性(低效，非常安全) N=2 - 每事务提交的时候，把事务日志数据从缓存区写到日志文件中；每隔一秒，但不一定刷新到磁盘上，而是取决于操作系统的调度(高效，但不安全)    sync_binlog #   控制每次写入Binlog，是否都需要进行一次持久化  如何保证事务的安全 #   innoDB_flush_log_at_trx_commit 和 sync_binlog都设为1 事务要和Binlog保证一致性  (加锁)-\u0026gt; xa_prepare, Fsync -\u0026gt; Write And Fsync Binlog -\u0026gt; InnoDB Commit, Fsync -\u0026gt;(释放锁)\n串行有哪些问题 #   SAS盘一般每秒只能有150~200个Fsync。 换算到数据库每秒只能执行50~60个事务  社区和官方的改进 #   MariaDB提出改进，即使这两个参数都是1也能做到合并效果，性能得到了大幅提高。 官方吸收了MariaDB的思想，并在此基础上进行了改进，性能再次得到了提高  Tips:\n 官方在MySQL5.6版本之后才做了这个优化 Percona和MariaDB版本在MySQL5.5已经包含了这个优化  InnoDB Redo log #   Write ahead Log  Redo log的作用 #   Redo log用在数据库崩溃会的故障恢复  Redo log有哪些问题 #   如果写入频繁导致Redo log里对应的最老的数据脏页还没有刷新到磁盘，此时数据库将卡住，强制刷新脏页到磁盘 MySQL默认配置两个文件才10M，非常容易写满，生产环境中应适当调整大小。  innodb_io_capacity #   InnoDB每次刷多少个脏页，决定InnoDB存储引擎的吞吐能力。 在SSD等高性能存储介质下，应该提高该参数以提高数据库的性能。  Insert Buffer #   顺序读写 VS 随机读写 随机请求性能远小于顺序请求  尽可能多的随机请求合并为顺序请求才是提高数据库性能的关键\n MySQL从5.1版本开始支持Insert Buffer MySQL5.5版本之后同时支持update和delete的merge Insert Buffer只对二级索引且非唯一索引有效  总结 #   服务器配置要合理(内核版本、磁盘调度策略、RAID卡缓存) 完善的监控系统，提前发现问题 数据库版本要跟上，不要太新，也不要太老 数据库性能优化：  查询优化：索引优化为主，参数优化为辅 写入优化：业务优化为主，参数优化为辅    "});index.add({'id':189,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/sstzyfd5je/','title':"社哲讲堂",'section':"自我提升",'content':" 社哲讲堂 剖析\n 目录 #  "});index.add({'id':190,'href':'/life/docs/databases/mysql/mysql_%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/','title':"数据库设计的规范",'section':"mysql学习笔记",'content':"数据库设计的规范 #   数据库表和字段都大写 表都要加业务后缀，例如_C客户表 _B基础表 _P权限表 必须有主键，主键是表名去掉业务后缀，加_ID，大多表的主键使用UUID 字段多个单词时，全大写，用下划线隔开 类型INT/LONG/DOUBLE/TIMESTAMP/CHAR/VARCHAR2 尽量化在这几个类型中，这样数据库设计相当简单 排序号定死名称ORDER_NO 权限两个字段CREATE_BY创建人，CREATE_DEPT创建部门 记录创建时间CREATE_TIME  "});index.add({'id':191,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/iqcs36rgjy/','title':"人际剖析",'section':"自我提升",'content':" 人际关系 剖析\n 目录 #   什么叫魅力 我无所畏惧，因为 从此你不再受伤害 关于爱情令人不解的一切  "});index.add({'id':192,'href':'/life/docs/databases/mysql/mysql%E6%9F%A5%E8%AF%A2/','title':"mysql查询",'section':"mysql学习笔记",'content':"mysql学习(下面所有都是针对mysql而言) #  sql排序语句 #   升序   (select f.* from fruits f WHERE s_id IN (101,102) order by f_name)==(select f.* from fruits f WHERE s_id IN (101,102) order by f_name asc)   对于sql的升序而言,当使用了order by之后如果不添加desc那么默认是升序 order by f_name 和 order by f_name ASC 效果一致 降序   (select f.* from fruits f WHERE s_id not IN (101,102) order by f_name DESC )   order by之后加上DESC结果集就是降序   上面结合了 关键字in可以看到 in (101,102)和not in (101,102)\n 带between and 的范围查询 #   (select f.* from fruits f WHERE f.f_price between 2.00 and 14.00)查询价格在2.00元到14.00元之间的数据,这样也可以(select f.* from fruits f WHERE f.f_price\u0026gt;2.00 and f.f_price\u0026lt;12.67)  带like的字符串匹配查询 #   (select f.* from fruits f WHERE f.f_name like \u0026lsquo;%g%')查询f_name包含g的记录 (select f.* from fruits f WHERE f.f_name like \u0026lsquo;b%')查询以b开头的记录,同理结尾的字符也是一样原理  查询null值 #   (select c.* from customers c WHERE c.c_email is null)查询email为null的数据  带and 的多条件查询 #   (select f.* from fruits f WHERE f.s_id=\u0026lsquo;101\u0026rsquo; and f.f_price\u0026gt;=5)  带or 的多条件查询 #   (select f.* from fruits f WHERE f.s_id=\u0026lsquo;101\u0026rsquo; or f.s_id=\u0026lsquo;102\u0026rsquo;)  查询结果不重复 #   (select distinct f.* from fruits f)添加了过滤字段distinct  分组查询 #   (select f.s_id,count(*) as total from fruits f group by f.s_id) (select f.s_id,count(*) as total,group_concat(f.f_name) as g_name from fruits f group by f.s_id) 这里使用了一个函数group_concat (select f.s_id,count(*) as total,group_concat(f.f_name) as g_name,sum(f.f_price) as price from fruits f group by f.s_id)  HAVING #   [在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与合计函数一起使用]   (select f.s_id,count(*) as total,group_concat(f.f_name) as g_name,sum(f.f_price) as price from fruits f group by f.s_id having sum(f.f_price)\u0026gt;20)  合并使用 #  SELECT count( project_work_stage_id ) project_work_stage_id, count( project_phase_id ) project_phase_id_count, sum( actual_hours ) actual_hours_sum, AVG( actual_hours ) actual_hours_avg, GROUP_CONCAT( id ) ids, project_id FROM tb_project_plan_details WHERE 1 = 1 GROUP BY project_id # 以项目编号分组 HAVING # having的好处是可以把列中查询用作比较 \tproject_phase_id_count \u0026gt;= 3 # 工作事项数量必须大于等于3 ORDER BY project_phase_id_count DESC #确定最大数 \tLIMIT 1; #确定最大数 分页查询 #   (select f.* from fruits f LIMIT 10,5) ||(3-1)*5,5  连接查询(多表) #   (select c.,o. from customers c,orders o where c.c_id=o.c_id)普通查询 (select c.,o. from customers c inner join orders o on o.c_id=c.c_id)内连接查询,这里需要注意的是内连接查询的是公共部分,必须是两者都有相同的记录 外连接包括左外连接和右外连接 (select c.,o. from customers c right join orders o on o.c_id=c.c_id)右连接是orders table和customers table的公共部分+orders表记录 (select c.,o. from customers c left join orders o on o.c_id=c.c_id)左连接是orders table和customers table的公共部分+customers表记录 (由于mysql不支持全连接full join,所以必须采用其它方法)//select * from orders full join customers on orders.c_id=customers.c_id  索引 #  create table myUser(\rid VARCHAR(255) NOT NULL PRIMARY KEY ,\rname VARCHAR(255),\rcreateTime TIMESTAMP,\rINDEX indexName (name(244))\r)ENGINE=InnoDB DEFAULT CHARSET=utf8\r (show INDEX from myUser)查看所在表的索引  DROP TABLE IF EXISTS user_test;\rCREATE TABLE user_test(\rid int AUTO_INCREMENT PRIMARY KEY,\ruser_name varchar(30) NOT NULL,\rsex bit(1) NOT NULL DEFAULT b'1',\rcity varchar(50) NOT NULL,\rage int NOT NULL\r) ENGINE=InnoDB DEFAULT CHARSET=utf8\r 创建一个组合索引： ALTER TABLE user_test ADD INDEX idx_user(user_name , city , age) 匹配最左前缀是指优先匹配最左索引列，如：上面创建的索引可用于查询条件为：（user_name ）、（user_name, city）、（user_name , city , age）  注：满足最左前缀查询条件的顺序与索引列的顺序无关，如：（city, user_name）、（age, city, user_name）\n"});index.add({'id':193,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/talk_theme/','title':"聊天话题",'section':"自我提升",'content':" 由于在国内我们需要灵活的调整我们说话的主题这里我自己收集整理一下这些数据\n 目录 #   和女孩聊天认知基础  一级话题 二级话题 收集话题1 收集话题2    "});index.add({'id':194,'href':'/life/docs/databases/mysql/mysql_regexp/','title':"mysql正则表达式",'section':"mysql学习笔记",'content':"一:数据准备 #  CREATE TABLE `t_user` ( `USER_ID` int NOT NULL AUTO_INCREMENT, `USER_NAME` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, `USER_PASSWORD` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, `USER_EMAIL` char(80) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, PRIMARY KEY (`USER_ID`), KEY `IDX_NAME` (`USER_NAME`) ) ENGINE=InnoDB AUTO_INCREMENT=209 DEFAULT CHARSET=utf8mb3; -- 如果存在此存储过程则删掉 DROP PROCEDURE IF EXISTS proc_initData; DELIMITER ; CREATE PROCEDURE proc_initData() BEGIN DECLARE i INT DEFAULT 1; WHILE i\u0026lt;=6000 DO INSERT INTO t_user(USER_NAME,USER_PASSWORD,USER_EMAIL) VALUES(MD5(UUID()),MD5(UUID()), CONCAT(substring(UUID(),1,7) , \u0026#39;@\u0026#39;, substring(UUID(),4,8) ,\u0026#39;.com\u0026#39;) ); SET i = i+1; END WHILE; END ; CALL proc_initData(); 二:符号介绍 #  模式\t描述（具体匹配什么）\r^\t匹配字符串的开始位置。\r$\t匹配字符串的结束位置。\r.\t匹配除 \u0026quot;\\n\u0026quot; 之外的任何单个字符。\r[...]\t匹配所包含的任意一个字符。\r[^...]\t匹配未包含的任意字符。\r?\t匹配它前面的零个或一个子表达式（字符串）。\r*\t匹配它前面的零个或多个子表达式（字符串）。\r+\t匹配它前面的一个或多个子表达式（字符串）。\r[abc]\t匹配方括号之间列出的任何字符。\r[^abc]\t匹配方括号之间未列出的任何字符。\r[A-Z]\t匹配任何大写字母。\r[a-z]\t匹配任何小写字母。\r[0-9]\t匹配从0到9的任何数字。\r[[:\u0026lt;:]]\t匹配单词的开头。\r[[:\u0026gt;:]]\t匹配单词的结尾。\r[:class:]\t匹配字符类，即[：alpha：]匹配字母，[：space：]匹配空格，[：punct：]匹配标点符号，[：upper：] 匹配上层字母。\rp1|p2|p3\t匹配任何模式，p1或 p2或p3\r{n}\t匹配n前面元素的子表达式\r{m,n}\t匹配m到前面元素的n个子表达式\rselect * from t_user; -- 包含8的正则匹配 select * from t_user where USER_NAME REGEXP \u0026#39;8\u0026#39;; -- 包含8或者9的正则匹配 or select * from t_user where USER_NAME REGEXP \u0026#39;8|9\u0026#39;; -- 以8开头的正则匹配 SELECT * from t_user where USER_NAME REGEXP \u0026#39;^8\u0026#39; ; -- 以1结尾的正则匹配 SELECT * from t_user where USER_NAME REGEXP \u0026#39;1$\u0026#39; ; -- 以8或者9开头的正则匹配 SELECT * from t_user where USER_NAME REGEXP \u0026#39;^[8-9]\u0026#39; ; -- 以a-z开头的正则匹配 并且第二位是数字8的正则匹配 SELECT * from t_user where USER_NAME REGEXP \u0026#39;^[a-z]8\u0026#39; ; -- 转义符号 由于.是特殊符号 那么要找包含.的字符必须转义 SELECT * from t_user where USER_PASSWORD REGEXP \u0026#39;\\\\.\u0026#39; ; -- ^[8]* 以8开头有0个或者多个 [a-z]+ 有1个或者多个 0? 有0个或者1个匹配 [:alpha:]{1,4} 任意字符1到4个 SELECT * from t_user where USER_NAME REGEXP \u0026#39;^[8]*[a-z]+0?[:alpha:]{1,4}\u0026#39; ; SELECT CONCAT(USER_ID,\u0026#39;-\u0026#39;,USER_PASSWORD,\u0026#39; USER_NAME:\u0026#39;,USER_NAME) as new_name from t_user where USER_NAME REGEXP \u0026#39;^[8]*[a-z]+0?[:alpha:]{1,4}\u0026#39; ; "});index.add({'id':195,'href':'/life/docs/databases/mysql/mysql%E7%94%A8%E6%88%B7%E4%B8%8E%E6%9D%83%E9%99%90/','title':"mysql用户与权限",'section':"mysql学习笔记",'content':" mysql.version=5.7 (必须注意版本)\n 创建用户 #   ( CREATE USER \u0026lsquo;bob\u0026rsquo;@'%' IDENTIFIED BY \u0026lsquo;07fa533360d9\u0026rsquo;; ) 创建bob用户 密码:07fa533360d9 ( CREATE USER \u0026ldquo;test\u0026rdquo;@\u0026ldquo;localhost\u0026rdquo; IDENTIFIED BY \u0026lsquo;123456\u0026rsquo; )创建test用户　密码123456 ( CREATE USER \u0026ldquo;test\u0026rdquo;@\u0026ldquo;192.168.87.26\u0026rdquo; IDENTIFIED BY \u0026lsquo;123456\u0026rsquo; )创建test用户　密码123456   参数说明:'%\u0026lsquo;表示所有情况都能访问;\u0026lsquo;localhost\u0026rsquo;表示本机才能访问;\u0026lsquo;192.168.87.26\u0026rsquo; 某个具体 ip 才能访问\n 授权命令 (GRANT privileges ON databasename.tablename TO \u0026lsquo;username\u0026rsquo;@\u0026lsquo;host\u0026rsquo; ) #  GRANT SELECT,INSERT privileges on spring.* to \u0026lsquo;alice\u0026rsquo;@\u0026lsquo;localhost\u0026rsquo; identified by \u0026lsquo;123456\u0026rsquo;\n 参数说明:databasename表示数据库名字;tablename数据库表的名字;username用户名;host表示链接地址如本机localhost,远程任意%,具体ip192.168.87.26\n 授权test用户拥有testDB数据库的所有权限 #  create database testDB;\rgrant all privileges on testDB.* to \u0026quot;test\u0026quot;@\u0026quot;localhost\u0026quot; identified by '123456'\r指定部分权限给用户 #  grant select,update on testDB.* to \u0026quot;blake\u0026quot;@\u0026quot;localhost\u0026quot; identified by '123456';\rGRANT SELECT, INSERT ON spring.user TO 'alice'@'localhost'; 撤销权限 #  REVOKE privilege ON databasename.tablename FROM 'username'@'host'; #撤销\rREVOKE grant option ON databasename.tablename FROM 'username'@'host'; #收回\r修改用户密码 #  update mysql.user set authentication_string=password('123456') where User='blake' and Host='localhost';\r 关于修改密码也可以这样 1:select password(\u0026lsquo;1234\u0026rsquo;); 得到string 如1234==\u0026gt;*A4B6157319038724E3560894F7F932C8886EBFCF\n update mysql.user set authentication_string=\u0026quot;*A4B6157319038724E3560894F7F932C8886EBFCF\u0026quot; where User='bob' and Host='localhost';\r 关于远程访问修改\n UPDATE user SET Host='%' WHERE User='alice' AND Host='localhost' LIMIT 1;\rUPDATE user SET Host='192.168.87.26' WHERE User='alice' AND Host='%' LIMIT 1;\r删除用户bob #  delete from user WHERE User='bob'\r刷新系统权限表 #  flush privileges; 查看权限 #  show grants for 'blake'@'localhost';\r"});index.add({'id':196,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/git_andsower/','title':"git出现的问题",'section':"解决问题",'content':"收集 git 出现的问题\n"});index.add({'id':197,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/idea/','title':"idea出现的问题",'section':"解决问题",'content':"收集 idea出现的问题\n"});index.add({'id':198,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/maven/','title':"maven出现的问题",'section':"解决问题",'content':"收集 maven出现的问题\n"});index.add({'id':199,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/visual_studio_code/','title':"visual_studio_code",'section':"解决问题",'content':"visual studio code\n"});index.add({'id':200,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/my_self/','title':"自信",'section':"自我提升",'content':" 从自身做起才是一个新的提升的开始  说话声音小中气不足 #  一: #  是不是胆子小的问题？自信心不足面对别人说话就小声。我在老板面前说话像老鼠，但是在前女友面前说话像老虎。 这是底气不足的问题。多练习，能大声说话时就大声说话，例如点餐呼叫服务员，例如遇到色魔被XX时叫大叫救命， 例如去银行打劫的时候, 都要多练习。这要靠自己不停建立自信心去克服。多社交多接触不同的人。\n如果不是自信心问题那就是气息问题，中气不足啊。我有时睡眠不够也会说不出话，建议早睡早起，多喝水，多做运动！ 说话也是要用力的，其他肌肉强壮了说话也会更轻松。所以第一步先练好身体！做什么都先得要有一个健康的身体。 你看躺医院的人哪个能大声说话的, 只能晚上大声慘叫。\n身体不好还会口干舌燥的，都不想说话。 还经常有痰！多喝水多喝水多喝水，少吃煎炸食物，少吃糖！被糖粘住喉咙也是不好受，也容易生痰。\n第二步呢，学会省力！！省喉咙的力！如果说话只用喉咙是很累很辛苦的，很容易坏嗓子。 等如你举重只用手腕的力量来举，肯定会废了。会举重的必定懂得要用上全身的力，由下而上，包括小腿大腿，腰，臂。\n说话也是一样，尝试有意识地放松喉咙，让气流自然地通过。 练习下发嘿，嘿，嘿，嘿，哈，哈，哈，哈，哈，哈这样的音， 如果想说话更有力，可以尝试下用腹部，先吸一口气到两腰鼓起，然后维持住腰部鼓起的状态，用这状态说话。 慢慢体会下，练习下。记住喉咙放松喉咙放松喉咙放松。\n还有说是咬字不清的问题。这和音量无关。 试下说慢一点，咬清楚每一个字，用夸张一点的口形去咬字。口嘴动作大一点。 我唱歌时就是学了这方法，然后唱得清楚了声音也会变好。 说到这里我有点不好意思了，其实我很多时候说话也不清楚别人听不到，都问我是不是说给自己听。 所以我很理解什么原因造成。一因为没自信二因为懒，嘴唇不想动！但是我现在需要说得清楚的时候还是可以说得很清楚， 需要大声的时候还是可以说得很大声（都是近年才掌握到方法）。不过身体累的时候我还是会打回原形跟以前一样。\n二: #  说话声音小是个非常普遍的问题，我想把话剧演员的训练方法分享给你。\n因为话剧演员不能靠麦克，只靠自己把声音传到剧场的最后一排，所以他们的方法非常有用。\n说话的基础是呼吸。只有通过呼吸让足够的气息通过声带，才能产生声波，并引起共鸣。  有了共鸣的帮助，我们的音量就能放大。\n很多人使用的是胸式呼吸，也就是呼吸时，胸部起伏，腹部不怎么动，或者是吸气时腹部瘪下去，呼气时腹部还原。  这种方法一般吸气量不大，气只存在于肺的中上部。气量有限，所以说话声音会虚而不实，稍微大喊一声，就会感到底气不足。\n 不信的话，你可以试试深吸一口气，然后一口气清晰地念出1至50，胸式呼吸的人一般念到20左右就上气不接下气了。\n  更好的方法是腹式呼吸：吸气时腹部和胸部都扩张，能让气吸得更深、更多，呼气时腹部和胸部慢慢瘪下去，呼气更平稳、更长久。\n  教你一个感受腹式呼吸的方法：平躺，然后膝盖弯曲抬起，双手抱住膝盖，尽力让大腿向胸部靠拢，保持肩膀放松。\n  然后用鼻子深呼吸，这时应该能明显感受到小腹微微扩张，大腿和小腹之间有一点对抗的感觉。\n找到腹式呼吸后，就可以练习让呼吸更长：直立状态下，用鼻子吸气，吸4秒，用嘴巴吐气，吐4秒。  这个时长能达到、没有不舒服后，可以增加到6秒、8秒、10秒。\n学会了深长的呼吸，再来练习控制呼气：吸足气以后，呼气时不要一口气全吐光，而是让气流像“一条线”从门牙缝往外喷出，同时发出“嘶”声，要慢而长。  先练习一次吐气达到10秒，然后慢慢延长至15秒、20秒、30秒……越长越好。你会慢慢发现自己的气息明显增强了。\n上面一步练好了，就可以加上共鸣了：在吐气的时候，不发“嘶”的音，而可以发“咪”“妈”“你”“啊”这些单音。  发音时，要细细地去感受鼻腔或者头腔的振动，可以用手摸摸鼻子，在微微振动就是在共鸣。\n单音会了，可以再提升一点难度——唱音阶来感受共鸣。  试着用一口气，匀速地唱完“DO RE MI FA SO FA MI RE DO”9个音，唱的时候气息一定要慢而长，并且同时能感受到共鸣腔的振动。\n 如果9个音能完整顺利唱下来，并且能感受到鼻腔、胸腔的共鸣，就可以增加难度，一口气唱完“DO RE MI FA SO LA TI DO（高音）TI LA SO FA MI RE DO”15个音。\n  当你已经全都会了以上的共鸣练习，恭喜你，终于可以练大声说话了：\n  找一个不会影响别人的地方，站直，双手叉腰，肩膀放松，抬头，眼睛看着前方。想象在离你十米远的地方有一个人，你要和他打招呼，清晰完整地念出“嗨”，将声音送到十米远。\n注意，千万不要扯着嗓子喊，这时需要的是用气息和共鸣结合，让音量增大，而不是声调的升高。\n 找到音量变大的感觉后，可以逐字念句子，比如“半个月亮爬上来”。你也可以逐字念出背诵过的唐诗宋词，或你喜欢的歌词及诗歌。\n  最后提醒你：发声训练确实很单调，依靠大量的重复训练，不要带着“练一周就有明显进步”的心态。\n  你可以每天练习10-20分钟，坚持半年，一定有进步。\n三: #  中气不足。\n外加没自信。\n不用改，在面对自信的人或事时，声音自然会大起来。现在只是自己处在不安全的环境中，声音放小是一种防御机制。不会一直如此的\n四: #  说话声音小是因为害羞不自信么 我曾经看到一句话 对我不自信的状态很有帮助：你可以害怕 但别让别人知道。 我会去试着接触不太熟悉的人，心里告诉自己是的我害怕，但就假装不害怕不让她知道就好了。我觉得这个心里暗示很好，让你接受害怕是可以的，没关系的，慢慢的我就从假装不害怕变成了真的不害怕了\n五 #  底气不够，要内调外养。内调可以学舞蹈，培养自信心，外养就要多吃红枣，红糖。气血充足了，说话才有力道。一个人的气场足够强大的时候就百毒不侵了，那些牛鬼蛇神都会害怕你，你就万事皆顺宜了！\n"});index.add({'id':201,'href':'/life/docs/databases/mysql/mysql%E7%B4%A2%E5%BC%95/','title':"mysql索引",'section':"mysql学习笔记",'content':"索引 #   MySQL使用索引快速查找具有特定列值的行。如果没有索引，MySQL必须扫描整个表以找到相关的行。较大的表，搜索速度越慢。\n  索引由类型和方法组成(有的时候你没有指定就是使用的默认方法Btree这是一种B+树)有的人也把方法称为方式  讨论索引之前讨论树这种结构 #    B树\n  B树有如下特点:\n  所有键值分布在整颗树中（索引值和具体data都在每个节点里）；\n  任何一个关键字出现且只出现在一个结点中；\n  搜索有可能在非叶子结点结束（最好情况O(1)就能找到数据）；\n  在关键字全集内做一次查找,性能逼近二分查找；\n  与AVL 树，红黑树相比性能没那么好但是可以处理较大数据量后者虽然查得快但是处理大量数据有一定的问题比如(耗内存,数据库可能会有海量的数据)\n  B+树\n  B+树是B-树的变体，也是一种多路搜索树, 它与 B- 树的不同之处在于\n  所有关键字存储在叶子节点出现,内部节点(非叶子节点并不存储真正的 data) 为所有叶子结点增加了一个链指针\n  (自己理解)B+树每个节点都包含了指向其子节点的指针虽然没有直接包含子节点但是相当于间接包含了子节点\n  因此B+树是大多数 MySQL 存储引擎的默认索引类型\n  讨论hash结构 #   哈希索引能以 O(1) 时间进行查找，但是失去了有序性，它具有以下限制 无法用于排序与分组 只支持精确查找，无法用于部分查找和范围查找。 InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。   MySQL中，只有Memory存储引擎显示支持hash索引，是Memory表的默认索引类型，尽管Memory表也可以使用B-Tree索引 也就是我们从某种程度日常开发基本就接触BTREE数据结构了\n 索引创建和更改语法 #  -- 创建 索引 CREATE \u0026lt;索引名\u0026gt; ON \u0026lt;表名\u0026gt; (\u0026lt;列名\u0026gt; [\u0026lt;长度\u0026gt;] [ ASC | DESC]) CREATE \u0026lt;索引类型\u0026gt; \u0026lt;索引名\u0026gt; ON \u0026lt;表名\u0026gt; (\u0026lt;列名\u0026gt; [\u0026lt;长度\u0026gt;] [ ASC | DESC]) CREATE INDEX indexName ON table_name (column_name) CREATE TABLE 也可以创建TABLE -- 仅仅在这直接列举了 -- 包含一个索引 CREATE TABLE test_demo( id INT NOT NULL, name varchar(200) NOT NULL, UNIQUE INDEX uk_idx_id(id) ); -- 包含3个索引 -- 设定为主键后数据库会自动建立索引，innodb为聚簇索引 CREATE TABLE test_demo( id INT(10) UNSIGNED AUTO_INCREMENT , uuid INT NOT NULL, name varchar(200) NOT NULL, PRIMARY KEY(id), INDEX single_idx_name(name(20)) , UNIQUE KEY uk_idx_id(uuid) ); DROP INDEX \u0026lt;索引名\u0026gt; ON \u0026lt;表名\u0026gt; ALTER TABLE \u0026lt;表名\u0026gt; DROP PRIMARY KEY：表示删除表中的主键。一个表只有一个主键，主键也是一个索引 ALTER TABLE \u0026lt;表名\u0026gt; DROP INDEX index_name：表示删除名称为 index_name 的索引 ALTER TABLE \u0026lt;表名\u0026gt; DROP FOREIGN KEY fk_symbol：表示删除外键 索引类型 #   Normal 普通索引 Unique 唯一索引 Full Text 全文索引 SPATIAL 空间索引   不管什么索引类型 都可以被一列或者多列使用 这点很重要\n Normal 普通索引 #  drop table if EXISTS t_example_index ; CREATE TABLE t_example_index ( c1 INT NOT NULL AUTO_INCREMENT PRIMARY KEY, c2 VARCHAR(100), c3 VARCHAR(100), n1 int(12), n2 int(12), n3 int(12)) ENGINE=InnoDB; -- Normal 表示普通索引，大多数情况下都可以使用 -- 没有指定索引方法 CREATE INDEX index_c1 ON t_example_index ( n1 ); mysql\u0026gt; SHOW INDEX FROM t_example_index ; +-----------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+ | Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression | +-----------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+ | t_example_index | 0 | PRIMARY | 1 | c1 | A | 0 | NULL | NULL | | BTREE | | | YES | NULL | | t_example_index | 1 | index_c1 | 1 | n1 | A | 0 | NULL | NULL | YES | BTREE | | | YES | NULL | +-----------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+ 2 rows in set (0.06 sec) -- 当使用 NORMAL 的时候不需要加上NORMAL CREATE NORMAL INDEX index_c2 ON t_example_index ( n2 ); -- 使用多列一起组成索引 CREATE INDEX index_c2 ON t_example_index ( n2,n3 ); mysql\u0026gt; SHOW INDEX FROM t_example_index ; +-----------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+ | Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression | +-----------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+ | t_example_index | 0 | PRIMARY | 1 | c1 | A | 0 | NULL | NULL | | BTREE | | | YES | NULL | | t_example_index | 1 | index_c1 | 1 | n1 | A | 0 | NULL | NULL | YES | BTREE | | | YES | NULL | | t_example_index | 1 | index_c2 | 1 | n2 | A | 0 | NULL | NULL | YES | BTREE | | | YES | NULL | | t_example_index | 1 | index_c2 | 2 | n3 | A | 0 | NULL | NULL | YES | BTREE | | | YES | NULL | +-----------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+ 4 rows in set (0.09 sec) Unique 唯一索引 #  drop table if EXISTS t_example_index_x2 ; CREATE TABLE t_example_index_x2 ( c1 INT NOT NULL AUTO_INCREMENT PRIMARY KEY, c2 VARCHAR(100), c3 VARCHAR(100), n1 int(12), n2 int(12), n3 int(12)) ENGINE=InnoDB; -- 使用单列索引 CREATE UNIQUE INDEX index_c1 ON t_example_index_x2 ( n1 ); -- 使用2列索引 CREATE UNIQUE INDEX index_c2_3 ON t_example_index_x2 ( n2,n3 ); Full Text 全文索引 #  drop table if EXISTS t_example_full_text_index ; CREATE TABLE t_example_full_text_index ( id int(11) NOT NULL AUTO_INCREMENT, pro_date datetime DEFAULT NULL, price_remark varchar(255) DEFAULT NULL, title varchar(255) NOT NULL, post_content text, body text, remark text, gmt_created datetime DEFAULT CURRENT_TIMESTAMP, gmt_modified datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (id) ); -- 单列索引 CREATE FULLTEXT INDEX post_content_full_index on t_example_full_text_index(post_content) ; mysql\u0026gt; SHOW INDEX FROM t_example_full_text_index ; +---------------------------+------------+-------------------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+ | Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression | +---------------------------+------------+-------------------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+ | t_example_full_text_index | 0 | PRIMARY | 1 | id | A | 0 | NULL | NULL | | BTREE | | | YES | NULL | | t_example_full_text_index | 1 | post_content_full_index | 1 | post_content | NULL | 0 | NULL | NULL | YES | FULLTEXT | | | YES | NULL | +---------------------------+------------+-------------------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+ 2 rows in set (0.18 sec) -- 组合索引  CREATE FULLTEXT INDEX body_and_title_full_index on t_example_full_text_index(body,title) ; mysql\u0026gt; SHOW INDEX FROM t_example_full_text_index ; +---------------------------+------------+---------------------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+ | Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression | +---------------------------+------------+---------------------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+ | t_example_full_text_index | 0 | PRIMARY | 1 | id | A | 0 | NULL | NULL | | BTREE | | | YES | NULL | | t_example_full_text_index | 1 | post_content_full_index | 1 | post_content | NULL | 0 | NULL | NULL | YES | FULLTEXT | | | YES | NULL | | t_example_full_text_index | 1 | body_and_title_full_index | 1 | body | NULL | 0 | NULL | NULL | YES | FULLTEXT | | | YES | NULL | | t_example_full_text_index | 1 | body_and_title_full_index | 2 | title | NULL | 0 | NULL | NULL | | FULLTEXT | | | YES | NULL | +---------------------------+------------+---------------------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+ 4 rows in set (0.23 sec) -- 提一句全文索引的使用方法 SELECT * FROM t_example_full_text_index WHERE MATCH (post_content) AGAINST (\u0026#39;北京\u0026#39; IN NATURAL LANGUAGE MODE); -- ALTER TABLE t_example_full_text_index ADD FULLTEXT INDEX remark_index(remark) ; SPATIAL 空间索引 #   空间索引创建中，要求空间类型的字段必须为非空\n drop table if EXISTS tb_geometry_example ; CREATE TABLE tb_geometry_example( id int(11) NOT NULL AUTO_INCREMENT, geo GEOMETRY NOT NULL, geo_a GEOMETRY NOT NULL, geo_b GEOMETRY NOT NULL, geo_c GEOMETRY NOT NULL, title varchar(255) NOT NULL, remark varchar(500) NOT NULL, PRIMARY KEY (id) ) ENGINE=MyISAM; CREATE SPATIAL INDEX geo_index on tb_geometry_example(geo); CREATE SPATIAL INDEX geo_a_geo_b_index on tb_geometry_example(geo_a,geo_b) \u0026gt; 1070 - Too many key parts specified; max 1 parts allowed \u0026gt; 时间: 0s -- 说明不能组合索引 ALTER TABLE tb_geometry_example ADD SPATIAL INDEX geo_a_index(geo_a) ; 索引方法 #  索引组合的方式 #   单列索引  参考本文前面\r 唯一索引  主键和唯一索引的区别\r1、主键是一种约束，唯一索引是一种索引，两者在本质上是不同的。\r2、主键创建后一定包含一个唯一性索引，唯一性索引不一定就是主键。\r3、唯一性索引列允许空值， 而主键列不允许为空值。\r4、主键可以被其他表引用为外键，而唯一索引不能。\r5、 一个表最多只能创建一个主键，但是可以创建多个唯一索引。\r6、主键更适合那些不容易改变的唯一标识，如自动递增列，身份证号等。\r7、在RBO 模式下，主键的执行计划优先级高于唯一索引。两者可以提高查询的速度。\r 多列索引(组合索引)  参考本文前面\r 前缀索引  指的是mysql like 某些对那列字段增加索引可以使用like 但是只能是前缀查询如keyword%\rselect title,content from demo_like_table where 1=1 and title like ‘73%';\r具体参考本主题的mysql优化\r 隐藏索引  实际指的是主键 主键是一种特殊索引 即使你没有指定主键列是索引它也是索引\r聚簇索引和非聚簇索引 #    聚集索引。表数据按照索引的顺序来存储的，也就是说索引项的顺序与表中记录的物理顺序一致。对于聚集索引，叶子结点即存储了真实的数据行，不再有另外单独的数据页。 在一张表上最多只能创建一个聚集索引，因为真实数据的物理顺序只能有一种\n  非聚集索引。表数据存储顺序与索引顺序无关。对于非聚集索引，叶结点包含索引字段值及指向数据页数据行的逻辑指针，其行数量与数据表行数据量一致\n  总结一下：聚集索引是一种稀疏索引，数据页上一级的索引页存储的是页指针，而不是行指针。而对于非聚集索引，则是密集索引，在数据页的上一级索引页它为每一个数据行存储一条索引记录\n  一个表只能有一个聚簇索引\n   目前，只有solidDB和InnoDB支持聚簇索引，MyISAM不支持聚簇索引。一些DBMS允许用户指定聚簇索引，但是MySQL的存储引擎到目前为止都不支持\n InnoDB的聚簇索引 #   InnoDB对主键建立聚簇索引。 如果你不指定主键，InnoDB会用一个具有唯一且非空值的索引来代替。 如果不存在这样的索引，InnoDB会定义一个隐藏的主键，然后对其建立聚簇索引  Hash索引 #  CREATE TABLE tb_test_hash ( fname VARCHAR(50) NOT NULL, lname VARCHAR(50) NOT NULL ) ENGINE=MEMORY; ALTER TABLE tb_test_hash ADD INDEX hash_index(fname) ; DROP INDEX hash_index on tb_test_hash; 索引注意事项 #  哪些情况适合创建索引 #   字段的数值有唯一性的限制   业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。（来源：Alibaba） 说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的。\n  频繁作为 WHERE 查询条件的字段   某个字段在SELECT语句的 WHERE 条件中经常被使用到，那么就需要给这个字段创建索引了。尤其是在 数据量大的情况下，创建普通索引就可以大幅提升数据查询的效率。\n  经常 GROUP BY 和 ORDER BY 的列   索引就是让数据按照某种顺序进行存储或检索，因此当我们使用 GROUP BY 对数据进行分组查询，或者 使用 ORDER BY 对数据进行排序的时候，就需要 对分组或者排序的字段进行索引 。如果待排序的列有多 个，那么可以在这些列上建立 组合索引\n  UPDATE、DELETE 的 WHERE 条件列   对数据按照某个条件进行查询后再进行 UPDATE 或 DELETE 的操作，如果对 WHERE 字段创建了索引，就 能大幅提升效率。原理是因为我们需要先根据 WHERE 条件列检索出来这条记录，然后再对它进行更新或 删除。如果进行更新的时候，更新的字段是非索引字段，提升的效率会更明显，这是因为非索引字段更 新不需要对索引进行维护\n  DISTINCT 字段需要创建索引  有时候我们需要对某个字段进行去重，使用 DISTINCT，那么对这个字段创建索引，也会提升查询效率。\r比如，我们想要查询课程表中不同的 student_id 都有哪些，如果我们没有对 student_id 创建索引，执行\rSQL 语句：\r运行结果（600637 条记录，运行时间 0.683s ）：\r如果我们对 student_id 创建索引，再执行 SQL 语句：\r运行结果（600637 条记录，运行时间 0.010s ）：\r你能看到 SQL 查询效率有了提升，同时显示出来的 student_id 还是按照 递增的顺序 进行展示的。这是因\r为索引会对数据按照某种顺序进行排序，所以在去重的时候也会快很多。\r 多表 JOIN 连接操作时，创建索引注意事项   首先， 连接表的数量尽量不要超过 3 张 ，因为每增加一张表就相当于增加了一次嵌套的循环，数量级增 长会非常快，严重影响查询的效率。\n  其次， 对 WHERE 条件创建索引 ，因为 WHERE 才是对数据条件的过滤。如果在数据量非常大的情况下， 没有 WHERE 条件过滤是非常可怕的。\n  最后， 对用于连接的字段创建索引 ，并且该字段在多张表中的 类型必须一致 。比如 course_id 在 student_info 表和 course 表中都为 int(11) 类型，而不能一个为 int 另一个为 varchar 类型。 举个例子，如果我们只对 student_id 创建索引，执行 SQL 语句：\n SELECT course_id, name, student_info.student_id, course_name\rFROM student_info JOIN course\rON student_info.course_id = course.course_id\rWHERE name = '462eed7ac6e791292a79';\r-- 运行结果（1 条数据，运行时间 0.189s ）：\r-- 这里我们对 name 创建索引，再执行上面的 SQL 语句，运行时间为 0.002s 。\r索引使用注意事项 #   如果对大的文本进行搜索，使用全文索引而不要用使用 like ‘%…%’ like语句不要以通配符开头 对于LIKE：在以通配符%和_开头作查询时，MySQL不会使用索引。like操作一般在全文索引中会用到（InnoDB数据表不支持全文索引）  -- 例如下句会使用索引 SELECT * FROM mytable WHERE username like \u0026#39;admin%\u0026#39; 而下句就不会使用 SELECT * FROM mytable WHEREt Name like \u0026#39;%admin\u0026#39;  不要在列上进行运算 索引列不能是表达式的一部分，也不是是函数的参数  -- 例如以下两个查询无法使用索引 -- 1:表达式  select actor_id from sakila.actor where actor_id+1=5; -- 2:函数参数 select ... where TO_DAYS(CURRENT_DATE) - TO_DAYS(date_col)\u0026lt;=10;  尽量不要使用NOT IN、\u0026lt;\u0026gt;、!= 操作 应尽量避免在 where 子句中使用!=或\u0026lt;\u0026gt;操作符，否则将引擎放弃使用索引而进行全表扫描  -- 对于not in，可以用not exists或者（外联结+判断为空）来代替；很多时候用 exists 代替 in 是一个好的选择： select num from a where num in(select num from b) ; -- 用下面的语句替换 select num from a where exists(select 1 from b where num=a.num) ;   对于\u0026lt;\u0026gt;，用其它相同功能的操作运算代替，如a\u0026lt;\u0026gt;0 改为 a\u0026gt;0 or a\u0026lt;0\n  or条件\n  用 or 分割开的条件， 如果 or 前的条件中的列有索引， 而后面的列中没有索引， 那么涉及到的索引都不会被用到\n  应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描\n  如:\n  -- 假设num1有索引，num2没有索引 select id from t where num1=10 or num2=20 ; -- 会放弃使用索引，可以改为这样查询 select id from t where num1=10 union all select id from t where num2=20 ; -- 这样虽然num2没有使用索引，但至少num1会使用索引，提高效率   组合索引的使用要遵守“最左前缀”原则'\n  组合索引：当不需要考虑排序和分组时，将选择性最高的列放在前面通常是最好的\n  -- 如 CREATE TABLE People ( last_name varchar(50) not null, first_name varchar(50) not null, birthday date not null, gender enum(\u0026#39;m\u0026#39;, \u0026#39;f\u0026#39;) not null, key(last_name, first_name, birthday) );  查询必须从索引的最左边的列开始，否则无法使用索引。例如，你不能直接利用索引查找在某一天出生的人 不能跳过某一索引列。例如，你不能利用索引查找last name为Smith且出生于某一天的人 存储引擎不能使用索引中范围条件右边的列。例如，如果你的查询语句为WHERE last_name=\u0026ldquo;Smith\u0026rdquo; AND first_name LIKE \u0026lsquo;J%\u0026rsquo; AND dob=\u0026lsquo;1976-12-23\u0026rsquo;，则该查询只会使用索引中的前两列，因为LIKE是范围查询 假如你一定要使用like 查询并且用到索引 那么参考本主题mysql优化 使用索引排序时，ORDER BY也要遵守“最左前缀”原则 当索引的顺序与ORDER BY中的列顺序相同，且所有的列是同一方向（全部升序或者全部降序）时，可以使用索引来排序 ORDER BY子句和查询型子句的限制是一样的：需要满足索引的最左前缀的要求，有一种情况下ORDER BY子句可以不满足索引的最左前缀要求，那就是前导列为常量时：WHERE子句或者JOIN子句中对前导列指定了常量 如果查询是连接多个表，仅当ORDER BY中的所有列都是第一个表的列时才会使用索引。其它情况都会使用filesort文件排序 如果列类型是字符串，那么一定记得在 where 条件中把字符常量值用引号引起来，否则的话即便这个列上有索引，MySQL 也不会用到的，因为MySQL 默认把输入的常量值进行转换以后才进行检索  explain select * from company2 where name = \u0026#39;294\u0026#39; ;  最后  只有当数据库里已经有了足够多的测试数据时，它的性能测试结果才有实际参考价值。\r如果在测试数据库里只有几百条数据记录，它们往往在执行完第一条查询命令之后就被全部加载到内存里，\r这将使后续的查询命令都执行得非常快——不管有没有使用索引。只有当数据库里的记录超过了1000条、\r数据总量也超过了 MySQL服务器上的内存总量时，数据库的性能测试结果才有意义。\r在不确定应该在哪些数据列上创建索引的时候，人们从EXPLAIN SELECT命令那里往往可以获得一些帮助。\r这其实只是简单地给一条普通的SELECT命令加一个EXPLAIN关键字作为前缀而已。\r有了这个关键字，MySQL将不是去执行那条SELECT命令，而是去对它进行分析。\rMySQL将以表格的形式把查询的执行过程和用到的索引(如果有的话)等信息列出来。\r"});index.add({'id':202,'href':'/life/docs/databases/mysql/mysql%E6%95%B4%E7%90%86/','title':"mysql整理",'section':"mysql学习笔记",'content':"mysql整理 #  跨库更新数据 #  UPDATE pmcc_assess.tb_project_info aTable INNER JOIN ( SELECT id as data_id, uuid as data_uuid FROM pmcc_contract.tb_cms_contract bTable ) bTable ON aTable.contract_id = bTable.data_uuid SET aTable.contract_uuid = bTable.data_uuid , aTable.contract_id = null where 1=1 and aTable.contract_uuid is null and aTable.contract_id is not null and aTable.id = 596; UPDATE pmcc_assess.tb_project_info aTable INNER JOIN ( SELECT id as data_id, uuid as data_uuid FROM pmcc_contract.tb_cms_contract bTable ) bTable ON aTable.contract_uuid = bTable.data_uuid SET aTable.contract_id = bTable.data_id where 1=1 and aTable.contract_id is null and aTable.contract_uuid is not null and aTable.id = 596; 步长 #  SHOW VARIABLES LIKE \u0026#39;auto_inc%\u0026#39;; SET @@auto_increment_increment=3; -- 将自增长步长设置为3  SET @@auto_increment_offset=4; -- 将自增长开始值设置为4  SHOW VARIABLES LIKE \u0026#39;auto_inc%\u0026#39;; alter table `user` drop column id; alter table `user`add id BIGINT; alter table `user` change id id BIGINT not null auto_increment primary key; 统计sql #  # 处理 uuid重复问题 UPDATE tb_data_block SET uuid = CONCAT( MD5(UUID()) ,\u0026#39;_\u0026#39;,UUID_SHORT(),\u0026#39;_\u0026#39;, MD5(curtime()) ) WHERE uuid is null ; UPDATE tb_data_automatic_position SET uuid = CONCAT( MD5(UUID()) ,\u0026#39;_\u0026#39;,UUID_SHORT(),\u0026#39;_\u0026#39;, MD5(RAND()) ) WHERE uuid is null ; #查询当天的记录 select count(1) from tableName where TO_DAYS(timeField) = TO_DAYS(NOW()) # 从今天开始退回几天的实体数量 假如是1那么就是昨天 select count(1) from tb_basic_building where 1=1 and TO_DAYS(NOW()) - TO_DAYS(gmt_created) = 4 ; # 统计 当周的实体数量  SELECT count(1) FROM tableName WHERE YEARWEEK(date_format(timeField,\u0026#39;%Y-%m-%d\u0026#39;),1) = YEARWEEK(now(),1); # 统计 当月的实体数量 SELECT count(1) FROM tableName WHERE 1=1 AND DATE_FORMAT( timeField, \u0026#39;%Y%m\u0026#39; ) = DATE_FORMAT( CURDATE( ) , \u0026#39;%Y%m\u0026#39; ) /*最近一周*/ SELECT count(1) as count_num FROM tb_basic_building WHERE DATE_SUB(CURDATE(),INTERVAL 1 WEEK) \u0026lt;= DATE(gmt_created); /*某个年份下*/ SELECT sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;1\u0026#39; THEN 1 ELSE 0 END ) AS january, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;2\u0026#39; THEN 1 ELSE 0 END ) AS february, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;3\u0026#39; THEN 1 ELSE 0 END ) AS march, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;4\u0026#39; THEN 1 ELSE 0 END ) AS april, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;5\u0026#39; THEN 1 ELSE 0 END ) AS may, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;6\u0026#39; THEN 1 ELSE 0 END ) AS june, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;7\u0026#39; THEN 1 ELSE 0 END ) AS july, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;8\u0026#39; THEN 1 ELSE 0 END ) AS august, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;9\u0026#39; THEN 1 ELSE 0 END ) AS september, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;10\u0026#39; THEN 1 ELSE 0 END ) AS october, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;11\u0026#39; THEN 1 ELSE 0 END ) AS november, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;12\u0026#39; THEN 1 ELSE 0 END ) AS december FROM tb_basic_building a WHERE YEAR ( a.gmt_created ) = 2021; /*按自然周统计(所有)*/ SELECT DATE_FORMAT(gmt_created,\u0026#39;%y年%u周\u0026#39;) as week_name,min(gmt_created) as week_check_start_time,count(*) as count_num FROM tb_basic_building GROUP BY DATE_FORMAT(gmt_created,\u0026#39;%y%u\u0026#39;) ORDER BY week_name asc; /*某年某月下的每周统计数量*/ SELECT DATE_FORMAT(gmt_created,\u0026#39;%y年%u周\u0026#39;) as w,min(gmt_created) as st,count(*) as count_num FROM tb_basic_building where 1=1 and month(gmt_created)=9 and YEAR(gmt_created) = 2021 GROUP BY DATE_FORMAT(gmt_created,\u0026#39;%y%u\u0026#39;) ORDER BY w asc; /*按月统计(所有)*/ SELECT DATE_FORMAT(gmt_created,\u0026#39;%y年%m月\u0026#39;) as m,count(*) as count_num FROM tb_basic_building GROUP BY DATE_FORMAT(gmt_created,\u0026#39;%y%m\u0026#39;) ORDER BY m asc /*按季度统计*/ SELECT FLOOR((DATE_FORMAT(gmt_created,\u0026#39;%m\u0026#39;)-1)/3)+1 as quarter_num,min(gmt_created) as quarter_check_start_time,count(*) as count_num FROM tb_basic_building WHERE DATE_FORMAT(gmt_created,\u0026#39;%Y\u0026#39;) = 2021 GROUP BY FLOOR((DATE_FORMAT(gmt_created,\u0026#39;%m\u0026#39;)-1)/3)+1 ORDER BY quarter_num asc; /*按年统计*/ SELECT DATE_FORMAT(gmt_created,\u0026#39;%Y\u0026#39;) as year_name,count(*) as count_num FROM tb_basic_building GROUP BY DATE_FORMAT(gmt_created,\u0026#39;%Y\u0026#39;) ORDER BY year_name asc; /*按天统计*/ SELECT count(id) count_num, DATE(gmt_created) day_name FROM tb_basic_building GROUP BY DATE(gmt_created) ORDER BY DATE(gmt_created) DESC; /*按周统计*/ SELECT count(id) count_num, WEEK(gmt_created) week_name FROM tb_basic_building GROUP BY WEEK(gmt_created) ORDER BY WEEK(gmt_created) DESC; /*按月统计*/ SELECT count(id) count_num, MONTH(gmt_created) month_name FROM tb_basic_building GROUP BY MONTH(gmt_created) ORDER BY MONTH(gmt_created) DESC; 添加字段 #  alter table tb_project_plan_details add `bis_mobile` bit(1) DEFAULT b\u0026#39;0\u0026#39; COMMENT \u0026#39;是否为移动端创建\u0026#39;; "});index.add({'id':203,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/','title':"解决问题",'section':"自我提升",'content':"学习的最好方式是解决问题\n"});index.add({'id':204,'href':'/life/docs/databases/mysql/mysq_advanced_optimization/','title':"mysql优化",'section':"mysql学习笔记",'content':"mysql like 优化 #  思路 #   要提高Mysql 的查询效率最有效的办法是让所有的查询走索引字段，但是在Mysql中 Like 关键字只有对前缀查询(\u0026ldquo;keyword%\u0026quot;)走索引 例如: select title,content from demo_like_table where 1=1 and title like \u0026lsquo;73%'; 我们常常需要模糊查询（\u0026quot;%keyword%\u0026quot;）或后缀查询(\u0026quot;%keyword\u0026rdquo;) 解决办法的思路是想办法让模糊查询和后缀查询都能走索引就可以达到目的 后缀查询解决方案：使用新建字段反转索引然后关键字段反转变成前缀查询 select REVERSE(rtitle) as title,content from demo_like_table where 1=1 and rtitle like \u0026lsquo;73%'; 上面虽然用的前缀查询但是实际起到了后缀查询的效果  -- 创建一个表 CREATE TABLE `demo_like_table` ( `id` int NOT NULL AUTO_INCREMENT, `rtitle` varchar(255) DEFAULT NULL, `title` varchar(255) DEFAULT NULL, `content` longtext, `create_date` datetime DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `rtitle` (`rtitle`) USING BTREE, UNIQUE KEY `title` (`title`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; -- 创建一个存储过程插入10w条数据  DROP PROCEDURE IF EXISTS pro_demo_like_table;--如果存在此存储过程则删掉 DELIMITER ; CREATE PROCEDURE pro_demo_like_table(IN len_value int) BEGIN DECLARE i INT DEFAULT 1; DECLARE `temp_value` VARCHAR(255) DEFAULT \u0026#39;\u0026#39;; WHILE i\u0026lt;= len_value DO set temp_value = substring(UUID(),1,7) ; INSERT INTO demo_like_table(title,rtitle,content,create_date) VALUES(`temp_value`, concat(REVERSE(`temp_value`),\u0026#39;\u0026#39;) ,MD5(UUID()), NOW()); SET i = i+1; END WHILE; END ; -- 借用了一个反转函数 REVERSE  CALL pro_demo_like_table(100000); -- 看一下数据(取少部分数据) id rtitle title content create_date 1\t7b24016\t61042b7\tf1c4052d07190711480433bb5868d45f\t2022-06-13 22:01:53 2\t810e216\t612e018\t7da9f8cfc164709eaa538d00764b46fe\t2022-06-13 22:01:53 3\tdf29316\t61392fd\t62c7635129b115d4b856ad55b2204f4e\t2022-06-13 22:01:53 4\t84a0416\t6140a48\td8afb2f28952e446eb324fc92b211909\t2022-06-13 22:01:53 5\t6e28416\t61482e6\t86b76454892329da4b5f20f9a4900cb0\t2022-06-13 22:01:54 6\t60bf416\t614fb06\t5970f2b5e0635c73028823e425eebda4\t2022-06-13 22:01:54 7\t2037516\t6157302\t53b3c4a700d63267ea2f9efbd9aea224\t2022-06-13 22:01:54 8\t88be516\t615eb88\tfa8fd07bfe053316ffd0b0e99a53d702\t2022-06-13 22:01:54 9\t5e36616\t61663e5\t8deb3030510e1245c8d90ffa5be26e2f\t2022-06-13 22:01:54 10\tf4cd616\t616dc4f\te76a2db7b00aaa32ecaca17d759f31ca\t2022-06-13 22:01:54 11\t4245716\t6175424\t4a243f6dde1d498dd4035c5b55f17908\t2022-06-13 22:01:54 12\te880816\t618088e\tf2e7b09be96035cd9b0159c9dfb1818f\t2022-06-13 22:01:54 13\tcacb816\t618bcac\t4fac609c5d69f4f32925b4ab1142e883\t2022-06-13 22:01:54 select REVERSE(rtitle) as title,content from demo_like_table where 1=1 and rtitle like \u0026#39;73%\u0026#39;; select title,content from demo_like_table where 1=1 and title like \u0026#39;73%\u0026#39;; 索引优化 #  索引 #   排好序的快速查找数据结构,影响查找和排序\n 索引重建操作 #   在MySQL数据库中,没有类似于SQL Server数据库或Oracle数据库中索引重建的语法（ALTER INDEX \u0026hellip; REBUILD）在官方文档中\u0026quot;2.11.10 Rebuilding or Repairing Tables or Indexes\u0026quot;中，提到下面三种方式可以Rebuild Index\n   Dump and Reload Method\n  ALTER TABLE Method\n  REPAIR TABLE Method\n  1:DROP INDEX + CREATE INDEX方法\n  drop table if exists t_example_index ; CREATE TABLE t_example_index ( c1 INT NOT NULL AUTO_INCREMENT PRIMARY KEY, c2 VARCHAR(100), c3 VARCHAR(100) ) ENGINE=InnoDB; create index ix_t1_c2 on t_example_index(c2); DROP INDEX ix_t1_c2 ON t_example_index; create index ix_t1_c2 on t_example_index(c2);  2:ALTER TABLE方法 ALTER TABLE t_example_index ENGINE = InnoDB  SELECT table_name,create_time FROM information_schema.TABLES WHERE table_name=\u0026#39;t_example_index\u0026#39;; ALTER TABLE t_example_index ENGINE = InnoDB ; -- ALTER TABLE t_example_index ENGINE=InnoDB 其实等价于REBUILD表（REBUILD表就是重建表的意思），所以索引也等价于重新创建了  SELECT table_name,create_time FROM information_schema.TABLES WHERE table_name=\u0026#39;t_example_index\u0026#39;;  3:REPAIR TABLE方法 (REPAIR TABLE方法用于修复被破坏的表，而且它仅仅能用于MyISAM, ARCHIVE,CSV类型的表)  drop table if exists t_example_index_x2 ; CREATE TABLE t_example_index_x2 ( c1 INT NOT NULL AUTO_INCREMENT PRIMARY KEY, c2 VARCHAR(100), c3 VARCHAR(100) ) ENGINE=MyISAM; REPAIR TABLE t_example_index_x2; -- 此方法需要去检查索引文件t_example_index_x2.MYI 才能发现索引修复了  4: OPTIMIZE TABLE方法   简单来说，OPTIMIZE TABLE操作使用Online DDL模式修改Innodb普通表和分区表，该方式会在prepare阶段和commit阶段持有表级锁：在prepare阶段修改表的元数据并且创建一个中间表，在commit阶段提交元数据的修改。由于prepare阶段和commit阶段在整个事务中的时间比例非常小，可以认为该OPTIMIZE TABLE的过程中不影响表的其他并发操作\n drop table if exists t_example_index_z ; CREATE TABLE t_example_index_z ( c1 INT NOT NULL AUTO_INCREMENT PRIMARY KEY, c2 VARCHAR(100), c3 VARCHAR(100) ) ENGINE=InnoDB; SELECT table_name,create_time FROM information_schema.TABLES WHERE table_name=\u0026#39;t_example_index_z\u0026#39;; OPTIMIZE TABLE t_example_index_z; SELECT table_name,create_time FROM information_schema.TABLES WHERE table_name=\u0026#39;t_example_index_z\u0026#39;; 缓存(在某些版本无法实现) #   缓存相关的配置参数  show variables like \u0026#39;%query_cache%\u0026#39;; +------------------------------+---------+ | Variable_name | Value | +------------------------------+---------+ | have_query_cache | YES | --查询缓存是否可用 | query_cache_limit | 1048576 | --可缓存具体查询结果的最大值 | query_cache_min_res_unit | 4096 | --查询缓存分配的最小块的大小(字节) | query_cache_size | 599040 | --查询缓存的大小 | query_cache_type | ON | --是否支持查询缓存 | query_cache_wlock_invalidate | OFF | --控制当有写锁加在表上的时候，是否先让该表相关的 Query Cache失效 +------------------------------+---------+ 6 rows in set (0.02 sec)  开启缓存  -- 设置缓存内存大小 set global query_cache_size = 600000; -- 开启查询缓存 set global query_cache_type = ON; 全文 #   v 5.7.6   在MySQL 5.7.6之前，全文索引只支持英文全文索引，不支持中文全文索引，需要利用分词器把中文段落预处理拆分成单词，然后存入数据库。\n  从MySQL 5.7.6开始，MySQL内置了ngram全文解析器，用来支持中文、日文、韩文分词。本文使用的MySQL 版本是5.7.22，InnoDB数据库引擎。\n ngram全文解析器 #   ngram就是一段文字里面连续的n个字的序列。ngram全文解析器能够对文本进行分词，每个单词是连续的n个字的序列。例如，用ngram全文解析器对“生日快乐”进行分词\n  MySQL 中使用全局变量ngram_token_size来配置ngram中n的大小，它的取值范围是1到10，默认值是2 如果需要搜索单字，就要把ngram_token_size设置为1,因为中文单词最少是两个汉字，推荐使用默认值2 全局变量ngram_token_size的两种设置方法 1、启动mysqld命令时  mysqld --ngram_token_size=2  修改MySQL配置文件  [mysqld] ngram_token_size=2 n=1: \u0026#39;生\u0026#39;, \u0026#39;日\u0026#39;, \u0026#39;快\u0026#39;, \u0026#39;乐\u0026#39; n=2: \u0026#39;生日\u0026#39;, \u0026#39;日快\u0026#39;, \u0026#39;快乐\u0026#39; n=3: \u0026#39;生日快\u0026#39;, \u0026#39;日快乐\u0026#39; n=4: \u0026#39;生日快乐\u0026#39; -- 1:创建包含FULLTEXT(全文索引)的表 CREATE TABLE tb_posts ( id int(11) NOT NULL AUTO_INCREMENT, pro_date datetime DEFAULT NULL, price_remark varchar(255) DEFAULT NULL, title varchar(255) NOT NULL, post_content text, gmt_created datetime DEFAULT CURRENT_TIMESTAMP, gmt_modified datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (id), FULLTEXT KEY post_content (post_content) ); -- 2:通过 alter table 的方式来添加  ALTER TABLE tb_posts ADD FULLTEXT INDEX ft_index (post_content) WITH PARSER ngram; -- 3、直接通过create index的方式  CREATE FULLTEXT INDEX ft_index ON tb_posts (post_content) WITH PARSER ngram; 全文检索模式 #   常用的全文检索模式有两种 1、自然语言模式(NATURAL LANGUAGE MODE)   自然语言模式是MySQL 默认的全文检索模式。自然语言模式不能使用操作符，不能指定关键词必须出现或者必须不能出现等复杂查询。\n  2、BOOLEAN模式(BOOLEAN MODE)   BOOLEAN模式可以使用操作符，可以支持指定关键词必须出现或者必须不能出现或者关键词的权重高还是低等复杂查询。\n -- 普通短语搜索  SELECT * FROM tb_posts WHERE MATCH (post_content) AGAINST (\u0026#39;天津\u0026#39; ); -- 自然语言模式 -- 包含北京关键词 SELECT * FROM tb_posts WHERE MATCH (post_content) AGAINST (\u0026#39;北京\u0026#39; IN NATURAL LANGUAGE MODE); -- 布尔模式 -- 必须包含 SELECT * FROM tb_posts WHERE MATCH (post_content) AGAINST (\u0026#39;无锡\u0026#39; IN BOOLEAN MODE); -- 通配符搜索 -- 匹配包含北京的字符串前缀开头的数据 SELECT * FROM tb_posts WHERE MATCH (post_content) AGAINST (\u0026#39;北京*\u0026#39; ); -- 如果通配符中的前缀术语长于ngram令牌大小，MySQL将把前缀术语转换为ngram短语并忽略通配符运算符 SELECT * FROM tb_posts WHERE MATCH (post_content) AGAINST (\u0026#39;北京顺鑫石门国际*\u0026#39; );   全文停用词\n  查看停用的默认词 SELECT * FROM INFORMATION_SCHEMA.INNODB_FT_DEFAULT_STOPWORD;\n  思路 创建一个表和默认停用词相同的结构 然后你自己加记录进去 然后在设置这个表为自定义的停用词\n  -- Create a new stopword table  CREATE TABLE my_stopwords(value VARCHAR(30)) ENGINE = INNODB; -- Insert stopwords (for simplicity, a single stopword is used in this example)  INSERT INTO my_stopwords(value) VALUES (\u0026#39;Ishmael\u0026#39;); -- Create the table  CREATE TABLE opening_lines ( id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY, opening_line TEXT(500), author VARCHAR(200), title VARCHAR(200) ) ENGINE=InnoDB; -- Insert data into the table  INSERT INTO opening_lines(opening_line,author,title) VALUES (\u0026#39;Call me Ishmael.\u0026#39;,\u0026#39;Herman Melville\u0026#39;,\u0026#39;Moby-Dick\u0026#39;), (\u0026#39;A screaming comes across the sky.\u0026#39;,\u0026#39;Thomas Pynchon\u0026#39;,\u0026#39;Gravity\\\u0026#39;s Rainbow\u0026#39;), (\u0026#39;I am an invisible man.\u0026#39;,\u0026#39;Ralph Ellison\u0026#39;,\u0026#39;Invisible Man\u0026#39;), (\u0026#39;Where now? Who now? When now?\u0026#39;,\u0026#39;Samuel Beckett\u0026#39;,\u0026#39;The Unnamable\u0026#39;), (\u0026#39;It was love at first sight.\u0026#39;,\u0026#39;Joseph Heller\u0026#39;,\u0026#39;Catch-22\u0026#39;), (\u0026#39;All this happened, more or less.\u0026#39;,\u0026#39;Kurt Vonnegut\u0026#39;,\u0026#39;Slaughterhouse-Five\u0026#39;), (\u0026#39;Mrs. Dalloway said she would buy the flowers herself.\u0026#39;,\u0026#39;Virginia Woolf\u0026#39;,\u0026#39;Mrs. Dalloway\u0026#39;), (\u0026#39;It was a pleasure to burn.\u0026#39;,\u0026#39;Ray Bradbury\u0026#39;,\u0026#39;Fahrenheit 451\u0026#39;); -- Set the innodb_ft_server_stopword_table option to the new stopword table SET GLOBAL innodb_ft_server_stopword_table = \u0026#39;test/my_stopwords\u0026#39;; -- Create the full-text index (which rebuilds the table if no FTS_DOC_ID column is defined) CREATE FULLTEXT INDEX idx ON opening_lines(opening_line);  设置  SET GLOBAL innodb_ft_aux_table=\u0026#39;test/opening_lines\u0026#39;; "});index.add({'id':205,'href':'/life/docs/databases/mysql/mysql_select/','title':"mysql新查询",'section':"mysql学习笔记",'content':"一:创建计算字段 #  -- 将 fruits.f_name 和 suppliers.s_city创建为了一个新字段连在一起来计算查询 select fruits.f_name as name ,suppliers.s_city as city from suppliers left join fruits on fruits.s_id = suppliers.s_id where 1=1 and CONCAT(fruits.f_name,\u0026#39;-\u0026#39;,suppliers.s_city) = \u0026#39;apple-Tianjin\u0026#39; ; -- 员工的部门和名称组合为新字段 select CONCAT_WS(\u0026#39;-\u0026#39;,dept.d_name,employee.e_name) as name from employee left join dept on dept.d_no = employee.dept_no 二:函数 #   聚集函数 预定义函数-字符串函数 预定义函数-时间处理函数 预定义函数-数字处理函数 算数、逻辑运算 流程函数  1:聚集函数 (聚合函数可以理解成多对一) #   什么是聚合函数   聚合函数作用于一组数据，并对一组数据返回一个值\n  常用聚合函数：     函数 描述     AVG() 返回列的平均值   COUNT(DISTINCT) 返回列去重后的行数   COUNT() 返回列的行数   MAX() 返回列的最大值   MIN() 返回列的最小值   SUM() 返回列的总和   GROUP_CONCAT() 返回一组值的连接字符串(MySQL独有)     例子一  -- 计算表中数量,最小值,最大值,平均值,平均值,累加值 select count(*) as count_value ,MIN(f_price) as min_value,MAX(f_price) as max_value,AVG(f_price) as avg_value ,SUM(f_price) as sum_value from fruits  例子二  SELECT c_name,GROUP_CONCAT(grade), sum(grade) as total_grade ,avg(grade) as avg_grade FROM score GROUP BY c_name 2:预定义函数-字符串函数 #     函数 描述     LENGTH() 返回列的字节数   CHAR_LENGTH() 返回列的字符数   TRIM()/RTRIM()/LTRIM() 去除两边空格/去除右边空格/去除左边空格   SUBSTRING(str, pos, [len]) 从pos位置截取字符串str，截取len长度   LOCATE(substr, str, [pos]) 返回substr在str字符串中的位置   REPLACE(str, from_str, to_str) 将str字符串中的from_str替换成to_str   LOWER(), UPPER() 字符串转换为小写/大写     例子  SELECT `USER_NAME`, LENGTH( `USER_NAME` ) AS name_length, CHAR_LENGTH( USER_NAME ) AS string_length, LOWER( USER_NAME ) AS LOWER_NAME, UPPER( USER_NAME ) AS UPPER_NAME, REPLACE ( USER_NAME, \u0026#39;0\u0026#39;, \u0026#39;O\u0026#39; ) AS REPLACE_NAME, SUBSTRING( USER_NAME, \u0026#39;0\u0026#39;, 5 ) AS SUBSTRING_NAME, TRIM( `USER_NAME` ) AS TRIM_NAME FROM `t_user` LIMIT 2,40 3:预定义函数-数字处理函数 #     函数 描述     ABS() 返回数值的绝对值   CEIL() 对小数向上取整 CEIL(1.2)=2   ROUND() 四舍五入   POW(num, n) num的n次幂 POW(2, 2)=4   FLOOR() 对小数向下取整 CELL(1.2)=1   MOD(N, M) 取模(返回n除以m的余数)=N % M   RAND() 取0~1之间的一个随机数     例子一  select ABS(-22.4) as ABS_VALUE,CEIL(1.4)as CEIL_VALUE,ROUND(1.49)as ROUND_VALUE,FLOOR(1.4) as FLOOR_VALUE,POW(2,3) AS POW_VALUE,RAND()*10 AS RAND_VALUE,MOD(8,3) AS MOD_VALUE ;  例子二  SELECT ABS( `f_price` ) AS ABS_VALUE, CEIL( `f_price` ) AS CEIL_VALUE, ROUND( `f_price` ) AS ROUND_VALUE, FLOOR( `f_price` ) AS FLOOR_VALUE, POW( `f_price`, 3 ) AS POW_VALUE, RAND( ) * `f_price` AS RAND_VALUE, MOD ( `f_price`, 3 ) AS MOD_VALUE FROM `fruits`; 4:预定义函数-时间处理函数 #     函数 描述     CURDATE() 当前日期   CURTIME() 当前时间   NOW() 显示当前时间日期(常用)   UNIX_TIMESTAMP() 当前时间戳   DATE_FORMAT(date, format) 按指定格式显示时间   DATE_ADD(date, INTERVAL unit) 计算指定日期向后加一段时间的日期   DATE_SUB(date, INTERVAL unit) 计算指定日期向前减一段时间的日期     例子1  -- 使用临时日期函数来创建查询 基本全部用到了上面的函数  SELECT CURDATE( ) AS CURDATE, CURTIME( ) AS CURTIME, NOW( ) AS NOW, DATE_ADD( NOW( ), INTERVAL 1 MONTH ) AS DATE_ADD_ONE_MONTH, DATE_SUB( NOW( ), INTERVAL 1 MONTH ) AS DATE_SUB_ONE_MONTH, UNIX_TIMESTAMP( ) AS UNIX_TIMESTAMP, DATE_FORMAT( NOW( ), \u0026#39;%Y-%m-%d %H-%i-%S\u0026#39; ) AS DATE_FORMAT;   例子2 这里我们结合实际来说\n  需要准备数据 来查询 这里我们使用存储过程来创建特定的日期表\n  -- 创建表  CREATE TABLE `temp_date` ( `id` int NOT NULL AUTO_INCREMENT, `age` float(14,2) DEFAULT NULL COMMENT \u0026#39;age\u0026#39;, `name` varchar(255) DEFAULT NULL, `birthday` date DEFAULT NULL COMMENT \u0026#39;生日\u0026#39;, `gmt_created` datetime DEFAULT CURRENT_TIMESTAMP, `gmt_modified` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=\u0026#39;临时用户表\u0026#39;; -- 存储过程创建数据  -- 创建生成指定范围的随机数字 DROP PROCEDURE IF EXISTS proc_random_num; DELIMITER ; CREATE PROCEDURE proc_random_num(in custom_start_value double(12,2),in custom_end_value double(12,2),out result_value double(12,2)) BEGIN DECLARE start_value_p1 double(12,2) DEFAULT 0; DECLARE end_value_p1 double(12,2) DEFAULT 0; DECLARE num double DEFAULT 0; DECLARE num_value double DEFAULT 0; DECLARE range_value_t double DEFAULT 0; DECLARE random_value_t double DEFAULT 0; set `start_value_p1` = `custom_start_value` ; set `end_value_p1` = `custom_end_value` ; set range_value_t = `custom_end_value` - `custom_start_value` ; set random_value_t = RAND(); set num_value = `custom_start_value` + ROUND(random_value_t * range_value_t) ; set result_value = num_value ; -- SELECT start_value_p1,`end_value_p1` ; END ; -- 创建生成指定范围的随机日期  DROP PROCEDURE IF EXISTS proc_random_date;--如果存在此存储过程则删掉 DELIMITER ; CREATE PROCEDURE proc_random_date(in custom_start_year int(20),in custom_end_year int(20),in custom_start_month int(20),in custom_end_month int(20),in custom_start_day int(20),in custom_end_day int(20),out result_string LONGTEXT) BEGIN DECLARE a1 int default 0; DECLARE a2 int default 0; DECLARE a3 int default 0; DECLARE string_value LONGTEXT DEFAULT \u0026#39;\u0026#39; ; -- 调用生成指定范围的数字存储过程 \tCALL proc_random_num(`custom_start_year` , `custom_end_year` , a1) ; CALL proc_random_num(`custom_start_month` , `custom_end_month` , a2) ; CALL proc_random_num(`custom_start_day` , `custom_end_day` , a3) ; set string_value = CONCAT_WS( \u0026#39;-\u0026#39;, a1 , a2 , a3) ; set result_string = string_value ; END ; CALL proc_random_date(1890,2022,1,12,1,31,@result); select @result; -- 插入指定数量的日期  -- 创建插入数据的存储过程  DROP PROCEDURE IF EXISTS proc_insert_into_temp_date;--如果存在此存储过程则删掉 DELIMITER ; CREATE PROCEDURE proc_insert_into_temp_date(in custom_value int(20)) BEGIN DECLARE i INT DEFAULT 1; DECLARE num_value INT DEFAULT 0; DECLARE date_value_param VARCHAR(255) ; SET num_value = custom_value ; WHILE i\u0026lt;=num_value DO CALL proc_random_date(1890,2022,1,12,1,31,date_value_param); INSERT INTO temp_date(`name`,`age`,`birthday`) VALUES(MD5(UUID()),CEILING(RAND()*100),date_value_param); SET i = i+1; END WHILE; END ; set @result_num = 1000; CALL proc_insert_into_temp_date(@result_num); -- 完成数据准备  -- 开始查询  SELECT DATE_ADD( `birthday`, INTERVAL 1 MONTH ) AS DATE_ADD_ONE_MONTH, DATE_SUB( `birthday`, INTERVAL 1 MONTH ) AS DATE_SUB_ONE_MONTH, DATE_FORMAT( `birthday`, \u0026#39;%Y-%m-%d %H-%i-%S\u0026#39; ) AS DATE_FORMAT FROM temp_date limit 1,30 5:流程函数 #  select IF ( 0.5 \u0026gt; rand(),\u0026#39;大于\u0026#39;,\u0026#39;小于\u0026#39;) as if_value , rand() as rand_value ; set @input = ROUND(RAND()*10) ; select case @input when 0 then \u0026#39;其它\u0026#39; when 1 then \u0026#39;星期一\u0026#39; when 2 then \u0026#39;星期二\u0026#39; when 3 then \u0026#39;星期三\u0026#39; when 4 then \u0026#39;星期四\u0026#39; when 5 then \u0026#39;星期五\u0026#39; when 6 then \u0026#39;星期六\u0026#39; else \u0026#39;星期天\u0026#39; end as \u0026#39;column1\u0026#39;,@input as value_; -- 如果 expr1 = expr2 返回 NULL 然后expr1为null那么同样返回null select NULLIF(1,1) as v1, NULLIF(2,1) as v2 ,NULLIF(null,3) as v3,NULLIF(4,null) as v4,NULLIF(null,null) as v5; -- IFNULL(expr1,expr2) 如果expr1不是 NULL， 则IFNULL()返回 expr1；否则返回 expr2。 select IFNULL(1,0) as v1 ,IFNULL(null,0) as v2 ; 三:创建联结 #  使用表别名 #   student 取名为 tb_stu\n select concat(tb_stu.department,\u0026#39;-\u0026#39;,tb_stu.name) as name from student as tb_stu;  当在一次查询中 不止一次地引用相同的表\n 自联结 #   当你知道某个童鞋的分数是98你想查看和98分数相同科目的其他童鞋的分数\n -- 不适用联结查询的方法 select c_name ,grade from score where c_name = (select c_name from score where grade = 98 ) -- 使用联结的查询方法 (清晰很多) select tb1.c_name ,tb1.grade from score tb1, score tb2 where 1=1 and tb1.c_name = tb2.c_name and tb2.grade = 98; 自然联结 #   当对多个表联结查询或者对一个表进行两次引用查询 这个时候有相同的列可能要出现 这个时候我们手动控制某些列出现某些列不出现\n -- fruits 中s_id和suppliers中s_id是相同的列名称  select fruits.*,suppliers.s_name as s_name , suppliers.s_city as s_city from fruits ,suppliers where suppliers.s_id = fruits.s_id 外部联结 #   将一个表中的行与另一个表中的行关联，但有时候需要包含那些没有关联的行\n select customers.cust_id,orders.order_num from customers left outer join orders on customers.cust_id = orders.cust_id 使用带聚集函数的联结 #  四:分组查询、过滤 #  select count(id)as count,age,birthday from temp_date group by age ; select count(id)as count,age,birthday from temp_date group by age having age \u0026gt; 20 and count \u0026gt; 10 ; 五:全文搜索 #   v 5.7.6   在MySQL 5.7.6之前，全文索引只支持英文全文索引，不支持中文全文索引，需要利用分词器把中文段落预处理拆分成单词，然后存入数据库。\n  从MySQL 5.7.6开始，MySQL内置了ngram全文解析器，用来支持中文、日文、韩文分词。本文使用的MySQL 版本是5.7.22，InnoDB数据库引擎。\n ngram全文解析器 #   ngram就是一段文字里面连续的n个字的序列。ngram全文解析器能够对文本进行分词，每个单词是连续的n个字的序列。例如，用ngram全文解析器对“生日快乐”进行分词\n  MySQL 中使用全局变量ngram_token_size来配置ngram中n的大小，它的取值范围是1到10，默认值是2 如果需要搜索单字，就要把ngram_token_size设置为1,因为中文单词最少是两个汉字，推荐使用默认值2 全局变量ngram_token_size的两种设置方法 1、启动mysqld命令时  mysqld --ngram_token_size=2  修改MySQL配置文件  [mysqld] ngram_token_size=2 n=1: \u0026#39;生\u0026#39;, \u0026#39;日\u0026#39;, \u0026#39;快\u0026#39;, \u0026#39;乐\u0026#39; n=2: \u0026#39;生日\u0026#39;, \u0026#39;日快\u0026#39;, \u0026#39;快乐\u0026#39; n=3: \u0026#39;生日快\u0026#39;, \u0026#39;日快乐\u0026#39; n=4: \u0026#39;生日快乐\u0026#39; -- 1:创建包含FULLTEXT(全文索引)的表 CREATE TABLE tb_posts ( id int(11) NOT NULL AUTO_INCREMENT, pro_date datetime DEFAULT NULL, price_remark varchar(255) DEFAULT NULL, title varchar(255) NOT NULL, post_content text, gmt_created datetime DEFAULT CURRENT_TIMESTAMP, gmt_modified datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (id), FULLTEXT KEY post_content (post_content) ); -- 2:通过 alter table 的方式来添加  ALTER TABLE tb_posts ADD FULLTEXT INDEX ft_index (post_content) WITH PARSER ngram; -- 3、直接通过create index的方式  CREATE FULLTEXT INDEX ft_index ON tb_posts (post_content) WITH PARSER ngram; 全文检索模式 #   常用的全文检索模式有两种 1、自然语言模式(NATURAL LANGUAGE MODE)   自然语言模式是MySQL 默认的全文检索模式。自然语言模式不能使用操作符，不能指定关键词必须出现或者必须不能出现等复杂查询。\n  2、BOOLEAN模式(BOOLEAN MODE)   BOOLEAN模式可以使用操作符，可以支持指定关键词必须出现或者必须不能出现或者关键词的权重高还是低等复杂查询。\n -- 普通短语搜索  SELECT * FROM tb_posts WHERE MATCH (post_content) AGAINST (\u0026#39;天津\u0026#39; ); -- 自然语言模式 -- 包含北京关键词 SELECT * FROM tb_posts WHERE MATCH (post_content) AGAINST (\u0026#39;北京\u0026#39; IN NATURAL LANGUAGE MODE); -- 布尔模式 -- 必须包含 SELECT * FROM tb_posts WHERE MATCH (post_content) AGAINST (\u0026#39;无锡\u0026#39; IN BOOLEAN MODE); -- 通配符搜索 -- 匹配包含北京的字符串前缀开头的数据 SELECT * FROM tb_posts WHERE MATCH (post_content) AGAINST (\u0026#39;北京*\u0026#39; ); -- 如果通配符中的前缀术语长于ngram令牌大小，MySQL将把前缀术语转换为ngram短语并忽略通配符运算符 SELECT * FROM tb_posts WHERE MATCH (post_content) AGAINST (\u0026#39;北京顺鑫石门国际*\u0026#39; );   全文停用词\n  查看停用的默认词 SELECT * FROM INFORMATION_SCHEMA.INNODB_FT_DEFAULT_STOPWORD;\n  思路 创建一个表和默认停用词相同的结构 然后你自己加记录进去 然后在设置这个表为自定义的停用词\n  -- Create a new stopword table  CREATE TABLE my_stopwords(value VARCHAR(30)) ENGINE = INNODB; -- Insert stopwords (for simplicity, a single stopword is used in this example)  INSERT INTO my_stopwords(value) VALUES (\u0026#39;Ishmael\u0026#39;); -- Create the table  CREATE TABLE opening_lines ( id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY, opening_line TEXT(500), author VARCHAR(200), title VARCHAR(200) ) ENGINE=InnoDB; -- Insert data into the table  INSERT INTO opening_lines(opening_line,author,title) VALUES (\u0026#39;Call me Ishmael.\u0026#39;,\u0026#39;Herman Melville\u0026#39;,\u0026#39;Moby-Dick\u0026#39;), (\u0026#39;A screaming comes across the sky.\u0026#39;,\u0026#39;Thomas Pynchon\u0026#39;,\u0026#39;Gravity\\\u0026#39;s Rainbow\u0026#39;), (\u0026#39;I am an invisible man.\u0026#39;,\u0026#39;Ralph Ellison\u0026#39;,\u0026#39;Invisible Man\u0026#39;), (\u0026#39;Where now? Who now? When now?\u0026#39;,\u0026#39;Samuel Beckett\u0026#39;,\u0026#39;The Unnamable\u0026#39;), (\u0026#39;It was love at first sight.\u0026#39;,\u0026#39;Joseph Heller\u0026#39;,\u0026#39;Catch-22\u0026#39;), (\u0026#39;All this happened, more or less.\u0026#39;,\u0026#39;Kurt Vonnegut\u0026#39;,\u0026#39;Slaughterhouse-Five\u0026#39;), (\u0026#39;Mrs. Dalloway said she would buy the flowers herself.\u0026#39;,\u0026#39;Virginia Woolf\u0026#39;,\u0026#39;Mrs. Dalloway\u0026#39;), (\u0026#39;It was a pleasure to burn.\u0026#39;,\u0026#39;Ray Bradbury\u0026#39;,\u0026#39;Fahrenheit 451\u0026#39;); -- Set the innodb_ft_server_stopword_table option to the new stopword table SET GLOBAL innodb_ft_server_stopword_table = \u0026#39;test/my_stopwords\u0026#39;; -- Create the full-text index (which rebuilds the table if no FTS_DOC_ID column is defined) CREATE FULLTEXT INDEX idx ON opening_lines(opening_line);  设置  SET GLOBAL innodb_ft_aux_table=\u0026#39;test/opening_lines\u0026#39;; 六:行转列\u0026amp;列转行 #  行转列 #   数据准备  -- 创建表  -- ---------------------------- -- Table structure for user_column_row -- ---------------------------- DROP TABLE IF EXISTS `user_column_row`; CREATE TABLE `user_column_row` ( `id` int(0) NOT NULL AUTO_INCREMENT, `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT \u0026#39;姓名\u0026#39;, `features` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT \u0026#39;特征\u0026#39;, `value` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT \u0026#39;数值\u0026#39;, PRIMARY KEY (`id`) USING BTREE ) ENGINE = MyISAM AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic; -- ---------------------------- -- Records of user_column_row -- ---------------------------- INSERT INTO `user_column_row` VALUES (2, \u0026#39;小明\u0026#39;, \u0026#39;身高\u0026#39;, \u0026#39;172.00\u0026#39;); INSERT INTO `user_column_row` VALUES (3, \u0026#39;小明\u0026#39;, \u0026#39;体重\u0026#39;, \u0026#39;48kg\u0026#39;); INSERT INTO `user_column_row` VALUES (4, \u0026#39;小明\u0026#39;, \u0026#39;年龄\u0026#39;, \u0026#39;23\u0026#39;); INSERT INTO `user_column_row` VALUES (5, \u0026#39;小红\u0026#39;, \u0026#39;身高\u0026#39;, \u0026#39;161.00\u0026#39;); INSERT INTO `user_column_row` VALUES (6, \u0026#39;小红\u0026#39;, \u0026#39;体重\u0026#39;, \u0026#39;40kg\u0026#39;); INSERT INTO `user_column_row` VALUES (7, \u0026#39;小红\u0026#39;, \u0026#39;年龄\u0026#39;, \u0026#39;19\u0026#39;); INSERT INTO `user_column_row` VALUES (8, \u0026#39;小花\u0026#39;, \u0026#39;身高\u0026#39;, \u0026#39;153.00\u0026#39;); INSERT INTO `user_column_row` VALUES (9, \u0026#39;小花\u0026#39;, \u0026#39;体重\u0026#39;, \u0026#39;42kg\u0026#39;); INSERT INTO `user_column_row` VALUES (10, \u0026#39;小花\u0026#39;, \u0026#39;年龄\u0026#39;, \u0026#39;17\u0026#39;); INSERT INTO `user_column_row` VALUES (11, \u0026#39;小明\u0026#39;, \u0026#39;身高\u0026#39;, \u0026#39;172.33\u0026#39;); INSERT INTO `user_column_row` VALUES (12, \u0026#39;小军\u0026#39;, \u0026#39;身高\u0026#39;, NULL); INSERT INTO `user_column_row` VALUES (13, \u0026#39;小军\u0026#39;, \u0026#39;体重\u0026#39;, NULL); INSERT INTO `user_column_row` VALUES (14, \u0026#39;小军\u0026#39;, \u0026#39;年龄\u0026#39;, NULL); INSERT INTO `user_column_row` VALUES (15, \u0026#39;小胖\u0026#39;, NULL, NULL); INSERT INTO `user_column_row` VALUES (16, \u0026#39;小胖\u0026#39;, NULL, NULL); INSERT INTO `user_column_row` VALUES (17, \u0026#39;小胖\u0026#39;, NULL, NULL);   例子\n  进行之前 先说一个语句 mysql case…when…then 这个经常用来处理行转列\n  CASE WHEN features = \u0026lsquo;体重\u0026rsquo; THEN value ELSE \u0026lsquo;0kg\u0026rsquo; END 表示 匹配到体重就使用value 假如匹配不到就使用0kg\n  -- 第一次\rSELECT\rtb_user.id,tb_user.NAME , ( CASE WHEN `features` = '体重' THEN `value` ELSE '0kg' END ) AS weight ,\r( CASE WHEN `features` = '身高' THEN `value` ELSE '0cm' END ) AS height,\r( CASE WHEN `features` = '年龄' THEN `value` ELSE 0 END ) AS age FROM user_column_row tb_user GROUP BY tb_user.NAME;\r-- 结果\rid name weight height age\r2\t小明\t0kg\t172.00\t0\r5\t小红\t0kg\t161.00\t0\r8\t小花\t0kg\t153.00\t0\r12\t小军\t0kg\t0\r15\t小胖\t0kg\t0cm\t0\r-- 可以看到根本没有达到目的\r-- 第二次\rSELECT\rtb_user.id,tb_user.NAME , ( CASE WHEN `features` = '体重' THEN `value` ELSE '0kg' END ) AS weight ,\r( CASE WHEN `features` = '身高' THEN `value` ELSE '0cm' END ) AS height,\rmax( CASE WHEN `features` = '年龄' THEN `value` ELSE 0 END ) AS age FROM user_column_row tb_user GROUP BY tb_user.NAME;\r-- 结果\r2\t小明\t0kg\t172.00\t23\r5\t小红\t0kg\t161.00\t19\r8\t小花\t0kg\t153.00\t17\r12\t小军\t0kg\t0\r15\t小胖\t0kg\t0cm\t0\r-- 对年龄进行取最大倒是满足了 但是不是所有的行数据都是数字啊 所以还是不靠谱\r-- 第三次\rSELECT\rtb_user.id,tb_user.NAME ,\rgroup_concat(CASE WHEN `features` = '体重' THEN `value` ELSE '0kg' END) AS weight,\rgroup_concat(CASE WHEN `features` = '身高' THEN `value` ELSE '0cm' END) AS height,\rgroup_concat(CASE WHEN `features` = '年龄' THEN `value` ELSE ' 0 ' END) AS age FROM user_column_row tb_user GROUP BY tb_user.NAME order by tb_user.id;\r-- 结果\rid NAME weight height age\r2\t小明\t0kg,48.0kg,0kg,0kg\t172.00,0cm,0cm,172.33\t0 , 0 ,23, 0 5\t小红\t0kg,40.0kg,0kg\t161.00,0cm,0cm\t0 , 0 ,19\r8\t小花\t0kg,42.0kg,0kg\t153.00,0cm,0cm\t0 , 0 ,17\r12\t小军\t0kg,0kg\t0cm,0cm\t0 , 0 15\t小胖\t0kg,0kg,0kg\t0cm,0cm,0cm\t0 , 0 , 0 -- 可以看到已经全部取出组合而来 虽然结果值很乱 但是这是最靠谱的 把结果处理下就行啦,比如可以考虑代码直接处理或者存储过程处理\r-- 第四次 (优化第三次)\rSELECT\rtb_user.id,tb_user.NAME ,\rgroup_concat(DISTINCT CASE WHEN `features` = '体重' and `value` != '0kg' THEN `value` ELSE null END ) AS weight,\rgroup_concat(DISTINCT CASE WHEN `features` = '身高' and `value` != '0cm' THEN `value` ELSE null END) AS height,\rgroup_concat(DISTINCT CASE WHEN `features` = '年龄' and `value` != '0' THEN `value` ELSE null END) AS age FROM user_column_row tb_user GROUP BY tb_user.NAME order by tb_user.id;\r-- 结果\rid NAME weight height age\r2\t小明\t48kg\t172.00,172.33\t23\r5\t小红\t40kg\t161.00\t19\r8\t小花\t42kg\t153.00\t17\r12\t小军\t15\t小胖\t列转行 #   数据准备  CREATE TABLE `user2` ( `id` int NOT NULL AUTO_INCREMENT, `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT \u0026#39;名称\u0026#39;, `age` double(11,2) DEFAULT NULL COMMENT \u0026#39;年龄\u0026#39;, `height` double(11,2) DEFAULT NULL COMMENT \u0026#39;身高\u0026#39;, `weight` double(11,2) DEFAULT NULL COMMENT \u0026#39;体重\u0026#39;, PRIMARY KEY (`id`) ) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; -- ---------------------------- -- Table structure for user2 -- ---------------------------- DROP TABLE IF EXISTS `user2`; CREATE TABLE `user2` ( `id` int(0) NOT NULL AUTO_INCREMENT, `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT \u0026#39;名称\u0026#39;, `age` double(11, 2) NULL DEFAULT NULL COMMENT \u0026#39;年龄\u0026#39;, `height` double(11, 2) NULL DEFAULT NULL COMMENT \u0026#39;身高\u0026#39;, `weight` double(11, 2) NULL DEFAULT NULL COMMENT \u0026#39;体重\u0026#39;, PRIMARY KEY (`id`) USING BTREE ) ENGINE = MyISAM AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic; -- ---------------------------- -- Records of user2 -- ---------------------------- INSERT INTO `user2` VALUES (2, \u0026#39;小明\u0026#39;, 22.00, 48.00, 178.40); INSERT INTO `user2` VALUES (3, \u0026#39;小胖\u0026#39;, 25.00, 50.00, 168.00);  列转行关键点：   union，使用\u0026rsquo;年龄' as 特征、\u0026lsquo;身高\u0026rsquo; as 特征、\u0026lsquo;体重\u0026rsquo; as 特征 来确定图5第3列的列名与每行数据该列的值，使用age as 数值、height as 数值、weight as 数值来确定图5第4列的列名与每行数据该列的值，3个select 查询出3张表格，再通过union连接成一张表格\n  union注意点   使用union连接表时需要注意表的字段一致，此处我们3个select 查询出3张表格字段是一致的\n  例子  select id , name ,\u0026#39;年龄\u0026#39; as features,age as value from user2 union select id , name ,\u0026#39;体重\u0026#39; as features,weight as value from user2 union select id , name ,\u0026#39;身高\u0026#39; as features,height as value from user2 -- 这里面有一个常设值 比如 \u0026#39;年龄\u0026#39; as features , \u0026#39;体重\u0026#39; as features 直接挂到列上的 除了这个就没有其它难点了 七:行锁(悲观锁),表锁,页面锁 #   锁定用于确保事务完整性和数据库一致性。 锁定可以防止用户读取其他用户正在更改的数据，并防止多个用户同时更改相同的数据。 如果不使用锁定，数据库中的数据可能在逻辑上变得不正确，而针对这些数据进行查询可能会产生想不到的结果。\n  在计算机科学中，锁是在执行多线程时用于强行限制资源访问的同步机制，即用于在并发控制中保证对互斥要求的满足。在数据库的锁机制中介绍过，在DBMS中，可以按照锁的粒度把数据库锁分为行级锁(INNODB引擎)、表级锁(MYISAM引擎)和页级锁(BDB引擎 )。\n 行级锁 #    行级锁是Mysql中锁定粒度最细的一种锁，表示只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，但加锁的开销也最大。行级锁分为共享锁 和 排他锁。\n  特点:开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。\n  表级锁 #    表级锁是MySQL中锁定粒度最大的一种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少，被大部分MySQL引擎支持。最常使用的MYISAM与INNODB都支持表级锁定。表级锁定分为表共享读锁（共享锁）与表独占写锁（排他锁）\n  特点:开销小，加锁快；不会出现死锁；锁定粒度大，发出锁冲突的概率最高，并发度最低。\n  页级锁 #    页级锁是MySQL中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页级，一次锁定相邻的一组记录。BDB支持页级锁\n  特点:开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般\n  MySQL常用存储引擎的锁机制 #   MyISAM和MEMORY采用表级锁(table-level locking) BDB采用页面锁(page-level locking)或表级锁，默认为页面锁 InnoDB支持行级锁(row-level locking)和表级锁,默认为行级锁  Innodb中的行锁与表锁 #   前面提到过，在Innodb引擎中既支持行锁也支持表锁，那么什么时候会锁住整张表，什么时候或只锁住一行呢？ InnoDB行锁是通过给索引上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！ 在实际应用中，要特别注意InnoDB行锁的这一特性，不然的话，可能导致大量的锁冲突，从而影响并发性能。 行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁。行级锁的缺点是：由于需要请求大量的锁资源，所以速度慢，内存消耗大。  行级锁与死锁 #   MyISAM中是不会产生死锁的，因为MyISAM总是一次性获得所需的全部锁，要么全部满足，要么全部等待。而在InnoDB中，锁是逐步获得的，就造成了死锁的可能。\n  在MySQL中，行级锁并不是直接锁记录，而是锁索引。索引分为主键索引和非主键索引两种，如果一条sql语句操作了主键索引，MySQL就会锁定这条主键索引；如果一条语句操作了非主键索引，MySQL会先锁定该非主键索引，再锁定相关的主键索引。 在UPDATE、DELETE操作时，MySQL不仅锁定WHERE条件扫描过的所有索引记录，而且会锁定相邻的键值，即所谓的next-key locking。\n   当两个事务同时执行，一个锁住了主键索引，在等待其他相关索引。另一个锁定了非主键索引，在等待主键索引。这样就会发生死锁。\n  发生死锁后，InnoDB一般都可以检测到，并使一个事务释放锁回退，另一个获取锁完成事务。\n  有多种方法可以避免死锁，这里只介绍常见的三种\n  1、如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会。\n  2、在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率；\n  3、对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率；\n  行锁例子 #   InnoDB实现了以下两种类型的行锁： 共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁 排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁     当前锁类型\\请求锁类型 S (共享锁) X(排他锁)     S(共享锁) 兼容 冲突   X(排他锁) 冲突 冲突       SQL 行锁类型 说明     INSERT\u0026hellip; 排他锁 自动加锁   UPDATE\u0026hellip; 排他锁 自动加锁   DELETE\u0026hellip; 排他锁 自动加锁   SELECT\u0026hellip; 不加任何锁    SELECT\u0026hellip; LOCK IN SHARE MODE 共享锁 需要在手动在SELECT之后LOCK IN SHARE MODE   SELECT\u0026hellip; FOR UPDATE 排他锁 需要在手动在SELECT之后FOR UPDATE     例子1 行级锁(排他锁)  -- 创建行锁条件 -- 1、表中创建索引， select 。。。 where 字段（必须是索引） 不然行锁就无效。 -- 2、必须要有事务，这样才是 行锁（排他锁） -- 3、在select 语句后面 加 上 FOR UPDATE；  start transaction ; select age,birthday from temp_date where 1=1 and age = 60 for update; -- 休眠5秒 select SLEEP(5); commit ; 表锁定例子 #   获取表的锁的简单形式  LOCK TABLES table_name [READ | WRITE] -- 可将表的名称放在LOCK TABLES关键字后面，后跟一个锁类型。 MySQL提供两种锁类型：READ和WRITE  释放表的锁  UNLOCK TABLES;  表锁定为READ   同时可以通过多个会话获取表的READ锁。此外，其他会话可以从表中读取数据，而无需获取锁定。 持有READ锁的会话只能从表中读取数据，但不能写入。此外，其他会话在释放READ锁之前无法将数据写入表中。来自另一个会话的写操作将被放入等待状态，直到释放READ锁。 如果会话正常或异常终止，MySQL将会隐式释放所有锁。这也与WRITE锁相关。  lock table temp_date read; insert into temp_date(age,birthday) values(102,\u0026#39;2008-04-25\u0026#39;) ; -- 结果 lock table temp_date read \u0026gt; OK \u0026gt; 时间: 0s insert into temp_date(age,birthday) values(102,\u0026#39;2008-04-25\u0026#39;) \u0026gt; 1099 - Table \u0026#39;temp_date\u0026#39; was locked with a READ lock and can\u0026#39;t be updated \u0026gt; 时间: 0s -- 继续 select age,birthday from temp_date; -- 可以看到 READ锁 是可以读取数据的 -- 释放锁 unlock tables ;  表锁定WRITE   只有拥有表锁定的会话才能从表读取和写入数据。 在释放WRITE锁之前，其他会话不能从表中读写。  -- 加锁 lock table temp_date write; insert into temp_date(age,birthday) values(102,\u0026#39;2008-04-25\u0026#39;) ; -- 测试是否还可继续读(从其他会话查询,因为当前会话连接是有锁的) select age,birthday from temp_date; -- 发现已经被阻塞了 -- 释放锁 unlock tables ;  表锁了，强制释放    1、查看当前进程\n  show processlist;\n  2、查看当前运行的事务\n  SELECT * FROM information_schema.INNODB_TRX;\n  3、当前出现的锁\n  SELECT * FROM information_schema.INNODB_LOCKs;\n  4、kill掉对应进程\n  kill id\n  八:事务 #  什么是事务 #   一系列有序的数据库操作：  要么全部成功 要么全部回退到操作前的状态 中间状态对其他连接不可见   事务的基本操作：    基本操作 说明     start transaction 开始事务   commit 提交(全部完成)   rollback 回滚(回到初始状态)       创建一个临时表  CREATE TABLE `t_transaction` ( `id` int NOT NULL AUTO_INCREMENT, `name` varchar(255) DEFAULT NULL, `num` bigint DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;  例子事务使用  -- 开启一个事务 start TRANSACTION ; -- 或者使用(非标准sql) begin ; insert into t_transaction( `name` ,`num`) values(\u0026#39;abc\u0026#39;,ROUND(RAND()*100)); -- 事务结束，插入成功 COMMIT ;  例子 事务 回滚  START TRANSACTION ; BEGIN ; insert into t_transaction( `name` ,`num`) values(\u0026#39;kk\u0026#39;,ROUND(RAND()*100)); ROLLBACK ; -- 不会插入一条数据   事务回滚点  START TRANSACTION ; BEGIN ; insert into t_transaction( `name` ,`num`) values(\u0026#39;s1x\u0026#39;,ROUND(RAND()*100)); -- 设置回滚点1 savepoint a_point_1; insert into t_transaction( `name` ,`num`) values(\u0026#39;s1\u0026#39;,ROUND(RAND()*100)); -- 回滚到指定点 ROLLBACK to a_point_1; commit ; 自动提交 #   autocommit可以在session级别设置 每个DML操作都自动提交 DDL永远都是自动提交，无法通过rollback回滚  事务的四个基本属性(ACID) #   原子性(Atomicity) 一致性(Consistency) 隔离性(Isolation) 持久性(Durability)  事务的原子性 #   包含在事务中的操作要么全部被执行，要么都不执行 中途数据库或应用发生异常，未提交的事务都应该被回滚  事务的一致性 #   数据的正确性，合理性，完整性 数据一致性应该符合应用需要规则：  余额不能是负数 交易对象必须先有账号 用户账号不能重复   事务的结果需要满足数据的一致性约束  事物的持久性 #   提交完成的事务对数据库的影响必须是永久性的  数据库异常不会丢失事务更新 通常认为成功写入磁盘的数据即为持久化成功    事务的持久化的实现 #   数据文件持久化  随机同步刷新(慢)   事务日志持久化与实例恢复  顺序同步刷新(快) -\u0026gt; 事务日志 随机异步刷新 -\u0026gt; 磁盘 事务日志 -\u0026gt; 磁盘(实例恢复)    事务的隔离性 #   数据库事务在提交完成前，中间的任何数据变化对其他的事务都是不可见的。  数据库隔离现象 #     隔离现象 描述     脏读(Dirty Read) 事务B读到事务A尚未提交的数据变更   不可重复读(NonRepeatable Read) 事务B读取前后两次读取一条记录之间该记录被事务A修改并提交，于是事务B读到了不一样的结果   幻读(Phantom Read) 事务B按条件匹配到了若干行记录并修改。但是由于修改过程中事务A新插入了符合条件记录，导致B更新完成后发现仍有符合条件却未被更新的记录。    数据库隔离等级 #     隔离等级 脏读 不可重复读 幻读     未提交读 可能 可能 可能   已提交读 不可能 可能 可能   可重复读 不可能 不可能 可能   可串行化读 不可能 不可能 不可能    MySQL的事务隔离级别 #   InnoDB默认标记为可重复读 InnoDB并不是标准定义上的课重复读 InnoDB默认在可重复读的基础上避免幻读  MySQL事务隔离级别设置 #   可在global/session/下个事务，级别分别进行设置 建议使用Read committed(同Oracle) 或者建议使用默认的Repeatable read  set tx_isolation = \u0026#39;\u0026#39; -- 设置隔离级别 事务与并发写 #   某个正在更新的记录再提交或回滚前不能被其他事务同时更新  事务回滚的实现 #   回滚段(rollback segment)与数据前像  九:重要函数单独说明 #  count 函数 #   问题：用count(*)，count(1)，count(不存在NULL的列名)谁好呢?   其实，对于MyISAM引擎的表是没有区别的(O(1))。这种引擎内部有一计数器在维护着行数。 Innodb引擎的表用count(*),count(1)直接读行数，复杂度是O(n)，因为innodb真的要去数一遍。但好于具体的count(列名)。\n  问题：能不能使用count(列名)替换count(*)?   不要使用 count(列名)来替代 count() ， count() 是 SQL92 定义的标准统计行数的语法，跟数 据库无关，跟 NULL 和非 NULL 无关。\n  count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。\n  解决MySQL5.7版本之后使用GROUP BY语句时报错   1、先使用SQL查询sql_mode  select @@global.sql_mode  2、重新设置sql_mode，删除ONLY_FULL_GROUP_BY  set @@global.sql_mode =\u0026#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\u0026#39; 批量插入 #  mysql 出现 truncated incorrect double value （已解决） #   当 int 类型 与 字符串 相连的时候 用 + 就会报错 使用CONCAT(）函数来连接即可 列如 CONCAT(1,‘王’）代替 1 + ‘王’  MySQL 1064 You have an error in your SQL syntax 错误解决办法 #   　这是因为数据库表中的字段名引用了关键字，例如上面报错字段“desc 写sql语句时，引用到与mysql关键字重名的字段时，加上`` 如: set start_value_p1 = custom_start_value ;  mysql中 FORM的疑问 #  CREATE TABLE `temp_date` ( `id` int NOT NULL AUTO_INCREMENT, `age` float(14,2) DEFAULT NULL COMMENT \u0026#39;age\u0026#39;, `name` varchar(255) DEFAULT NULL, `birthday` date DEFAULT NULL COMMENT \u0026#39;生日\u0026#39;, `gmt_created` datetime DEFAULT CURRENT_TIMESTAMP, `gmt_modified` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=\u0026#39;临时用户表\u0026#39;; -- 正常操作  SELECT id,age,birthday FROM temp_date ; -- 奇奇怪怪的东西出来了  SELECT id,age,birthday FROM (SELECT id,age,birthday FROM temp_date ) tb_table ; -- 注意上面tb_table还必须得加上 否则就报错误 Every derived table must have its own alias 相当于派生表了  -- 相当于FROM 实际可以跟上虚拟的派生表 Mysql 相邻两行记录某列的差值方法 #   最终demo  SELECT r_tab.id, r_tab.age, r_tab.birthday, r_tab.diff , r_tab.diff_content FROM ( SELECT tb_r.id, tb_r.age, tb_r.birthday, (tb_r.age - tb_y.age)as diff ,(CONCAT_WS(\u0026#39;-\u0026#39;,tb_r.age,tb_y.age))as diff_content FROM ( SELECT tab.age,tab.id,(@rownum := @rownum + 1) AS rownum,tab.birthday FROM temp_date tab,(SELECT @rownum := 0) r_tx ) tb_r LEFT JOIN ( SELECT tab.age,tab.id,(@INDEX_NUM := @INDEX_NUM + 1) AS rownum,tab.birthday FROM temp_date tab,(SELECT @INDEX_NUM := 0) r_ty ) tb_y on tb_r.rownum = tb_y.rownum + 1 ) r_tab -- tb_r 和 tb_y比较后形成新的衍生或者派生表 r_tab 然后再把 r_tab 数据查出来  简化后  SELECT tb_r.id, tb_r.age, tb_r.birthday, (tb_r.age - tb_y.age)as diff ,(CONCAT_WS(\u0026#39;-\u0026#39;,tb_r.age,tb_y.age))as diff_content FROM ( SELECT tab.age,tab.id,(@rownum := @rownum + 1) AS rownum,tab.birthday FROM temp_date tab,(SELECT @rownum := 0) r_tx ) tb_r LEFT JOIN ( SELECT tab.age,tab.id,(@INDEX_NUM := @INDEX_NUM + 1) AS rownum,tab.birthday FROM temp_date tab,(SELECT @INDEX_NUM := 0) r_ty ) tb_y on tb_r.rownum = tb_y.rownum + 1 -- tb_r 和 tb_y 直接作比较得出数据就可以了 (然后这里用left join就是以tb_r为主)  在上面的例子解决后 增加 SQL实现相邻两行数据的加减乘除操作  SELECT tb_r.id, tb_r.age, tb_r.birthday,(tb_r.age + tb_y.age)as add_v, (tb_r.age - tb_y.age)as sub_v , (tb_r.age * tb_y.age)as mul_v,(tb_r.age / tb_y.age)as div_v FROM ( SELECT tab.age,tab.id,(@rownum := @rownum + 1) AS rownum,tab.birthday FROM temp_date tab,(SELECT @rownum := 0) r_tx ) tb_r LEFT JOIN ( SELECT tab.age,tab.id,(@INDEX_NUM := @INDEX_NUM + 1) AS rownum,tab.birthday FROM temp_date tab,(SELECT @INDEX_NUM := 0) r_ty ) tb_y on tb_r.rownum = tb_y.rownum + 1 -- 利用上面的例子实现加减乘除 "});index.add({'id':206,'href':'/life/docs/databases/mysql/mysql_view/','title':"mysql视图",'section':"mysql学习笔记",'content':"数据库视图简介 #   数据库视图是一个虚拟表或逻辑表，它被定义为带有INNER的SQL SELECT查询。因为数据库视图类似于由行和列组成的数据库表，所以您可以针对它查询数据。大多数数据库管理系统（包括MySQL）允许您通过数据库视图更新基础表中的数据，并具有一些先决条件\n 数据库视图的优点 #    数据库视图允许您简化复杂查询：数据库视图由与许多基础表关联的SQL语句定义。您可以使用数据库视图向最终用户和外部应用程序隐藏基础表的复杂性。通过数据库视图，您只需使用简单的SQL语句而不是具有许多连接的复杂语句。\n  数据库视图有助于限制对特定用户的数据访问。您可能不希望所有用户都可以查询敏感数据的子集。您可以使用数据库视图仅将非敏感数据公开给特定用户组。\n  数据库视图提供额外的安全层。安全性是任何关系数据库管理系统的重要组成部分。数据库视图为数据库管理系统提供了额外的保护。数据库视图允许您创建只读视图以向特定用户公开只读数据。用户只能以只读视图检索数据，但无法更新数据。\n  数据库视图启用计算列。数据库表不应有计算列，但数据库视图应。假设orderDetails您在表中有quantityOrder（订购产品的数量）和priceEach（每个产品的价格）列。但是，orderDetails 表没有用于存储订单的每个行项目的总销售额的计算列。如果有，数据库模式将不是一个好的设计。在这种情况下，您可以创建一个名为的计算列total ，它是quantityOrder和priceEach计算结果的乘积。从数据库视图查询数据时，将动态计算计算列的数据。\n  数据库视图可实现向后兼容性。假设您有一个中央数据库，许多应用程序正在使用它。有一天，您决定重新设计数据库以适应新的业务需求。您删除了一些表并创建新表，并且您不希望更改影响其他应用程序。在此方案中，您可以使用与要删除的旧表相同的模式创建数据库视图\n  数据库视图的缺点 #   性能：从数据库视图查询数据可能会很慢，尤其是在基于其他视图创建视图时。 表依赖项：您基于数据库的基础表创建视图。每当您更改与其关联的视图的这些表的结构时，您也必须更改视图。  创建视图 #  CREATE [ALGORITHM = {MERGE | TEMPTABLE | UNDEFINED}] VIEW view_name [(column_list)] AS select-statement; 视图的处理算法 #   MERGE   使用MERGE算法，MySQL首先将输入查询与SELECT定义视图的语句组合成单个查询。然后MySQL执行组合查询以返回结果集。 如果SELECT语句包含聚合函数，例如 MIN，MAX，SUM，COUNT，AVG 或DISTINCT，GROUP BY，HAVING，LIMIT，UNION，UNION ALL，子查询，则不允许使用MERGE算法。如果SELECT语句引用无表，则也不允许MERGE算法。如果不允许MERGE算法，MySQL将算法更改为UNDEFINED。请注意，将视图定义中的输入查询和查询组合到一个查询中称为视图分辨率\n  TEMPTABLE   使用TEMPTABLE算法，MySQL首先根据定义视图的SELECT语句创建临时表，然后对临时表执行输入查询。因为MySQL必须创建一个临时表来存储结果集并将数据从基表移动到临时表，所以TEMPTABLE 算法的效率低于MERGE算法。此外，使用TEMPTABLE 算法的视图不可更新。\n  UNDEFINED   在未指定显式算法的情况下创建视图时，这是默认UNDEFINED算法。UNDEFINED算法允许MySQL选择使用 MERGE或TEMPTABLE 算法。MySQL更喜欢MERGE 算法在TEMPTABLE 算法中，因为 MERGE算法效率更高\n create view temp_date_view as select count(age) as count_vlue,max(age) as max_value,min(age) as min_value,avg(age) as avg_value from temp_date where 1=1; -- 如果使用SHOW TABLE命令查看数据库中的所有表，我们还会看到temp_date_view视图显示在列表中 show tables; select * from temp_date_view; -- 要知道哪个对象是视图或表，请使用以下SHOW FULL TABLES命令 SHOW FULL TABLES ; insert into temp_date_view(max_value,min_value,count_vlue) values(100,3,20) ; \u0026gt; 1471 - The target table temp_date_view of the INSERT is not insertable-into \u0026gt; 时间: 0.047s -- 下面会说到可更新视图  基于另一个视图创建视图  -- 第一个视图 create view temp_date_view_source as select id,age,birthday from temp_date ; select * from temp_date_view_source; -- 第二个视图  create view temp_date_view_source_new as select id,age,birthday from temp_date_view_source where 1=1 and age \u0026gt; 50 ; select * from temp_date_view_source_new; 可更新视图 #   在MySQL中，视图不仅可查询，还可以更新。这意味着您可以使用INSERT或 UPDATE语句通过可更新视图插入或更新基表的行。此外，您可以使用DELETE语句通过视图删除基础表的行。\n 要创建可更新视图，定义视图的SELECT语句不得包含以下任何元素 #   聚合函数 ，如MIN，MAX，SUM，AVG和 COUNT。 DISTINCT GROUP BY子句。 HAVING子句。 UNION或UNION ALL子句。 左连接或外连接。 子查询 中的SELECT子句或在引用表WHERE语句出现在FROM子句中。 引用FROM子句中的不可更新视图 仅引用文字值 对基表的任何列的多次引用 使用TEMPTABLE算法创建视图，则无法更新视图 有时可以使用内部联接基于多个表创建可更新视图  CREATE TABLE `tb_office_info` ( `id` int NOT NULL AUTO_INCREMENT, `office_code` varchar(255) DEFAULT NULL, `phone` varchar(255) DEFAULT NULL, `city` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; INSERT INTO `tb_office_info`(`id`, `office_code`, `phone`, `city`) VALUES (1, \u0026#39;1\u0026#39;, \u0026#39;+1 650 219 4782\u0026#39;, \u0026#39;San Francisco \u0026#39;); INSERT INTO `tb_office_info`(`id`, `office_code`, `phone`, `city`) VALUES (2, \u0026#39;2\u0026#39;, \u0026#39;+1 215 837 0825\u0026#39;, \u0026#39;Boston \u0026#39;); INSERT INTO `tb_office_info`(`id`, `office_code`, `phone`, `city`) VALUES (3, \u0026#39;3\u0026#39;, \u0026#39;+1 212 555 3000\u0026#39;, \u0026#39;NYC\u0026#39;); INSERT INTO `tb_office_info`(`id`, `office_code`, `phone`, `city`) VALUES (4, \u0026#39;4\u0026#39;, \u0026#39;+33 14 723 4404\u0026#39;, \u0026#39;Paris\u0026#39;); INSERT INTO `tb_office_info`(`id`, `office_code`, `phone`, `city`) VALUES (5, \u0026#39;5\u0026#39;, \u0026#39;+86 33 224 5000\u0026#39;, \u0026#39;Beijing \u0026#39;); INSERT INTO `tb_office_info`(`id`, `office_code`, `phone`, `city`) VALUES (6, \u0026#39;6\u0026#39;, \u0026#39; +61 2 9264 2451\u0026#39;, \u0026#39;Sydney\u0026#39;); INSERT INTO `tb_office_info`(`id`, `office_code`, `phone`, `city`) VALUES (7, \u0026#39;7\u0026#39;, \u0026#39;+44 20 7877 2041\u0026#39;, \u0026#39;London\u0026#39;); create view tb_office_info_view as select office_code as officeCode,phone,city from tb_office_info ; select * from tb_office_info_view; -- 验证 更新 UPDATE tb_office_info SET phone = \u0026#39;+33 14 723 5555\u0026#39; WHERE office_code = 4; select * from tb_office_info_view; -- 删除一行记录  delete from tb_office_info where office_code = 7; select * from tb_office_info_view; -- 视图记录同样更新了  显示视图定义 #   SHOW CREATE VIEW [database_name].[view_ name];  SHOW CREATE VIEW test3.temp_date_view_source; 修改视图 #   MySQL提供了两个语句，允许您修改现有视图：ALTER VIEW和 CREATE OR REPLACE VIEW  alter view temp_date_view_source_new as select id,age,birthday from temp_date_view_source where 1=1 and age \u0026gt; 30 ; create or replace view temp_date_view_source_new as select id,age,birthday from temp_date_view_source where 1=1 and age \u0026gt; 20; 删除视图 #   DROP VIEW [IF EXISTS] [database_name].[view_name]  -- 先创建一个我们要删除的视图  create view temp_date_view_source_new_x as select id,age,birthday from temp_date_view_source where 1=1 and age \u0026gt; 2; drop view if exists temp_date_view_source_new_x; WITH CHECK OPTION确保视图一致性 #   有时，您创建一个视图以仅显示表的部分数据。但是，简单视图是可更新的，因此可以更新通过视图不可见的数据。此更新使视图不一致。要确保视图的一致性，请WITH CHECK OPTION在创建或修改视图时使用子句\n  WITH CHECK OPTION子句是CREATE VIEW声明的可选部分。WITH CHECK OPTION子句阻止您 更新或插入通过视图不可见的行。换句话说，每当您通过视图更新或插入基表的一行时，MySQL都会确保插入或更新操作符合视图的定义。\n  准备数据  CREATE TABLE `employees` ( `id` int NOT NULL AUTO_INCREMENT, `employeeNumber` varchar(100) DEFAULT NULL COMMENT \u0026#39;员工编号\u0026#39;, `lastName` varchar(255) DEFAULT NULL, `firstName` varchar(255) DEFAULT NULL, `extension` varchar(255) DEFAULT NULL, `email` varchar(255) DEFAULT NULL, `officeCode` varchar(255) DEFAULT NULL, `reportsTo` varchar(255) DEFAULT NULL, `jobTitle` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1002, \u0026#39;Murphy\u0026#39;, \u0026#39;Diane\u0026#39;, \u0026#39;x5800\u0026#39;, \u0026#39;dmurphy@yiibai.com\u0026#39;, \u0026#39;1\u0026#39;, NULL, \u0026#39;President\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1056, \u0026#39;Patterson\u0026#39;, \u0026#39;Mary\u0026#39;, \u0026#39;x4611\u0026#39;, \u0026#39;mpatterso@yiibai.com\u0026#39;, \u0026#39;1\u0026#39;, 1002, \u0026#39;VP Sales\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1076, \u0026#39;Firrelli\u0026#39;, \u0026#39;Jeff\u0026#39;, \u0026#39;x9273\u0026#39;, \u0026#39;jfirrelli@yiibai.com\u0026#39;, \u0026#39;1\u0026#39;, 1002, \u0026#39;VP Marketing\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1088, \u0026#39;Patterson\u0026#39;, \u0026#39;William\u0026#39;, \u0026#39;x4871\u0026#39;, \u0026#39;wpatterson@yiibai.com\u0026#39;, \u0026#39;6\u0026#39;, 1056, \u0026#39;Sales Manager (APAC)\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1102, \u0026#39;Bondur\u0026#39;, \u0026#39;Gerard\u0026#39;, \u0026#39;x5408\u0026#39;, \u0026#39;gbondur@gmail.com\u0026#39;, \u0026#39;4\u0026#39;, 1056, \u0026#39;Sale Manager (EMEA)\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1143, \u0026#39;Bow\u0026#39;, \u0026#39;Anthony\u0026#39;, \u0026#39;x5428\u0026#39;, \u0026#39;abow@gmail.com\u0026#39;, \u0026#39;1\u0026#39;, 1056, \u0026#39;Sales Manager (NA)\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1165, \u0026#39;Jennings\u0026#39;, \u0026#39;Leslie\u0026#39;, \u0026#39;x3291\u0026#39;, \u0026#39;ljennings@yiibai.com\u0026#39;, \u0026#39;1\u0026#39;, 1143, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1166, \u0026#39;Thompson\u0026#39;, \u0026#39;Leslie\u0026#39;, \u0026#39;x4065\u0026#39;, \u0026#39;lthompson@yiibai.com\u0026#39;, \u0026#39;1\u0026#39;, 1143, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1188, \u0026#39;Firrelli\u0026#39;, \u0026#39;Julie\u0026#39;, \u0026#39;x2173\u0026#39;, \u0026#39;jfirrelli@yiibai.com\u0026#39;, \u0026#39;2\u0026#39;, 1143, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1216, \u0026#39;Patterson\u0026#39;, \u0026#39;Steve\u0026#39;, \u0026#39;x4334\u0026#39;, \u0026#39;spatterson@yiibai.com\u0026#39;, \u0026#39;2\u0026#39;, 1143, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1286, \u0026#39;Tseng\u0026#39;, \u0026#39;Foon Yue\u0026#39;, \u0026#39;x2248\u0026#39;, \u0026#39;ftseng@yiibai.com\u0026#39;, \u0026#39;3\u0026#39;, 1143, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1323, \u0026#39;Vanauf\u0026#39;, \u0026#39;George\u0026#39;, \u0026#39;x4102\u0026#39;, \u0026#39;gvanauf@yiibai.com\u0026#39;, \u0026#39;3\u0026#39;, 1143, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1337, \u0026#39;Bondur\u0026#39;, \u0026#39;Loui\u0026#39;, \u0026#39;x6493\u0026#39;, \u0026#39;lbondur@yiibai.com\u0026#39;, \u0026#39;4\u0026#39;, 1102, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1370, \u0026#39;Hernandez\u0026#39;, \u0026#39;Gerard\u0026#39;, \u0026#39;x2028\u0026#39;, \u0026#39;ghernande@gmail.com\u0026#39;, \u0026#39;4\u0026#39;, 1102, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1401, \u0026#39;Castillo\u0026#39;, \u0026#39;Pamela\u0026#39;, \u0026#39;x2759\u0026#39;, \u0026#39;pcastillo@gmail.com\u0026#39;, \u0026#39;4\u0026#39;, 1102, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1501, \u0026#39;Bott\u0026#39;, \u0026#39;Larry\u0026#39;, \u0026#39;x2311\u0026#39;, \u0026#39;lbott@yiibai.com\u0026#39;, \u0026#39;7\u0026#39;, 1102, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1504, \u0026#39;Jones\u0026#39;, \u0026#39;Barry\u0026#39;, \u0026#39;x102\u0026#39;, \u0026#39;bjones@gmail.com\u0026#39;, \u0026#39;7\u0026#39;, 1102, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1611, \u0026#39;Fixter\u0026#39;, \u0026#39;Andy\u0026#39;, \u0026#39;x101\u0026#39;, \u0026#39;afixter@yiibai.com\u0026#39;, \u0026#39;6\u0026#39;, 1088, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1612, \u0026#39;Marsh\u0026#39;, \u0026#39;Peter\u0026#39;, \u0026#39;x102\u0026#39;, \u0026#39;pmarsh@yiibai.com\u0026#39;, \u0026#39;6\u0026#39;, 1088, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1619, \u0026#39;King\u0026#39;, \u0026#39;Tom\u0026#39;, \u0026#39;x103\u0026#39;, \u0026#39;tking@gmail.com\u0026#39;, \u0026#39;6\u0026#39;, 1088, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1621, \u0026#39;Nishi\u0026#39;, \u0026#39;Mami\u0026#39;, \u0026#39;x101\u0026#39;, \u0026#39;mnishi@gmail.com\u0026#39;, \u0026#39;5\u0026#39;, 1056, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1625, \u0026#39;Kato\u0026#39;, \u0026#39;Yoshimi\u0026#39;, \u0026#39;x102\u0026#39;, \u0026#39;ykato@gmail.com\u0026#39;, \u0026#39;5\u0026#39;, 1621, \u0026#39;Sales Rep\u0026#39;); INSERT INTO `employees`(`employeeNumber`, `lastName`, `firstName`, `extension`, `email`, `officeCode`, `reportsTo`, `jobTitle`) VALUES (1702, \u0026#39;Gerard\u0026#39;, \u0026#39;Martin\u0026#39;, \u0026#39;x2312\u0026#39;, \u0026#39;mgerard@gmail.com\u0026#39;, \u0026#39;4\u0026#39;, 1102, \u0026#39;Sales Rep\u0026#39;);  语法  CREATE OR REPLACE VIEW view_name AS select_statement WITH CHECK OPTION;  先创建一个普通视图  create view vps as SELECT employeeNumber, lastname, firstname, jobtitle, extension, email, officeCode, reportsTo FROM employees WHERE jobTitle LIKE \u0026#39;%VP%\u0026#39;; select * from vps; -- result +----------------+-----------+-----------+--------------+-----------+----------------------+------------+-----------+ | employeeNumber | lastname | firstname | jobtitle | extension | email | officeCode | reportsTo | +----------------+-----------+-----------+--------------+-----------+----------------------+------------+-----------+ | 1056 | Patterson | Mary | VP Sales | x4611 | mpatterso@yiibai.com | 1 | 1002 | | 1076 | Firrelli | Jeff | VP Marketing | x9273 | jfirrelli@yiibai.com | 1 | 1002 | +----------------+-----------+-----------+--------------+-----------+----------------------+------------+-----------+ 2 rows in set (0.00 sec) -- 因为它vps 是一个简单的视图因此它是可更新的 -- 然后，我们插入一行到employees通过vps视图 INSERT INTO vps(employeeNumber,firstname,lastname,jobtitle,extension,email,officeCode,reportsTo) values(1703,\u0026#39;Lily\u0026#39;,\u0026#39;Bush\u0026#39;,\u0026#39;IT Manager\u0026#39;,\u0026#39;x9111\u0026#39;,\u0026#39;lilybush@classicmodelcars.com\u0026#39;,1,1002); -- 注意：新创建的员工在vps视图中不可见，因为她的职位是IT Manager，而不是VP -- 这就是问题所在 -- 这可能不是我们想要的，因为我们只通过vps视图公开VP员工，而不是其他员工 -- 要确保视图的一致性，以便用户只能显示或更新通过视图可见的数据，请WITH CHECK OPTION在创建或修改视图时使用  修改视图  create or replace view vps as SELECT employeeNumber, lastname, firstname, jobtitle, extension, email, officeCode, reportsTo FROM employees WHERE jobTitle LIKE \u0026#39;%VP%\u0026#39; with check option ;  通过视图在employees表中插入一行vps  INSERT INTO vps(employeeNumber,firstname,lastname,jobtitle,extension,email,officeCode,reportsTo) VALUES(1704,\u0026#39;John\u0026#39;,\u0026#39;Smith\u0026#39;,\u0026#39;IT Staff\u0026#39;,\u0026#39;x9112\u0026#39;,\u0026#39;johnsmith@classicmodelcars.com\u0026#39;,1,1703); INSERT INTO vps(employeeNumber,firstname,lastname,jobtitle,extension,email,officeCode,reportsTo) VALUES(1704,\u0026#39;John\u0026#39;,\u0026#39;Smith\u0026#39;,\u0026#39;IT Staff\u0026#39;,\u0026#39;x9112\u0026#39;,\u0026#39;johnsmith@classicmodelcars.com\u0026#39;,1,1703) \u0026gt; 1369 - CHECK OPTION failed \u0026#39;test3.vps\u0026#39; \u0026gt; 时间: 0s -- 已经起到了限制作用  通过视图插入一个职位名称SVP Marketing在employees表中的员工，vps看看MySQL是否允许我们这样做  INSERT INTO vps(employeeNumber,firstname,lastname,jobtitle,extension,email,officeCode,reportsTo) VALUES(1704,\u0026#39;John\u0026#39;,\u0026#39;Smith\u0026#39;,\u0026#39;SVP Marketing\u0026#39;,\u0026#39;x9112\u0026#39;,\u0026#39;johnsmith@classicmodelcars.com\u0026#39;,1,1076); \u0026gt; Affected rows: 1 \u0026gt; 时间: 0.15s select * from vps; +----------------+-----------+-----------+---------------+-----------+--------------------------------+------------+-----------+ | employeeNumber | lastname | firstname | jobtitle | extension | email | officeCode | reportsTo | +----------------+-----------+-----------+---------------+-----------+--------------------------------+------------+-----------+ | 1056 | Patterson | Mary | VP Sales | x4611 | mpatterso@yiibai.com | 1 | 1002 | | 1076 | Firrelli | Jeff | VP Marketing | x9273 | jfirrelli@yiibai.com | 1 | 1002 | | 1704 | Smith | John | SVP Marketing | x9112 | johnsmith@classicmodelcars.com | 1 | 1076 | +----------------+-----------+-----------+---------------+-----------+--------------------------------+------------+-----------+ 3 rows in set (0.00 sec) -- 已经插入进去了 "});index.add({'id':207,'href':'/life/docs/databases/mysql/triggers/','title':"mysql触发器",'section':"mysql学习笔记",'content':"SQL触发器简介 #   SQL触发器是存储在数据库目录中的一组SQL语句。只要与表关联的事件发生，例如插入，更新或删除，就会执行或触发SQL触发器\n SQL触发器的优点 #   SQL触发器提供了另一种检查数据完整性的方法。 SQL触发器可以捕获数据库层中业务逻辑中的错误。 SQL触发器提供了另一种运行计划任务的方法。通过使用SQL触发器，您不必等待运行计划任务，因为在对表中的数据进行更改之前或之后会自动调用触发器。 SQL触发器对于审计表中数据的更改非常有用。  SQL触发器的缺点 #   SQL触发器只能提供扩展验证，并且不能替换所有验证。必须在应用程序层中完成一些简单的验证。例如，您可以使用JavaScript在客户端验证用户的输入，或者使用服务器端脚本语言（如JSP，PHP，ASP.NET，Perl）在服务器端验证用户的输入。 从客户端应用程序调用和执行SQL触发器是不可见的，因此很难弄清楚数据库层中发生了什么。 SQL触发器可能会增加数据库服务器的开销  MySQL 触发器的创建 #  MySQL触发语法 #  CREATE TRIGGER trigger_name trigger_time trigger_event ON table_name FOR EACH ROW BEGIN ... END;   触发器名称约定 [trigger time][table name][trigger event]，例如before_employees_update\n  触发激活时间可以是BEFORE或AFTER\n  触发事件可以是INSERT，UPDATE或者DELETE事件导致触发器被调用\n  触发器必须与特定表关联。如果没有表触发器将不存在，因此您必须在ON关键字后指定表名\n  将SQL语句放在BEGIN和END阻止之间\n  例子1\n  -- create table CREATE TABLE employees_audit ( id INT AUTO_INCREMENT PRIMARY KEY, employeeNumber INT NOT NULL, lastname VARCHAR(50) NOT NULL, changedat DATETIME DEFAULT NULL, action VARCHAR(50) DEFAULT NULL ); "});index.add({'id':208,'href':'/life/docs/english_study/','title':"英语学习",'section':"Docs",'content':"收集一些英语学习技巧\n  If at the outset I brave, ending is different\n  如果当初我勇敢，结局是不是不一样。\n  Perseverance can sometimes equal genius in its results\n  毅力在效果上有时能同天才相比。\n  A man is not old until regrets take the place of dreams.\n  当后悔取代了梦想，一个人才算老了。\n  When I thought I couldn’t go on, I forced myself to keep going. My success is based on persistence, not luck.\n  当我以为我无法继续走下去时，我强迫自己要继续前进。我的成功是基于我的坚持，并非运气。\n  The early bird catches the worm\n  早起的鸟儿有虫吃\n  "});index.add({'id':209,'href':'/life/docs/about/','title':"关于程序员",'section':"Docs",'content':"一、编码 #   如果还没想清楚，就用蛮力算法。——Ken Thompson 不要使用反正弦和反余弦函数——你总能用优美的恒等式，或者是计算向量点积来更好地解决问题。—— Jim Conyngham 在存储日期中的年份的时候，请使用四位数字。—— David Martin 避免使用不对称结构。—— Andy Huber 代码写的越急，程序跑得越慢。—— Roy Carlson 你用英语都写不出来的东西就别指望用代码写了。—— Peter Halpern 如果代码和注释不一致，那很可能两者都错了。—— Norm Schryer 如果你发现特殊情况太多，那你肯定是用错方法了。—— Carig Zerouni 先把数据结构搞清楚，程序的其余部分自现。—— David Jones  二、用户界面 #   尽可能让用户界面风格保持一致和可预测。—— 匿名用户 计算机生成的输入通常会让一个原本设计接受手工输入的程序不堪重负。—— Dennis Ritchie 手工填写的表单里有20%都包含坏数据。—— Vic Vyssotsky 80%的表单会要你回答没有必要的问题。—— Mike Garey 不要让用户提供那些系统已经知道的信息。—— Rick Lemons 所有数据集的80%中，有95%的信息量都可以用清晰的图表示。—— William Cleveland  三、调试 #   在我所有的程序错误中，80%是语法错误，剩下20%里，80%是简单的逻辑错误，在剩下4%里，80%是指针错误，只有余下的0.8%才是困难的问题。—— Marc Donner 在系统测试阶段找出并修正错误，要比开发者自己完成这一工作多付出2倍的努力。而当系统已经交付使用之后找出并修正错误，要比系统测试阶段多付出9倍的努力。因此，请坚持让开发者进行单元测试吧。—— Larry Bernstain 不要站着调试程序，那会使得你的耐心减半，你需要的是全神贯注。—— Dave Storer 别在注释里陷得太深——注释很可能会误导你，你要调试的只是代码。—— Dave Storer 测试只能证明程序有错误，而不能证明程序没有错误。—— Edsger Dijkstra 新系统的每一个新用户都可能发现一类新的错误。—— Brian Kernighan 东西没坏，就别乱修。 —— Ronald Reagan 如果我们没能力修好它，我们就会告诉你它根本没坏。—— Walt Weir 修正程序错误的第一步是要重现这个错误。—— Tom Duff  四、性能 #   程序优化第一法则：不要优化。程序优化第二法则：还是不要优化。—— Michael Jackson 对于那些快速算法，我们总是可以拿一些速度差不多但是更容易理解的算法来替代它们。—— Douglas Jones 在一些机器上，间接寻址比基址寻址要慢，所以请把结构体或者记录中最常用的成员放在最前面。—— Mike Morton 在一个非IO密集型程序中，超过一半的运行时间是花在不足4%的代码上的。—— Don Knuth 在优化一个程序之前，请先用性能监视工具找到程序的“热点”。—— Mike Morton 当你为了加速，把一页代码变成几条简单的指令时，请不要忘了增加注释，以使源码的行数保持为一个常量。—— Mike Morton 如果程序员自己模拟实现了一个构造比编译器本身实现的那个构造还要快，那编译器的作者也太失败了。—— Guy Steele 要加速一个IO密集型程序，请首先考虑所有的IO，消除那些不必要的或冗余的IO，并使余下的部分尽可能地块。—— David Martin 最快的IO就是不IO。—— Nils-Peter Nelson 那些最便宜、最快而且可靠性最高的计算机组件压根就不存在。—— Gordon Bell 把一个本来就错了的程序变得更糟糕绝不是你的错。—— Bill McKeeman Lisp程序员知道所有东西的值，却不知道那些东西的计算成本。—— Alan Perlis  五、文档 #   如果一句话反过来就必然不成立，那就根本没必要把这句话放进文档。—— Bob Martin 当你试图解释一条命令、一个语言特性或者是一种硬件的时候，请首先说明它要解决什么问题。 —— David Martin 一个 { 规格说明、设计、过程、测试计划 } 如果不能在一页A4纸上写明白，那么这个东西别人就没法理解。—— Mark Ardis 纸上的工作没结束，整个工作也就还没结束。—— 匿名  六、软件管理 #   系统的结构反映出构建该系统的组织的结构。—— Richard Fairley 别坚持做没用的事情。—— 匿名 前90%的代码占用了90%的预定开发时间，余下的10%代码又花费了90%的预定开发时间。——Tom Cargill 只有不到10%的代码用于完成这个程序表面上的目的，余下的都在处理输入输出、数据验证、数据结构维护等家务活。—— Mary Shaw 正确的判断来源于经验，然而经验来源于错误的判断。—— Fred Brooks 如果有人基本上做出了你想要的东西，你就没必要自己写一个新程序，就算你非写不可，也请尽可能地利用现有的代码。—— Richard Hill 代码能借用就借用。—— Tom Duff 与客户保持良好的关系可以使生产率加倍。—— Larry Bernstain 把一个现有成熟程序转移到一种新语言或者新平台，只需要原来开发的十分之一的时间、人力、成本。—— Douglas Jones 那些用手做就很快了的事情，就不要用计算机去做了。—— Richard Hill 那些能用计算机迅速解决的问题，就别用手做了。—— Tom Duff 我想写的不只是程序，而且是会写程序的程序。—— Dick Sites 计划好抛弃一个原型，这是迟早的事情。—— Fred Brooks 如果开始就打算抛弃一个原型，那恐怕你得抛弃两个。—— Craig Zerouni 原型方法可以将系统开发的工作量减少40%。—— Larry Bernstain 拼命干活无法取代理解。—— H William  "});index.add({'id':210,'href':'/life/docs/car_study/','title':"汽车教学",'section':"Docs",'content':"科目一 科目二 科目三\n"});index.add({'id':211,'href':'/life/docs/compilation_principle/','title':"编译原理",'section':"Docs",'content':"一、 编译程序 #    1、 编译器是一种翻译程序，它用于将源语言（即用某种程序设计语言写成的）程序翻译为目标语言（即用二进制数表示的伪机器代码写成的）程序。后者在windows操作系统平台下，其文件的扩展名通常为.obj。该文件通常还要经过进一步的连接，生成可执行文件（机器代码写成的程序，文件扩展名为.exe）。通常有两种方式进行这种翻译，一种是编译，另一种是解释。后者并不生成可执行文件，只是翻译一条语句、执行一条语句。这两种方式相编译比解释运行的速度要快得多。\n  2、 编译过程的5个阶段：词法分析；语法分析；语义分析与中间代码产生；优化；目标代码生成。\n  3、 在这五个阶段中，词法分析的任务是识别源程序中的单词是否有误，编译程序中实现这种功能的部分一般称为词法分析器。在编译器中，词法分析器通常仅作为语法分析程序的一个子程序以便在它需要单词符号时调用。在这一编译阶段中发现的源程序错误，称为词法错误。\n  4、 语法分析阶段的目的是识别出源程序的语法结构（即语句或句子）是否错误，所以有时又常为句子分析。编译程序中负责这一功能的程序称为语法分析器或语法分析程序。在这一阶段中发现的错误称为语法错误。\n  5、 C语言的（源）程序必须经过编译才能生成目标代码，再经过链接才能运行。PASCAL语言、FORTRAN语言的源程序也要经过这样的过程。通常将C、PASCAL、FORTRAN这样的语言统称为高级语言。而将最终的可执行程序称为机器语言程序。\n  6、 在编译C语言程序的过程中，发现源程序中的一个标识符过长，超过了编译程序允许的范围，这个错误应在词法分析阶段发现，这种错误通常被称作词法错误。\n 词法分析器的任务是以词法规则为依据对输入的源程序进行单词及其属性的识别，识别出一个个单词符号。\n 词法分析的输入是源程序，输出是一个个单词的特殊符号，称为Token（标记或符号）。\n 语法分析器的类型有:自下而上、自上而下。常用的语法分析器有：递归下降分析方法是一种自上而下分析方法, 算符优先分析法属于自下而上分析方法，LR分析法属于自下而上分析方法等等。\n 通常用正规文法或正规式来描述程序设计语言的词法规则，而使用上下文无关文法来描述程序设计语言的语法规则。\n 语法分析阶段中，处理的输入数据是来自词法分析阶段的单词符号。它们是词法分析阶段的终结符。\n  7、 编译程序总框\n  8、 在计算机发展的早期阶段，内存较小的不能一次完成程序的编译。这时通常将编译过程分成若干遍来完成。每一遍完成一部分功能，称为多遍编译。 与采用高级程序设计语言写的词法分析器相比，用汇编语言写的词法分析通常分析速度要快些。\n  二. 词法与语法 #    1、 程序语言主要由语法和语义两个方面来定义。\n  2、 任何语言的程序都可看成是某字符集上的一个长字符串。\n  3、 语言的语法：是指这样的一组规则（即产生式），用它可以生成和产生一个良定的程序。这些规则的一部分称为词法规则，另一部分称为语法规则。\n  4、 词法规则：单词符号的形成规则；语法规则：语法单位（句子）的形成规则。语义规则：定义程序句子的意义。\n  5、 一个程序语言的基本功能是描述数据和对数据的运算。\n  6、 高级语言的分类：强制式语言；应用式语言；基于规则的语言；面向对象的语言。\n  7、 一个语言的字母表为{a,b}，则字符串ab的前缀有a、ε，其中ε不是真前缀。\n  8、 字符串的连接运算一般不满足交换率。\n  9、 文法G是一个四元组，或者说由四个元素构成，即非终结符集合VN、非终结符号集合VT 、开始符号S、产生式集合P，它可以形式化地表示成G =（VN，VT，S，P）。 按照文法的定义，这4个元素中终结符号集合是这个文法所规定的语言的字母表，产生式集合代表文法所规定的语言语法实体的集合。对上下文无关文法，通常我们只需要写出这个文法的产生式集合就可以确定这个文法的其他所有元素。其中，第一条产生式的左部符号为开始符号，而所有产生式的左部符号构成的集合就是该文法的非终结符集合。\n   文法的例子： 设文法G=（VN，VT， S，P），其中P为产生式集合，它的每个元素的形式为产生式。\n  10、如果文法G的一个句子存在两棵不同的最左语法分析树，则这个文法是无二义的。\n  11、如果文法G的一个句子存在两棵不同的最右语法分析树，则这个文法是无二义的。\n  12、如果文法G的一个句子存在两棵不同的语法分析树，则这个文法是无法判断是否是二义的。\n  13、A为非终结符，如果文法存在产生式 ，则称 可以推导出 ；反之，称 可归约为 。\n  14、乔姆斯基（Chomsky）将文法分为四类，即0型文法、1文法、2文法、3文法。 按照乔姆斯基对方法的分类，上下文无关文法是2型文法，2型文法的描述能力最强，3型文法又称为正规文法。\n  15、产生式S→Sa | a产生的语言为L(G) = {an | n ≥ 1}。\n  16、确定有限自动机DFA是非确定有限自动机NFA的特例；对任一非确定有限自动机能找到一个与之等价的确定有限自动机。\n  17、DFA和NFA的主要区别有三点：一、DFA初态唯一，NFA初态不唯一；二、DFA弧标记为Σ上的元素，NFA弧标记为Σ*上的元素；三、DFA的函数为单射，NFA函数不是单射。\n  18、有限自动机中两个状态S1和S2是等价的是指，无论是从S1还是S2出发，停于终态时，所识别的输入字的集合相同。\n  19、自下而上的分析方法，是一个不断归约的过程。\n  20、递归下降分析器：当一个文法满足LL(1)条件时，我们就可以为它构造一个不带回溯的自上而下分析程序。这个分析程序是由一组递归过程组成的，每个过程对应文法的一个非终结符。 这个产生式中含有的左递归是直接左递归。递归下降分析法中，必须要消除所有的左递归。递归下降分析法中的试探分析法之所以要不断用一个产生式的多个候选式进行逐个试探，最根本的原因是这些候选式有公共左因子。\n  21、算符优先分析法是一种自下而上的分析方法，它适合分析各种程序设计语中的表达式，并宜于手工实现。目前最广泛的无回溯的“移进—归约”方法是自下而上分析方法。\n  22、在表驱动预测分析器中，\n  1）读入一个终结符a，若该终结符与栈项的终结符相同，并且不是结束标志$，则此时栈顶符号出栈；\n  2）若此时栈项符号是终结符并且是，并且读入的终结符不是，并且读入的终结符不是，说明源程序有语法错误；\n  3）若此时栈顶符号为，并且读入的终结符也是，并且读入的终结符也是，则分析成功。\n  23、算符优先分析方法不存在使用形如 这样的产生式进行的归约，即只要求终结符的位置与产生式结构一致，从而使得分析速度比LR分析法更快。\n  24、LR(0)的例子：\n  产生式E→ E+T对应的LR（0）项目中，待归约的项目是E→ E+∙T，移进项目是E→ E∙+T，还有两个项目为E→ ∙E+T和E→ E+T∙。 当一个LR(0)项目集中含有两个归约项目时，称这个项目集中含有归约-归约冲突。\n  25、LL(1)文法的产生式中一定没有公共左因子，即LL(1)文法中一定没有左递归。为了避免回溯，在LL(1)文法的预测分析表中，一个表项中至多只有一个产生式。 预测分析方法（即LL(1)方法），由一个栈，一个总控程序和一个预测分析表组成。其中构造出预测分析表是该分析方法的关键。\n  26、LR(0)与SLR(1)两种分析方法相比，SLR(1)的能力更强。\n  27、静态语义检查一般包括以下四个部分，即类型检查、控制流检查、名字匹配检查、一致性检查。C语言编译过程中下述常见的错误都属于检查的范围：\n  a） 将字符型指针的值赋给结构体类型的指针变量：类型检查。 b）switch语句中，有两个case语句中出现了相同的常量：一致性检查。 c）break语句在既不是循环体内、又不是break语句出现的地方出现：控制流检查。 d）goto语句中的标号在程序的函数中没有找到：一致性检查。 e）同一个枚举常量出现在两个枚举类型的定义当中：相关名字检查。\n 28、循环优化中代码外提是指对循环中的有些代码，如果它产生的结果在循环过程中是不变的，就把它提到循环体外来；而强度削弱是指把程序中执行时间较长的运算替换为执行时间较短的运算。 （完）  "});index.add({'id':212,'href':'/life/docs/computer_composition_principle/','title':"计算机组成原理",'section':"Docs",'content':"一、计算机的组成及学习大纲 #  1. 计算机的组成 #  计算机的三大件 ：CPU、内存、主板 #  （1）CPU，中央处理器，计算机最核心的配件，负责所有的计算。\n（2）内存，你编写的程序、运行的游戏、打开的浏览器都要加载到内存中才能运行，程序读取的数据、计算的结果也都在内存中，内存的大小决定了你能加载的东西的多少。\n（3）主板，存放在内存中数据需要被CPU读取，CPU计算完成后，还要把数据写入到内存中，然而CPU不能直接插在内存上，这就需要主板出马了，主板上很多个插槽，CPU和内存都是插在主板上，主板的芯片组和总线解决了CPU和内存之间的通讯问题，芯片组控制数据传输的流转，决定数据从哪里流向哪里，总线是实际数据传输的告诉公里，总线速度决定了数据的传输速度。\n（4）输入/输出设备，其实有了以上三大件之后，计算机就可以跑起来了。我们日常使用的话还需要键盘、鼠标、显示器等输入/输出设备，而很多云服务器通过SSH远程登录就可以访问，就不需要配显示器、鼠标、键盘这些东西，节省成本且方便维护。\n（5）硬盘，有了硬盘数据才能长久的保存下来，大部分还会给自己的机器配上机箱和风扇，解决灰尘和散热问题，不过这些也不是必须的，用纸板和电风扇替代也一样可以用。\n（6）显卡，显卡里有GPU图形处理器，主要负责图形渲染，使用图形界面操作系统的计算机，显卡是必不可少的。现在的主板都带了内置的显卡，如果想玩游戏、做图形渲染，一般需要一张单独的显卡，插在主板上。\n2. 冯·诺依曼体系 #  现代计算机的硬件基础架构都是依赖于冯诺依曼提出的冯诺依曼体系结构，现代计算机的核心架构可以抽象为五个基础组件：运算器、控制器、存储器、输入设备和输出设备。\n具体到现代计算机，运算器和控制器组成了现代计算机的CPU，存储器对应着内存和硬盘，主板控制着CPU、内存、硬盘、输出/输出设备之间的通讯。\n冯诺依曼体系结构也叫做存储程序计算机，即可编程、可存储的计算机。\n任何一台计算机的任何一个部件都可以归到运算器、控制器、存储器、输入设备和输出设备中，而所有的现代计算机也都是基于这个基础架构来设计开发的。\n冯诺依曼体系结构确立了我们现代计算机的硬件基础架构，学习计算机组成原理，就是学习和拆解冯诺依曼体系。\n学习组成原理，就是学习以下内容：\n CPU（运算器+控制器）怎么工作，为什么这么设计； 内存和硬盘的工作原理； CPU是怎么和内存、硬盘、输入设备、输出设备通讯的； 从电路这样的硬件到最终开发给软件的接口是怎么运作的，为什么要这么设计，以及在软件开发层面怎么尽可能的用好它；  3. 计算机组成原理学习大纲 #  计算机组成原理知识地图\n学习大纲： #   计算机的基本组成：冯诺依曼体系结构的五大基本组件：运算器、控制器、存储器、输入设备和输出设备；计算机的两个核心指标：性能和功耗。 计算机的指令和计算：高级语言是怎么跑起来的，怎么通过编译器和汇编器变成机器指令的；操作系统怎么链接、装载、执行程序的；指令的执行是怎么控制的（控制器）。 运算器，数据在计算机中的表示（二进制和编码）；计算机是怎么实现加法、乘法等基本运算功能的。 CPU的设计：我们为什么需要CPU时钟；寄存器和内存怎么组成的；整个计算机的数据通路是如何构造的；CPU的流水线设计；数据和控制冒险；分支预测；CPU的异常和中断机制；指令的并行执行；CPU怎么通过SIMD来支持并行计算。 存储器的原理：CPU高速缓存、内存、SSD硬盘和机械硬盘的工作原理，及它们之间的性能差异；CPU和存储器之间怎么通讯的；什么是IO_WAIT；如何通过DMA提升程序性能；如何保证存储器里的数据不丢失；如何通过RAID、Erasure Code、ECC、HDFS，这些不同的技术来确保数据的完整性和访问性能。  总结：计算机组成原理是整个计算机科学的纲要，这门课程的很多知识点深挖下去都会变成一个核心课程。\n例如：\n 计算是怎么实现的，对应着数字电路课程。 CPU和存储器系统的优化，对应着计算机体系结构课程。 程序通过编译器和汇编器变成机器指令的编译过程，对应着编译原理课程。 操作系统是怎么链接、装载、执行程序的，对应着操作系统课程。  二、下面我们根据课程大纲，大致过一遍组成原理 #  1. 性能 #  衡量计算机的性能，主要有两个指标：响应时间和吞吐率。\n 响应时间，就是执行一个程序花费的时间，花的时间越短，性能就越好。 吞吐率，就是一定时间内，到底能处理多少数据和指令，处理的越多，性能就越好。  我们一般把性能定义为响应时间的倒数，也就是：性能 = 1 / 响应时间\n响应时间也就是CPU执行我们程序的时间，我们对时间这个指标进行拆解，把程序的CPU执行时间变成CPU时钟周期数和时钟周期时间的乘积。\n程序的CPU执行时间 = CPU时钟周期数 x 时钟周期时间\n程序的CPU执行时间 = 指令数 x 每条指令的平均时钟周期数 x 时钟周期时间\n所以优化性能，就要从这三者入手了：\n 指令数，代表执行我们的程序到底需要多少条指令，一般都是编译器去做。 每条指令的平均时钟周期数，就是执行一条指令需要的CPU周期数。 时钟周期时间，也就是计算机主频，摩尔定律就在提高我们计算机的主频，例如：主频为2.8GHz，简单理解就是1秒钟可以执行2.8G条指令。  2. 功耗 #  从上面可以看出，想要提升性能，可以通过减少响应时间的方法来提升，减少响应时间又有三条路可以走：减少指令数、减少周期数、提升主频。\n过去相当长的时间里，工程师们都在目光集中在提升计算机主频，在CPU中增加晶体管密度，提升晶体管“打开”和“关闭”的速度，这两者都会带来耗电和散热的问题。\nCPU的功耗 = 1/2 x 负载电容 x 电压的平方 x 开关频率 x 晶体管数量\n为了平衡性能和功耗，工程师们想尽办法把晶体管的制程从28nm缩小到7nm，让CPU中可以更多晶体管，同时呢又降低电压，这让我们的CPU性能也一直提升。\n但是，这种做法终有极限，所以工程师们又开始通过提升吞吐率来提升性能，而不是响应时间，所以我们现在的CPU慢慢的由单核发展成了2核、4核、8核的CPU，让更多的核心同时工作，通过并行来提升性能。\n总结\n无论是通过提升主频，还是增加更多的CPU核心数量并行处理，都有其瓶颈所在，仅仅通过“堆硬件“的方式，今天已经不能很好的满足我们对于性能的期望了，这就需要我们从其他方面入手了：\n 加速大概率事件 通过流水线提升性能，把CPU指令执行进行合理的拆分、细化。 通过预测提升性能，提前预测下一步做什么，提前进行响应的操作。  3. 计算机指令 #  从软件层面看，CPU就是一个执行各种计算机指令的机器，计算机指令就是指计算机能听懂的语言，我们把它叫做机器语言。\n不同的CPU由于架构不同，能听懂的语言也不同，也拥有不同的计算机指令集。\n也就是说，CPU不同-\u0026gt;指令集不同-\u0026gt;机器语言不同-\u0026gt;汇编语言不同\n那么，我们平常用的高级语言是怎么变成机器语言的呢？\n高级语言，需要编译成汇编语言，然后通过汇编器翻译成机器代码，才能让CPU去执行。\n"});index.add({'id':213,'href':'/life/docs/life_and_life/','title':"生活就是生活",'section':"Docs",'content':" 生活就是生活\n   当你的视野足够高你就能看得更远，但是看得虽远但是未必有能力去到你看得更远的地方\n  一生何求 无非基本衣食无忧而已!这对于普通来说已经是最高奢求了\n  中国当下的尽头最好的出路 无他之路就是公务员和事业单位而已\n  "});index.add({'id':214,'href':'/life/docs/memory/','title':"记忆技巧",'section':"Docs",'content':""});index.add({'id':215,'href':'/life/docs/reduce_fat/','title':"减肥减脂技巧",'section':"Docs",'content':"每天总能量 - 每天消耗能量 = 每天剩余能量 #    每天剩余能量 为负数那么你今天减脂有效果\n  每天剩余能量 如果为正数那么不好意思你不仅没瘦下来反正还胖了\n  每天剩余能量 如果为0则不偏不倚\n  消耗的能量的方式有哪些呢? #   1:减少摄入能量   早上吃好，午饭吃饱，晚饭吃少\n  可以的话晚饭尽量吃一碗饭，再加一个水果,再加上一定的运动\n  2:增加运动量  减肥运动方式 #   8个最好的减肥运动方法\n    快走/步行/走路    \r快走是减肥的最佳方法之一，因为对于初学者新手小白来说，这是最方便又轻松的方法，如果你对健身一点儿都不懂，不会感到不知所措，更不用购买设备。不过，这是一种对减肥影响较小的运动，对关节造成的压力没有跑步大。\r据哈佛健康统计，一个70公斤的人每步行30分钟，可以燃烧167卡路里的热量（6.4公里/小时的速度，即中速稳健的步伐5）。\r一项针对20位肥胖女性的12周研究发现，每周快走步行50-70分钟，每周3次，可以使体内脂肪率减少1.5％，腰围平均减少2.8厘米。\r如果你是新手小白，可以把步行轻松融入您的日常活动中。要想在一天中增加步数，可以在午餐后时间散步，不坐电梯，趴公司楼梯，或带狗散步。具体来说，你的目标是每周步行3至4次，每次30分钟，然后可以随着身体的适应能力逐渐增加，以增加步行的时间或频率。\r总结：对于初学者来说，快走或步行是一项不错的运动，可以在任何地方进行，不需要设备，并且对关节的压力很小。建议在日常活动中增加步行或快走，能不坐车就不坐车，能不坐电梯就不坐电梯，爬楼梯。不过减肥效果与其他训练方式相比，是最差的。\r  慢跑或跑步    慢跑和跑步也是一个不错的训练方式，虽然不是最高效的减肥训练方式，但是，作为健身新手和初学者，甚至很少运动的人，可以帮助你在开始的1-2周内减肥减脂。\r慢跑和跑步尽管看上去很相似，但主要的区别在于：慢跑的速度通常在6.4-9.7公里/小时之间，而跑步的速度一般是快于9.7公里/小时的。\r据哈佛大学健康学院（Harvard Health）统计，如果以8公里/小时的速度慢跑，一个70公斤的人，每30分钟会燃烧约298卡路里的热量，如果以9.7公里/小时的速度，每30分钟会燃烧372卡路里的热量。\r此外研究还发现，慢跑或跑步可以帮助燃烧有害的内脏脂肪，通常称为腹部脂肪。这种类型的脂肪会包裹在你的内部器官周围，并会导致各种慢性疾病（例如心脏病和糖尿病）产生的风险。\r慢跑和跑步可以在任何地方进行，并且很容易融入到您的日常活动中。所以，如果你想开始跑步的话，可以定目标为每周跑3-4次，每次慢跑20–30分钟。当然了，这是最好的状态，但是，大可不必追求完美，每次跑3分钟，每周跑3次，也是可以的，做了总比不做强。培养习惯是关键，而不是在于运动多少，只要每次运动哪怕一分钟，你也是胜利了。长期保持，每天坚持比每次运动量更重要。别忘了，完美是拖延症的元凶。如果你有膝盖不适，膝关节酸痛，也许在户外跑步不是最佳的选择，可以在草地等较软的地面上跑步或慢跑。此外，许多跑步机都具有内置缓冲功能，这会让你的膝关节更容易适应。\r总结：慢跑和跑步是减肥减重的训练方式之一，很容易融入你每天的日常生活中，虽然不是最高效的减肥训练方式，但是也可以帮助燃烧腹部脂肪。\r 3.骑车或动感单车  动感单车或骑车是一种流行的运动方式，可以改善你的健康状况并帮你减肥。尽管传统上在户外骑自行车，但许多体育馆和健身中心都有固定自行车，以及动感单车，可在室内骑自行车。 哈佛大学健康学院（Harvard Health）估计，一个70公斤的人以中等速度（19–22.4 km / h）骑固定自行车，每30分钟燃烧约260卡路里热量。 骑车不仅可以减肥，而且研究发现，与那些不定期骑自行车的人相比，经常骑自行车的人具有更好的整体健康状况，更高的胰岛素敏感性以及更低的心脏病、癌症和死亡风险。 从初学者到专业运动员，骑自行车对各种健康水平的人都非常有用。而且，这是一种非负重，低冲击的运动，因此不会对关节造成太大的压力。但是，当然低冲击也就意味着，骑单车的减肥效果没有下面要提到的负重训练（力量训练）好。 总结：骑自行车对所有健康水平的人都非常有用，可以在户外骑自行车或在室内骑固定动感单车。它与多种健康益处相关，包括提高胰岛素敏感性和降低某些慢性疾病的风险。但是，减肥效果没有负重训练好。   负重训练（力量训练，无氧训练，抗阻训练，举铁）    负重训练是希望减肥的人最好的选择。根据哈佛健康统计，每进行一次30分钟的负重训练或力量训练，一个70公斤的人燃烧大约112卡路里的热量。 此外，负重训练还可以帮助您增强力量并促进肌肉生长，加速燃脂，从而提高你的静息代谢率（RMR），也就是说，增加你的身体在静止时燃烧的卡路里热量。一项为期6个月的研究表明，每周进行3次负重训练，每次只需11分钟，就可使代谢率提高平均7.4％，相当于每天坐着不动就可以多燃烧125卡路里的热量。另一项研究发现，进行24周的负重训练，可以使男性的新陈代谢率提高9％，相当于每天多燃烧140卡路里热量。女性的新陈代谢率可增加近4％，相当于每天即便不运动，也可以多燃烧50卡路里的热量。此外，大量研究还表明，与有氧运动相比，在进行负重训练后数小时，您的身体内仍继续在燃烧卡路里，就算是睡觉，看电视，看手机，躺着不动，身体内部也在告诉燃烧热量中。 总结：负重训练可以在训练时和训练后，通过身体内部加速燃烧卡路里来帮助您减肥减重。此外，负重训练还可以帮助你增加肌肉，从而提高你的静息代谢率，即增加身体在静止时燃烧的卡路里热量。   无氧间歇训练/HIIT/高强度间歇训练    无氧间歇训练，通常称为高强度间歇训练或HIIT，其实这是一个广义术语，是指短暂剧烈的运动与休息交替的训练方式。通常，无氧间歇HIIT训练持续3–30分钟，并且会燃烧大量卡路里热量。 在针对9位经常健身的男性的一项研究发现，做HIIT训练，每分钟燃烧的卡路里比其他类型的锻炼（包括负重训练，骑自行车和在跑步机上跑步）多消耗25–30％。这意味着HIIT可以帮助你燃烧更多的卡路里，同时减少运动时间。 但是，这种训练方式不能持续太长时间，如果真的尽自己最大努力完成，一般10分钟就已经是极限了，如果能做30分钟以上，说明并没有努力做。所以，消耗的总体热量还是没有负重训练高（负重训练的减肥效果是最好的），非常适合想做一些运动，但是实在没时间的人。 用这种方式来减肥减脂，还是比有氧运动要高效。此外，大量研究表明，HIIT在燃烧腹部脂肪方面特别有效，而腹部脂肪与许多慢性疾病有关。最重要的是，HIIT很容易融入您每天的当中去。 你需要做的只是选择一种运动类型，例如俯卧撑，跑步，跳跃或骑自行车或负重训练，以及设定好运动和休息的交替时间，如选择训练30秒，休息30秒等。例如，以最快速度骑单车30秒，然后以慢速骑车30秒，重复重复10分钟。 总结：无氧间歇训练是一种有效的减肥策略，可适用于许多不同类型的训练，包括跑步，跳跃，骑自行车等。在你的日常活动中加入无氧间歇训练，可以帮助你在更少的时间内燃烧更多的卡路里。不过总体减肥效果，还是没有负重训练好。   游泳    游泳是减肥和保持体形的一种很好方式。据哈佛大学健康学院（Harvard Health）估计，一个70公斤的人游泳半小时，燃烧约233卡路里的热量。 您的游泳方式会决定您燃烧多少卡路里。比如，每30分钟，一个70公斤的人在仰泳时，可以燃烧298卡路里，在蛙泳时燃烧372卡路里，在蝶泳时燃烧409卡路里，自由泳时消耗372卡路里。 一项针对24名中年妇女的12周研究发现，每周游泳3次，每次60分钟，可显着减少体内脂肪，提高柔韧性，并减少多种心脏病的危险因素，包括高总胆固醇和血液甘油三酸酯。 游泳的另一个优点是：对身体的冲击力小，这意味着您的关节更轻松。对于受伤或有关节疼痛的人来说，这是一个很好的选择。不过，正是由于对身体的冲击力小，游泳属于有氧运动，减肥减脂效果没有负重训练好。 总结：对于希望减肥的人来说，游泳是一种效率较低的运动。不过，它可以帮助您提高身体灵活性，并减少各种疾病的风险因素。   瑜伽    瑜伽是缓解压力的一种流行方法。虽然瑜伽通常不被认为是一种减肥运动，但它可以燃烧一定量的卡路里（看你做瑜伽的强度），并有许多其他健康益处，可帮助减肥。\r据哈佛大学健康学院（Harvard Health）估计，每练习30分钟瑜伽，一个70公斤的人可燃烧大约149卡路里的热量。一个对60位肥胖女性进行的为期12周的研究发现，与对照组相比，每周参加两次90分钟的瑜伽课程，她们的腰围平均减少了3.8厘米。此外，瑜伽小组被试人的身心压力健康得到了改善。\r除了燃烧卡路里外，研究还表明，瑜伽可以教人正念，帮助理性控制思维，可以帮助你抵抗不健康的食物，控制暴饮暴食，并更好地了解身体的饥饿信号。\r瑜伽课全城皆是，而且您可以在任何地方练习瑜伽，包括在家中舒适的环境，以及线上有很多指导教程和瑜伽app。\r总结：瑜伽是一项低强度的减肥运动，几乎可以在任何地方进行。不仅燃烧卡路里，还教会您正念和自控力，以帮助您抵抗食物的渴望。\r  普拉提    普拉提是一项针对新手和初学者的运动，可以帮助您在一定程度上减轻体重。\r根据美国运动委员会赞助的一项研究发现，一个体重64公斤的人在初学普拉提课上，30分钟可以燃烧108卡路里的热量。不过，进行负重训练等高级训练运动会燃烧168卡路里。\r尽管普拉提可能不会像跑步等有氧运动那样燃烧掉更多卡路里，但许多人发现它很有趣不枯燥，可能坚持起来比跑步会更容易。\r一项针对37名中年女性的为期8周的研究发现，与同期未进行运动的女性对照组相比，每周进行3次普拉提运动，每次运动90分钟，可明显减少腰部、腹部和臀部的围度。\r除了减肥以外，普拉提还可减轻腰痛，并改善您的力量、平衡、柔韧性、耐力和整体健康水平。\r您可以在家做普拉提运动或去专门提供普拉提课程的专业健身房。而且为了进一步增加普拉提的减肥效果，可以将其与健康的饮食习惯或其他形式的训练相结合，例如负重训练，减肥效果会更好。\r总结：普拉提是一种初学者运动，可以帮助您减轻体重，同时改善身体其他方面的力量，以及平衡性、柔韧性和耐力。\r"});index.add({'id':216,'href':'/life/docs/%E7%94%B5%E8%A7%86%E5%89%A7%E6%95%B4%E7%90%86/','title':"电视剧整理",'section':"Docs",'content':"收集电视剧经典对话\n"});index.add({'id':217,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/','title':"自我提升",'section':"Docs",'content':"时间管理、精力管理、情绪管理 #  1、时间管理 #  改变自己从认识自己开始，管理时间也是从认识时间开始。 一开始，最好的方法就是记录时间，把每天花费的时间记录下来。 就像理财一样，先记录钱花在哪里，才知道哪些钱不该花，或者少花。记事本或者手写都行，怎么方便怎么来。\n第一阶段 #  可以这样简单记录，看看大块时间用在哪里。开会（0.5）吃饭（1.0）写作（2.0）刷抖音（3.0）写代码（4.0）你看，明显是刷抖音时间长，这个可以尽量减少或避免。\n第二阶段 #  记录具体时间和具体事件。 6:00 ~ 7:00 晨练 7:00 ~ 8:00 读书写作 8:00 ~ 9:00 去上班 9:00 ~ 11:00 工作 12:00 ~ 14:00 午休 14:00 ~ 16:00 梳理积分商城 16:00 ~ 16:30 休息 16:30 ~ 19:00 综合分析竞品商场 19:30 ~ 整理主要目的，看看哪个时间做了哪些事，具体花费多少时间，后边有大用。\n第三阶段 #  清晨安排三件事很多人不喜欢记录，太麻烦，记来记去也没什么改变。任何工具如果使用起来太复杂，就会有90%的人放弃。 清晨三件事，非常简单，也是我一直在用的。每天早晨起来，就按照重要程度，把当天最需要干完的三件事完成。 我今天最需要做完的三件事： 1.工作报告整理，各个项目组进度把控，协调资源。 2.跟客户谈具体合作事项。 3.公众号文章一篇，知乎问答一篇。工作时间，把前两项搞定，业余时间把最后一项搞定。 如果还剩下时间，我就会做一些长期规划的事，明天、后天，以及未来一个月需要准备做的事。做好以上这些，就能极大提升工作效率吗，不能。 你一定遇到过这种情况，时间很充足，坐在那里，啥也干不进去。比如，一下午过去了，报告一个字没有写，有时间，没状态。遇到这种情况，不是时间出了问题，而是你的精力出了问题。\n2、精力管理 #  有一本书《精力管理》，讲了精力来源的四个方面：体能、思维、情感、意志。我跟进自己的实践和观察，体能和思维对我影响很大。 体能也是精力最基本的来源。我记得上高中那会，早上为了节省饭钱，只吃馒头和方便面。那几天上早自习感觉特别累，总爱打瞌睡。 后来，吃了两个星期实在扛不住了，又去食堂吃饭了。那时候感觉特别饿，没精神，没有想过饮食这么重要。刚刚工作那会也是，早上不吃饭，死磕一上午，中午吃得又多犯困。 整个人一天的工作状态不是特别好，还好那会年轻，用精神力扛着。现在作息规律，早上跑步、读书，吃早饭。上午一般脑子清楚，一般做一些分析类工作。 午餐之后，会溜达一会，消消食，然后午睡。下午脑子不那么灵光，有一些疲倦，会做一些总结和整理工作。 晚上吃完饭，也有一个不错的状态，会做一些有创意的工作。一句话，你一定要在状态最好的时候，做最难最复杂的事。注意自己的精神状态，太疲惫了就休息一会，磨刀不误砍柴工。死磕的状态不能持续，要养成固定的习惯。\n3、情绪管理 #  做到以上两点，已经可以称为高手了。能够利用自己的情绪，高效率完成工作更是高手中的高手。有时间、精力充沛，但还是遇到一些工作，干不下去。 人人有七情六欲，当你发现自己不喜欢一项工作的时候，怎么都干不下去。这时候心里一直抵触，然后开始怀疑自己，是不是不适合做这个；欺骗自己，明天做也没关系。如果这件事对你很重要，就一定要逼自己做下去。 有一个小技巧：给自己1个小时的放空时间，在这个时间不带着情绪做事，不考虑要做的事有没有意义，有没有帮助，能够得到什么结果。把情绪放在做事上，不放在心里，在这一刻你可以把自己暂时当作没有情感的机器。 先不要急着否定我，你可以去试试，如果真的不好用，你可以来找我。我最开始写作的时候，最多能写500字，我看别人的文章动辄几千，心态直接就不好了。坐在椅子上，一直在想1000字太长了，根本写不出来，完不成。 没有把情绪用在内容上，而是用在否定自己上，情绪低落，心态消极。\n"});index.add({'id':218,'href':'/life/docs/think/','title':"思维",'section':"Docs",'content':"批判性思维\n金字塔原理\n失控\n"});index.add({'id':219,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/r2xcf5nxjq/','title':"国内咨询平台",'section':"自我提升",'content':"国内靠谱咨询平台 #  广义平台 #    知乎平台\n  创客匠人 慎重\n  得到 慎重\n  心理 #    壹点灵\n  简单心理\n  糖心理\n  看见心理\n  思睿明 慎重\n  法律 #   华律网 慎重   华律网创建于2004年，国内知名的一站式法律服务平台，提供法律咨询、找律师、法律知识等服务。截至2021年1月，华律网注册普通会员人数已达1亿多，日独立访客680万，日产生咨询10万多，注册律师人数近30万，华律网全线产品每年为超过30亿人次普及法律知识\n  找法网 慎重   找法网创立于2003年，国内知名的法律信息咨询网站，致力于为法律需求者提供免费多样的法律咨询服务。截至目前，找法网的业务已覆盖全国34个省，近370个大中小城市，吸引20多万执业律师、1亿余公众注册，创造了每天超10万次的法律咨询服务\n  中顾法律网 慎重   中顾法律网创办于2005年，是专业的法律服务平台，在法律资讯、咨询及法律爱好者交互等方面保持国内业界领先地位。目前，中顾法律网已有全国95%以上的执业律师加盟，涉及有50多个专长领域，城市分站遍布全国34省、近四百个大中城市\n  法律快车 慎重   法律快车创立于2004年，致力于打造放心的互联网法律服务平台，提供问律师、找律师、看知识等法律服务。法律快车融合了线上和线下法律服务的交易模式，提供全程的法律服务。目前，法律快车已覆盖180多个法律专业领域细分，为分散在全国360多个大中小城市的超23万律师和数千万法律需求者创造近在身边的法律服务机会\n 知识付费产业 #   问答类：百度知道、知识星球、知乎 Live、在行 专栏类：得到、喜马拉雅、豆瓣时间、樊登读书会、吴晓波频道、十点课堂 平台类：腾讯课堂、网易云课堂、荔枝微课、千聊Live、学而思网校、cctalk 第三方工具：小鹅通、美阅教育\n "});index.add({'id':220,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%AE%B0%E5%BF%86/','title':"记忆方法",'section':"自我提升",'content':"记忆方法 #   提高记忆的关键，在于想象和创意 编故事有助于提高记忆力  通过编故事，再加上逻辑或地点（后者更多一些）; 编故事是加强了记忆桩之间的联系 记忆和创造力 #   记忆本身与创造力密不可分 ， 训练记忆力在很大程度上取决于你的创造力  要想记住毫不相关的信息和扑克牌， 首先就要把它们变成图像。 通过这种方式， 那些零散的信息才可能会建立某种联系 联想 #  利用事物间的联系通过联想进行记忆的方法。 联想是由当前感知或思考的事物想起有关的另一事物， 或者由头脑中想起的一件事物，又引起想到另一件事物。 由于客观事物是相互联系的，各种知识也是相互联系的，因而在思维中， 联想是一种基本的思维形式，是记忆的一种方法。 联想，就是当人脑接受某一剌激时，浮现出与该刺激有关的事物形象的心理过程。 一般来说，互相接近的事物、相反的事物、相似的事物之间容易产生联想。 用联想来增强记忆是一种很常用的方法。 记忆的一种主要机能就是在有关经验中建立联系，思维中的联想越活跃，经验的联系就越牢固。 如能经常形成联想和运用联想，就可增强记忆的效果。 联想是有规律可循的，联想的规律有接近律、类似律、对比律、因果律等，有接近联想、类似联想、对比联想、因果联想。   联想不仅快速，而且它还不是一个简单、一维的东西。首先，你在联想中会加入一些情感因素，甚至还没回想起一段经历，就已经产生了某种情绪。\n  一旦学会动用感情和感官，还有逻辑和创造力，来与不同事物间建立联系，你的记忆能力就会大大提高。除此之外，你还会慢慢习惯放松大脑，以最快的速度在不同事物之间建立联系。瞬间联想之所以对提高记忆力如此重要，是因为一个人在瞬间建立的联系往往是最牢靠的\n  如何在两个并无联系的单词之间建立联系\u0026ndash;记忆的关键，就在于将二者结合到一起。\n  如果没有过去的某些参照物作为参考，你就不能在两个概念( 包括单词、物体、活动等)之间建立联系。你的过去为你提供了某种经验，而正是这种经验可以帮助你由一个概念想到另一件概念。你的生活中发生的一切都像是积木中的模块，正是这一个个模块帮助你搭建了自己的人生大厦。要想在两个模块之间尽快建立联系，你需要用尽可能少的连接物来实现过渡。也就是说，要想从一件事情想到另外一件事情，最快的方式就是直接找到二者之间的联系\n   比如说我想记住两个单词：墙壁和小鸡。 每个单词都能激发我丰富的联想，我必须找到某种连接物将两个单词连接起来。 比如说： 墙壁会让我想到一个相册，想找到我小时候放学后经常爬的墙等。 随着联想越来越细致、快速，我突然想到了一个最明显的连接：一首叫\u0026lt;\u0026lt;小胖鸡\u0026gt;\u0026gt;的儿歌。 好极了！小胖鸡坐着墙壁上，它是一个鸡蛋----而鸡蛋又是小鸡下的。 这时我就会展开联想，想象一只小鸡坐在墙下下蛋。 为了让这个联想更加生动，我想起了小时候我在唱歌时的样子， 然后自然而然地想到了自己看着小鸡下蛋时吃吃发笑的情形。 虽然我并不记得发生过这件事，但它却足以激发我的联想。 这个过程听起来可能有些复杂、繁琐，但事实上，这在大脑中只是一瞬间发生的事情。 链条法 #   如何使用链条法记住5个单词 小提琴、武士、箱子、项链、雪球  首先想想你突然听到小提琴发出的悠扬乐声。 然后看到一个武士在演奏小提琴， 你甚至可以清楚地看到他把小提琴放到下巴下面--这武士满副盔甲，很是搞笑。 然后你看到他脚边放了一个箱子，可能颜色很鲜艳，也可能已经很破旧了。 你打开箱子，发现里面有一挂价值连城的钻石项链，钻石反射阳光，分外耀眼。 最后你转过头去，突然一个雪球砸中你的脸颊，你甚至感觉到右脸有些发疼。 记住，你越练习动用五官来加强想象，你的大脑就会越熟悉这种练习，你也就越容易记住自己想象的场景。   要要记住五个单词以及单词之间的顺序，需要在单词之间建立联系\n  使用链条法，关键在于上下文，我们可以把本来毫不关联的信息连接起来，将其放到一个场景中，这样它们就会变得很容易记住了。\n  你想象的东西一定要合理，或者至少应该符合逻辑。它们可以有些出奇，甚至古怪，但从理论上一定是合理或可能的。\n  在使用链条法记忆时，一定要注意你所想象的故事顺序。最简单的办法是按照顺序用这些单词编一个故事，故事本身应当有一定的逻辑性，只有这样，你才能记住单词的顺序。在回忆时忘记任何一个单词，都说明你编的故事不够清晰。如果真是这样，建议换个故事试试。\n  路径记忆法 #    例子\n  第一个记忆桩：前门\n  第二个记忆桩：隔壁邻居家的房子\n  第三个记忆桩：公共汽车站\n  第四个记忆桩：商店\n  第五个记忆桩：停车场\n  在设计了固定的路径，并为每张扑克设定了一个具体的物体代码之后，我要做的就是把扑克放在路径中适当的记忆桩。 比如说翻开的前5张牌是:方块6、黑桃3、梅花5、红桃8、方块4。记忆方式如下: 我想象一架飞机(方块6)停在我家门口; 邻居家门外有段木头(黑桃3)靠在篱笆墙上; 在公共汽车站，我的小狗(梅花5)正在跳上跳下，冲着路过的汽车狂吠; 商店里面，我(红桃8)正在买一份报纸; 停车场里有一捆现金(方块4)。   重要:把要记忆的数据变换后放入路径中适当的记忆桩,相当于把数据嵌入记忆桩中,这也是为什么说联想是记忆中最重要的一点\n  这下我不会再记混顺序了，因为这段路径已经把每件事物都排好了位置。我用20张扑克进行测试，完全成功！连一个错误都没有。于是我决定延长这段路径，从我家大门开始，穿过村子，经过酒吧，穿过板球场，沿着一条可以看到大片绿色草坪的小路\u0026hellip;\u0026hellip;最后我的整个路径包括了52个记忆桩，正好是一幅扑克牌。\n  一条成功的路径必须满足三个条件:\n   1:记忆桩必须多样; 2:记忆桩之间的差异必须明显; 3:我与这些记忆桩必须有明显的互动。    地点就像是记忆中的锚\u0026ndash;它们可以成为我们回忆往事的参照点。我相信，如果没有这些地点，我们的思想，尤其是我们的记忆，就会变成一团乱麻，凌乱无序。\n  提高记忆能力的关键有三个:联想、地点、和想象\n  创建记忆路径库的5个秘诀\n   1:选择你非常熟悉的路径 2:选择对你比较有意义的路径 3:选择比较富于变化的路径 4:用特点路径来记忆特点事物 5:选择视角最佳的路径  想象感官训练(2) #   建议每天练习，直到确信自己可以在两个看似毫不相关的事物间建立生动具体的联系  方案一:\t想象你手里正拿着个足球，它散发出新鲜橘子味， 慢慢把这两个感觉汇集到一起。好了，然后想象足球是果冻做的在 像时钟一样滴答走动，尝起来味道像巧克力。别着急，让这个形象至少在脑海里停留5分钟，尽量让它们鲜活起来。如果感觉大脑开始走神，立刻从头开始重复整个练习。 然全熟悉第一套方案后，再进入下面的练习 方案二: 想象一头身上有粉点的灰色大象，它会像只猫咪一样喵喵叫， 味道像块生姜，皮肤像是一根根刺人的荨麻，浑身散发出一股 新鲜咖啡豆的味道。还是老样子，别着急，让这个形象在脑海里至少停留5分钟，尽量鲜活起来。 记忆\u0026quot;自由玩耍\u0026quot; (3) #   词汇能引发记忆。迅速浏览一下下面的词汇，看看它们能让你想到什么。每个单词只要看一两秒即可，尽量不要去左右自己的想法，只是看着它们能让你想起什么就可以了。然后尽量去感受你所想到的形象、念头、情绪和感觉等\u0026mdash;-这可能只是一瞬间的事，也可能需要花上好几分钟。接着看下一个单词。这项训练的目的只是让你熟练使用自由联想，学会激发你的情绪和感觉。  kitten (猫咪) rainbow (彩虹) toy (玩具) birthday (生日) ice cream (冰淇淋) snow (雪) church (教堂) cushion (靠垫) sand (沙子) toe nail (脚趾甲)  该项练习不仅能帮你回忆事件，还能帮你记住一些想法，以及伴随这些想法的情绪和感受。刚开始不要在意速度，你练习越久，速度就越快。  建立联系 (4) #   看看下面的单词，尽量用它们在你脑中激发出的第一反应在每一对单词之间建立联想。千万不要对这些联想做任何修改\u0026mdash;你只要放松大脑，在二者之间建立联系就可以了。这就是记忆两条不相关的信息，叫做链条法  你的第一段路径(练习N) #    1：围绕你的住所设计一个由12个记忆桩组成的路径\n  2: 在大脑中反复重复这条路径，直到你烂熟于心。如果可能，你甚至可以亲自走一趟\n  3:确定自己很熟悉这条路径之后，你可以用我前面提到的方法记住12件物品(蛋糕、马、报纸、水壶、鞭子、加农炮、香蕉、电话、猫王、天文望远镜、钟、咖啡)。你的想象要尽量鲜活\u0026ndash;记住，你可以动用逻辑、创造性，以及你所有的感官和情绪。\n  4: 接着盖着清单，看看你能按照正确的顺序记住多少。\n  5:顺序倒过来呢?\n  "});index.add({'id':221,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E5%86%A5%E6%83%B3/','title':"冥想",'section':"自我提升",'content':"冥想 #  呼吸冥想法 #    1:坐好，后背挺直，然后闭上眼睛\n  2:关注你自己呼吸时的感觉,吸气，吸气，选择一个感受突出的地方，通常是你的鼻子或者耳朵、腹部然后集中注意力，关注你自己呼吸时的感觉。吸气，吸气，用嘴呼吸（最好关注腹部，因为我们大部分人都是腹部呼吸法）\n  3:一旦你开始这样做了脑子会乱想,你需要关注你到什么时候走神的，那么走神后重新调整后重新开始集中注意力开始冥想。\n  "});index.add({'id':222,'href':'/life/posts/change/2022-10-18/','title':"第n天记录",'section':"Blog",'content':"记录 #  当你和她不对等的时候 这个时候即便苦苦等待得来了相处也是痛苦的 好的感情一定是相互成就的 所以一定要大量的去追求女孩子 那个真心回应你的女孩子才是你值得用心去爱的\n相亲来的女孩子大都不是真心的还是放弃吧只是来了咱也用心对待 如果不用心就随她去吧\n双向奔赴的爱情最值得肯定.\n"});index.add({'id':223,'href':'/life/posts/change/2022-10-12/','title':"第一天记录",'section':"Blog",'content':"记录下目前想法 #  人生没有谁是完美的,每个人都是独特的,当然你站在特殊的角度去强行评价一个人那多半是可以分出高低贵贱的,只是这就有点肤浅了主观在个人你是怎样去看待这个问题的\n你经历越多从表面上看你可能确实比较痛苦但是从反面看你经历这些之后你也就越坚强如果你以后要找灵感那么你的经历就天然成了你的优势之一\n最近我在想我不是正在改变嘛 我可以把这些录下来 然后既可以帮助自己观察自己状态 也可以用来帮助其他人\n"});index.add({'id':224,'href':'/life/docs/%E8%84%9A%E6%9C%AC/packing/','title':"uniapp打包",'section':"脚本",'content':"android本地打包 #  参考1 参考2 参考3\nuniapp创建keystore jks 参考\n 这里是因为创建密匙文件有多种方式  第一步 下载 Android Studio 配置必要的数据 #     配置 android sdk 选用google 可以官网下载也可以使用工具下载    配置 jdk ( java jdk建议)    假如你没有手机或者手机不在打包环境那么你需要配置模拟android平台    第二部(重要) #   我也是在网上找了下，发现网上的有残缺吧\n  1:HBuilderX版本 必须和 sdk一致  uniapp本地打包下载地址\n  2: Android Studio导入HBuilder-Integrate-AS\n  3:删除 HBuilder-Integrate-AS_c\\simpleDemo\\src\\main\\assets\\apps 下的 生成的包\n  4: 生成签名\n  C:\\Windows\\system32\u0026gt;c: C:\\Windows\\system32\u0026gt;cd C:\\Program Files\\Java\\jdk1.8.0_102\\bin C:\\Program Files\\Java\\jdk1.8.0_102\\bin\u0026gt;keytool -genkey -alias test -keyalg RSA -keysize 2048 -validity 36500 -keystore test.keystore 输入密钥库口令: 再次输入新口令: 您的名字与姓氏是什么? [Unknown]: z 您的组织单位名称是什么? [Unknown]: z 您的组织名称是什么? [Unknown]: z 您所在的城市或区域名称是什么? [Unknown]: z 您所在的省/市/自治区名称是什么? [Unknown]: z 该单位的双字母国家/地区代码是什么? [Unknown]: z CN=z, OU=z, O=z, L=z, ST=z, C=z是否正确? [否]: y 输入 \u0026lt;test\u0026gt; 的密钥口令 (如果和密钥库口令相同, 按回车): C:\\Program Files\\Java\\jdk1.8.0_102\\bin\u0026gt;keytool -list -v -keystore test.keystore 输入密钥库口令: 密钥库类型: JKS 密钥库提供方: SUN 您的密钥库包含 1 个条目 别名: test 创建日期: 2021-12-4 条目类型: PrivateKeyEntry 证书链长度: 1 证书[1]: 所有者: CN=z, OU=z, O=z, L=z, ST=z, C=z 发布者: CN=z, OU=z, O=z, L=z, ST=z, C=z 序列号: 1af7ad82 有效期开始日期: Sat Dec 04 12:30:35 CST 2021, 截止日期: Mon Nov 10 12:30:35 CST 2121 证书指纹: MD5: 66:3B:24:19:6D:84:19:1E:A3:FC:A1:55:18:36:12:1F SHA1: E1:E7:F7:EB:13:81:87:E1:31:AF:67:40:B8:9C:6C:71:77:69:7D:84 SHA256: 92:00:0B:D4:7A:40:11:16:80:B9:70:D9:3E:02:C8:0A:8F:CF:B7:1A:04:16:AC:AC:D5:E8:50:31:92:68:33:2D 签名算法名称: SHA256withRSA 版本: 3 扩展: #1: ObjectId: 2.5.29.14 Criticality=false SubjectKeyIdentifier [ KeyIdentifier [ 0000: 7F C3 B2 D4 0B 79 96 A0 54 1C D7 49 FE 1A BE 87 .....y..T..I.... 0010: BB 9B A3 A3 .... ] ] ******************************************* *******************************************   查看key C:\\Program Files\\Java\\jdk1.8.0_202\\bin\u0026gt;keytool -v -list -keystore test.keystore\n  5 将 jdk环境下生成的test.keystore找到并复制到HBuilder-Integrate-AS_c\\simpleDemo\\test.keystore\n  6: 回到刚才的黑窗子，查看sha1的指纹\n  7:生成appKey https://dev.dcloud.net.cn/ 去生成\n  需要 APPID 如__UNI__6A9874D 必须一致 需要 Android 包名 如com.android.simple 必须和Android Studio中项目一致不能乱填 需要 Android 证书签名SHA1 必须一致   8 到HBuilderX中打包 原生app本地打包 得到打包文件后将web包拷贝到HBuilder-Integrate-AS_c\\simpleDemo\\src\\main\\assets\\apps 下\n  9 需要修改的地方\n  dcloud_control.xml 中 \u0026lt;hbuilder\u0026gt; \u0026lt;apps\u0026gt; \u0026lt;app appid=\u0026quot;__UNI__6A9874D\u0026quot; appver=\u0026quot;\u0026quot;/\u0026gt; \u0026lt;/apps\u0026gt; \u0026lt;/hbuilder\u0026gt; AndroidManifest.xml 中 \u0026lt;meta-data android:name=\u0026quot;dcloud_appkey\u0026quot; android:value=\u0026quot;3f4b0a2ece1e41eb2a6e25cbf36e8f8c\u0026quot; /\u0026gt; build.gradle 中 signingConfigs { config { keyAlias 'test' keyPassword '123456' storeFile file('test.keystore') storePassword '123456' v1SigningEnabled true v2SigningEnabled true } }   10完毕 点击打包apk\n  如果是android studio 直接Generate Signed Bundle or APK或Build Bundle APK\n  github地址\n服务端打包 #  ios本地打包 #  "});index.add({'id':225,'href':'/life/posts/2021/oneday/','title':"2021-06-15",'section':"Blog",'content':"  努力\n  英语越来越重要了\n  "});index.add({'id':226,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/dns%E6%B1%A1%E6%9F%93/','title':"DNS 污染",'section':"解决问题",'content':"中国国内访问 GitHub 为什么很慢很卡甚至访问不了？如何加速访问 GitHub 网站？ #  个人总结：强扭的瓜不甜，修改 hosts 也就片刻好光景，要不了多久就变得比没改 hosts 之前更慢。所以还是顺其自然就好，不要白费力气去修改 hosts。 #    摘要\n  网站分发加速网络的域名遭到 DNS 污染，DNS 不能直接找到那个最快的 IP！ 通过修改系统 hosts 文件的办法，绕过国内 DNS 解析，直接访问 GitHub 的 CDN 节点，从而达到加速的目的！\n  如何检验效果\n  操作之前先 ping 一下 github.com，两个请求超时，两个 93ms。\n  操作之后再 ping 一下 github.com，没有丢失，四个 287ms。\n  一、国内访问 GitHub 为什么很慢？ #   GitHub 的 CDN 域名遭到 DNS 污染，导致无法连接使用 GitHub 的加速分发服务器，才使得国内访问速度很慢。  二、如何解决 DNS 污染？ #   通过修改 Hosts 文件，将域名解析直接指向 IP 地址来绕过 DNS 的解析，以此解决污染问题。  三、具体操作步骤 #    1、打开 https://www.ipaddress.com/ 这个全球最好的 IP 地址查询工具网站来查询出域名当前对应的最优 IP。（不要用 ip168.com 这类国内的 IP 探针，其获取的国外域名的 ip 也是被 DNS 污染过的）\n  查询下面 3 个网址对应的 IP 地址\n  github.com : 140.82.113.4\n  assets-cdn.github.com : 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153\n  github.global.ssl.fastly.net : 199.232.69.194\n  2、修改本地电脑系统 hosts 文件\n  Windows 系统中的文件路径： C:\\WINDOWS\\system32\\drivers\\etc\n  Linux 系统中的文件路径 /etc/hosts\n  直接在最后面加入以下代码\n  192.30.253.112 github.com\r140.82.113.4 github.com\r185.199.108.153 assets-cdn.github.com\r199.232.69.194 github.global.ssl.fastly.net\r 说明：在 Windows 系统中，包括 XP、Win7、Win8 、Win10 系统中，hosts 文件的位置都是一样的。如果 etc 文件夹中并没有 hosts 文件，那么可能是该文件隐藏了，可以设置一下，让其显示出来即可。\n   3、 更新dns缓存\n  修改后会直接生效，无需刷新 DNS 缓存，因为 hosts 的优先级大于 DNS 域名解析，添加完 hosts 之后，再访问对应的域名，已经就与 DNS 没关系了。如果未生效，重启操作系统或用命令刷新。\n  Windows 系统：ipconfig /flushdns\n  Linux 系统：systemctl restart nscd\n  Mac 系统：sudo dscacheutil -flushcache或sudo killall -HUP mDNSResponder\n  "});index.add({'id':227,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/githubpages%E7%BB%91%E5%AE%9A%E6%9D%A5%E8%87%AA%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D/','title':"GitHubPages绑定来自阿里云的域名",'section':"解决问题",'content':"  原教程但是由于他使用的github的用户名做的域名映射器,这样不好的地方是有可能你使用自定义的方式建立github仓库名比如 English study,还有一个是他使用的阿里云的域名映射解析这些是老版本的\n  GitHub Pages 绑定来自阿里云的域名==原博客教程\n  我的使用 #  github url ==\u0026gt; https://github.com/noatnu/studyDoc , 买的域名 http://www.zhouchenghua.com/ #   解析第一个设置   创建A记录，请将您的顶点域指向GitHub Pages的IP地址 https 解析ip,上面的192.30.252.153是http解析方式现在官方已经宣布过时了,选择下面任意一个都可以  185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153  解析第二个设置    github 要做的事\n  创建 CNAME文件,写入www.zhouchenghua.com\n   这个是我设置github project 设置截图   ping 地址  C:\\Users\\noatn\u0026gt;ping www.github.com 正在 Ping github.com [13.250.177.223] 具有 32 字节的数据: 请求超时。 请求超时。 请求超时。 请求超时。 13.250.177.223 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 0，丢失 = 4 (100% 丢失)， C:\\Users\\noatn\u0026gt;ping www.github.com.noatnu.studyDoc 正在 Ping www.github.com.noatnu.studyDoc [223.87.179.156] 具有 32 字节的数据: 来自 223.87.179.156 的回复: 字节=32 时间=872ms TTL=54 来自 223.87.179.156 的回复: 字节=32 时间=10ms TTL=54 来自 223.87.179.156 的回复: 字节=32 时间=7ms TTL=54 来自 223.87.179.156 的回复: 字节=32 时间=8ms TTL=54 223.87.179.156 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)， 往返行程的估计时间(以毫秒为单位): 最短 = 7ms，最长 = 872ms，平均 = 224ms   223.87.179.156这是我的静态博客地址 223.87.179.156\n  192.30.252.153 还可以改为223.87.179.156 ,不过不建议改 因为我们自己查出的ip不是固定ip 而 92.30.252.153是Github Pages服务器指定的IP地址，访问该IP地址即表示访问Github Pages\n  现在ipv4已经分配完了,虽然北美，日本，欧洲，韩国，香港等地的企业商 还有ipv4申请但是其实是他们以前申请保留下来的\n  按照我上面的截图设置即可 ,然后把我的github project url 下载下来看一下\n  所以设置完毕会等一段时间,大概至少会超过1个小时,因为这里面牵扯到阿里云的解析是否解析了你的域名映射,当然这不包括你的域名购买时间，注册以及实名认证这些时间,虽然官方说的时间是挺短的,当你做这些才会一声叹息啊\n  "});index.add({'id':228,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/git_andsower/git%E5%A4%84%E7%90%86/','title':"git处理网络和权限问题",'section':"git出现的问题",'content':" Push master to origin/master was rejected by remote  有三种原因 1:push的这个工程是其他人新建的，找她开通master权限后，再次push 2:git 工程错误 git pull git pull origin master git pull origin master --allow-unrelated-histories 3:github 设置原因 勾选了Keep my email addresses private 解决办法2种 第一种 通知账户人员取消勾选 第二种 重新设置你的全局用户E-mail git config --list 查看这个时候一定不对 因此重新设置全局email 重置上次提交的作者信息 git commit --amend --reset-author git config --global user.name \u0026quot;zch\u0026quot; git config --global user.email \u0026quot;sdhshd@163.com\u0026quot; ok 对了你如果使用的不是idea而是git 那么抛出的错误非常明显 如果抛出 git报错--\u0026gt;! [remote rejected] master -\u0026gt; master (push declined due to email privacy restrictions) 那么一定是这个原因  git clone时报RPC failed; curl 18 transfer closed with outstanding read data remaining 错误  原因1：缓存区溢出 git config http.postBuffer 524288000 执行上面命令如果依旧clone失败，考虑可能原因2：网络下载速度缓慢 解决方法：命令行输入 git config --global http.lowSpeedLimit 0 git config --global http.lowSpeedTime 999999 如果依旧clone失败，则首先浅层clone，然后更新远程库到本地 git clone --depth=1 http://gitlab.xxx.cn/yyy/zzz.git git fetch --unshallow  error: RPC failed； curl 28 OpenSSL SSL_read: Connection was reset, errno 10054 fatal: expected  git config --global http.sslVerify \u0026quot;false\u0026quot;   Failed to connect to 127.0.0.1 port 1080: Connection refused\n  这是由于设置了动态代理(最好下面方法都试一遍\u0026hellip;因为可能设置了不只一次o(╥﹏╥)o);\n  git查看\n  查询动态代理 git config --global http.proxy git config --global https.proxy  若是有返回值  取消代理 git config --global --unset http.proxy git config --global --unset httpx.proxy   git配置文件查看 打开c:\\Users\\当前用户里的.gitconfig文件(这个默认是隐藏文件), 将里面关于proxy的行删掉\n  环境变量查看 打开环境变量,查看查看用户变量和系统变量(两个都要看\u0026hellip;.我就是两个都设置了o(╥﹏╥)o),将里面的http_proxy(也可能不是这个名字,但是看值是127.0.0.1:1080这种的就是了,或者有proxy),把这一行删掉就行\n  Failed to connect to github.com port 443: Timed out\n  D:\\IdeaProjects\\motorcycle\u0026gt;git config --global --unset http.proxy D:\\IdeaProjects\\motorcycle\u0026gt;git config --global --unset https.proxy D:\\IdeaProjects\\motorcycle\u0026gt;   remote: HTTP Basic:Access denied fatal:Authentication failed for\n  最终解决方法，控制面板 \u0026gt; 用户账户\n   然后找到 凭据管理器 选择Windows凭据   如图删除掉之前使用者留下的 凭据再次执行pull 就会弹出一个对话框来让你输入该 仓库的用户名和密码了  "});index.add({'id':229,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/idea/idea/','title':"idea 解决working directory 设置到 target",'section':"idea出现的问题",'content':" idea 解决working directory 设置到 target  test ng D:\\IdeaProjects\\java-se-study run config $MODULE_DIR$ "});index.add({'id':230,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/maven/idea%E8%A7%A3%E5%86%B3/','title':"idea 问题解决",'section':"maven出现的问题",'content':" idea导入项目出现Unable to import maven project: See logs for details提示\n 第一种解决办法 #    删除项目根目录下.idea文件夹\n  关闭idea工具，重新打开选择File-\u0026gt;New-\u0026gt;Project from the existing source ,选择刚才的项目根目，下一步：\n  一直点next，最后点击主工程的pom.xml 完成！\n  第二种 #    打开idea 的日志文件如果发现【Error】com.google.inject.CreationException: Unable to create injector\n  那么自定义配置Maven3.6.2报错 或者更高版本maven\n  原因：Maven3.6.2的版本兼容问题。\n  解决方法：重新下载较低版本Maven3.6.1及以下版本可以顺利解决。\n  用maven无论是新建项目还是导入没有下载到本地仓库的jar。出现了Unable to import maven project\n  打开cmd，ping localhost，显示一般故障\n  在左边控制栏，关闭防火墙，再开启防火墙 再次ping localhost，成功\n  对了 假如出现文件权限问题 那么更改maven的本地仓库地址\n  "});index.add({'id':231,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/visual_studio_code/visualstudiocode%E9%97%AE%E9%A2%98/','title':"Visual Studio Code 问题解决方案",'section':"visual_studio_code",'content':"Visual Studio Code 过滤文件 不显示某些文件 #  效果 #   过滤工程中显示的文件 不显示某些类型的文件或文件夹  菜单 #   File/Preferences/ 搜索file exclude 选中workspack页签 添加一个过滤规则 如图:   "});index.add({'id':232,'href':'/life/docs/english_study/word/','title':"单词记忆技巧",'section':"英语学习",'content':" 经验总结  记忆有四个过程:识记、保持、再认、回忆 #  识记:我们用一定的方法，经过努力将单词放进脑子里的这个过程就是在识记 #  保持:这些单词在脑子里会有一个积累，储存和巩固的动态过程。简单来说就是你识记在脑子里的单词是会被遗忘的。 #  再认:再认就是你背过的单词再次出现时能够识别出来的过程。 #  回忆:回忆是你将单词在头脑中独立地再现出来的过程。 #    回忆和再认，本质上都是我们根据需要对自己脑海中的信息进行检索的过程，但是再认要比回忆简单的多。在你写作文时，回想单词怎么写的过程，就是回忆。例如，之前背过的那些高级词汇不管怎么想就是想不起来，整个作文都是because、but、good、so。在你做阅读理解时，回想这个单词是什么意思的过程，就是再认。例如，你那些高级词汇在阅读理解中出现，一下就认出来了。\n  很多时候，我们背单词只达到保持和再认的阶段，并没有真正达到可以回忆出来的程度。更有趣的是，当你背单词处于保持甚至是识记的过程的时候，就有了背过了的错觉。产生这种错觉可能会有以下几方面的原因:\n  ①在你重复性的读背一个单词的时候，会给你一个瞬时性记忆，让你感觉对这个词很熟悉了，你就错以为自己已经会了，但其实并没有记住。\n  ②在记忆的保持过程中，被遗忘了，自己没有发觉。\n  ③对于背单词app的不正确使用，熟悉了app上的单词，到了纸上就不认识了。\n  总得来说，之所以一到做题就忘了单词，就是因为背的单词没有达到可以回忆出来的程度。现在网上背单词的方法太多了，什么自然拼读法、词根词缀法、比较法、联想法等等实在是太多了，希望大家能找到一个适合自己的方法。\n  但是我还是想给大家提供一点建议: #    ①不管用什么方法背单词，一定要边写边读。\n  ②在不同的场合上认识单词，比如说，背单词app，词汇卡，试卷\n  ③经常性地复习，反复的记忆才能让记忆成为永久性记忆，达到回忆出来的程度。\n  ④最重要的一点就是要坚持下去，加油！\n  其它经验总结 #   直接被句子，文章。自然会把意思记得更牢固，我们的老师是一个博士，他就是这么说的  为什么背过的单词在做题时遇到仍然不认识 #  第一，背的不熟，如果真的熟练了你起码会觉得“面熟” 第二，没有真正理解词汇的意思和用法。仅仅背一个词的意义肯定印象不会深，你还应该同时了解这个词的用法，会出现在什么语境中等等。 其实这还是对单词不熟悉。词汇不能仅仅从单词书上背诵，更重要的是放在文章里记忆和理解，这样既能了解单词的用法和词义，还能帮助巩固词汇量。试着改变一下背单词的方法，或许你能记住更多的单词。 只是背单词不行，最好是通过阅读一些自己喜欢的英语短文或者故事来记忆单词，看到多了自然就记住了。 背过后要常巩固，要学会运用，背过了就不再看几天就忘了，常看常新。 "});index.add({'id':233,'href':'/life/docs/english_study/maimemo/','title':"墨墨背单词",'section':"英语学习",'content':" 使用技巧  第一步：选择一本单词书，如下图，它有很多分类，我就拿考研的来举例了。 #  第二步：在第四个角标“设置”里头选择每日学习目标量 #  免费送600词汇量，在签到和分享过程中也会一直赠送的，虽然量不多，至少是送了！ 不够就买起来，这里确实会有一些朋友觉得单词收费略微昂贵，但是你想想如果你是app开发人或者是其中的工作人员之一， 会不会也希望以某一些方式来获益，而且你买了单词其实就是一种知识付费和你买单词书是一样的， 它比单词书好的地方是： 1⃣️能送你单词量，也就是只要你坚持打卡分享你的免费单词量是会越来越多； 2⃣️词书多即选择多，还能随时搜索忘记的单词； 3⃣️根据你的学习来提醒你复习（超级人性化，也不用另外去看表格想我今天该复习哪个单元了，该复习多少词汇量了） 4⃣️动力动力，花钱了还不学，钱太多啊！刚开始建议少一点， 因为这个app是根据艾宾浩斯遗忘曲线来学习和复习的，因此你每次学习完它都会根据你之前的学习情况来给你安排学习任务，也就是说， 比如我图上330个词其中276个是我之前学习过了的单词，而剩下的54个就是我今天需要新学的单词！） 第三部：回到第一个“复习”界面，开始背单词啦！ #  上面会有提示文，你先看这个单词你认不认识，认识你可以自己口述一下它的意思然后点击页面进行核对，点开页面下标： 认识；模糊；不认识。 词义无误选认识（哈哈哈说什么废话）有偏差选模糊（dbq还是废话）不认识就不认识了哦！ 这里一定一定要对自己诚实，认真选择！不会多看几遍就会了！ 每个单词会出现3次，3次也会慢慢有印象的，第三次还不会也没关系明天还会再让你学！✌️ 在背词的过程中可能会出现的情况 1.你非常熟悉的单词那么就在右上角的三个小点点里头点击熟识就ok啦； 2.你学的是英（美）音也是在小点点里切换哈！ 3.词义不够（补充啊，自己上！点击词义那一行最右图标在前面输入adj、v……系统都会自动识别的哈，每个词之间记得用；隔开（中文格式哦）这样编辑完成后回到界面就是和正常的一样啦！（我们真棒 ） 4.例句不够典型，点击例句那一行的长短线段图标就可以看到更多的例句啦！把你不想要的☑️取消换成你喜欢的例句就OK！（只能有3个例子哦） 第四部：背完单词，签到签到签到！ #  一定要peng一下哦（真的很大声哈哈哈）， 然后我会在“统计”的界面看看自己今天和之前的学习情况，做一下对比～然后就是复习啦（我经常是溜之大吉哈哈哈第二天再复习）， 如果你想今天在复习也是完全可以的！点击今天的小图标， 然后会出现“查看详情”字样，点击复习， 再在右上角中选择你喜欢的复习模式就ok啦！ “奇奇怪怪”的提醒 #  1:设置页面下拉到最后的更多设置里可以免费享用7天的例句发音哦！\r2:购买单词一定要点上面的链接能多送一些单词（我快乐了）\r3:然后......没有了！哈哈哈！\r"});index.add({'id':234,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%8E%B7%E5%8F%96%E9%87%91%E9%92%B1/%E5%A6%82%E4%BD%95%E5%9C%A8%E6%B2%B9%E7%AE%A1youtube%E5%BC%80%E9%80%9A%E6%94%B6%E7%9B%8A%E8%B5%9A%E9%92%B1/','title':"如何在油管YouTube开通收益赚钱",'section':"获取金钱",'content':"如何在油管YouTube开通收益赚钱？ #  如果想在YouTube创业赚取美金，建议关注【YouTube运营笔记】，少走弯路，不被忽悠\n本篇主要由3个常见问题详细展开： #   如何在油管上开通获利？ 油管广告收益情况如何？ 油管除了广告还能怎么赚钱？  一、如何在YouTube开通获利？ #  第1步：你得有一个Gmail账号 #   YouTube账号是跟谷歌邮箱账号是关联的。想创建频道然后上传视频的基础条件就是，注册并登陆谷歌账号，目前一些国内手机注册会失败。   注：Gmail能登录就行，手机号码归属和注册地对后期收益不存在影响。\n 第2步：你得有一个YouTube频道 #   一般而言只要你有了谷歌账号，就默认有一个YouTube频道了，但那个频道名称头像是跟谷歌邮箱是挂钩的，建议单独创建频道。此外，一个谷歌账号是创建多个频道的。   注：创建频道前，要想清楚频道的内容定位；频道创建后，还要对频道进行装修。\n 第3步：你得有策略地上传视频 #   这一步非常重要，YouTube运营是一个技术活，不是随随便便发几个视频就有人看，也不是坚持发布就能做起来。有志要做的建议查看本专栏的其它文章，这里不细讲。   注：做YouTube成功的条件是「优质的内容+正确的方法」，缺一不可\n 第4步（重点）：你须达到获利门槛/申请开通 #   想开通获利，必须满足以下条件：   1:选择支持YouTube合作伙伴计划的国家或地区。 2:12 个月内的有效观看时长累计超过4000小时。 3:频道拥有至少1000订阅。 4:拥有可关联的 AdSense 帐号。   其中，最为关键的同时最难的条件是4000小时和1000名订阅；「国家/地区」后台设置支持的国家/地区即可；「AdSense」是在频道达到获利门槛后显示注册入口，看似简单却最容易出错，资料要仔细填写，一旦填错后续非常麻烦。《YouTube运营新手最常踩5大坑，最后1个最坑人！》 除了订阅者数量和观看次数要求外，还有内容要求。获利申请的审核是官方人工审核，如果审核者认为频道或视频不符合条件，也是容易无法通过的，审核时间快则一两天，慢的一个多月也有。《YouTube获利政策：这11类内容没有收益》  二、油管广告收益情况如何？ #   YouTube将部分广告收入（55%）分给相应的Youtuber，就能构成一个良性循环的三赢局面：广告商得到宣传，Youtuber赚钱，油管平台赚钱同时有源源不断的优质内容创作出来。平台把55%的广告收益分给视频创作者，这对自媒体从业者而言，真不算低。    YouTube的千次播放（CPM）的收益差距略大，一般在1-10美元不等。影响视频收益主要因素包括：\n  1:观看地区：发达国家cpm远高于发展中国家，如果你的观众主要来自发达国家收益则更高。\n  2:频道领域：某些领域的内容有更高的CPM，比如数码、经济类就相对高。\n  3:视频时长：超过8分钟的视频，可以无限插入广告，收益更多。\n  4:频道/视频：频道或者某个视频比较优质的，会获得更多优质广告展示。\n  另外，还会受其他重大事件影响，比如2020年受疫情影响，大部分频道的CPM大幅下跌。《新冠疫情对YouTube影响有多大？2020多数频道单价下跌20%以上》\n  三、油管除了广告还能怎么赚钱？ #    在油管做内容，广告收益是基本的收入保障，不过大部分YouTuber不会满足于只要广告收入。\n  油管除了一般广告收益方式，还有其他的变现方式。官方提供的变现方法还有：频道会员、商品搁架、超级留言和超级贴纸、YouTube Premium。这些功能需要较高的条件，同时收益不算太高。但自媒体变现总的而言离不开3大变现方式：广告、带货和打赏。\n    此外，国内常用的一些变现方法，在油管也是通用的，常见的有：\n  亚马逊联盟行销：类似国内的淘宝联盟，你帮商家带货后获取一定的佣金。\n  品牌合作推广：频道内容做得好，流量也够多，总会有商家来邀请你合作，这种方式的收益是比较高的。\n  电商带货：不同于联盟行销，联盟行销是帮别人卖自己拿佣金，而自己开店就可以获得更高的利润，当然也得投入更多的资源。\n  粉丝经济：如果你频道的粉丝粘度比较高，可以考虑做依靠粉丝赞助或者粉丝付费，此外目前兴起的直播打赏也是不错的变现方法。\n    这些是比较常见的变现方法，其实变现方法远不止这些。但是能否变现，能否获得更多的收益，其实核心还是靠内容：内容优质，流量多，那怎么变现都可以。\n  最后还想说，如果想在油管创业，最好把眼光放长远同时专心做好内容。做内容是一方面，油管还有很多旁门左道，赚大钱的自媒体团队往往不走寻常路，在此就不宜公开了。\n  如果想在YouTube创业赚钱，建议关注专栏【YouTube运营笔记】，少走弯路，不被忽悠。\n  YouTube闭坑指南：\n  文兄：90%新人必犯的7个错误\n  李大卫：YouTube收益开启全指南\n  文兄：10个错误导致99%频道走向失败\n  迷死任：YouTuber必了解Youtube审核机制\n  文兄：YouTube运营，新手最常踩5大坑！\n  文兄：油管获利政策：这11类内容无收益\n  文兄：YouTube互粉？别把频道玩坏了！\n  文兄：YouTube搬运赚钱？没那么简单\n  文兄：如何在YouTube开通收益赚钱？\n  YouTube运营攻略：\n  文兄：YouTube新频道如何快速涨粉？\n  李大卫：油管什么样的视频最多人看？\n  迷死任：爆款攻略：详解YouTube算法\n  文兄：Youtuber必备的12个网站（全）\n  李大卫：3个营销工具运营效果事半功倍\n  文兄：最全YouTube视频SEO 优化技巧\n  文兄：油管起标题6技巧，打造百万爆款\n  "});index.add({'id':235,'href':'/life/docs/english_study/plan/','title':"英语学习计划",'section':"英语学习",'content':"  计划\n  首先 利用 赖世雄美语听力进行英标学习\n  接着 利用新概念学习\n  "});index.add({'id':236,'href':'/life/docs/hugo%E5%AD%A6%E4%B9%A0/hugo_server_faile_-to_get_json/','title':"hugo教程 hugo server Failed to get JSON",'section':"hugo教程",'content':" 今天尝试了一下静态博客 hugo , hugo的官网本身也是使用 hugo 制作的网站。安装和运行非常简单。只有两个步骤安装和运行。运行的时候出现了一个小问题，就是由于网络的原因不能启动成功。\n 粗暴的禁用网络连接相关的操作 #   就是两个 短代码 给删除了 instagram, tweet。  find . -name \u0026amp;quot;*.md\u0026amp;quot; | xargs sed -i \u0026amp;#x27;/{{\u0026amp;lt; instagram/cinstagram content\u0026amp;#x27; find . -name \u0026amp;quot;*.md\u0026amp;quot; | xargs sed -i \u0026amp;#x27;/{{\u0026amp;lt; tweet/ctwitter content\u0026amp;#x27; hugo server --bind \u0026amp;#x27;0.0.0.0\u0026amp;#x27;  print code  ERROR 2021/03/06 09:55:20 Failed to get JSON resource \u0026quot;https://api.twitter.com/1/statuses/oembed.json?id=877500564405444608\u0026amp;dnt=false\u0026quot;: Get \u0026quot;https://api.twitter.com/1/statuses/oembed.json?id=877500564405444608\u0026amp;dnt=false\u0026quot;: dial tcp 31.13.91.33:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. If you feel that this should not be logged as an ERROR, you can ignore it by adding this to your site config: ignoreErrors = [\u0026quot;error-remote-getjson\u0026quot;] Built in 21188 ms Error: Error building site: logged 1 error(s) "});index.add({'id':237,'href':'/life/docs/hugo%E5%AD%A6%E4%B9%A0/hugo_tutorials1/','title':"hugo教程1",'section':"hugo教程",'content':"教程1 #  快速开始 #   步骤1：安装Hugo  brew install hugo # or port install hugo  要验证新安装  hugo version  步骤2：建立新网站  hugo new site quickstart # 上面的代码将在名为的文件夹中创建一个新的Hugo网站quickstart。  步骤3：添加主题  # 首先，从GitHub下载主题并将其添加到您站点的themes目录中： cd quickstart git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke  然后，将主题添加到站点配置中：  echo 'theme = \u0026quot;ananke\u0026quot;' \u0026gt;\u0026gt; config.toml  步骤4：添加一些内容  hugo new posts/my-first-post.md  如果需要，请编辑新创建的内容文件，该文件将从以下内容开始：   --- title: \u0026quot;My First Post\u0026quot; date: 2019-03-26T08:47:11+01:00 draft: true ---  步骤5：启动Hugo服务器  ▶ hugo server -D | EN +------------------+----+ Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 3 Processed images | 0 Aliases | 1 Sitemaps | 1 Cleaned | 0 Total in 11 ms Watching for changes in /Users/bep/quickstart/{content,data,layouts,static,themes} Watching for config changes in /Users/bep/quickstart/config.toml Environment: \u0026quot;development\u0026quot; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop  步骤7：建立静态页面  hugo -D ./public/默认情况下，输出将位于目录中（-d/--destination标志进行更改，或publishdir在配置文件中设置） "});index.add({'id':238,'href':'/life/docs/hugo%E5%AD%A6%E4%B9%A0/hugo_tutorials2/','title':"hugo教程2",'section':"hugo教程",'content':"教程2 #   1、\t创建blog  hugo new site myblog_pub cd myblog_pub/ git submodule add https://github.com/chinanf-boy/gohugo-theme-yinwang.git themes/yinwang   2、\t修改配置\n  vi config.toml\n  root@instance-x8rtph4n:/home/go/code/hugo_dir/myblog_pub/public# more ../config.toml baseURL = \u0026quot;http://ypbsyy.github.io/\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;我是yaopeng\u0026quot; theme = \u0026quot;yinwang\u0026quot; #pygmentsCodeFences = true #pygmentsCodefencesGuessSyntax = false #pygmentsStyle = \u0026quot;dracula\u0026quot; #pygmentsOptions = ['linenos'] # 代码高亮/chroma，hugo默认自带 [params] author = \u0026quot;yaopeng\u0026quot; github = \u0026quot;yaopeng\u0026quot; # gitlab = \u0026quot;yobrave\u0026quot; #googleAnalytics = \u0026quot;****\u0026quot; # 谷歌统计gtag highlight = \u0026quot;dracula\u0026quot; # 默认样式 `github` langs = [\u0026quot;go\u0026quot;] # 默认加载 highlight.min.js，但 一些不支持的语言, 你自己添加, # 其实也可以使用hugo自带的语法高亮器设置，不过我有点懒 # single = false # 单页面的Home 按钮去除 # menus = true # 我 想加更多目录 # backgroundColor = \u0026quot;#fbf6ec\u0026quot; 加点黄黄的背景色 #    3、\t创建github\n  4、\t部署到github\n  git submodule init git submodule update hugo --buildDrafts cd public/ git init git remote rm origin git remote add origin https://github.com/ypbsyy/ypbsyy.github.io.git git add -A git commit -m \u0026quot;first commit\u0026quot; git push -u origin master 这里面实际到hugo –buildDrafts 这里就ok 剩余的是把public中的html传入静态网页中  注意文章开头必须有这几个   --- title: \u0026quot;My First Post\u0026quot; date: 2019-03-26T08:47:11+01:00 draft: true ---   baseURL = \u0026ldquo;https://swagcode-io.github.io/demo\u0026quot;\n  这里的url是自己对应的\n  git submodule add https://github.com/chinanf-boy/gohugo-theme-yinwang.git themes/yinwang\n  下载主题\n  参考网址\n  https://www.pianshen.com/article/1216214802/\n  https://zhuanlan.zhihu.com/p/105021100?utm_source=weibo\n  https://zhuanlan.zhihu.com/p/105021100?utm_source=weibo\n  "});index.add({'id':239,'href':'/life/docs/reduce_fat/%E6%97%A0%E6%B0%A7%E8%BF%90%E5%8A%A8/','title':"无氧运动",'section':"减肥减脂技巧",'content':"无氧运动 #   运动强度比较大，运动比较剧烈，开始2分钟就会明显出现喘息，需要短暂休息之后才能继续进行的运动，一般都是无氧运动。常见的无氧运动有：平板支撑、举重、百米冲刺等等。  概念 #  无氧运动的分类是从人体运动时骨骼肌的代谢过程分类衍生而来的，无氧运动的概念也都是根据无氧代谢供能系统为主演变而来，例如无氧运动是指人体肌肉在无氧供能代谢状态下进行的运动。\r但日常中我们所认为的无氧运动是指肌肉在“缺氧”的状态下高速剧烈的运动。无氧运动大部分是负荷强度高、瞬间性强的运动，所以很难持续长时间，而且疲劳消除的时间也慢。\r无氧运动是相对有氧运动而言的。在运动过程中，身体的新陈代谢是加速的，加速的代谢需要消耗更多的能量。\r人体的能量是通过身体内的糖、蛋白质和脂肪分解代谢得来的。在运动量不大时，比如慢跑、跳舞等情况下，机体能量的供应主要来源于糖的有氧代谢。\r以糖的有氧代谢为主要供应能量的运动就是我们说的有氧运动。\r当我们从事的运动非常剧烈，或者是急速爆发，例如举重、百米冲刺、摔跤等，此时机体在瞬间需要大量的能量，而在正常情况下，有氧代谢是不能满足身体此时的需求的，于是糖就进行无氧代谢，以迅速产生大量能量。\r这种状态下的运动就是无氧运动。\r功效 #   研究发现，通过无氧运动可以提高机体的肌肉力量、爆发力、增加肌肉体积，提高运动速度  常见的无氧运动项目 #   短跑、举重、投掷、跳高、跳远、拔河、俯卧撑、潜水、肌力训练（长时间的肌肉收缩）等  "});index.add({'id':240,'href':'/life/docs/reduce_fat/%E6%9C%89%E6%B0%A7%E8%BF%90%E5%8A%A8/','title':"有氧运动",'section':"减肥减脂技巧",'content':"有氧运动 #    运动强度比较低，但是能够长时间坚持的运动，一般都是有氧运动。比如我们最常见的快走、慢跑、骑行、游泳等等\n  有氧运动，在运动的过程中会消耗体内的碳水化合物和脂肪；而无氧运动只消耗碳水化合物，这也是我们很多人说有氧运动更减肥的原因。\n  排行榜 #  NO1、游泳 #   运动优点：游泳需克服水的阻力而非重力，肌肉和关节不易受损，能有效保护膝关节;冷水环境下游泳热量消耗大，属于减肥效果显著的运动；当配合节食时，效果更加显著。 适宜人群：膝关节受损；体重严重超标；减肥；增强体质的族群。 运动周期：每周3～4次，每次30～60分钟。 热量消耗：约650千卡/小时  NO2、慢跑 #   运动优点：提高睡眠质量，通过跑步，大脑的供血、供氧量可以提升20%，这样夜晚的睡眠质量也会跟着提高；“通风”作用，在跑步的过程中，肺部的容量平均从5.8L上升到6.2L，同时，血液中氧气的携带量也会大大增加；提高心脏功能，长期慢跑可使安静心率减慢、血管壁的弹性增加；解压，慢跑可以缓解紧张和焦虑，有益健康。 适宜人群：减肥，需要缓解压力，缓解亚健康，以及预防心血管疾病的族群。 运动周期：每周3～4次，每次40～60分钟。 热量消耗：约650千卡/小时  NO3、自行车 #   运动优点：延缓大脑老化，提高神经系统的敏感度；提高心肺功能，锻炼下肢肌力和增强全身耐力。骑自行车对内脏器官的耐力锻炼效果与游泳及跑步相同。自行车还可以瘦身，是周期性的有氧运动，热量消耗较多。对颈椎病、腰间盘突出等有很好的锻炼和康复效果。 适宜人群：体重严重超标，颈椎病和腰间盘突出的族群。 运动周期：每周3～4次，每次40～60分钟。 热量消耗：约420千卡/小时  健身观点 #  1.适度锻炼。 #   大运动量的健身运动有可能会慢慢损伤你的身体，比如，每周跑步超过15英里就有些过量了。建议每周锻炼4至5次，每次30分钟。库珀认为，只要适量运动，就可以有效降低患心血管病和癌症的可能性。  2.疾走健身。 #   库珀认为疾走（每英里12分钟）是一项不错的健身方式，它的效果不比慢跑（每英里9分钟）差，而且还免除了跑步对膝关节的损伤。  3.见缝插针。 #   不一定非要在体育馆里锻炼30分钟，零散时间完全可以利用起来。每天遛狗10分钟，洗车10分钟，做家务10分钟，一样有效果。  4.交替锻炼。 #   比如今天骑自行车，明天慢跑；或者跑步时速度时快时慢，增强对心脏的锻炼。  5.不以体重论健康。 #   锻炼通常能降低体重，但体重并不能说明什么。勤于健身的胖子比坐着不动的瘦子要健康得多。不要为体重超过标准而忧心忡忡。  6.多管齐下。 #   健身是一个系统工程，体育锻炼对身心健康非常必要，但并不是万能。平时还要注意饮食、戒烟去毒（品）、控制饮酒，精神不要过于紧张。  常见方法 #   见的有氧运动项目有：步行、快走、慢跑、竞走、滑冰、长距离游泳、骑自行车、打太极拳、跳健身舞、跳绳/做韵律操、球类运动如篮球、足球等等。有氧运动特点是强度低、有节奏、不中断和持续时间长。同举重、赛跑、跳高、跳远、投掷等具有爆发性的非有氧运动相比较，有氧运动是一种恒常运动，是一种恒常持续30分钟以上还有余力的运动。  准备 #   1、吃一些富含氨基酸的食物。在脂肪燃烧的同时，肌肉也会紧收而变得酸痛，而在运动前享用些类似海鲜饭团或是麻婆豆腐这样富含氨基酸的食物，就能较好地缓解肌肉的酸痛和僵硬。 2、运动前喝一杯热饮。可以有效地促进新陈代谢，使身体提前预热，在最短的运动时间里发挥出最好的效果。 3、在运动之后应该进行放松运动。 4、运动前或后建议做好准备工作，来保证有氧运动，避免缺氧带来的不适感觉。  好处 #  有氧运动的目的在于增强心肺耐力。在运动时，由于肌肉收缩而需要大量能量和氧气，氧气的需求量增加，心脏的收缩次数、每次压送出的血液量、呼吸次数、肺部的收张程度均增加。所以当运动持续，肌肉长时间收缩，心肺就必须努力地供应氧气分给肌肉，以及运走肌肉中的废物。而这持续性的需求，可提高心肺的耐力。当心肺耐力增加了，身体就可从事更长时间或更高强度的运动，而且较不易疲劳。\r汽油的燃烧离不开氧气，所以我们也可以把发动机的工作称为有氧运动。同样，人类在运动中也要燃烧燃料，人类的“燃料”是糖类、蛋白质和脂肪。人类的这些“燃料”都储存在人体的细胞中，当你运动时，就会消耗这些“燃料”以获得动力。\r与发动机燃烧汽油一样，人类在燃烧“燃料”（即氧化）的时候也需要氧气助燃。人们在运动时大口大口地呼吸，使空气中的氧气通过肺泡进入到血液循环系统之中，然后随着动脉血流向全身的组织细胞中，这是一个漫长的过程。\r低强度、长时间的运动，基本上都是有氧运动，比如，走步、慢跑、长距离慢速游泳、骑自行车、跳舞等。有氧运动能够有效地锻炼心、肺等器官，能改善心血管和肺的功能。人在利用氧气的过程中，有一个相当大的时间差，这个时间差就决定了剧烈的、短时间的运动成为了无氧运动。而当你运动的时间足够长时，氧气已经溶入到细胞中，身体内的葡萄糖得到了充分的“燃烧”，从而转化为新的能量，这样的运动就是有氧运动。\r有氧运动需要大量呼吸空气，对心、肺是很好的锻炼，可以增强肺活量和心脏功能。\r长期坚持有氧运动能增加体内血红蛋白的数量，提高机体抵抗力，抗衰老，增强大脑皮层的工作效率和心肺功能，增加脂肪消耗，防止动脉硬化，降低心脑血管疾病的发病率。减肥者如果在合理安排食物的同时，结合有氧运动，不仅减肥能成功，并且减肥后的体重也会得到巩固。有氧运动对于脑力劳动者也是非常有益的。另外，有氧运动还具备恢复体能的功效。\rⅡ型糖尿病患者、肥胖症患者以及脂肪肝患者，一定要做有氧运动，患有心律不齐、心脑动脉血管硬化的人，以及年龄大的人，也都应该做有氧运动。如果是为了强壮肌肉、健美体形，预防椎间盘突出症、颈椎病以及骨质疏松、骨质软化的人，应当做无氧运动。\r如果心率达到150～160次/分钟，此时血液对心肌供氧已不充分，便为半有氧运动。\r如果心率达到160次/分钟以上，便为无氧运动了，即血液中的氧气对心肌已是供不应求了。\r新陈代谢需要氧气的参与，有氧运动由于氧气充足，可使体内营养物质代谢彻底，即达到最终代谢——营养物质分解为二氧化碳和水。二氧化碳通过呼吸排出体外，水则“进一出四”：从口中进入，通过呼吸、汗液、小便、大便四条途径排出。\r有氧运动能够达到瘦身减肥的效果，晚饭后进行半小时的散步，就能很好地将晚饭中的脂肪进而蛋白质进行调节消耗\r"});index.add({'id':241,'href':'/life/docs/reduce_fat/%E8%85%B0%E9%83%A8%E5%87%8F%E8%82%A5/','title':"腰部减肥",'section':"减肥减脂技巧",'content':"腰部减肥 #  脂肪在身体堆积部位的不同，将人群分为三大类 #  第一类：脂肪全身分布型 #    这类人群的脂肪较为均匀的分布在全身，也就是说他们脂肪的堆积没有在身体的某一个部位特别明显，但是其实他体内的脂肪其实是很多的，只是因为脂肪的平均分布没有显现出来明显的形体问题而已；\n  你说他们不需要减脂吗？肯定是要的。\n  第二类：脂肪腿部臀部分布型 #   这类人群大多是女生，因为生理需求，女性的脂肪细胞在腿部臀部位置分布较密集，所以身体多余的脂肪会优先堆积在脂肪细胞多的部位，形成脂肪团；  第三类：腰腹部脂肪分布型 #    这类人群的脂肪主要分布在腰腹部和脂肪，就就是我们常说的“啤酒肚”。\n  其实脂肪堆积部位的不同很大程度上是由遗传基因决定的，加上男女生理需求的不同，所以不同人的体型会因为脂肪优先堆积部位的不同而不同。\n  有氧锻炼是减肥的基础 #  你的目标是需要消耗掉腹部额外的脂肪。\r即使你进行大量的腹部肌肉锻炼，如果你的腹部有一层脂肪，覆盖住腹肌，你是仍然看不到腹肌的。\r因此，你需要更多的有氧锻炼来增加热量消耗，从而促进脂肪燃烧。\r有氧运动是指在特定的时间维持一定心率的长时间耐力性锻炼，例如跑步、健身走、骑自行车、游泳、划船一类的运动。\r针对减肥的有氧运动每周要进行5次，每次至少1小时。\r间歇训练减脂效果好：间歇训练由若干短时间的高强度激烈活动组成，其间穿插休息或者低强度活动。\r研究认为同等强度下，间歇训练比较长时间锻炼能更有效的消耗脂肪。\r研究发现，一组志愿者进行自行车间歇训练，每天只进行20分钟，但强度较高，四个月以后，他们比以较慢速度骑行40分钟的志愿者平均多消耗了4磅脂肪。\r晚餐少吃是必须的 #  晚餐吃得过多是最容易在体内储存脂肪的，一方面是因为夜间以及晚上睡觉的关系，\r你的基础代谢降低，另一方面，如果晚餐吃的是高热量食物，\r或者油脂摄入过多，又或是宵夜又吃了冰淇淋等食物，\r基本上你在睡觉之前身体是不能消耗完它们的，这些多于的热量当然会变成脂肪存储起来。\r事实上许多人在睡觉前吃甜点或淀粉类食物，而不是吃蔬菜或者奶制品。\r试着在晚餐前多吃一点午餐，这样会减少晚餐前的饥饿感，\r或者在晚餐开始前一小时，来点健康加餐，新鲜水果和蔬菜是非常棒的选择，\r一小撮的坚果也会有同样的效果，它们可以增加饱腹感，从而避免你晚上正餐时吃得过多。\r在晚餐之前喝一大杯水，让你感觉胃有点充实，会适当减少正餐的摄入量。\r增肌（腹部肌肉）(针对腹部) #  动作1：仰卧起坐 #  仰卧起坐近几年备受争议，有人甚至说“练不出腹肌？因为你的仰卧起坐是体育老师教的”，\r这种说法不仅让体育老师躺枪，其实也是从一个极端走向另一个极端，言过其实。\r正确的仰卧起坐（手不拽头，不弓背，起的高度不要太高）仍然是有效的腹肌练习。\r仰卧于垫子上，屈膝，双脚平放于垫子上，双手交叉放于胸前或者耳朵处，注意手不拉头。\r找一个人压着你的脚，或者双脚放于重物下面。\r向上起时，你的下背部与肩胛骨同时离开垫面，保持背部伸直（不要弓背），起至身体约与地面成45度，然后慢慢下落。重复。\r这个动作对于你来说可能相当容易，你可以不断进阶难度。\r找一个倾斜的长椅或者负重进行锻炼。\r在负重的锻炼时候把重量放至于胸部，并不断增加负重。\r动作2：卷腹 #  仰卧垫子上，双臂置于胸部或者双手放于耳朵处（同样不要放于头后），\r膝盖弯曲。躯干慢慢起，要完全靠腹部肌肉发力，大约躯干与地面成30度就可以了。\r这个动作的关键之处就是整个背部没有完全离地，\r因为完全离地会引起背部肌肉的紧张和腰椎压力增加，增加动作幅度不会让6块腹肌得到更快的发展。\r卷腹的最重要部分是起始时腹肌收缩，肩膀离开垫面，向上时呼气，向下时吸气，此时肩膀是离开地面的。\r在卷腹的最高处保持2秒，此时更加用力地收缩腹肌（专业人士称之为顶峰收缩）。\r然后吸气，躯干缓慢有控制的下落，直到肩胛骨微微接触地面，但不要让腹肌完全放松。\r动作3：仰卧举腿 #  仰卧在垫面上，双腿伸直，双手放于身体两侧，双腿向上（不要屈膝）直到与躯干接近90度夹角，\r然后腿缓慢下落，重复做时不要让腿接触地面，始终保持肌肉张力。\r也有人说仰卧举腿动作不是一个最佳的锻炼腹肌的训练动作，\r要锻炼下腹肌，重要的是将臀部抬起，而不是完成腿的举放动作，\r并且对于有腰痛的练习者来说，这个动作有可能会加剧腰痛。\r所以，因人而异选择动作很重要。\r动作4：仰卧两头起 #  仰卧于平面上，双手放于身体两侧，维持平衡。膝盖和躯干同时抬起，在动作的做高处。\r双腿自然弯曲，让双手靠近脚踝处，然后身体慢慢下落。\r这个动作相对比较难，但是当你熟练之后，可以作为常用锻炼动作。\r还原时要慢，不要利用重力下落。\r让双手和脚缓慢回到地面。当你熟练时可以在双脚之间夹一重物，比如一个实心球或者一个小哑铃。\r动作5：动态平板支撑 #  俯卧于地面，用肘、前臂和脚尖撑地。\r尽可能收腹向上缓慢移动臀部，此时身体像一座山脉，臀部在最高峰。然后臀部缓慢下落，恢复至开始姿势。\r注意，下落时臀部不要松弛。这个动作，可以更有效地训练腹部深层肌肉。\r动作6：平板支撑 #  俯卧于地面，用肘、前臂和脚尖撑地，身体看起来成一条直线，这就是众所周知的平板支撑，可以锻炼到身体核心肌肉（包括腹部肌肉）。\r尽量以标准动作长时间保持这个姿势。\r初学者至少保持45秒，有一定经验的可以保持静止状态超过2分钟，时间过长其实是没有必要的，\r如果你能够撑上2分钟，那么你就应该增加动作难度（抬起一侧脚或者一侧上肢），而不是一味延长静力训练的时间。\r动作7：自行车卷腹 #  你可能认为腹内外斜肌（6块腹肌旁边的肌肉）在运动中不是重要的肌肉，但是它在运动中始终发挥作用。腹\r内外斜肌在腹部的两侧。有许多的锻炼方法可以锻炼到腹内外斜肌，\r包括躯干旋转，在做仰卧起坐时加旋转，也可以做同侧屈，也可以双手抱着实心球做旋转以及在健身房用旋转器械做训练等等。\r注意，许多初学者的腹内外斜肌相对于腹直肌是比较弱的，所以不要忽视腹内外斜肌的训练。\r做自行车卷腹，腿在空中交替做屈伸，同时躯干在卷腹同时加上旋转动作，也就是左边的膝盖朝向右边的肩膀，右边的膝盖朝向左边的肩膀。\r动作8：利用瑞士球进行卷腹练习 #  可以使用一个瑞士球进行很多卷腹训练。在球上进行不稳定状态下锻炼，会提高身体的平衡能力，\r同时也会动员更多腹肌参与，这会让训练显得更有乐趣。\r动作9：腹肌轮锻炼 #  双手握住腹肌轮手柄，膝盖着地。伸长手臂并缓慢推着腹肌轮远离身体。\r尽可能的下落，但是身体不能触及地面。你往前伸得越远，对于腹肌的刺激效果也就越好。\r如果想要增加动作难度，你可以选择站立位进行训练。\r动作10：引体向上（双手反握） #  引体向上看上去和腹肌没有关系，但是在做引体向上时，你会惊讶地发现腹部周围的许多肌肉都在工作。\r如果力量不够，你可以选择一个矮一点的单杠，让双脚可以着地，用脚蹬地协助进行引体向上动作。\r引体向上是一个复合型动作，他会极大增强身体素质，俯卧撑也属于这类动作，有创意的综合性动作，是你的好朋友。\r动作11：俯卧撑 #  有许多类型的俯卧撑，比如标准俯卧撑、跪姿俯卧撑、对墙俯卧撑、钻石俯卧撑、夹肘俯卧撑，量力而行，筛选一个适合你的类型。\r你可以在网上搜索这些动作进行锻炼。\r动作12：下蹲练习也可以锻炼到核心肌群 #  大众所理解的腹肌全名是“腹直肌”，一般认为腹直肌的作用就是使躯干弯曲，所以我们做了大量卷腹动作来训练腹直肌。\r其实“直肌”在拉丁文的意思是拉紧、适当的、直上的。你所不了解的是：腹直肌的主要功能并非让躯干屈，而是与背部肌肉协调工作，维持身体正确的姿势与稳定。\r一些锻炼动作能够让腹直肌在内的所有核心肌肉来传动与支撑脊柱。\r例如深蹲、硬拉，所以多练这些动作也可以间接锻炼腹肌。\r链接处\n"});index.add({'id':242,'href':'/life/docs/%E7%94%B5%E8%A7%86%E5%89%A7%E6%95%B4%E7%90%86/%E9%81%A5%E8%BF%9C%E7%9A%84%E6%95%91%E4%B8%96%E4%B8%BB/','title':"遥远的救世主",'section':"电视剧整理",'content':"遥远的救世主\n 强势文化自己干，弱势文化是救世主文化，依附于人。\n  神就是道，道就是规律。规律如来，容不得你思议，按规律办事的人就是神\n  政治文化搭台 》 民间文化搭架子 》 草根文化填内容  艺术 #    生存艺术\n  文化艺术\n  政治艺术\n   如果照顾父母，是以接受遗产为前提的话，那没遗产的父母就该扔墙头上了？讲责任本身就已经错了，说孝顺再加个美德就更错了。那应该是血缘关系的本来，本该如此。（第3集）    如果我孝顺的口碑是以我父亲的痛苦和尊严为条件的话，那这样的口碑我情愿不要。（第3集）    如果说养儿，就是为了防老，就别说母爱有多伟大了。您养来养去还是为了自己，那是交易。（第3集）    养儿防老，那父母就是你天然的债权人，而且这种感情比山高比海深，你永远想的就是还债报恩。所以这种文化就让每个人都直不起腰来。你看这个民族就是老弯着腰。而老人越是觉得养儿防老，就越容易觉得吃亏，心里就越苦。（第3集）    对传统文化的成见，已渗到骨子里去的人，自然会做出让常人看来离经叛道之事。（第3集）    从心理学的角度分析，越是头脑简单的人越是需要点缀和填充，而头脑复杂的人则对简洁有着特殊的心理需求。（第3集）    他的每个毛孔里，都渗透着对世俗文化居高临下的包容。（第5集）    是女人就有贪、嗔、痴。没有贪、嗔、痴的女人是天国的女人。（第5集）    这个年代，执着于出人头地并不难，难的是不执着于出人头地。（第5集）    透视社会依次有三个层面：技术、制度和文化。小到一个人，大到一个国家一个民族，任何一种命运归根到底都是那种文化属性的产物。支配人的价值取舍行为的那个东西就是文化属性。强势文化造就强者，弱势文化造就弱者，这是规律，不以人的意志为转移。（第7集）    强势文化就是遵循事物规律的文化，弱势文化就是依赖强者的道德期望破格获取的文化，也是期望救主的文化。（第7集）    精神拯救的暴利与毒品麻醉的暴利完全等值，而且不必像贩毒那样耍花招，没有心理成本和法律风险。    文明，对于不能以人字来界定的人无能为力.（第7集）    《圣经》的理由是：因信得救了，上天堂；因不信有罪了，下地狱。用这种哄孩子、吓孩子的方法让人去信，虽有利于基督教的实践，却也恰恰迎合了人的怕死的一面、贪婪的一面。这样的因果关系已经不给人以自觉、自醒的机会，人连追求高尚的机会都没有，又何以高尚呢？（第8集）\u0026quot;    如果神计划管理着人类历史的发展，那么饥饿、灾难、罪恶也该是神计划之中的事，所以人就有理由怀疑神是要拯救人还是要折腾人。如果神也是左手施舍的时候不让右手知道，那么全能的主就不需要这个永远的计划了，只需要以他的全能改变人性的罪性，注入人性的善性，人类就得以拯救了。但神没有这样做，神不想做无名救主，神需要报恩。（第8集）    《圣经》的教义如果不能经受逻辑学的检验，可能在实践上就会存在障碍。如果经受了逻辑学的检验，那表明神的思维即是人的思维，就会否定神性。换一种说法，神性如果附加上人性的期望值，神性就打了折扣。然而神性如果失去了人性的期望值，那么人还需要神吗？（第8集）    不因上天堂与下地狱的因果关系而具有的极高人生境界，就是窄门。（我本人比较喜欢的一句话）（第8集）    你实在，除了钱，看什么都没价值。    这就是圆融世故，不显山不露水，各得其所。可品性这东西，今天缺个角、明天裂道缝，也就离塌陷不远了。（第9集）    感情这事不能证明，证明本身就是对感情的一种亵渎。    咱们翻开历史看看，你从哪一行哪一页能找到救世主救世的记录？没有，从来就没有，从来都是救人的被救了，被救的救了人。如果一定要讲救世主的话，那么符合和代表客观规律的文化就是救世主。这个，就是你们的救世主。如果你根本就没打算自己站起来，老天爷来了都没用。（第10集）    所谓真经，就是能够达到寂空涅槃的究竟法门，可悟不可修。修为成佛，在求。悟为明性，在知。修行以行制性，悟道以性施行，觉者由心生律，修者以律制心。不落恶果者有信无证，住因住果、住念住心，如是生灭。不昧因果者无住而住，无欲无不欲，无戒无不戒，如是涅槃（第11集）    佛乃觉性，非人，人人都有觉性不等于觉性就是人。人相可坏，觉性无生无灭，即觉即显，即障即尘蔽，无障不显，了障涅槃。觉行圆满之佛乃佛教人相之佛，圆满即止，即非无量。若佛有量，即非阿弥陀佛。佛法无量即觉行无量，无圆无不圆，无满无不满，亦无是名究竟圆满。    佛教以次第而分，从精深处说是得道天成的道法，道法如来不可思议，即非文化。从浅义处说是导人向善的教义，善恶本有人相、我相、众生相，即是文化。从众生处说是以贪制贪、以幻制幻的善巧，虽不灭败坏下流，却无碍抚慰灵魂的慈悲。（第11集）    传统观念的死结就在一个\u0026rsquo;靠\u0026rsquo;字上，在家靠父母，出门靠朋友，靠上帝、靠菩萨、靠皇恩……总之靠什么都行，就是别靠自己，所以就只能在精神上跪着。（第11集）    传统文化毕竟是以皇恩浩荡为先决条件的文化，讲的都是皆空、无为、中庸的理，以抑制个性而求生求解。（第11集）    佛法究竟真理真相的辩证思维，如是不可思议。但是，佛教包括了佛法，而佛法有别于佛教。佛教以佛法证一，进而证究竟，最终是为给心找个不苦的理由，成佛，无量寿，极乐。佛教以假度真的方便法门住福相、住寿相、住果相，是以无执无我为名相的太极我执，致使佛教 具有了迷信、宿命、贪执的弱势文化特征，已然障蔽佛法。晚辈以为，如果佛教能依佛法破除自身迷障，不住不拘个人解脱，以佛法的如是不可思议究竟生产力与文明的真理真相，则佛法的佛教即出离宗教的佛教，成为觉悟众生的大乘法度。（第11集）    传统文化是皇天在上的文化，是等救世主、等着施恩的文化。如果一个民族的文化从骨子里就是弱势文化属性，怎么可能去承载强势文化的政治、经济？衡量一种文化属性不是看它积淀的时间长短，而是看它与客观规律的距离远近。五千年的文化是光辉、是灿烂，这个没有问题。但是，传统和习俗得过过客观规律的筛子。（第11集）    人家男人凭什么要养活女人？就是因为女人能让男人那个。我看过那种片子，男的使劲，女的叫唤，女人跟男人讨点吃穿还真不容易。女人为什么害怕第三者插足？就是因为她的那东西无效了，人家的那东西有效了，那东西得有效才能当吃当喝。…………你那还是嫁吃饭的观念，你认为男人靠不住，也不想为孤独去冒生存风险，吃饭毕竟比上床重要。当女人不需要通过支付性去换取生活资料的时候，当男人不需要支付生活资料而征服女人的时候，那时候你就愿意上床了。（第12集）    天是什么？天是神，是上帝，是创造万物者，是全能全知者，是遍在不可见者……一句话，天是道，是事物规律和自然法则。参禅悟道至天人合一的那种境界，就是天国。道法自然，不具美丑善恶的属性，有美丑善恶分别的是人，不是天。天国之女是觉悟到天国境界的女人，是没有人的贪嗔痴的女人。天国之恋，是唯有觉悟到天国境界的人才可能演绎出的爱情。（第13集）    不管是文化艺术还是生存艺术，有道无术，术尚可求也。有术无道，止于术。（第18集）    只要不是我觉到、悟到的，你给不了我，给了我也拿不住，叶晓明他们就是例子。只有我自己觉到、悟到的，我才有可能做到，我能做到的才是我的。（第18集）    原来能做到实事求是就是神话！原来能说老实话、能办老实事的人就是神！因此可见，让人做到实事求是有多难，让人做到说老实话、办老实事有多难，而做到的人却成了说鬼话、办鬼事，倒行逆施。这个世界怎么了？（第19集）    这世界要不是黑白颠倒，那还叫众生吗？那该叫天国了。（第19集）    当人一旦从危险里跳出来，他就不再去关注这个事物的危险了，他的目光就会全部落在这个事物的利益上，这就是人。（第20集）    她当然可以打电话向丁元英请教，但必须得是经过她思考而不得其解的时候。她觉得，她能争取到一个可以通过请教和询问帮助她判断事物的朋友就已经很幸运了，而越是这样，她就越需要让朋友对她有信心。（第20集）    \u0026ldquo;小姐，我能请您喝杯咖啡吗？\u0026ldquo;\u0026ldquo;喝杯咖啡倒也没什么，然后呢？\u0026ldquo;\u0026ldquo;然后就闲聊聊。\u0026ldquo;\u0026ldquo;然后就上床了，不然您大可以秀色可餐。您看，一杯咖啡承载着这么伟大的使命，您还是留着有的放矢吧。\u0026quot;（第20集）    她静静地坐了3个小时，3个小时之后她得出了一个判断：格律诗的生产成本对伯爵公司可能有潜在威胁，伯爵公司此举只是虚晃一枪而已，意图不在于收购，而在于接近、了解。她觉得伯爵公司给她上了一课，题目叫：居安思危。（第20集）    当生则生，当死则死，来去自如。丫头，不简单哪。（第22集）    您根本不了解小丹，而您凭借的也仅仅是血缘的权利。（第23集）41. 元英是明白人，应该知道你早晚要去找他说道说道。我要通知他，无非是让他有个应对，这对你对他都不尊重，还是让这事保持它本来的面目比较好。（第23集）    生老病死，有谁因为怕就躲过去了？（第24集）    你不缺杀我的心，缺一个杀了我还不影响你自我评价的理由。如果我说料到了，你就用开枪证明我判断的错；如果我说没料到，你就用开枪证明我撒谎的错。（第24集）    杀富富不去，救贫贫不离。救主的文化唯救主可说，救主不是人，是道，得救不是破了戒的狼吞虎咽，是觉悟。（第24集）    法律是社会道德的底线，是解决最基本、最表面的问题，不解决文化的根本问题，文化的问题只能由文化的觉悟解决。一个民族的文化属性就是这个民族的主，主宰着这个民族的文明、荣辱、兴衰。一个民族最强调道德的时候，正是这个民族道德最沦丧的时候。（第24集）    法律治标，文化治本。法律对于滋生法律的文化土壤无能为力，对于越过法律潜入文化土壤地带从事更大损害、更大掠夺的行为无能为力，法律是维持社会秩序的最后一道防线，是最软弱、最无奈的强大。法律的神圣是缘于道德文明的崩溃，关注弱势，激励强者构筑更高的道德平台和获得更大的综合效应，需要相应的社会文化。（第24集）    我们观想一个由人民政府制定了一个允许人民富起来的政策，如果这个允许人民致富的政策是这个政府对人民的恩赐，那么所有因为这个政策挣了钱的纳税人无疑应该对这个政府感恩戴德。如果这个允许人民致富的政策是这个政府本该如此作为的天职，那么所有因为这个政策 挣了钱的纳税人就无须对这个政府感恩戴德，而是满意。如果用纳税人的钱帮助弱势群体，纳税人的荣誉、价值怎么体现？弱势群体应该对谁表示感谢？这个恩德应该记在谁的账上？纳税人是应该感恩戴德，还是应该享有荣誉？纳税人有没有可能在解决了自身的生存之后再去追求更高的生命价值？（第24集）    构筑强者的道德平台是一个复杂的社会工程，道德平台太低，势必挤压弱势群体的生存空间，而过高的道德平台又必然存在两个问题： 首先是很少有人能攀援上去，没有可操作性。其次是过多的帮助不利于社会进步，弱势群体得到的输血越多，则自身的造血功能就越差，就越接近死亡。道德平台理想的高度，是优胜劣汰的法则与人人平等的道德两者之间的平衡。 主流的文化，是优胜劣汰的文化，是不给落后观念生存空间的文化。然而，如果不关爱弱势，道德还有价值吗？等级是客观存在，如果我们连等级的存在都不敢承认，社会又怎么可能去建立一种更高级的道德文化？如果没有个体的文化价值的量变，又怎么可能会产生民族的文化价值的质变？（第24集）    计划经济的弊端在于社会为弱势文化提供了生存、繁衍的温床，解决这个问题主要依靠政治理想的教育。市场经济的弊端在于产生贫富两极分化以及由此产生的社会矛盾，解决这个问题主要依靠社会利益调节机制。计划经济制度，政治是人的最高价值，获取社会财富和社会地 位的惟一通道是首先得到权力。市场经济制度，经济是人的最高价值，获取社会财富和社会地位的通道多种多样。获取平等的社会值，就必须付出惰性的代价；获取活力的社会值，就必须付出等级的代价。这是由人的自然属性决定的，这就是天道，就是客观规律，而社会利益调节机制的制定则有赖于强势群体的道德价值指标和对社会稳定的天然需要。    "});index.add({'id':243,'href':'/life/posts/uml/','title':"统一建模语言",'section':"Blog",'content':" 统一建模语言(Unified Modeling Language，UML)是一种为面向对象系统的产品进行说明、可视化和编制文档的一种标准语言，是非专利的第三代建模和规约语言。UML是面向对象设计的建模工具，独立于任何具体程序设计语言。\n UML作为一种统一的软件建模语言具有广泛的建模能力。UML是在消化、吸收、提炼至今存在的所有软件建模语言的基础上提出的，集百家之所长，它是软件建模语言的集大成者。UML还突破了软件的限制，广泛吸收了其他领域的建模方法，并根据建模的一般原理，结合了软件的特点，因此具有坚实的理论基础和广泛性。UML不仅可以用于软件建模，还可以用于其他领域的建模工作。 [1] #  UML立足于对事物的实体、性质、关系、结构、状态和动态变化过程的全程描述和反映。UML可以从不同角度描述人们所观察到的软件视图，也可以描述在不同开发阶段中的软件的形态。UML可以建立需求模型、逻辑模型、设计模型和实现模型等，但UML在建立领域模型方面存在不足，需要进行补充。 [1] #  作为一种建模语言，UML有严格的语法和语义规范。UML建立在元模型理论基础上，包括4层元模型结构，分别是基元模型、元模型、模型和用户对象。4层结构层层抽象，下一层是上一层的实例。UML中的所有概念和要素均有严格的语义规范。 [1] #  UML采用一组图形符号来描述软件模型，这些图形符号具有简单、直观和规范的特点，开发人员学习和掌握起来比较简单。所描述的软件模型，可以直观地理解和阅读，由于具有规范性，所以能够保证模型的准确、一致。 #  "});index.add({'id':244,'href':'/life/posts/project-management/','title':"项目管理",'section':"Blog",'content':"项目管理（Project Management,PM/Management by Projects,MBP） #  项目管理概述 #  项目管理是项目的管理者，在有限的资源约束下，运用系统的观点、方法和理论，对项目涉及的全部工作进行有效地管理。即从项目的投资决策开始到项目结束的全过程进行计划、组织、指挥、协调、控制和评价，以实现项目的目标。 #  按照传统的做法，当企业设定了一个项目后，参与这个项目的至少会有好几个部门，包括财务部门、市场部门、行政部门等等，而不同部门在运作项目过程中不可避免地会产生摩擦，须进行协调，而这些无疑会增加项目的成本，影响项目实施的效率。 #  而项目管理的做法则不同。不同职能部门的成员因为某一个项目而组成团队，项目经理则是项目团队的领导者，他们所肩负的责任就是领导他的团队准时、优质地完成全部工作，在不超出预算的情况下实现项目目标。项目的管理者不仅仅是项目执行者，他参与项目的需求确定、项目选择、计划直至收尾的全过程，并在时间、成本、质量、风险、合同、采购、人力资源等各个方面对项目进行全方位的管理，因此项目管理可以帮助企业处理需要跨领域解决的复杂问题，并实现更高的运营效率。 #  项目管理的应用从80年代仅限于建筑、国防、航天等行业迅速发展到今天的计算机、电子通讯、金融业甚至政府机关等众多领域。 #  人们通常认为，项目管理是第二次世界大战的产物（如：曼哈顿计划）。在1950年至1980年期间，应用项目管理的主要是国防建设部门和建筑公司。传统的观点认为，项目管理者的工作就是单纯地完成既定的任务。 #  从本世纪八十年代开始，项目管理的应用扩展到其他工业领域（行业），如制药行业、电信部门、软件开发业等。项目管理者也不再被认为仅仅是项目的执行者，要求他们能胜任其它各个领域的更为广泛的工作，同时具有一定的经营技巧。美国项目管理学会（PMI）已提出了关于一个有效的专业项目管理者必须具备的几个方面的基本能力： #   项目范围管理 项目时间管理 项目费用管理 项目质量管理 项目人力资源管理 项目沟通管理 项目风险管理 项目采购管理 项目综合管理  "});index.add({'id':245,'href':'/life/docs/javadir/groovy/groovy%E5%8F%98%E9%87%8F/','title':"Groovy变量",'section':"groovy 学习与使用 ",'content':"Groovy 变量 #   Groovy中的变量可以通过两种方式定义 - 使用数据类型的本地语法，或者使用def关键字。对于变量定义，必须明确提供类型名称或在替换中使用“def”。这是Groovy解析器需要的。\n   byte - 这用于表示字节值。例如2。\n  short - 用于表示一个短数。例如10。\n  int - 这用于表示整数。 例如1234。\n  long - 这用于表示一个长数。例如10000090。\n  float - 用于表示32位浮点数。例如12.34。\n  double - 这用于表示64位浮点数。例如12.3456565。\n  char - 这定义了单个字符文字。例如\u0026rsquo;a'。\n  Boolean - 这表示一个布尔值，可以是true或false。\n  String - 这是以字符串形式表示的文本。 例如“Hello World”。\n  Groovy还允许其他类型的变量，如数组，结构和类\n  变量声明 #   title: \u0026quot; groovy变量 \u0026quot; date: 2021-04-15 draft: false weight: 3 #    变量声明告诉编译器为变量创建存储的位置和大小。\n  下面是一个变量声明的例子 -\n  // x is defined as a variable String x = \u0026quot;Hello\u0026quot;;\r// The value of the variable is printed to the console println(x);\r 当我们运行上面的程序，我们会得到以下结果   Hello  变量命名 #   变量的名称可以由字母，数字和下划线字符组成。 它必须以字母或下划线开头。 大写和小写字母是不同的，因为Groovy，就像Java是一种区分大小写的编程语言。  // Defining a variable in lowercase int x = 5;\r// Defining a variable in uppercase int X = 6; // Defining a variable with the underscore in it's name def _Name = \u0026quot;Joe\u0026quot;; println(x); println(X); println(_Name); 5\r6\rJoe\r你好,世界 !\r 除此之外 在groovy中 定义变量也是可以不加 def 或者 基本类型   a = 125;\n"});index.add({'id':246,'href':'/life/posts/change/secret/','title':"Secret",'section':"Blog",'content':"还是继续学习英语吧 就使用新概念英语 继续加强每天的朗读和沟通技巧 有时间就尝试记忆宫殿 另外抽空把python和算法学习了\n回家路上把 几个重点 看了 回家花半小时把博客写了 然后 以后还是提神自己的厨艺吧 哈哈 自己给自己弄好吃的\n记住和自己和解吧 你和昨天相比有进步就是好样的\n「少吃多餐」单词学习法。所谓「少吃多餐」单词学习法，就是单位时间内少量学习新词，但是却高频重复新词的方法，关键词是：一次少量，循环多次。如今，很多单词学习app都遵循了这种学习规律，同学们可以结合背单词app去积累单词。\n在学习单词时，警惕一个误区——「豆腐渣工程」：贪多求全的背诵大词、难词，但是却因为不常使用和复习逐渐忘记，造成「胸中自诩词汇万千，实则溃于蚁穴」的词汇量假象\n"});})();