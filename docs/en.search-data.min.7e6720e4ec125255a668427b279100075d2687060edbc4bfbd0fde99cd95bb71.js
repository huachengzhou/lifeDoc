'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/life/docs/%E8%84%9A%E6%9C%AC/javascript/es6/','title':"ECMAScript 6",'section':"javascript ",'content':" ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。  Module 的语法 #  概述 #  历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的require、Python 的import，甚至就连 CSS 都有@import，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。\n在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。\nES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。\n// CommonJS模块\rlet { stat, exists, readFile } = require('fs');\r// 等同于\rlet _fs = require('fs');\rlet stat = _fs.stat;\rlet exists = _fs.exists;\rlet readfile = _fs.readfile;\r上面代码的实质是整体加载fs模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取3个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。\nES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。\n// ES6模块\rimport { stat, exists, readFile } from 'fs';\r 严格模式  ES6 的模块自动采用严格模式，不管你有没有在模块头部加上\u0026quot;use strict\u0026quot;;。\n export 命令  模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。\n一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。下面是一个 JS 文件，里面使用export命令输出变量。\n// profile.js\rexport var firstName = 'Michael';\rexport var lastName = 'Jackson';\rexport var year = 1958;\r上面代码是profile.js文件，保存了用户信息。ES6 将其视为一个模块，里面用export命令对外部输出了三个变量。\nexport的写法，除了像上面这样，还有另外一种。\n/ profile.js\rvar firstName = 'Michael';\rvar lastName = 'Jackson';\rvar year = 1958;\rexport {firstName, lastName, year}; //优秀导出写法\r上面代码在export命令后面，使用大括号指定所要输出的一组变量。它与前一种写法（直接放置在var语句前）是等价的，但是应该优先考虑使用这种写法。因为这样就可以在脚本尾部，一眼看清楚输出了哪些变量。\nexport命令除了输出变量，还可以输出函数或类（class）。\nexport function multiply(x, y) {\rreturn x * y;\r};\r上面代码对外输出一个函数multiply。\n通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名。\nfunction v1() { ... }\rfunction v2() { ... }\rexport {\rv1 as streamV1,\rv2 as streamV2,\rv2 as streamLatestVersion\r};\r需要特别注意的是，export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。\n// 报错\rexport 1;\r// 报错\rvar m = 1;\rexport m;\r上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出1，第二种写法通过变量m，还是直接输出1。1只是一个值，不是接口。正确的写法是下面这样。\n// 写法一\rexport var m = 1;\r// 写法二\rvar m = 1;\rexport {m};\r// 写法三\rvar n = 1;\rexport {n as m};\r上面三种写法都是正确的，规定了对外的接口m。其他脚本可以通过这个接口，取到值1。它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。\n同样的，function和class的输出，也必须遵守这样的写法。\n// 报错\rfunction f() {}\rexport f;\r// 正确\rexport function f() {};\r// 正确\rfunction f() {}\rexport {f};\r上面代码输出变量foo，值为bar，500毫秒之后变成baz。\n这一点与 CommonJS 规范完全不同。CommonJS 模块输出的是值的缓存，不存在动态更新，详见下文《ES6模块加载的实质》一节。\n最后，export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下一节的import命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了ES6模块的设计初衷。\n  总结 export 导出的是接口 ,并且必须是模块顶层 不能是块级作用域\n  import 命令\n  使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。\n// main.js\rimport {firstName, lastName, year} from './profile';\r//使用\rfunction setName(element) {\relement.textContent = firstName + ' ' + lastName;\r}\r如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。\nimport { lastName as surname } from './profile';\nimport后面的from指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js路径可以省略。如果只是模块名，不带有路径，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。\nimport {myMethod} from 'util';\n上面代码中，util是模块文件名，由于不带有路径，必须通过配置，告诉引擎怎么取到这个模块。\n注意，import命令具有提升效果，会提升到整个模块的头部，首先执行。\n如果多次重复执行同一句import语句，那么只会执行一次，而不会执行多次。\nimport 'lodash';\rimport 'lodash';\rimport { foo } from 'my_module';\rimport { bar } from 'my_module';\r// 等同于\rimport { foo, bar } from 'my_module';\r整体加载一个js中所有模块\nimport * as circle from './circle';\rconsole.log('圆面积：' + circle.area(4));\rconsole.log('圆周长：' + circle.circumference(14));\r需要注意的是 circle.method 调用导入模块\r export default 命令   export default命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此export default命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应export default命令\n // modules.js\rfunction add(x, y) {\rreturn x * y;\r}\rexport {add as default};\r// 等同于\r// export default add;\r// app.js\rimport { default as foo } from 'modules';\r// 等同于\r// import foo from 'modules';\r//上面import foo from 'modules'; 只有 export default add; 才能这样\r"});index.add({'id':1,'href':'/life/docs/%E8%84%9A%E6%9C%AC/nodejs/','title':"node js ",'section':"脚本",'content':"node js #   Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时\n Linux 上安装 Node.js #   直接使用已编译好的包 Node 官网已经把 linux 下载版本更改为已编译好的版本了，我们可以直接下载解压后使用：  # wget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz // 下载 # tar xf node-v10.9.0-linux-x64.tar.xz // 解压 # cd node-v10.9.0-linux-x64/ // 进入解压目录 # ./bin/node -v // 执行node命令 查看版本 v10.9.0  解压文件的 bin 目录底下包含了 node、npm 等命令，我们可以使用 ln 命令来设置软连接：  ln -s /usr/software/nodejs/bin/npm /usr/local/bin/ ln -s /usr/software/nodejs/bin/node /usr/local/bin/  Ubuntu 源码安装 Node.js   以下部分我们将介绍在 Ubuntu Linux 下使用源码安装 Node.js 。 其他的 Linux 系统，如 Centos 等类似如下安装步骤。\n  在 Github 上获取 Node.js 源码：  $ sudo git clone https://github.com/nodejs/node.git\rCloning into 'node'...\r 修改目录权限：  $ sudo chmod -R 755 node  使用 ./configure 创建编译文件，并按照：  $ cd node $ sudo ./configure $ sudo make $ sudo make install 查看 node 版本：\n$ node --version v0.10.25  Ubuntu apt-get命令安装 命令格式如下：  sudo apt-get install nodejs sudo apt-get install npm  CentOS 下源码安装 Node.js   1、下载源码，你需要在https://nodejs.org/en/download/下载最新的Nodejs版本，本文以v0.10.24为例:\n cd /usr/local/src/ wget http://nodejs.org/dist/v0.10.24/node-v0.10.24.tar.gz  2、解压源码\n tar zxvf node-v0.10.24.tar.gz  3、 编译安装\n cd node-v0.10.24 ./configure --prefix=/usr/local/node/0.10.24 make make install  4、 配置NODE_HOME，进入profile编辑环境变量\n vim /etc/profile  设置 nodejs 环境变量，在 export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL 一行的上面添加如下内容:  #set for nodejs export NODE_HOME=/usr/local/node/0.10.24 export PATH=$NODE_HOME/bin:$PATH  :wq保存并退出，编译/etc/profile 使配置生效  source /etc/profile  验证是否安装配置成功  node -v 输出 v0.10.24 表示配置成功  npm模块安装路径  /usr/local/node/0.10.24/lib/node_modules/ windows 上安装 Node.js #    地址\n  选择zip格式 如图所示\n   解压zip格式 如图所示   配置环境变量 如图所示   检验安装  Microsoft Windows [版本 10.0.19043.1052]\r(c) Microsoft Corporation。保留所有权利。\rC:\\Users\\dell\u0026gt;node -v\rv14.17.2\rC:\\Users\\dell\u0026gt;npm -v\r6.14.13\rC:\\Users\\dell\u0026gt;npm root -g\rD:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\rC:\\Users\\dell\u0026gt;\rwindows 下 修改全局依赖包下载路径 #   默认情况下，我们在执行npm install -g XXXX下载全局包时，这个包的默认存放路径位C:\\Users\\用户名\\AppData\\Roaming\\npm\\node_modules下，可以通过CMD指令npm root -g查看  C:\\Users\\liaijie\\AppData\\Roaming\\npm\\node_modules\r 但是有时候我们不想让全局包放在这里，我们可以自定义存放目录,在CMD窗口执行以下两条命令修改默认路径：  npm config set prefix \u0026quot;C:\\node\\node_global\u0026quot;\rnpm config set cache \u0026quot;C:\\node\\node_cache\u0026quot;\r 或者打开c:\\node\\node_modules\\npm.npmrc文件，修改如下：  prefix =C:\\node\\node_global\rcache = C:\\node\\node_cache\r  以上操作表示，修改全局包下载目录为C:\\node\\node_global,缓存目录为C:\\node\\node_cache,并会自动创建node_global目录，而node_cache目录是缓存目录，会在你下载全局包时自动创建\nhttps://www.jianshu.com/p/13f45e24b1de\n  "});index.add({'id':2,'href':'/life/docs/javadir/groovy/groovy%E5%AD%A6%E4%B9%A0/','title':" Groovy 概述 ",'section':"groovy 学习与使用 ",'content':"Groovy 概述 #   Groovy是一种基于Java平台的面向对象语言。 Groovy 1.0于2007年1月2日发布，其中Groovy 2.4是当前的主要版本。 Groovy通过Apache License v 2.0发布。  Groovy的特点 #   同时支持静态和动态类型。 支持运算符重载。 本地语法列表和关联数组。 对正则表达式的本地支持。 各种标记语言，如XML和HTML原生支持。 Groovy对于Java开发人员来说很简单，因为Java和Groovy的语法非常相似。 您可以使用现有的Java库。 Groovy扩展了java.lang.Object。  groovy-脚本和类 #    在groovy中定义类和java中是一样的。类的方法可以是static，也可以是非static的\n  groovy中的方法可以是public, protected, private，同时也支持java中的修饰符，比如synchronized\n  groovy自动导入的包有以下这些\n   groovy.lang.* groovy.util.* java.lang.* java.util.* java.net.* java.io.* import java.math.BigInteger import java.math.BigDecimal    在groovy和java中不同的一点就是，groovy默认是public的\n  每一个groovy类，在JVM层级，都是字节码形式的java code，所以在java代码中可以调用groovy中申明的方法，反之亦然\n  你可以指定方法的参数和返回值，以便他们能够更好的和java代码相互调用。当然你也可以实现接口或者重载方法。但是需要你没有指定方法后者属性的类型的话，那么在JVM层级的字节码中，他们将会是 java.lang.Object 类型\n  例如 Callee.groovy\n  class Callee{\rvoid hello(){\rprintln \u0026quot;hello, world\u0026quot; ;\r}\r}\rc = new Callee() ;\rc.hello();\r 创建你的第一个 Hello World 程序  class Example1 {\rpublic static void main(String[] args) {\rprintln(\u0026quot;你好,世界 !\u0026quot;) ;\r}\r}\r你好,世界 !\n 当然你也可以不定义一个类 因为groovy中行得通  println(\u0026quot;你好,世界 !\u0026quot;) ;同样可以打印出字符串  在 Groovy 中导入语句 #   import 语句可以用来导入，可以让你的代码使用其他库的功能。这是通过使用在 Import 关键字完成。 下面的示例演示了如何使用 MarkupBuilder 的类，它可能是最常用的创建 HTML 或 XML 标记的类之一。  import groovy.xml.MarkupBuilder def xml = new MarkupBuilder() Groovy 令牌 #    令牌可以是一个关键字，一个标识符，常量，字符串文字或符号。 println(“Hello World”);\n  在上面的代码行中，有两个令牌，首先是关键词的 println 而接下来就是字符串的“Hello World”。\n  Groovy 注释 #   在您的代码中使用注释。Groovy 的注释可以是单行或多行。单行注释使用 // 在该行的任何位置来识别。一个例子如下所示 -  class Example {\rstatic void main(String[] args) {\r// Using a simple println statement to print output to the console\rprintln('Hello World');\r}\r}\r分号 #   就像 Java 编程语言，它需要具有分号在 Groovy 定义多个语句之间进行区分。  class Example {\rstatic void main(String[] args) {\r// One can see the use of a semi-colon after each statement\rdef x = 5;\rprintln('Hello World'); }\r}\r身份标识 #   标识符被用来定义变量，函数或其他用户定义的变量。标识符以字母开头，美元或下划线。他们不能以数字开头。以下是有效标识符的一些例子  def employeename def student1 def student_name\r 其中**，DEF** 是在 Groovy 用来定义标识符的关键字。下面是一个如何在我们的 Hello World 程序中使用标识符的代码示例  class Example {\rstatic void main(String[] args) {\r// One can see the use of a semi-colon after each statement\rdef x = 5;\rprintln('Hello World'); }\r}\r// 在上述的例子中，变量 x 被用作标识符。\r关键词 #  空白 #    空白是在编程语言如 Java 和 Groovy 用来形容空格，制表符，换行符和注释术语。空格分隔从另一个声明的一部分，使编译器，其中一个元素标识的声明。\n  例如，在下面的代码示例，存在关键字 def 和变量 x 之间的空白。这是为了让编译器知道 DEF 是需要被使用，并且是 x 应该是需要被定义的变量名的关键字。\n  def x = 5;\r文字 #   文字是在 groovy 中表示固定值的符号。Groovy 语言有符号整数，浮点数，字符和字符串。下面是一些在 Groovy 编程语言文字的例子 -  12 1.45 ‘a’ “aa”\r"});index.add({'id':3,'href':'/life/docs/javadir/groovy/groovy%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/','title':"groovy 基本概念 ",'section':"groovy 学习与使用 ",'content':"groovy 基本概念 #  1、基本概念 #   Groovy是一种面向对象的动态类型语言，跟Java一样运行在JVM上。\n（注：给Java静态世界带来动态能力的语言）\n   与Java不同的语言特性：\n  a) 函数字面值\n  b) 对集合的一等支持\n  c) 对正则表达式的一等支持\n  d) 对XML处理的一等支持\n  （注：所谓“一等”指的是内置到语言的语法中，不需要调用类库。）\n  2:Groovy能解决包括： #    快速Web开发\n  原型设计\n  脚本处理\n  等问题，这些使用Java不是解决动态层问题的理想语言。\n  例如:\nSystem.out.println(\u0026quot;It's a Groovy baby, yeah!\u0026quot;);\rdef writer = new StringWriter();\rdef xml = new groovy.xml.MarkupBuilder(writer);\rxml.person(id:2){\rname 'kobicc'\rage 1\r}\rprintln writer.toString();\r"});index.add({'id':4,'href':'/life/docs/javadir/basedir/jsp_dir/java_%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6%E5%8E%9F%E7%90%86/','title':"java_监听事件原理 ",'section':"jsp 基础知识 ",'content':"接口回调法 #  模拟输出监听事件 #  第一步先定义事件接口 #  public interface PrintListener {\rpublic void print();\r}\r第二步自定义输出类 #  public class Out {\rPrintListener listener=null;\rpublic Out() {\r}\rpublic Out(PrintListener listener) {\rthis.listener=listener;\r}\rpublic void printlen(String s) {\rSystem.out.println(s);\rif(listener!=null) {\rlistener.print();\r}\r}\r}\r第三步实现监听事件接口 #  public class PrintListenerDemo implements PrintListener {\r@Override\rpublic void print() {\rSystem.out.println(\u0026quot;监听到输出事件\u0026quot;);\r}\r}\r测试 #  public class Test {\rpublic static void main(String[] args) {\r//新建一个默认输出类\rOut b=new Out();\rb.printlen(\u0026quot;这里不会被监听到输出事件\u0026quot;);\t//新建一个输出类,为输出类添加一个输出监听事件\rOut b1=new Out(new PrintListenerDemo());\rb1.printlen(\u0026quot;这里输出后会被监听到输出事件\u0026quot;);\r}\r}\r结果 #  监听事件使用 #   在javaweb中,不论与ServletContext,HttpSession,ServletRequest相关的监听接口\n  开发者只需要直接实现这些监听接口事件,其他的源码别人己经写好了,我们不用关心它是如何实现\n "});index.add({'id':5,'href':'/life/docs/javadir/basedir/','title':"Java基础知识 ",'section':" Java技术栈",'content':"目录 #   jsp  @Test public void mapTest() throws Exception { Map map = new HashMap(); map.put(\u0026#34;1\u0026#34;, UUID.randomUUID().toString()) ; map.put(\u0026#34;4\u0026#34;, UUID.randomUUID().toString()) ; Map\u0026lt;Integer ,String\u0026gt; integerStringMap = new HashMap\u0026lt;\u0026gt;() ; integerStringMap.put(1,UUID.randomUUID().toString()) ; // integerStringMap = map;  if (!integerStringMap.isEmpty()){ for ( Iterator\u0026lt;Map.Entry\u0026lt;Integer, String\u0026gt;\u0026gt; iterator = integerStringMap.entrySet().iterator();iterator.hasNext();){ Map.Entry\u0026lt;Integer, String\u0026gt; next = iterator.next(); System.out.println(next.getKey()+\u0026#34;-\u0026#34;+next.getValue()); System.out.println(next.getKey() instanceof Integer); System.out.println(next.getValue() instanceof String); } } //print result  /** * 1-aeec41b6-bb7c-4e77-a57c-70a416bc03eb * false * true * 4-e02bb587-9714-4873-9b6c-5e2d4494117f * false * true */ } "});index.add({'id':6,'href':'/life/docs/javadir/basedir/jsp_dir/','title':"jsp 基础知识 ",'section':"Java基础知识 ",'content':"目录 #  el表达式\n字符串el表达式\nJSTL_core标签库\nsession\n监听事件原理\n"});index.add({'id':7,'href':'/life/docs/operating_system/linux/','title':"linux学习与使用 ",'section':"操作系统 ",'content':" Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。\n 目录 #    linux基础命令\n  nginx学习与使用\n  host映射\n  Linux下设置和查看环境变量\n  Ubuntu清理系统垃圾\n  Notepad++安装\n  ubuntu 安装chmsee\n  ubuntu软件卸载\n  Ubuntu 16.04修改hosts\n  git命令\n  git配置\n  回到上一级 #  "});index.add({'id':8,'href':'/life/docs/operating_system/windows/','title':"windows学习与使用 ",'section':"操作系统 ",'content':"windows系统 #   MicrosoftWindows操作系统是美国微软公司研发的一套操作系统，它问世于1985年，起初仅仅是Microsoft-DOS模拟环境，后续的系统版本由于微软不断的更新升级，不但易用，也当前应用最广泛的操作系统。\n Microsoft公司从1983年开始研制Windows系统，最初的研制目标是在MS - DOS的基础上提供一个多任务的图形用户界面。第一个版本的Windows 1.0于1985年问世，它是一个具有图形用户界面的系统软件。1987年推出了Windows 2.0版，最明显的变化是采用了相互叠盖的多窗口界面形式。但这一切都没有引起人们的关注。直到1990年推出Windows 3.0成为一个重要的里程碑，它以压倒性的商业成功确定了Windows系统在PC领域的垄断地位。现今流行的Windows窗口界面的基本形式也是从Windows3.0开始基本确定的。1992年主要针对Windows 3.0的缺点推出了Windows 3.1，为程序开发提供了功能强大的窗口控制能力，使Windows和在其环境下运行的应用程序具有了风格统一、操纵灵活、使用简便的用户界面。Windows3.1在内存管理上也取得了突破性进展。它使应用程序可以超过常规内存空间限制，不仅支持16MB内存寻址，而且在80386及以上的硬件配置上通过虚拟存储方式可以支持几倍于实际物理存储器大小的地址空间。Windows 3.1还提供了一定程度的网络支持、多媒体管理、超文本形式的联机帮助设施等，对应用程序的开发有很大影响。 [3] 众所周知，Windows在个人计算机领域是普及度很高的操作系统。当计算机的体积不断变小，发展成掌上电脑的形态时，Windows系统自然电延伸到这类便携式产品的领域。然而，掌上电脑在续航能力、显示屏幕、输入界面等方面与普通的PC还是有很大差别的，考虑功耗和用户使用习惯等方面的因素，Windows系统针对手持设备的特点进行了多次调整和优化，先后形成了Windows CE，Windows Mobile，Windows Phone等移动版本的系统。 [4] 早期的Windows移动版本系统并未充分考虑智能手机的特点，更多的是从掌上电脑的角度在设计系统。例如，开始菜单虽然在PC上早已为人们所习惯和熟知，但将开始菜单放到手机屏幕上使用时，层层展开的菜单在狭小的屏幕上会让用户很难找到自己所需要的程序。因此，当微软充分认识到移动互联网的发展潜力后，Windows针对智能手机系统的各种设计才逐渐朝着扁平化的风格演变，其中一个特色就是动态磁贴的概念。 [4] 目前，虽然Windows Phone系统凭借Windows系统在桌面计算领域的优势，以及其办公软件Office多年培养起来的庞大用户群体和操作习惯，一直试图在移动计算领域扩大份额。然而，决定一个系统生命力的是应用程序的数量和质量，在这一点上，Windows Phone系统似乎起步太晚了，如何将开发者和用户从已经较为成熟的安卓和iOS系统吸引到这个平台上来是WP面临的最大挑战。 [4] Windows 10 Mobile是微软发发布的一个手机系统 [5] 。\rwindows问题 #  DOS基础 #  FTP #  DOS常用命令(文件) #  DOS常用命令(网络检测) #  "});index.add({'id':9,'href':'/life/docs/operating_system/one_chapter/','title':"第一章 操作系统概述 ",'section':"操作系统 ",'content':"操作系统概述 #  目录 #   操作系统的概念、功能 操作系统的特征 操作系统的发展与分类 操作系统的运行机制与体系结构 中断和异常 系统调用 操作系统的体系结构  "});index.add({'id':10,'href':'/life/docs/computer_network/network_architecture/','title':"网络体系结构",'section':"计算机网络 ",'content':"*[·-·]:注释内容\n计算机概念 组成 功能 分类 #  标准化工作及相关组织 #   法定标准 事实标准  分层参考模型 #  7层 , 4层 ,5层 #   计算机概念-组成-功能-分类 标准化工作及相关组织 速率相关的性能指标 分层结构 分层参考模型 模型层次详解  "});index.add({'id':11,'href':'/life/docs/computer_network/','title':"计算机网络 ",'section':"Docs",'content':"目录 #   网络体系结构 物理层 数据链路层 网络层 传输层 应用层  st=\u0026gt;start: 开始\rop=\u0026gt;operation: My Operation\rcond=\u0026gt;condition: Yes or No?\re=\u0026gt;end\rst-\u0026gt;op-\u0026gt;cond\rcond(yes)-\u0026gt;e\rcond(no)-\u0026gt;op\r\u0026amp;```\r"});index.add({'id':12,'href':'/life/docs/javadir/tooldoc/apache-common%E5%B7%A5%E5%85%B7%E5%8C%85/','title':"Apache Commons 工具类介绍及简单使用",'section':"Java公共库文档总结 ",'content':"Apache Commons 工具类介绍及简单使用 #     组件 功能介绍     BeanUtils Commons-BeanUtils 提供对 Java 反射和自省API的包装, 提供了对于JavaBean进行各种操作，克隆对象,属性等等.   Betwixt XML与Java对象之间相互转换.   Codec 处理常用的编码方法的工具类包 例如DES、SHA1、MD5、Base64等.   Collections java集合框架操作.   Compress java提供文件打包 压缩类库.   Configuration Commons-Configuration 工具对各种各式的配置和参考文件提供读取帮助,java应用程序的配置管理类库.   DBCP 提供数据库连接池服务.   DbUtils DbUtils 是一个 JDBC helper 类库，完成数据库任务的简单的资源清除代码,提供对jdbc 的操作封装来简化数据查询和记录读取操作   Email java发送邮件 对javamail的封装.   FileUpload 提供文件上传功能.   HttpClient 提供HTTP客户端与服务器的各种通讯操作. 现在已改成HttpComponents   Lang Java基本对象方法的工具类包 如：StringUtils,ArrayUtils等等.   Logging 提供的是一个Java 的日志接口.   Validator 提供了客户端和服务器端的数据验证框架.   Primitives Commons-Primitives提供了一个更小，更快和更易使用的对Java基本类型的支持。当前主要是针对基本类型的 collection。   Math Math 是一个轻量的，自包含的数学和统计组件，解决了许多非常通用但没有及时出现在Java标准语言中的实践问题   EL Commons-EL 提供在JSP2.0规范中定义的EL表达式的解释器.   Discovery Commons-Discovery 提供工具来定位资源 (包括类) ，通过使用各种模式来映射服务/引用名称和资源名称。   Digester Commons-Digester 是一个 XML-Java对象的映射工具，用于解析 XML配置文件.   Chain Chain 提供实现组织复杂的处理流程的“责任链模式”   Modeler Commons-Modeler 提供了建模兼容JMX规范的Mbean的机制.   Net Net 是一个网络工具集，基于 NetComponents 代码，包括 FTP 客户端等等    一:org.apache.commons.lang #   ArrayUtils – 用于对数组的操作，如添加、查找、删除、子数组、倒序、元素类型转换等；  ArrayUtils类\rArrayUtils.toString(array) 将数组转为为字符串，格式如：{2,4,8,16}\rArrayUtils.contains(array,8) 判断数组中是否包含数字8，（一维数组）\rArrayUtils.indexOf(array,8) 判断数组中第一个8的位置（一维数组）\rArrayUtils.lastIndexOf(array,8) 判断数组中最后一个8的位置。（一维数组）\rArrayUtils.clone(array) 给一个一维数组来个拷贝\rArrayUtils.reverse(array); 翻转该一维数组\rArrayUtils.toMap(array); 将一个二维数组转换为map，二维数组中至少与两列，第一列为key第二列为value == \u0026gt;注意的是传入toMap()中的二维数组必须是对象如Integer\r  BitField – 用于操作位元，提供了一些方便而安全的方法；\n  BooleanUtils – 用于操作和转换 boolean 或者 Boolean 及相应的数组；\n   boolean[] booleans = new boolean[]{true, false, true};\r//和，并且\rSystem.out.println(BooleanUtils.and(booleans));//false\r//或者\rSystem.out.println(BooleanUtils.or(booleans));//true\rProjectInfo projectInfo = null;\rif (projectInfo != null \u0026amp;\u0026amp; projectInfo.getId() != 0);\r//可以用上面的改为\rBooleanUtils.and(new boolean[]{projectInfo != null,projectInfo.getId() != 0});\rInteger integer = 0;\rSystem.out.println(BooleanUtils.toBooleanObject(integer));//false\r CharEncoding – 包含了 Java 环境支持的字符编码，提供是否支持某种编码的判断；  System.out.println(CharEncoding.ISO_8859_1);\rSystem.out.println(CharEncoding.US_ASCII);\rSystem.out.println(CharEncoding.UTF_8);\rSystem.out.println(CharEncoding.UTF_16);\rSystem.out.println(CharEncoding.UTF_16BE);\rSystem.out.println(CharEncoding.UTF_16LE);\r CharRange – 用于设定字符范围并做相应检查；  System.out.println(CharUtils.toChar(\u0026quot;hello\u0026quot;,'o'));\rint assii = CharUtils.toIntValue('2');//检查字符是否在0-9\rSystem.out.println(assii);\r CharSet – 用于设定一组字符作为范围并做相应检查；(我的理解是可以用作正则表达式的判断)  System.out.println(CharSet.ASCII_ALPHA.toString());//[a-z, A-Z]\rSystem.out.println(CharSet.ASCII_ALPHA.contains('B'));//判断char是否在这个范围内\rSystem.out.println(CharSet.ASCII_ALPHA_LOWER.contains('l'));//判断char是否在这个范围内\rSystem.out.println(CharSet.ASCII_NUMERIC.contains('8'));//判断char是否在这个范围内\rSystem.out.println(CharSet.getInstance(\u0026quot;s\u0026quot;));//[s]\r CharSetUtils – 用于操作 CharSet ；   /*这里面所以的输入字符串都会被拆成char[]来判定*/\r//删除指定的字符(假如删除的这个会重复那么也会被删除掉)\rSystem.out.println(CharSetUtils.delete(\u0026quot;hello World !\u0026quot;,\u0026quot; o\u0026quot;));//helloWorld! , hellWrld! ==\u0026gt; input [ o]和[o] 结果都不同\r//是否包含任意一个字符\rSystem.out.println(CharSetUtils.containsAny(\u0026quot;xudaollong\u0026quot;,\u0026quot;k\u0026quot;,\u0026quot;o\u0026quot;));\r//当有重复的时候只删除第一次的\rSystem.out.println(CharSetUtils.squeeze(\u0026quot;china dong kk a\u0026quot;,\u0026quot;k\u0026quot;));\r//保留指定的char 要注意的是指定的char,这虽然输入的是字符串dong,但是在判定的时候实际上是把这个字符串拆成char[]\rSystem.out.println(CharSetUtils.keep(\u0026quot;china g dong\u0026quot;,\u0026quot;dong\u0026quot;));\r//统计char出现的次数\rSystem.out.println(CharSetUtils.count(\u0026quot;hello world\u0026quot;, \u0026quot;o\u0026quot;));\r CharUtils – 用于操作 char 值和 Character 对象；  System.out.println(CharUtils.toChar(\u0026quot;hello\u0026quot;,'o'));\rint num = CharUtils.toIntValue('2');//获取int类型的char但是char必须在Ascii码中\rSystem.out.println(num);\rSystem.out.println(CharUtils.isAsciiNumeric('u'));//false\rSystem.out.println(CharUtils.isAsciiNumeric('7'));//true\rSystem.out.println(CharUtils.isAscii('h'));//判断是否在Ascii 128 范围类,是否属于Ascii\r ClassUtils – 用于对 Java 类的操作，不使用反射；  System.out.println(ClassUtils.getShortClassName(UserDO.class));//返回 UserDO\rSystem.out.println(ClassUtils.getName(UserDO.class));//返回 包名.UserDO\rSystem.out.println(ClassUtils.getPackageName(UserDO.class));//返回 包名\rSystem.out.println(ClassUtils.getShortCanonicalName(UserDO.class));//返回 UserDO\rSystem.out.println(ClassUtils.getSimpleName(UserDO.class));//返回 UserDO\rSystem.out.println(ClassUtils.getAbbreviatedName(UserDO.class,2));\rClassUtils.getAllSuperclasses(UserDO.class).stream().forEachOrdered(System.out::println);//获取父类\rClassUtils.getAllInterfaces(UserDO.class).stream().forEachOrdered(System.out::println);//获取接口\r ObjectUtils – 用于操作 Java 对象，提供 null 安全的访问和其他一些功能；  UserDO userDO = new UserDO(Zhou_Word.getEnglishName());\rUserDO userDO1 = ObjectUtils.clone(userDO);\ruserDO1 = null;\ruserDO = Preconditions.checkNotNull(userDO, \u0026quot;不能为null\u0026quot;);//不会抛出NullPointerException\r/**如果一个类没有重写toString方法本身，将会通过Object类的toString方法获取对象的字符串对象，*/\rSystem.out.println(ObjectUtils.identityToString(null));//null\rSystem.out.println(ObjectUtils.identityToString(\u0026quot;\u0026quot;));//java.lang.String@12843fce\rSystem.out.println(ObjectUtils.identityToString(Boolean.TRUE));//java.lang.Boolean@3dd3bcd\r/**\r* 累加对象产生的toString\r* 两个参数任意一个为null都会抛出空指针异常\r* buffer-要追加的缓冲区\r* object-要创建对象的toString\r*/\rStringBuffer buffer = new StringBuffer();\rObjectUtils.identityToString(buffer, \u0026quot;\u0026quot;);\rObjectUtils.identityToString(buffer, Boolean.TRUE);\rObjectUtils.identityToString(buffer, 12);\rSystem.out.println(buffer.toString());//java.lang.String@12843fcejava.lang.Boolean@3dd3bcdjava.lang.Integer@97e1986 调用了Object类的toString方法\r//封装类型的数字比较\rInteger a = 10, b = null, c = 15;\r//比较两个封装类型的数字,默认null为小\rObjectUtils.compare(a, b);\r//比较两个封装类型的数字,设置null为大\rObjectUtils.compare(a, b, true);\r//获取最大的值,默认null为最小\rObjectUtils.max(a, b);\r RandomStringUtils – 用于生成随机的字符串；  System.out.println(RandomStringUtils.random(4).length());\rSystem.out.println(RandomStringUtils.random(23));//生成指定长度任意的随机字符\rSystem.out.println(RandomStringUtils.randomNumeric(22));//生成数字组成的随机字符\rSystem.out.println(RandomStringUtils.randomAscii(22));//生成ascii 128内的随机字符\rSystem.out.println(RandomStringUtils.randomAlphabetic(21));//生成大写或者小写或者都有组成的随机字符\r  SerializationUtils – 用于处理对象序列化，提供比一般 Java 序列化更高级的处理能力；\n  StringEscapeUtils – 用于正确处理转义字符，产生正确的 Java 、 JavaScript 、 HTML 、 XML 和 SQL 代码；\n  String str = \u0026quot;thi is a test 这是一个测试\u0026quot;;\rString xml = \u0026quot;\u0026lt;?xml version=\\\u0026quot;1.0\\\u0026quot; encoding=\\\u0026quot;UTF-8\\\u0026quot;?\u0026gt;\\n\u0026quot; +\r\u0026quot;\u0026lt;persons\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;person id=\\\u0026quot;23\\\u0026quot;\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;name\u0026gt;张 三\u0026lt;/name\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;age\u0026gt;26\u0026lt;/age\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;/person\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;person id=\\\u0026quot;22\\\u0026quot;\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;name\u0026gt;李四\u0026lt;/name\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;age\u0026gt;25\u0026lt;/age\u0026gt;\\n\u0026quot; +\r\u0026quot; \u0026lt;/person\u0026gt;\\n\u0026quot; +\r\u0026quot;\u0026lt;/persons\u0026gt;\u0026quot;;\rSystem.out.println(\u0026quot;用escapeJava方法转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.escapeJava(str));\rSystem.out.println(\u0026quot;用unescapeJava方法反转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.unescapeJava(org.apache.commons.lang.StringEscapeUtils.escapeJava(str)));\rSystem.out.println(\u0026quot;用escapeHtml方法转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.escapeHtml(str));\rSystem.out.println(\u0026quot;用unescapeHtml方法反转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.unescapeHtml(org.apache.commons.lang.StringEscapeUtils.escapeHtml(str)));\rSystem.out.println(\u0026quot;用escapeXml方法转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.escapeXml(xml));\rSystem.out.println(\u0026quot;用unescapeXml方法反转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.unescapeXml(org.apache.commons.lang.StringEscapeUtils.escapeXml(xml)));\rSystem.out.println(\u0026quot;用escapeJavaScript方法转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(str));\rSystem.out.println(\u0026quot;用unescapeJavaScript方法反转义之后的字符串为:\u0026quot; + org.apache.commons.lang.StringEscapeUtils.unescapeJavaScript(org.apache.commons.lang.StringEscapeUtils.unescapeJavaScript(str)));\r StringUtils – 处理 String 的核心类，提供了相当多的功能；  System.out.println(StringUtils.isNotEmpty(\u0026quot; \u0026quot;)); //true\rSystem.out.println(StringUtils.isNotBlank(\u0026quot; \u0026quot;));//这个方法里面字符串空白会删除空白 false\rSystem.out.println( StringUtils.repeat( \u0026quot;China \u0026quot;, 5));//将目标字符串累加5次\rSystem.out.println( StringUtils.center( \u0026quot;China\u0026quot;, 10,\u0026quot;*\u0026quot;));//**China*** size=10指的是得到的长度为10 将china用*前后包围然后目标长度截取为10\rSystem.out.println(StringUtils.countMatches( \u0026quot;Chinese People\u0026quot;, \u0026quot;e\u0026quot;));//取得某字符串在另一字符串中出现的次数\rString formatted = \u0026quot; 25 * (30,40) [50,60] | 30\u0026quot;;\rSystem.out.print(\u0026quot;N0: \u0026quot; + StringUtils.substringBeforeLast( formatted, \u0026quot;*\u0026quot; ) );//取得最后一个指定字符串之前的字符串\rSystem.out.print(\u0026quot;, N1: \u0026quot; + StringUtils.substringBetween( formatted, \u0026quot;(\u0026quot;, \u0026quot;,\u0026quot; ) );//取得两字符之间的字符串\rSystem.out.print(\u0026quot;, N2: \u0026quot; + StringUtils.substringBetween( formatted, \u0026quot;,\u0026quot;, \u0026quot;)\u0026quot; ) );\rSystem.out.print(\u0026quot;, N3: \u0026quot; + StringUtils.substringBetween( formatted, \u0026quot;[\u0026quot;, \u0026quot;,\u0026quot; ) );\rSystem.out.print(\u0026quot;, N4: \u0026quot; + StringUtils.substringBetween( formatted, \u0026quot;,\u0026quot;, \u0026quot;]\u0026quot; ) );\rSystem.out.print(\u0026quot;, N5: \u0026quot; + StringUtils.substringAfterLast( formatted, \u0026quot;|\u0026quot; ) );//取得最后一个指定字符串之后的字符串\rSystem.out.println( StringUtils.reverse(\u0026quot;ABCDE\u0026quot;));//颠倒字符串 EDCBA\r根据指定分隔符进行反转，分隔符之间的字符不进行反转\rStringUtils.reverseDelimited(\u0026quot;china\u0026quot;, ',')); // china\rStringUtils.reverseDelimited(\u0026quot;cxhinxa\u0026quot;, 'x')); // axhinxz\rStringUtils.reverseDelimited(\u0026quot;c.hin.a\u0026quot;, '.')); // a.hin.c\rStringUtils.reverseDelimited(\u0026quot;c.hina\u0026quot;, '.')); // hina.c\rSystem.out.println(StringUtils.capitalize(\u0026quot;hello\u0026quot;));//首字母大写\rSystem.out.println(StringUtils.uncapitalize(this.getClass().getSimpleName()));//首字母小写\rSystem.out.println(StringUtils.isAllUpperCase(this.getClass().getSimpleName()));//是否全是大写 false\rSystem.out.println(StringUtils.isAllLowerCase(this.getClass().getSimpleName()));//是否全是小写 false\rSystem.out.println(StringUtils.swapCase(\u0026quot;I am a-A*a\u0026quot;));//大小写转换，空格不动 i AM A-a*A\rSystem.out.println(StringUtils.join(new String[] {\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot; ,\u0026quot;c\u0026quot;},\u0026quot;,\u0026quot;));//分割字符串 a,b,c\r判断字符串中是否包含指定的字符或字符序列\r1:区分大小写\rStringUtils.contains(null, 'a'); // false StringUtils.contains(\u0026quot;china\u0026quot;, 'a');// true\r2:不区分大小写\rStringUtils.containsIgnoreCase(\u0026quot;china\u0026quot;, 'a');// true\rStringUtils.containsIgnoreCase(\u0026quot;china\u0026quot;, 'A');// true\r3:只需要包含任意一个字符即可 判断字符串中是否包含指定字符集合中或指定字符串中任一字符，区分大小写\rStringUtils.containsAny(\u0026quot;abc\u0026quot;, \u0026quot;ab\u0026quot;);// true\rStringUtils.containsAny(\u0026quot;abc\u0026quot;, \u0026quot;ax\u0026quot;);// true\rStringUtils.containsAny(\u0026quot;abc\u0026quot;, \u0026quot;xy\u0026quot;);// false\r4:判断字符串中是否不包含指定的字符或指定的字符串中的字符，区分大小写\rStringUtils.containsNone(null, 'a'); // true\rStringUtils.containsNone(\u0026quot;\u0026quot;, 'a'); // true 注意这里，空串总是返回true\rStringUtils.containsNone(\u0026quot;china\u0026quot;, ' '); // true 注意包含空白符为true\r从字符串中移除匹配的字符或字符序列，如果要移除的字符或字符序列在字符串中不存在，即无匹配，则不进行移除\r1:移除单个字符\rStringUtils.remove(null, 'a')); // null (注意此处及下一行为null)\rStringUtils.remove('china', null) // china StringUtils.remove(\u0026quot;china\u0026quot;, 'i')); // chna\rStringUtils.remove(\u0026quot;china\u0026quot;, 'b')); // china (如果要移除的字符不存在，则返回原字符串)\r2:移除指定字符序列\rStringUtils.remove(\u0026quot;china\u0026quot;, \u0026quot;in\u0026quot;)); // cha\rStringUtils.remove(\u0026quot;china\u0026quot;, \u0026quot;nin\u0026quot;)); // china\r3:移除开头匹配的字符序列\rStringUtils.removeStart(\u0026quot;china\u0026quot;, \u0026quot;ch\u0026quot;)); // ina\rStringUtils.removeStartIgnoreCase(\u0026quot;china\u0026quot;, \u0026quot;CHI\u0026quot;)); // na (忽略大小写)\r4:移除结尾匹配的字符序列\rStringUtils.removeEnd(\u0026quot;china\u0026quot;, \u0026quot;na\u0026quot;)); // chi\rStringUtils.removeEndIgnoreCase(\u0026quot;china\u0026quot;, \u0026quot;NA\u0026quot;)); // chi (忽略大小写)\r5:移除空白字符\rStringUtils.deleteWhitespace(null)); //null\rStringUtils.deleteWhitespace(\u0026quot; c h i\\tn\\ra\u0026quot;)); // china\r SystemUtils – 在 java.lang.System 基础上提供更方便的访问，如用户路径、 Java 版本、时区、操作系统等判断；  System.out.println(SystemUtils.getHostName());//DESKTOP-AS9FA6P\rSystem.out.println(SystemUtils.getUserDir().getPath());//E:\\IdeaProjects\\z-utils\rSystem.out.println(SystemUtils.getUserHome().getPath());//C:\\Users\\noatn\rSystem.out.println(SystemUtils.getJavaHome().getPath());//C:\\Program Files\\Java\\jdk1.8.0_181\\jre\rSystem.out.println(SystemUtils.getJavaIoTmpDir().getPath());//C:\\Users\\noatn\\AppData\\Local\\Temp\rSystem.out.println(SystemUtils.IS_JAVA_1_8);//true\rSystem.out.println(SystemUtils.IS_OS_WINDOWS);//true\rSystem.out.println(SystemUtils.IS_OS_WINDOWS_10);//true\rSystem.out.println(SystemUtils.USER_NAME);//noatn\rSystem.out.println(SystemUtils.USER_DIR);//E:\\IdeaProjects\\z-utils\rSystem.out.println(SystemUtils.USER_HOME);//C:\\Users\\noatn\r  Validate – 提供验证的操作，有点类似 assert 断言；\n  WordUtils – 用于处理单词大小写、换行等。\n  二:org.apache.commons.lang.math #   处理分数的Fraction类；  {\rFraction fraction = Fraction.getFraction(1,2);// first prams 分子 ,second params 分母\rSystem.out.println(fraction.doubleValue());//输出具体值 0.5\rSystem.out.println(fraction.toString());//输出具字符串值 1/2\rSystem.out.println(fraction.toProperString());//输出具字符串值 1/2\r}\r{\r//当第一个参数大于0的情况 (2*3+1) / 3\rFraction fraction = Fraction.getFraction(2,1,3);\rSystem.out.println(fraction.doubleValue());//输出具体值 2.3333333333333335\r//当第一个参数大于0的情况 (-2*3-1) / 3\rfraction = Fraction.getFraction(-2,1,3);\rSystem.out.println(fraction.doubleValue());\rfraction = Fraction.getFraction(\u0026quot;1/2\u0026quot;);//可以自动解析为分子1分母2\rSystem.out.println(fraction.doubleValue());\r}\r{\r//获取绝对值 即|-1| == 1\rSystem.out.println(Fraction.getFraction(-1, 2).abs());\r//两个分数相加\rSystem.out.println(Fraction.getFraction(1, 2).add(Fraction.getFraction(\u0026quot;1/2\u0026quot;)));\r//两个分数相减\rSystem.out.println(Fraction.getFraction(1, 2).subtract(\rFraction.getFraction(1, 2)));\r//两个分数相乘\rSystem.out.println(Fraction.getFraction(1, 2).multiplyBy(\rFraction.getFraction(1, 2)));\r//两个分数相除\rSystem.out.println(Fraction.getFraction(1, 2).divideBy(\rFraction.getFraction(1, 2)));\r//约数\rSystem.out.println(Fraction.getFraction(1, 2).pow(2));\r}\r 处理数值的NumberUtils和IEEE754rUtils类，这里IEEE745r代表的是IEEE 754的标准，是一种浮点数的处理标准。 处理随机数的JVMRandom和RandomUtils类。  // JVMRandom继承了java.util.Random类，其功能和Random差不多，只不过封装了返回不同数据类型的方法而已。而RandomUtils则把JVMRandom的方法静态化了。\rfor (int i = 0; i \u0026lt; 5; i++) {\rSystem.out.println(RandomUtils.nextInt(100));\r}\r 处理数值范围的Range, DoubleRange, FloatRange, IntRange, LangRange, NumberRange类   Range normalScoreRange = new DoubleRange(90, 120);\rdouble score1 = 102.5;\rdouble score2 = 79.9;\rSystem.out.println(\u0026quot;Normal score range is: \u0026quot; + normalScoreRange);//[90.0,120.0] 打印一个范围\rSystem.out.println(\u0026quot;Is \u0026quot; + score1 + \u0026quot; a normal score? \u0026quot; + normalScoreRange.containsDouble(score1));//是否在这个范围 true\rSystem.out.println(\u0026quot;Is \u0026quot; + score2 + \u0026quot; a normal score? \u0026quot; + normalScoreRange.containsDouble(score2));//是否在这个范围 false\rSystem.out.println(normalScoreRange.overlapsRange(new IntRange(92,119)));//此范围是否在我们预定的范围中 true\r三:Commons Collections #   CollectionUtils  org.apache.commons.collections4.CollectionUtils.isEqualCollection(java.util.Collection\u0026lt;?\u0026gt;, java.util.Collection\u0026lt;?\u0026gt;) 集合是否相等\rorg.apache.commons.collections4.CollectionUtils.union(Collection\u0026lt;?\u0026gt; a,Collection\u0026lt;?\u0026gt; b) 合集\rorg.apache.commons.collections4.CollectionUtils.subtract(java.lang.Iterable\u0026lt;? extends O\u0026gt;, java.lang.Iterable\u0026lt;? extends O\u0026gt;) 差集\rorg.apache.commons.collections4.CollectionUtils.intersection (Collection\u0026lt;?\u0026gt; a,Collection\u0026lt;?\u0026gt; b) 交集\rorg.apache.commons.collections4.CollectionUtils.isSubCollection(Collection\u0026lt;?\u0026gt; a,Collection\u0026lt;?\u0026gt; b) 集合包含\rorg.apache.commons.collections4.CollectionUtils.collate(java.lang.Iterable\u0026lt;? extends O\u0026gt;, java.lang.Iterable\u0026lt;? extends O\u0026gt;) 合并\rorg.apache.commons.collections4.CollectionUtils.isNotEmpty(Collection\u0026lt;?\u0026gt; a) 判断是否为null并且是否包含元素\rorg.apache.commons.collections4.CollectionUtils.addIgnoreNull(Collection\u0026lt;T\u0026gt; collection, final T object)添加非空的对象到集合中\r"});index.add({'id':13,'href':'/life/docs/javadir/tooldoc/commons_io/','title':"apache FilenameUtils 文件名称操作",'section':"Java公共库文档总结 ",'content':"org.apache.commons.io.FilenameUtils 文件名称操作 #    FilenameUtils.getExtension(fileName) 获取文件后缀 //text\n  FilenameUtils.getName(fileName) 获取文件完整名称 //c.text\n  FilenameUtils.getBaseName(fileName) 获取文件名称 //c\n  FilenameUtils.getFullPath(fileName) 获取文件的完整路径 //D:\\data\\\n  String path = \u0026quot;D:\\\\data\\\\假设开发法土地模板.docx\u0026quot; ;\rString fullPath = FilenameUtils.getFullPath(path);\rSystem.out.println(\u0026quot;fullPath:\u0026quot;+fullPath);//D:\\data\\\rString name = FilenameUtils.getName(path);\rSystem.out.println(\u0026quot;name:\u0026quot;+name); //假设开发法土地模板.docx\rString prefix = FilenameUtils.getPrefix(path);\rSystem.out.println(\u0026quot;prefix:\u0026quot;+prefix); //D:\\\rint prefixLength = FilenameUtils.getPrefixLength(path);\rSystem.out.println(\u0026quot;prefixLength:\u0026quot;+prefixLength); //3\rString path1 = FilenameUtils.getPath(path);\rSystem.out.println(\u0026quot;path:\u0026quot;+path1); //data\\\rString baseName = FilenameUtils.getBaseName(path);\rSystem.out.println(\u0026quot;baseName:\u0026quot;+baseName); //假设开发法土地模板\rString extension = FilenameUtils.getExtension(path);\rSystem.out.println(\u0026quot;extension:\u0026quot;+extension); //docx\rFileUtils：提供文件操作（移动文件，读取文件，检查文件是否存在等等） #  String path = \u0026quot;D:\\\\data\\\\test\u0026quot;;\rString fileSize = FileUtils.byteCountToDisplaySize(1024 * 1024);\r// 转换文件长度单位\rAssert.assertEquals(\u0026quot;1 MB\u0026quot;, fileSize);\r// 清空某目录下的所有目录,含文件夹和文件,注意是目录下,不包含父目录\rFileUtils.cleanDirectory(new File(path));\r// copy URL中文件到參數2\rFileUtils.copyURLToFile(new URL(\u0026quot;https://v3.bootcss.com/\u0026quot;), new File(\u0026quot;D:\\\\data\\\\test1\\\\a1.txt\u0026quot;));//a1.txt 里面拷贝下来是一个网页\r// 强制删除文件\rFileUtils.forceDelete(new File(\u0026quot;D:\\\\data\\\\test1\\\\a1.txt\u0026quot;));\r// 将文件转为 InputStream\rFileUtils.openInputStream(new File(\u0026quot;D:\\\\data\\\\aac.pptx\u0026quot;));\r//openOutStream\rFileUtils.openOutputStream(new File(\u0026quot;D:\\\\data\\\\aac.pptx\u0026quot;));\r// 读取文件转为字节数组\rbyte[] bytes = FileUtils.readFileToByteArray(new File(\u0026quot;D:\\\\data\\\\aab.pptx\u0026quot;));\r// 读取文件转换为String类型,方便文本读取\rFileUtils.readFileToString(new File(\u0026quot;D:\\\\data\\\\aab.pptx\u0026quot;),\u0026quot;UTF-8\u0026quot;);\r// 返回目录的大小\rlong size = FileUtils.sizeOfDirectory(new File(\u0026quot;D:\\\\data\\\\\u0026quot;));\r// 写字符串到参数1文件中\rFileUtils.writeStringToFile(new File(\u0026quot;D:\\\\data\\\\test1\\\\b2.txt\u0026quot;), \u0026quot;test\u0026quot;, \u0026quot;UTF-8\u0026quot;);\r// 将参数1目录下的全部内容复制到参数2目录\rFileUtils.copyDirectory(new File(\u0026quot;D:\\\\data\\\\test1\u0026quot;), new File(\u0026quot;D:\\\\data\\\\test2\u0026quot;));\r// 将参数1目录整个复制到参数2目录下\rFileUtils.copyDirectoryToDirectory(new File(\u0026quot;D:\\\\data\u0026quot;) , new File(\u0026quot;D:\\\\data\\\\test1\u0026quot;));\r// copy参数1文件到参数2\rFileUtils.copyFile(new File(\u0026quot;D:\\\\data\\\\test1\\\\b2.txt\u0026quot;), new File(\u0026quot;D:\\\\data\\\\b1.txt\u0026quot;));\r// copy参数1文件到参数2目录下\rFileUtils.copyFileToDirectory(new File(\u0026quot;D:\\\\data\\\\b1.txt\u0026quot;) , new File(\u0026quot;D:\\\\data\\\\test2\u0026quot;)) ;\r//读取文件的每一行\rList\u0026lt;String\u0026gt; stringList = FileUtils.readLines(new File(\u0026quot;D:\\\\data\\\\b1.txt\u0026quot;));\rIOCase：提供字符串操作以及比较的方法 #  FileSystemUtils：提供查看指定目录剩余空间的方法 #   long spaceKb = FileSystemUtils.freeSpaceKb(\u0026quot;D:\\\\data\\\\\u0026quot;);//247018912 kb\rSystem.out.println(spaceKb);\rIOUtils #   Reader reader = new InputStreamReader(new FileInputStream(new File(\u0026quot;D:\\\\data\\\\b1.txt\u0026quot;))) ;\rIOUtils.copy(reader,new FileOutputStream(\u0026quot;D:\\\\data\\\\b3.txt\u0026quot;)) ;\rbyte[] toByteArray = IOUtils.toByteArray(new URL(\u0026quot;https://www.bootcss.com/\u0026quot;));\r"});index.add({'id':14,'href':'/life/docs/javadir/tooldoc/dom4j/','title':"dom4j",'section':"Java公共库文档总结 ",'content':"dom4j #   选取节点\n   nodename 选取当前节点的所有子节点\n  / 从根节点选取\n  // 从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置\n  . 选取当前节点\n  .. 选取当前节点的父节点\n  @ 选取属性\n   实例\n   路径表达式 结果\n  bookstore 选取 bookstore 元素的所有子节点\n  /bookstore 选取根元素 bookstore\n  bookstore/book 选取bookstore 下名字为 book的所有子元素。\n  //book 选取所有 book 子元素，而不管它们在文档中的位置。\n  bookstore//book 选取bookstore 下名字为 book的所有后代元素，而不管它们位于 bookstore 之下的什么位置。\n  //@lang 选取所有名为 lang 的属性。\n   常见的谓语的一些路径表达式\n  /bookstore/book[1] 选取属于 bookstore 子元素的第一个 book 元素。 /bookstore/book[last()] 选取属于 bookstore 子元素的最后一个 book 元素。 /bookstore/book[last()-1] 选取属于 bookstore 子元素的倒数第二个 book 元素。 /bookstore/book[position()\u0026lt;3] 选取最前面的两个属于 bookstore 元素的子元素的 book 元素。 //title[@lang] 选取所有拥有名为 lang 的属性的 title 元素。 //title[@lang=\u0026lsquo;eng\u0026rsquo;] 选取所有 title 元素，要求这些元素拥有值为 eng 的 lang 属性。 /bookstore/book[price\u0026gt;35.00] 选取所有 bookstore 元素的 book 元素，要求book元素的子元素 price 元素的值须大于 35.00。 /bookstore/book[price\u0026gt;35.00]/title 选取所有 bookstore 元素中的 book 元素的 title 元素，要求book元素的子元素 price 元素的值须大于 35.00   选取未知节点\n  通配符 描述   匹配任何元素节点   @* 匹配任何属性节点 node() 匹配任何类型的节点 路径表达式 结果 //book/title | //book/price 选取所有 book 元素的 title 和 price 元素。 //title | //price 选取所有文档中的 title 和 price 元素。 /bookstore/book/title|//price 选取所有属于 bookstore 元素的 book 元素的title 元素，以及文档中所有的 price 元素。  "});index.add({'id':15,'href':'/life/docs/operating_system/linux/git_introduction/','title':"git学习",'section':"linux学习与使用 ",'content':"git学习 #  git 区域概念 #   git分为工作区(我们自己的file)和版本库这其中版本库又包含暂存区(Stage)和分支区(master)    git add ********** 把文件添加到仓库\n  git reset README.md 取消提交到暂存区域\n  git commmit -m \u0026lsquo;xxxx\u0026rsquo; 提交到仓库\n  git diff 查看提交到仓库文件之后文件又被修改的变化\n  git status 查看状态\n  git rm -f gitS.md 强制删除\n  git log 显示从最近到最远的提交日志\n  git log \u0026ndash;pretty=oneline 只显示版本号\n  关于版本回退问题 #    git reset \u0026ndash;hard HEAD^ 版本重置为上一个版本\n  git 关于版本处理进行了设置\n  git reset \u0026ndash;hard HEAD^　重置为上一个版本\n   这里解释下HEAD表示当前版本 如最新提交的版本号:3a451d666e6c952e1588117ef18933be489beb18 zch, 上上一个版本就是HEAD^^ 那么假如是重置为上上一个版本那么命令就是git reset \u0026ndash;hard HEAD^^ 那么假如说有100个版本呢?当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100 如:git reset \u0026ndash;hard HEAD~50 往上５０个版本 当然了如果记得具体版本号当然更好了    git reset \u0026ndash;hard 3a451d666e6c952e1588117ef18933be489beb18 这样就可以了,对了这的版本号其实可以不用写全,因为是linux嘛\n  git reflog 记录一天的命令(当天)\n  a249f45 HEAD@{0}: reset: moving to HEAD^\r545bb20 HEAD@{1}: commit: 2018年 03月 12日 星期一 10:17:56\ra249f45 HEAD@{2}: commit: append GPL\r3a451d6 HEAD@{3}: commit (initial): zch\r 你可以发现这里面包含当天所有操作的版本号(因为回退到某个版本之后那个版本号你再用git log就查找不出来了)   git log可以查看提交历史，以便确定要回退到哪个版本 git reflog查看命令历史，以便确定要回到未来的哪个版本。   (假如在工作区的内容已经做了修改与暂存区之间相比有了变化,并且你想要要丢弃这种变化,那么你可以)   git checkout \u0026ndash; gitS.md 抛弃工作区所做的修改　那么工作区就被修改为与暂存区一样了 git checkout \u0026ndash; file命令中的\u0026ndash;很重要，没有\u0026ndash;，就变成了“切换到另一个分支”的命令   关于删除文件\n  假如说你删除了当前工作区的某一个文件比如gitS.md   如进行了这个操作 rm gitS.md(linux 下) 这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了(git status) 现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令(git rm gitS.md) (git commit -m \u0026lsquo;yes delete file\u0026rsquo;) 另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本 命令(git checkout \u0026ndash; gitS.md)\n 分支(重点) #   git checkout -b dev (创建dev分支，然后切换到dev分支)  git branch dev 创建分支dev\rgit checkout dev 切换到分支dev\r git branch命令查看当前分支   git branch命令会列出所有分支，当前分支前面会标一个*号\n * dev\rmaster\r 可以随便写点内容然后提交 git commit -m \u0026lsquo;branch test\u0026rsquo; 现在，dev分支的工作完成，我们就可以切换回master分支\n  git checkout master 切换到当前分支 (这时查看gitS.md刚刚随便写的内容并没有在file中)   　我们需要与当前分支合并\n  git merge dev (dev与master合并,master表示主分支)   cat gitS.md 就看到我们添加的内容了\n  再次查看当前分支 git branch (可以看到现在的分支已经是主分支了)   dev\r* master\r 删除dev分支(git branch -d dev) 再次查看 git branch (可以看到只是主分支master了)  * master\r分支小结 #  Git鼓励大量使用分支：\r查看分支：git branch\r创建分支：git branch \u0026lt;name\u0026gt;\r切换分支：git checkout \u0026lt;name\u0026gt;\r创建+切换分支：git checkout -b \u0026lt;name\u0026gt;\r合并某分支到当前分支：git merge \u0026lt;name\u0026gt;\r删除分支：git branch -d \u0026lt;name\u0026gt;\r分支冲突 #  当新创建了一个分支,并且修改内容提交之后,而后又转回到主分支并且又做了修改并且也提交之后,在这之后又进行了合并分支\r这里我们把新创建分支并且做修改的内容称为a,把转到主分支并且做修改的内容称为b,当且仅当a与b相同的时候,这时会发生冲突\r(因为这样在工作区的物理映射都一致了,ps因为都是由工作区提交到缓存区的嘛)\r这个时候我们需要手动解决冲突问题,只需要在把工作区的内容重新修改(这里是已经合并之后)当然不能和b一致有一点点区别即可\r然后重新提交就好\r分支管理策略 #  通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。\r如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。\r 新创建一个分支dev (git checkout -b dev)   (git add gitS.md) (git commit -m \u0026lsquo;add merge\u0026rsquo;) 在切换为主分支 (git checkout master)   合并分支 以前的方式(git merge dev),这种方式上面说了会丢失信息,因此不采用此种方式(git merge \u0026ndash;no-ff -m \u0026lsquo;merge with no-ff\u0026rsquo; dev)这样就留下了合并信息   (git log \u0026ndash;graph \u0026ndash;pretty=oneline \u0026ndash;abbrev-commit)合并信息如下:  * c41b6a7 merge with no-ff\r|\\ | * d93a2e5 add merge\r|/ * 8e4aa4c conflict fixed\r分支策略\r在实际开发中，我们应该按照几个基本原则进行分支管理：\r首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；\r那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，\rBug分支 #  软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，\r所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。\r当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交\r并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？\r幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作\r git stash (暂时保存未提交的状态) (git checkout -b issue-101) 说明:却换到此版本之后实际工作区的内容并没有你还没有提交的内容,因此你做出修改  承接上面,关于是否有冲突问题,冲突的原因是你在主分支(master)开发的同时又去修改了项目内容并且和修复bug的分支所做出的修改有相同的地方\r,这时就会产生冲突,在你把bug分支与主分支合并之后并且恰好产生冲突git是会提示的　git会标识出来 这个时侯bug修改的内容已经被添加到了主分支\r因此主分支中关于冲突的部分被git标识了,这个时候我们自己手动修改即可(重复的删除即可,然后在重新提交,检查无误之后删除bug分支)\r  修复完成之后提交 (git add gitS.md) (git commit -m \u0026lsquo;fix bug 101\u0026rsquo;)\n  切换到master分支 (git checkout master)\n  与bug分支合并(git merge \u0026ndash;no-ff -m \u0026ldquo;merged bug fix 101\u0026rdquo; issue-101) 删除issue-101 (git branch -d issue-101)\n  (检查是否有冲突,一般不会有)\n  回到工作的分支上去写代码,这时需要恢复 (git stash pop)||恢复的同时把stash内容也删了\n  注意:可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令git stash apply stash@{0}或者git stash pop stash@{0}\n  (检查是否有冲突 我自己检查是有冲突的, git给我把恢复的那行(原来的)给标识出来了,然后就删除多余的并且也把标识符也删除然后重新提交即可)\n  强行删除某个分支 (假如某个项目中的某个功能不需要了,并且这个功能还没有提交,那么需要强行删除这个分支)(git branch -D feature-xx)(只需把d改为大写即可) #  多人协作 #    要查看远程库的信息(git remote) origin ,远程仓库的默认名称是origin\n  查看详细信息(git remote -v)\n  origin\tgit@github.com:noatnu/docZCH.git (fetch)\rorigin\tgit@github.com:noatnu/docZCH.git (push)\rpsuh 推送地址,fetch抓取地址(当且仅当你有推送权限才会看到push地址)\r推送分支 #   推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上   假如推送本地的主分支 (git push origin master),假如不是主分支,例如要推送的分支是dev,那么 (git push origin dev)  抓取分支 #   多人协作时，大家都会往master和dev分支上推送各自的修改 A小伙伴 git clone git@github.com:noatnu/jkblue.git A小伙伴从远程库clone时，默认情况下，A小伙伴只能看到本地的master分支 现在，A小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支 (git checkout -b dev origin/dev) 相当于把远程仓库与新创建并且已经切换到dev的分支相关联起来 (git checkout -b dev)因为此命令表示创建并且切换,后面origin/dev表示关联起来  标签 #   在Git中打标签非常简单，首先，切换到需要打标签的分支上 (git checkout dev) 打标签 (git tag v1.1) 查看标签 git tag 还可以对具体的版本打标签,比如某某版本号是123456 (git tag v1.2 123456) 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字 (git tag -a v1.2 -m \u0026lsquo;打标签\u0026rsquo; 123456)  提交并推送 #  首先进入需要提交的那个项目\r将此项目下所有的文件添加到git版本管理系统下,假如你需要其它操作添加，直接正则表达式过滤添加\rgit add ./* 提交到 git 本地仓库\rgit commit -m '2020-01-20 下午推送一次'\r推送\rgit push -u origin master\r如果报错请检查一下推送的分支是否正确\rgit branch\r会这样显示\r----\r* dev\rmarster\r---\r表示当前分值在dev分支\r改为 git push -u origin dev\r看到推送的数据,以及没有出现error等就表示成功\r你可以git status查看下\r直接拉取并合并最新代码 #  $ git pull origin master // 拉取远端origin/master分支并合并到当前分支\r$ git pull origin dev // 拉取远端origin/dev分支并合并到当前分支\r$ git push origin master // 将当前分支提交到远端origin/master分支\rpush到GitHub的文件要求小于100M\r"});index.add({'id':16,'href':'/life/docs/operating_system/linux/gitub_config/','title':"git配置",'section':"linux学习与使用 ",'content':"zhou@zhou-Lenovo-Z480:~$ git version\rgit version 2.7.4\rzhou@zhou-Lenovo-Z480:~$ ssh -T git@github.com\rWarning: Permanently added the RSA host key for IP address '192.30.255.112' to the list of known hosts.\rPermission denied (publickey).\rzhou@zhou-Lenovo-Z480:~$ git config --global user.name \u0026quot;zhouchenhua\u0026quot;\rzhou@zhou-Lenovo-Z480:~$ git config --global user.email \u0026quot;noatnu@163.com\u0026quot;\rzhou@zhou-Lenovo-Z480:~$ git config --list\ruser.name=zhouchenhua\ruser.email=noatnu@163.com\rzhou@zhou-Lenovo-Z480:~$ ssh-keygen -C ‘noatnu@163.com’ -t rsa\rGenerating public/private rsa key pair.\rEnter file in which to save the key (/home/zhou/.ssh/id_rsa): america347191\rEnter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in america347191.\rYour public key has been saved in america347191.pub.\rThe key fingerprint is:\rSHA256:7WlMe5QL3eMrdG6b7BB/z66zSpwIOBRM0GTD4hK6BW4 ‘noatnu@163.com’\rThe key's randomart image is:\r+---[RSA 2048]----+\r| .B* |\r|. . ..+o |\r|.o o .. |\r|.Eo .. . . . o |\r|.o . o S + = o |\r|. . = B.*.. |\r| B.Boo .|\r| . o.o+=.|\r| .=O*+|\r+----[SHA256]-----+\rroot@zhou-Lenovo-Z480:/home/zhou# cd ~/.ssh\rroot@zhou-Lenovo-Z480:~/.ssh# ls -a\r. .. id_rsa id_rsa.pub\rroot@zhou-Lenovo-Z480:~/.ssh# gedit id_rsa.pub "});index.add({'id':17,'href':'/life/docs/javadir/tooldoc/guava-common/','title':"Guava 基于java1.6的类库集合的扩展项目",'section':"Java公共库文档总结 ",'content':"Guava 基于java1.6的类库集合的扩展项目 #   com.google.common.annotations：普通注解类型。 com.google.common.base：基本工具类库和接口。 com.google.common.cache：缓存工具包，非常简单易用且功能强大的JVM内缓存。 com.google.common.collect：带泛型的集合接口扩展和实现，以及工具类，这里你会发现很多好玩的集合。 com.google.common.eventbus：发布订阅风格的事件总线。 com.google.common.hash： 哈希工具包。 com.google.common.io：I/O工具包。 com.google.common.math：原始算术类型和超大数的运算工具包。 com.google.common.net：网络工具包。 com.google.common.primitives：八种原始类型和无符号类型的静态工具包。 com.google.common.reflect：反射工具包。 com.google.common.util.concurrent：多线程工具包。\r 常见Object方法   hashCode compare/compareTo 实现一个比较器[Comparator]，或者直接实现Comparable接口有时也伤不起\n public class ProjectInfo implements Serializable,Comparable\u0026lt;ProjectInfo\u0026gt; {\rprivate int id;\rprivate String name;\rpublic int getId() {\rreturn id;\r}\rpublic String getName() {\rreturn name;\r}\rpublic void setId(int id) {\rthis.id = id;\r}\rpublic void setName(String name) {\rthis.name = name;\r}\r@Override\rpublic int compareTo(ProjectInfo o) {\rreturn ComparisonChain.start().compare(this.getName(),o.getName()).compare(this.getId(),o.getId()).result();\r}\r@Override\rpublic int hashCode() {\rreturn Objects.hashCode(getId(),getName());\r}\r}\r 当一个对象中的字段可以为null时，实现Object.equals方法会很痛苦，因为不得不分别对它们进行null检查。 使用Objects.equal帮助你执行null敏感的equals判断，从而避免抛出NullPointerException\n public void testA(){\rSystem.out.println(Objects.equal(\u0026quot;a\u0026quot;,\u0026quot;a\u0026quot;));// --\u0026gt;true\rSystem.out.println(Objects.equal(\u0026quot;a\u0026quot;,\u0026quot;\u0026quot;));// --\u0026gt;false\rSystem.out.println(Objects.equal(\u0026quot;\u0026quot;,\u0026quot;\u0026quot;));// --\u0026gt;true\rSystem.out.println(Objects.equal(\u0026quot;\u0026quot;,\u0026quot;w\u0026quot;));// --\u0026gt;false\rSystem.out.println(Objects.equal(null,null));// --\u0026gt;true\rSystem.out.println(Objects.equal(null,\u0026quot;\u0026quot;));// --\u0026gt;false\r}\r toString 好的toString方法在调试时是无价之宝，但是编写toString方法有时候却很痛苦。使用MoreObjects(低版本还是Objects)\n System.out.println(MoreObjects.toStringHelper(this).add(\u0026quot;x\u0026quot;,2).\radd(\u0026quot;y\u0026quot;,Math.round(Math.random()*10)).toString());\r/*console : ObjectsDemo{x=2, y=9}*/\r Preconditions   前置条件Preconditions提供静态方法来检查方法或构造函数，被调用是否给定适当的参数。它检查的先决条件。其方法失败抛出IllegalArgumentException\n public class PreconditionsDemo {\rpublic static void main(String[] args) {\rtry {\rsum(null,2);\r}catch (IllegalArgumentException e){\rSystem.out.println(e.getMessage());\r}\r}\rprivate static int sum(Integer a,Integer b){\ra = Preconditions.checkNotNull(a,\u0026quot;不能为null\u0026quot;);\rb = Preconditions.checkNotNull(a,\u0026quot;不能为null\u0026quot;);\rreturn a+b;\r}\r/**\r* 直接写检查表达式\r* @param input\r* @return\r*/\rprivate static double sqrt(double input){\rPreconditions.checkArgument(input \u0026gt;= 0.0);\rreturn Math.sqrt(input);\r}\r/**\r* 数组索引检查\r* @param index\r* @return\r*/\rprivate static int getValue(int index){\rint[] data = {Integer.parseInt(Math.round(Math.random())+\u0026quot;\u0026quot;),Integer.parseInt(Math.round(Math.random())+\u0026quot;\u0026quot;)} ;\rindex = Preconditions.checkElementIndex(index,data.length,\u0026quot;\u0026quot;);\rreturn data[index];\r}\r/**\r* 直接写检查表达式\r* @param num\r*/\rprivate static void maxTwo(int num){\rPreconditions.checkState(num\u0026gt;2,\u0026quot;抛出异常\u0026quot;);\r}\r}\r Joiner   Joiner 提供了各种方法来处理字符串加入操作，对象等(Joiner的实例不可变的，因此是线程安全的)\n public static void testA() {\r/*\ron:制定拼接符号，如：test1-test2-test3 中的 “-“ 符号\rskipNulls()：忽略NULL,返回一个新的Joiner实例\ruseForNull(“Hello”)：NULL的地方都用字符串”Hello”来代替\r*/\rJoiner joiner = Joiner.on(\u0026quot;,\u0026quot;);\rStringBuilder builder = new StringBuilder(1024);\r// joiner.skipNulls().appendTo(builder, \u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;, null, \u0026quot;d\u0026quot;);\rjoiner.useForNull(\u0026quot;--HH--\u0026quot;).appendTo(builder, \u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;, null, \u0026quot;d\u0026quot;);\rSystem.out.println(builder.toString());\rMap\u0026lt;String, String\u0026gt; map = new HashMap\u0026lt;\u0026gt;();\rmap.put(\u0026quot;key1\u0026quot;, \u0026quot;value1\u0026quot;);\rmap.put(\u0026quot;key2\u0026quot;, \u0026quot;value2\u0026quot;);\rmap.put(\u0026quot;key3\u0026quot;, \u0026quot;value3\u0026quot;);\rSystem.out.println(Joiner.on(\u0026quot;,\u0026quot;).withKeyValueSeparator(\u0026quot;=\u0026quot;).join(map));\r}\rconsole\ra,b,c,--HH--,d\rkey1=value1,key2=value2,key3=value3\r Splitter 能够将一个字符串按照指定的分隔符拆分成可迭代遍历的字符串集合，Iterable   public static void testA() {\r/*\ron():指定分隔符来分割字符串\rlimit():当分割的子字符串达到了limit个时则停止分割\rfixedLength():根据长度来拆分字符串\rtrimResults():去掉子串中的空格\romitEmptyStrings():去掉空的子串\rwithKeyValueSeparator():要分割的字符串中key和value间的分隔符,分割后的子串中key和value间的分隔符默认是=\r*/\rIterable it = null;\rit = Splitter.on(\u0026quot;,\u0026quot;).limit(3).trimResults().split(\u0026quot;a ,b , c, d\u0026quot;);\rSystem.out.println(Splitter.fixedLength(3).split(\u0026quot;1 2 3\u0026quot;));//[1 2, 3]\rSystem.out.println(Splitter.on(\u0026quot; \u0026quot;).omitEmptyStrings().splitToList(\u0026quot;1 2 3\u0026quot;));\rSystem.out.println(Splitter.on(\u0026quot;,\u0026quot;).omitEmptyStrings().split(\u0026quot;1,,,,2,,,3\u0026quot;));//[1, 2, 3]\rSystem.out.println(Splitter.on(\u0026quot; \u0026quot;).trimResults().split(\u0026quot;1 2 3\u0026quot;)); //[1, 2, 3],默认的连接符是,\rSystem.out.println(Splitter.on(\u0026quot;;\u0026quot;).withKeyValueSeparator(\u0026quot;:\u0026quot;).split(\u0026quot;a:1;b:2;c:3\u0026quot;));//{a=1, b=2, c=3}\r}\r//连接器[Joiner]\r@Test\rpublic void testJoiner() {\r//创建连接器\rJoiner joiner = Joiner.on(\u0026quot;; \u0026quot;).skipNulls();//skipNulls 跳过null\rString join = joiner.join(\u0026quot;Harry\u0026quot;, null, \u0026quot;Ron\u0026quot;, \u0026quot;Hermione\u0026quot;);\rSystem.out.println(join);\r//apache 下的连接器\rString join1 = StringUtils.join(Arrays.asList(\u0026quot;Harry\u0026quot;, \u0026quot;Ron\u0026quot;, \u0026quot;Hermione\u0026quot;), \u0026quot;;\u0026quot;);\rSystem.out.println(join1);\r//useForNull 当连接的字符串有null值那么使用yes代替\rString join2 = Joiner.on(\u0026quot;=\u0026quot;).useForNull(\u0026quot;yes\u0026quot;).join(Arrays.asList(\u0026quot;Harry\u0026quot;, null, \u0026quot;Ron\u0026quot;, \u0026quot;Hermione\u0026quot;));\rSystem.out.println(join2);\r//把连接后的字符串放入StringBuilder里面\rStringBuilder builder = new StringBuilder();\rStringBuilder stringBuilder = Joiner.on(\u0026quot;=\u0026quot;).useForNull(\u0026quot;yes2\u0026quot;).appendTo(builder, \u0026quot;Harry\u0026quot;, \u0026quot;Ron\u0026quot;, null,\u0026quot;Hermione\u0026quot;);\rSystem.out.println(builder.toString());\rSystem.out.println(stringBuilder.toString());\r}\r@Test\rpublic void testSplitter() {\rString text = \u0026quot;the ,quick, , brown , fox, jumps, over, the, lazy, little dog\u0026quot; ;\r// \u0026quot;dsdh\u0026quot;.split() ;\rIterable\u0026lt;String\u0026gt; split = Splitter.on(\u0026quot;,\u0026quot;).trimResults().omitEmptyStrings().limit(4).split(text);\rsplit.spliterator().forEachRemaining(s -\u0026gt; System.out.println(s));\r}\romitEmptyStrings()\t从结果中自动忽略空字符串\rtrimResults()\t移除结果字符串的前导空白和尾部空白\rtrimResults(CharMatcher)\t给定匹配器，移除结果字符串的前导匹配字符和尾部匹配字符\rlimit(int)\t限制拆分出的字符串数量\r Collection 不可变集合   不可变对象有很多优点，包括  public class ImmutableDemo {\rpublic static void main(String[] args) {\rImmutableSet\u0026lt;String\u0026gt; set=ImmutableSet.of(\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;d\u0026quot;);\rImmutableSet\u0026lt;String\u0026gt; set1=ImmutableSet.copyOf(set);\rImmutableSet\u0026lt;String\u0026gt; set2=ImmutableSet.\u0026lt;String\u0026gt;builder().addAll(set).add(\u0026quot;e\u0026quot;).build();\rSystem.out.println(set);\rImmutableList\u0026lt;String\u0026gt; list=set.asList();\r}\r}\r Multiset Multiset可统计一个词在文档中出现了多少次  public class MultiSetDemo {\rpublic static void main(String[] args) {\rMultiset\u0026lt;String\u0026gt; set= LinkedHashMultiset.create();\rset.add(\u0026quot;a\u0026quot;);\rset.add(\u0026quot;a\u0026quot;);\rset.add(\u0026quot;a\u0026quot;);\rset.add(\u0026quot;a\u0026quot;);\rset.setCount(\u0026quot;a\u0026quot;,5); //添加或删除指定元素使其在集合中的数量是count\rSystem.out.println(set.count(\u0026quot;a\u0026quot;)); //给定元素在Multiset中的计数\rSystem.out.println(set);\rSystem.out.println(set.size()); //所有元素计数的总和,包括重复元素\rSystem.out.println(set.elementSet().size()); //所有元素计数的总和,不包括重复元素\rset.clear(); //清空集合\rSystem.out.println(set);\r}\r}\r Multimap可以很容易地把一个键映射到多个值。换句话说，Multimap是把键映射到任意多个值的一般方式。  public class MultiMapDemo {\rpublic static void main(String[] args) {\rMultimap\u0026lt;String, Integer\u0026gt; map = HashMultimap.create(); //Multimap是把键映射到任意多个值的一般方式\rmap.put(\u0026quot;a\u0026quot;, 1); //key相同时不会覆盖原value\rmap.put(\u0026quot;a\u0026quot;, 2);\rmap.put(\u0026quot;a\u0026quot;, 3);\rSystem.out.println(map); //{a=[1, 2, 3]}\rSystem.out.println(map.get(\u0026quot;a\u0026quot;)); //返回的是集合\rSystem.out.println(map.size()); //返回所有”键-单个值映射”的个数,而非不同键的个数\rSystem.out.println(map.keySet().size()); //返回不同key的个数\rMap\u0026lt;String, Collection\u0026lt;Integer\u0026gt;\u0026gt; mapView = map.asMap();\r}\r}\r Table它有两个支持所有类型的键：”行”和”列”。  public class TableDemo {\rpublic static void main(String[] args) {\r//记录学生在某门课上的成绩\rTable\u0026lt;String,String,Integer\u0026gt; table= HashBasedTable.create();\rtable.put(\u0026quot;jack\u0026quot;,\u0026quot;java\u0026quot;,100);\rtable.put(\u0026quot;jack\u0026quot;,\u0026quot;c\u0026quot;,90);\rtable.put(\u0026quot;mike\u0026quot;,\u0026quot;java\u0026quot;,93);\rtable.put(\u0026quot;mike\u0026quot;,\u0026quot;c\u0026quot;,100);\rSet\u0026lt;Table.Cell\u0026lt;String,String,Integer\u0026gt;\u0026gt; cells=table.cellSet();\rfor (Table.Cell\u0026lt;String,String,Integer\u0026gt; cell : cells) {\rSystem.out.println(cell.getRowKey()+\u0026quot; \u0026quot;+cell.getColumnKey()+\u0026quot; \u0026quot;+cell.getValue());\r}\rSystem.out.println(table.row(\u0026quot;jack\u0026quot;));\rSystem.out.println(table);\rSystem.out.println(table.rowKeySet());\rSystem.out.println(table.columnKeySet());\rSystem.out.println(table.values());\r}\r}\r 集合操作：交集、差集、并集  public class CollectionsDemo {\rpublic static void main(String[] args) {\rSet\u0026lt;Integer\u0026gt; set1 = Sets.newHashSet(1, 2, 3, 4, 5);\rSet\u0026lt;Integer\u0026gt; set2 = Sets.newHashSet(3, 4, 5, 6);\rSets.SetView\u0026lt;Integer\u0026gt; inter = Sets.intersection(set1, set2); //交集\rSystem.out.println(inter);\rSets.SetView\u0026lt;Integer\u0026gt; diff = Sets.difference(set1, set2); //差集,在A中不在B中\rSystem.out.println(diff);\rSets.SetView\u0026lt;Integer\u0026gt; union = Sets.union(set1, set2); //并集\rSystem.out.println(union);\r}\r}\r"});index.add({'id':18,'href':'/life/docs/operating_system/linux/host%E6%98%A0%E5%B0%84/','title':"host映射",'section':"linux学习与使用 ",'content':"sudo vi hosts\n127.0.0.1\tlocalhost 127.0.1.1\tzhou-Lenovo-Z480\nThe following lines are desirable for IPv6 capable hosts #  ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters\n#pmcc dev 127.0.0.1 dev.pmcc.com\n"});index.add({'id':19,'href':'/life/docs/javadir/tooldoc/jsoup/','title':"jsoup学习文档",'section':"Java公共库文档总结 ",'content':"jsoup学习文档 #  简介 #   Jsoup是用于解析HTML，就类似XML解析器用于解析XML。 Jsoup它解析HTML成为真实世界的HTML。 它与jquery选择器的语法非常相似，并且非常灵活容易使用以获得所需的结果\n +jsoup api 6个包提供用于开发jsoup应用程序的类和接口。\norg.jsoup\rorg.jsoup.examples\rorg.jsoup.helper\rorg.jsoup.nodes\rorg.jsoup.parser\rorg.jsoup.safety\rorg.jsoup.salect\r引入 #  //大多数情况使用jsoup\rorg.jsoup.nodes.Document document = Jsoup.parse(html);\rDocument doc = Jsoup.parse(new URL(\u0026quot;http://www.funi.com/\u0026quot;),7000);\r//少数情况使用httpUnit\rWebClient webClient = new WebClient() ;\rHtmlPage htmlPage = webClient.getPage(\u0026quot;http://www.89ip.cn/\u0026quot;);\rhtmlPage.asXml()//html\r使用(maven) #  \u0026lt;dependency\u0026gt;\r\u0026lt;!-- jsoup HTML parser library @ http://jsoup.org/ --\u0026gt;\r\u0026lt;groupId\u0026gt;org.jsoup\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;jsoup\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.10.2\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;!-- httpclient --\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.apache.httpcomponents\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;httpclient\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;4.5.6\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;net.sourceforge.htmlunit\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;htmlunit\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;2.26\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r解析一个body片断 #   假如你有一个HTML片断 (比如. 一个 div 包含一对 p 标签; 一个不完整的HTML文档) 想对它进行解析。这个HTML片断可以是用户提交的一条评论或在一个CMS页面中编辑body部分。\n 办法:使用Jsoup.parseBodyFragment(String html) ,Document.body() 方法能够取得文档body元素的所有子元素，与 doc.getElementsByTag(\u0026ldquo;body\u0026rdquo;)相同\nString html = \u0026quot;\u0026lt;div\u0026gt;\u0026lt;p\u0026gt;Lorem ipsum.\u0026lt;/p\u0026gt;\u0026quot;;\rDocument doc = Jsoup.parseBodyFragment(html);\rSystem.out.println(doc.html());//可以看到我们的html片段被包裹了一个body\rElement body = doc.body();\rSystem.out.println(body.html());\r/*\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r*/\r/**\r\u0026lt;div\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r*/\r从一个URL加载一个Document #   你需要从一个网站获取和解析一个HTML文档，并查找其中的相关数据。你可以使用下面解决方法\n 办法:使用 Jsoup.connect(String url)方法\nDocument doc = Jsoup.parse(new URL(\u0026quot;http://www.funi.com/\u0026quot;),6000) ;\rDocument doc2 = Jsoup.connect(\u0026quot;http://www.funi.com/\u0026quot;)\r// .data(\u0026quot;query\u0026quot;, \u0026quot;Java\u0026quot;)\r.userAgent(\u0026quot;Mozilla\u0026quot;)\r.cookie(\u0026quot;auth\u0026quot;, \u0026quot;token\u0026quot;)\r.timeout(3000)\r.get();\r从一个文件加载一个文档 #   在本机硬盘上有一个HTML文件，需要对它进行解析从中抽取数据或进行修改\n 办法:可以使用静态 Jsoup.parse(File in, String charsetName, String baseUri)方法\nFile input = new File(\u0026quot;/tmp/input.html\u0026quot;);\rDocument doc = Jsoup.parse(input, \u0026quot;UTF-8\u0026quot;, \u0026quot;http://example.com/\u0026quot;);\r下面例子都使用成都市房产透明网的网站和国家统计局\n使用DOM方法来遍历一个文档 #   你有一个HTML文档要从中提取数据，并了解这个HTML文档的结构。\n Document doc = null;\rCloseableHttpClient httpClient = HttpClients.createDefault();\rHttpGet httpGet = new HttpGet(\u0026quot;http://www.funi.com/\u0026quot;);\r//使用chrome 头伪装\rhttpGet.setHeader(\u0026quot;User-Agent\u0026quot;, \u0026quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.67 Safari/537.36\u0026quot;);\r//设置基本的配置\rRequestConfig config = RequestConfig.custom()\r.setConnectTimeout(5000) // 设置连接超时时间 5秒钟\r.setSocketTimeout(4000) // 设置读取超时时间4秒钟\r.build();\rhttpGet.setConfig(config);\rCloseableHttpResponse httpResponse = null;\rtry {\rhttpResponse = httpClient.execute(httpGet);\rHttpEntity httpEntity = httpResponse.getEntity();\rif (httpEntity == null){\rreturn;\r}\rString html = EntityUtils.toString(httpEntity, \u0026quot;utf-8\u0026quot;);\rif (StringUtils.isNotEmpty(html)) {\rdoc = Jsoup.parse(html);\r}\r} catch (Exception e) {\rlogger.error(\u0026quot;获取html失败!\u0026quot;, e);\r} finally {\r//关闭处理\rhttpResponse.close();\rhttpClient.close();\r}\rElement body = doc.body();\rElements foot = body.getElementsByClass(\u0026quot;foot\u0026quot;).first().getElementsByClass(\u0026quot;footer clearfix\u0026quot;).first().getElementsByTag(\u0026quot;dl\u0026quot;);\rfor (Element ele : foot) {\rSystem.out.println(ele.html());\rfor (int i = 0; i \u0026lt; 20; i++) {\rSystem.out.print('.');\r}\r}\r使用选择器语法来查找元素 #   你想使用类似于CSS或jQuery的语法来查找和操作元素\n Element #  查看元素\n getElementById(String id) return Element getElementsByTag(String tag) return Elements getElementsByClass(String className) return Elements getElementsByAttribute(String key) return Elements 查找具有命名属性集的元素。不区分大小写 siblingElements() return Elements 获取同级元素。如果元素没有同级元素，则返回空列表。元素不是同级元素本身，所以不会包含在返回的列表中(列表) firstElementSibling() return Element 获取此元素的第一个同级元素 lastElementSibling() return Element 获取此元素的最后一个同级元素 previousElementSibling() return Element 获取此元素的上一个同级元素 nextElementSibling() return Element 获取此元素的下一个同级元素 parents() return Elements 获取此元素的父级和父级，直到文档根 parent() return Element 获取此元素的父级 children() return Elements 获取此元素的子元素 child(int index) return Element 获取此元素的子元素，方法是使用其基于0的索引号 attributes() 获取元素的所有属性 return Attributes  元素数据\n attr(String key)获取属性attr(String key, String value)设置属性 attributes()获取所有属性 id(), className() and classNames() text()获取文本内容text(String value) 设置文本内容 html()获取元素内HTMLhtml(String value)设置元素内的HTML内容 outerHtml()获取元素外HTML内容 data()获取数据内容（例如：script和style标签) tag() and tagName()  操作HTML和文本\n append(String html), prepend(String html) appendText(String text), prependText(String text) appendElement(String tagName), prependElement(String tagName) html(String value)  选择器语法来查找元素 #   tagname: 通过标签查找元素，比如：a #id: 通过ID查找元素，比如：#logo .class: 通过class名称查找元素，比如：.masthead  Document doc = null;\rCloseableHttpClient httpClient = HttpClients.createDefault();\rHttpGet httpGet = new HttpGet(\u0026quot;http://www.stats.gov.cn/\u0026quot;);\r//使用chrome 头伪装\rhttpGet.setHeader(\u0026quot;User-Agent\u0026quot;, \u0026quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.67 Safari/537.36\u0026quot;);\r//设置基本的配置\rRequestConfig config = RequestConfig.custom()\r.setConnectTimeout(5000) // 设置连接超时时间 5秒钟\r.setSocketTimeout(4000) // 设置读取超时时间4秒钟\r.build();\rhttpGet.setConfig(config);\rCloseableHttpResponse httpResponse = null;\rtry {\rhttpResponse = httpClient.execute(httpGet);\rHttpEntity httpEntity = httpResponse.getEntity();\rString html = EntityUtils.toString(httpEntity, \u0026quot;utf-8\u0026quot;);\rif (StringUtils.isNotEmpty(html)) {\rdoc = Jsoup.parse(html);\r}\r} catch (Exception e) {\rlogger.error(\u0026quot;获取html失败!\u0026quot;, e);\r} finally {\r// 关闭处理\rhttpResponse.close();\rhttpClient.close();\r}\rElement body = doc.body();\r// Elements selects = body.select(\u0026quot;.top .top03 #nav ul li\u0026quot;);//和下面的一样\rElements selects = body.getElementsByClass(\u0026quot;top\u0026quot;).first().getElementsByClass(\u0026quot;top03\u0026quot;).first().getElementById(\u0026quot;nav\u0026quot;).getElementsByTag(\u0026quot;ul\u0026quot;).first().getElementsByTag(\u0026quot;li\u0026quot;);\rfor (Element ele : selects) {\rSystem.out.println(ele);\r}\r主要运用了上面三种选择方式\r 【attribute】: 利用属性查找元素，比如：【href】 【^attr】: 利用属性名前缀来查找元素，比如：可以用【^data-】 来查找带有HTML5 Dataset属性的元素 【attr=value】: 利用属性值来查找元素，比如：【width=500】 【attr^=value】, 【attr$=value】, 【attr*=value】: 利用匹配属性值开头、结尾或包含属性值来查找元素，比如：【href*=/path/】 【attr~=regex】: 利用属性值匹配正则表达式来查找元素，比如： img【src~=(?i).(png|jpe?g)】 *: 这个符号将匹配所有元素  Element body = doc.body();\rElements selects = body.select(\u0026quot;.top a[href]\u0026quot;);//获取拥有href属性的所有元素\r\u0026lt;a href=\u0026quot;/was5/web/search?channelid=288041\u0026amp;amp;andsen=%E6%80%BB%E4%BA%BA%E5%8F%A3\u0026quot; target=\u0026quot;_blank\u0026quot;\u0026gt;总人口\u0026lt;/a\u0026gt;\r\u0026lt;a href=\u0026quot;/was5/web/search?channelid=288041\u0026amp;amp;andsen=%E7%A4%BE%E4%BC%9A%E6%B6%88%E8%B4%B9%E5%93%81%E9%9B%B6%E5%94%AE%E6%80%BB%E9%A2%9D\u0026quot; target=\u0026quot;_blank\u0026quot;\u0026gt;社会消费品零售总额\u0026lt;/a\u0026gt;\r\u0026lt;a href=\u0026quot;./zjtj/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;./images/top03_1.png\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;./zjtj/gjtjj/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;国家统计局\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;http://jcj.ndrc.gov.cn/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;派驻纪检组\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;./zjtj/jgzn/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;机构职能\u0026lt;/a\u0026gt;\rElements selects = body.select(\u0026quot;.top a[name=PL_MENU_NAME]\u0026quot;);//获取name=PL_MENU_NAME的所有这类元素\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;./zjtj/gjtjj/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;国家统计局\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;http://jcj.ndrc.gov.cn/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;派驻纪检组\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;./zjtj/jgzn/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;机构职能\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;./tjsj/zxfb/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;最新发布\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;http://data.stats.gov.cn/\u0026quot; target=\u0026quot;_blank\u0026quot;\u0026gt;数据查询\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;./tjsj/sjjd/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;数据解读\u0026lt;/a\u0026gt;\r\u0026lt;a name=\u0026quot;PL_MENU_NAME\u0026quot; href=\u0026quot;./tjgz/tjdt/\u0026quot; target=\u0026quot;_top\u0026quot;\u0026gt;统计动态\u0026lt;/a\u0026gt;\rElements selects = body.select(\u0026quot;.top a[name^=PL]\u0026quot;);//以PL开头\rElements selects = body.select(\u0026quot;.top div[^cl]\u0026quot;); //获取div 为tag class等属性的元素\r 伪选择器selectors :lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小于三列的元素 :gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素 :eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素 :has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素  Elements selects = body.select(\u0026quot;.center div:eq(0) ul li:lt(3)\u0026quot;); //eq(0)选取第一个,lt(3)表示小于三列的元素\r  Selector选择器组合使用\n  el#id: 元素+ID，比如： div#logo\n  el.class: 元素+class，比如： div.masthead\n  el[attr]: 元素+class，比如： a[href]\n  任意组合，比如：a[href].highlight\n  ancestor child: 查找某个元素下子元素，比如：可以用.body p 查找在\u0026quot;body\u0026quot;元素下的所有 p元素\n  parent \u0026gt; child: 查找某个父元素下的直接子元素，比如：可以用div.content \u0026gt; p 查找 p 元素，也可以用body \u0026gt; * 查找body标签下所有直接子元素\n  siblingA + siblingB: 查找在A元素之前第一个同级元素B，比如：div.head + div\n  siblingA ~ siblingX: 查找A元素之前的同级X元素，比如：h1 ~ p\n  el, el, el:多个选择器组合，查找匹配任一选择器的唯一元素，例如：div.masthead, div.logo\n  伪选择器selectors\n  :lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小于三列的元素\n  :gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素\n  :eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素\n  :has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素\n  :not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class=\u0026ldquo;logo\u0026rdquo; 元素的所有 div 列表\n  :contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)\n  :containsOwn(text): 查找直接包含给定文本的元素\n  :matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)\n  :matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素\n  注意：上述伪选择器索引是从0开始的，也就是说第一个元素索引值为0，第二个元素index为1等\n  "});index.add({'id':20,'href':'/life/docs/operating_system/linux/linux%E4%B8%8B%E8%AE%BE%E7%BD%AE%E5%92%8C%E6%9F%A5%E7%9C%8B%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/','title':"Linux下设置和查看环境变量",'section':"linux学习与使用 ",'content':"Linux的变量种类 按变量的生存周期来划分，Linux变量可分为两类： 1 永久的：需要修改配置文件，变量永久生效。 2 临时的：使用export命令声明即可，变量在关闭shell时失效。\n设置变量的三种方法 1 在/etc/profile文件中添加变量【对所有用户生效(永久的)】 用VI在文件/etc/profile文件中增加变量，该变量将会对Linux下所有用户有效，并且是“永久的”。 例如：编辑/etc/profile文件，添加CLASSPATH变量\nvi /etc/profile #  export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib\n注：修改文件后要想马上生效还要运行# source /etc/profile不然只能在下次重进此用户时生效。\n2 在用户目录下的.bash_profile文件中增加变量【对单一用户生效(永久的)】 用VI在用户目录下的.bash_profile文件中增加变量，改变量仅会对当前用户有效，并且是“永久的”。 例如：编辑guok用户目录(/home/guok)下的.bash_profile $ vi /home/guok/.bash.profile 添加如下内容： export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib 注：修改文件后要想马上生效还要运行$ source /home/guok/.bash_profile不然只能在下次重进此用户时生效。\n3 直接运行export命令定义变量【只对当前shell(BASH)有效(临时的)】 在shell的命令行下直接使用[export 变量名=变量值] 定义变量，\n该变量只在当前的shell(BASH)或其子shell(BASH)下是有效的，\nshell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。\n环境变量的查看 1 使用echo命令查看单个环境变量。例如： echo $PATH 2 使用env查看所有环境变量。例如： env 3 使用set查看所有本地定义的环境变量。\n使用unset删除指定的环境变量 set可以设置某个环境变量的值。清除环境变量的值用unset命令。如果未指定值，则该变量值将被设为NULL。示例如下： $ export TEST=\u0026ldquo;Test\u0026hellip;\u0026rdquo; #增加一个环境变量TEST $ env|grep TEST #此命令有输入，证明环境变量TEST已经存在了 TEST=Test\u0026hellip; unset TEST #删除环境变量TEST $ env|grep TEST #此命令没有输出，证明环境变量TEST已经删除\n常用的环境变量 PATH 决定了shell将到哪些目录中寻找命令或程序 HOME 当前用户主目录 HISTSIZE　历史记录数 LOGNAME 当前用户的登录名 HOSTNAME　指主机的名称 SHELL 当前用户Shell类型 LANGUGE 语言相关的环境变量，多语言可以修改此环境变量 MAIL　当前用户的邮件存放目录 PS1　基本提示符，对于root用户是#，对于普通用户是$\n"});index.add({'id':21,'href':'/life/docs/operating_system/linux/linux%E5%91%BD%E4%BB%A4/','title':"linux命令",'section':"linux学习与使用 ",'content':"linux命令 #  文件管理 #  文件基本操作 #    less命令 (Q退出less命令)([pagedown]： 向下翻动一页)([pageup]： 向上翻动一页) less ss.md\n  cat命令 (cat -n ss.md \u0026gt; sdfsd.txt)把 ss.md 的文档内容加上行号后输入 sdfsd.txt 这个文档里, 这要注意假如sdfsd.txt先有文档会被清空,另外(cat ss.md)可以把消息打印到输出流中,cat 软盘功能暂时不予以考虑\n  ls命令 (ls -a)显示所有文件及目录包括隐藏文件,相当于la命令,ll显示具体信息\n  touch命令 主要用作创建文件如touch ss.md,(touch -m miss,touch -a miss)可以改变文件的读取时间,另外touch miss也可以改变文件的读取时间, 当且仅当miss不存在的时候会创建miss空文件\n  mkdir命令 主要用作创建文件目录;(mkdir dd)创建一个dd目录,(mkdir -p dd/ffg)在当前目录下建立一个dd目录并且在dd下创建一个ffg目录,假如dd不存在会自动创建的\n  mv命令 (mv missA miss.txt)把missA修改为miss.txt (mv sskg /home/zhou/fontconfig/dgsd/sdfg)把sskg移到sdfg目录 (mv ss.md ~)\n  file命令 (file -c ss.md)详细显示指令执行过程(file -v ss.md)显示版本信息 (tar zcvf ss.tar ss.md,file -z ss.tar)尝试去解读压缩文件的内容\n  find命令 (find . -type f)将目前目录其其下子目录中所有一般文件列出(find . -ctime -20)将目前目录及其子目录下所有最近 20 天内更新过的文件列出 (find /home/zhou/fontconfig -name \u0026lsquo;**.md\u0026rsquo;)任意的以md结尾的文件,-name改为-iname会忽略大小写(find /home/zhou/fontconfig -size 0)所有文件长度为0的普通文件\n  split命令 ( split -2 sdfsd.txt) 每隔２行分割成一个文件\u0026ndash;\u0026gt; 分割后:xaa xab xac xad xae xaf xag\n  pwd命令 (pwd)pwd命令用于显示工作目录\n  rm命令 删除操作 (rm xaa)删除单一文件xaa文本文件,这里也是可以用正则的如rm x** ,(rm -r dgsd)递归删除文件目录dgsd下的所有文件包括其本身; (rm -rf baba)加了一个f此命令表示即使原档案属性设为唯读，亦直接删除，无需逐一确认\n  cp命令 复制或者说是拷贝命令 (cp ss.md s1)注意是在同级目录下 (cp /home/zhou/fontconfig/s1/ss.md ~),将ss.md复制到主home下,这的~可以随便换为其它目录 (cp -a s1 /home/zhou/fontconfig/s2,cp -a s1 s2)当cp的是目录时要加上-a参数,当然如果加上-p就更好了,因为-p表示把file拥有的权限也一起复制 如:(cp -ap s1 /home/zhou/fontconfig/s2),(cp -ap ./* /home/zhou/fontconfig/s3)在某个目录把所有内容都复制到s3下\n  chmod 权限命令 Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。\n  u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。 r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行\n  (chmod ugo+r miss.txt)将文件miss.txt 设为所有人皆可读取;(chmod u+x ex1.py)将 ex1.py 设定为只有该文件拥有者可以执行;(chmod 777 file)chmod也可以用数字来表示权限如\n  文本操作 #   假如是ubuntu则可以直接使用gedit (sudo apt-get install gedit) vi命令 切换模式(i：光标处开始插入,l：光标所在行首开始插入,a：光标所在行尾开始插入,o：光标下插入新行) 进入编辑模式,当编辑完成时,在按Esc按键退出编辑模式,保存并退出：wq, 不保存退出： q！  备份与压缩 #   zip (zip -r cc.zip s*)-r递归处理，将指定目录下的所有文件和子目录一并处理 (zip -rP 123456 miss.zip miss.txt)-P加密压缩密码123456 解压 unzip miss.zip zip文件乱码问题 unzip -O cp936 xxx.zip tar (tar zcvf ss.tar.gz miss.txt)压缩 (tar zxvf ss.tar.gz)解压 rar (rar x xxx.rar)解压  系统操作 #   (shutdown -h now)立即关机 (shutdown +5 \u0026ldquo;system 5mine\u0026rdquo;)指定5分钟后关机 (export -p)列出所有的环境变量 uname -sr 内核版本查看 ubuntu (root密码修改 sudo passwd 输入两次就是root密码)  "});index.add({'id':22,'href':'/life/docs/operating_system/linux/nginx/','title':"nginx学习",'section':"linux学习与使用 ",'content':"nginx学习 #  基础操作 #   start ./sbin/nginx stop ./sbin/nginx -s stop quite ./sbin/nginx -s quit   启动成功标志\n Welcome to nginx!\r 默认监听的端口是80 也就是说访问此端口就可以得到启动成功的标识符号\n  简单的负载均衡配置    http 模块中配置  #配置开始 author zhou\rupstream myproject{\rserver 127.0.0.1:8000 weight=3;\rserver 127.0.0.1:8080 weight=10;\rserver 127.0.0.1:8090;\r}\r#配置结束 author zhou\r location模块配置  proxy_pass http://myproject;\r注意:这的myproject要和上面的name一致\r测试结果 (这的测试用到了session的唯一性)\n http://localhost/nginx_test/ sessionId=8D9C4ACEE65EB24301B1C0D9E4CF3A6E\rhttp://localhost:8080/nginx_test/ sessionId=8D9C4ACEE65EB24301B1C0D9E4CF3A6E\rhttp://localhost:8090/nginx_test/ sessionId=7539B2C4AFD433ECEFAC8F2B2EBCC411\r 由于配置了权重 因此大部分是8080端口\n参数解释 #    1）down\n表示单前的server暂时不参与负载\n  2）Weight\n默认为1.weight越大，负载的权重就越大。\n  3）max_fails\n允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误\n  4）fail_timeout\nmax_fails 次失败后，暂停的时间。\n  5）Backup\n其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。\n  service nginx start\rservice nginx stop\rnginx\r"});index.add({'id':23,'href':'/life/docs/operating_system/linux/notepad++%E5%AE%89%E8%A3%85/','title':"Notepad++ 学习与使用",'section':"linux学习与使用 ",'content':"Notepad++是一套非常有特色的自由软件的纯文字编辑器(许可证:GPL)。有完整的中文化接口及支持多国语言编写的功能(UTF8 技术)。 它的功能比 Windows 中的 Notepad(记事本)强大，除了可以用来制作一般的纯文字说明文件，也十分适合当作编写电脑程序的编辑器。 Notepad++ 不仅有语法高亮度显示，也有语法折叠功能，并且支持宏以及扩充基本功能的外挂模组。但是可惜的是Notepad++只能在Windows平台下使用。 工作中必须使用Windows时，Notepad++是众多程序员最喜爱的文本编辑器，在Ubuntu下是否能够使用到相同的软件呢？Notepadqq就是这样一款与Notepad++非常接近的编辑器，拥有几乎相同的功能。 如果您是一个Notepad++粉丝，我们推荐您尝试下Notepadqq。\n对于Ubuntu发行版本可以通过PPA安装，命令如下： sudo add-apt-repository ppa:notepadqq-team/notepadqq sudo apt-get update sudo apt-get install notepadqq 类似的，卸载命令如下：\nsudo apt-get remove notepadqq sudo add-apt-repository \u0026ndash;remove ppa:notepadqq-team/notepadqq\n"});index.add({'id':24,'href':'/life/docs/javadir/middleware/redis/','title':"Redis 学习与使用",'section':"中间件 ",'content':"一.Redis介绍 #  1.1引言 #   1:由于用户量大，请求了随之增大，数据压力过大。 2:多台服务器之间数据不同步 3:多台服务器之间的锁已经不存在互斥性了\n #  1.2 NOSQL #   redis就是nosql\n  非关系数据库 \u0026gt; not only sql\n 1:key-value redis 2:文档型 solr,Mongodb,ElasticSearch 3:面向列 Hbase(一般大数据) 4:图形化 Neo4j\n  1.3 redis介绍 #   Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 Redis是一款基于Key-Value的NOSQL，而且Redis是基于内存存储数据的,Redis还提供了多种持久化机制，Redis还提供了主从、哨兵以及集群的搭建方式，可以更方便的横向扩展以及垂直扩展\n  操作都是原子的\n 所有 Redis 的操作都是原子的，从而确保当两个客户同时访问 Redis 服务器时，得到的是更新后的值（最新值）。在需要高并发的场合可以考虑使用 Redis 的事务，处理一些需要锁的业务。\n  二.Redis安装 #  redis 注册服务 #  C:\\Users\\noatn\u0026gt;e:\rE:\\\u0026gt;cd E:\\CS\\Redis-x64-3.2.100\rE:\\CS\\Redis-x64-3.2.100\u0026gt;redis-server.exe service-install redis.windows.conf\r[18580] 27 Apr 09:09:52.679 # Fatal error, can't open config file 'service-install'\rE:\\CS\\Redis-x64-3.2.100\u0026gt;redis-server.exe --service-install redis.windows.conf\r[6244] 27 Apr 09:10:07.336 # Granting read/write access to 'NT AUTHORITY\\NetworkService' on: \u0026quot;E:\\CS\\Redis-x64-3.2.100\u0026quot; \u0026quot;E:\\CS\\Redis-x64-3.2.100\\\u0026quot;\r[6244] 27 Apr 09:10:07.337 # Redis successfully installed as a service.\rE:\\CS\\Redis-x64-3.2.100\u0026gt;\r三.Redis命令 #   keys * 获取所有的key\rclear 清除屏幕\rquit ,exit 退出\rset name blake 设置值\rsetex ip 5 192.1.1.168 设置值并且设置过期时长\rget name 取出值\rdel name 删除key所对应的值\rexists key 判断是否存在key\rmset key1,key2...设置多个值\rmget key1,key2...取出多个值\rappend age 1 追加key的value\rstrlen key 获取某个key的value的长度\rselect index 选择数据库 (注意redis一共16个数据库 并且从0开始)\rmove key db或者 move key index (redis一共16个数据库 move age 7) 将某个key移动到某个数据库中\rflushdb 清除当前数据库\rflushall 清除16个数据库\rtype key 获取数据类型 (type name == \u0026gt; string)\r3.1 redis存储数据结构 #   字符串列表 key-string 无序不重复的字符串集合 key-set 有序不重复的字符串集合 key-list 键、值都为字符串的哈希表 key-hash 有序集合 key-zset  3.2存储结构用处 #   key-string :最常用的，一般用于存储一个值 key-hash:存储一个对象数据的 key-list:使用list结构实现栈和队列结构 key-set: 交集、差集、并集操作 key-zset : 排行榜,积分存储  回到上一级 #  "});index.add({'id':25,'href':'/life/docs/javadir/tooldoc/spring%E5%B7%A5%E5%85%B7/','title':"spring工具类",'section':"Java公共库文档总结 ",'content':"spring工具类 #   Spring-core中提供了大量的工具类，常用的有StringUtils、ObjectUtils、NumberUtils、Base64Utils等，Spring工具类在spring-core.jar中的org.springframework.util包下。\n  1:StringUtils  方法名\t返回值类型\t作用\t备注\risEmpty(Object str)\tboolean\t判断字符串是否为Null或者空字符串\tnull和''都为true\rhasLength(CharSequence str)\tboolean\t判断字符串长度是否大于1\tnull和''都为false\rhasText(CharSequence str)\tboolean\t判断字符串中是否有字符\tnull和空字白符都为false\rcontainsWhitespace(CharSequence str)\tboolean\t字符串中是否含有空白字符\ttrimWhitespace(CharSequence str)\tString\t去掉字符串中首尾的空白字符\ttrimAllWhitespace(String str)\tString\t去 掉字符串中所有的空白字符\ttrimLeadingWhitespace(String str)\tString\t去掉字符串左边的空白字符\ttrimTrailingWhitespace(String str)\tString\t去掉字符串右边边的空白字符\tstartsWithIgnoreCase(String str, String prefix)\tString\t判断字符串是否以xx开头，并且忽略大小写\tgetFilename(String path)\tString\t获取文件名\t“mypath/myfile.txt” -\u0026gt; “myfile.txt”\rgetFilenameExtension(String path)\tString\t获取文件扩展名\t“mypath/myfile.txt” -\u0026gt; “txt”\rstripFilenameExtension(String path)\tString\t去掉文件扩展名\t“mypath/myfile.txt” -\u0026gt; “mypath/myfile”\rreplace(String inString, String oldPattern, String newPattern)\tString\t替换字符串\tdelete(String inString, String pattern)\tString\t从给定的字符串中删除所有匹配的字符\tdeleteAny(String inString, String charsToDelete)\tString\t删除所有指定字符\t“az\\n” will delete ‘a’s, ‘z’s and new lines\rSystem.out.println(org.springframework.util.StringUtils.containsWhitespace(\u0026quot;sfas\u0026quot;));//是否有空白 false\rSystem.out.println(org.springframework.util.StringUtils.trimWhitespace(\u0026quot; - dfasd- \u0026quot;));//去除前后空格\rSystem.out.println(org.springframework.util.StringUtils.trimAllWhitespace(\u0026quot; - - - - fshjk s j - -\u0026quot;));//去除所有空格\rSystem.out.println(org.springframework.util.StringUtils.trimLeadingWhitespace(\u0026quot; - - - - fshjk s j - - \u0026quot;));//去除第字符串开头的空格\rSystem.out.println(org.springframework.util.StringUtils.trimTrailingWhitespace(\u0026quot; - - - - fshjk s j - - \u0026quot;));//去除第字符串结尾的空格\rSystem.out.println(org.springframework.util.StringUtils.substringMatch(\u0026quot;f sdfc\u0026quot;,2,\u0026quot;sd\u0026quot;));//判断字符串第几个位置起为某值\rSystem.out.println(org.springframework.util.StringUtils.countOccurrencesOf(\u0026quot;qwertyrtttttt\u0026quot;, \u0026quot;t\u0026quot;));//判断字符串字符重复次数\rSystem.out.println(org.springframework.util.StringUtils.replace(\u0026quot;yuiyuiyui\u0026quot;, \u0026quot;y\u0026quot;, \u0026quot;m\u0026quot;));//字符替换\rSystem.out.println(org.springframework.util.StringUtils.delete(\u0026quot;yuiyuiyui\u0026quot;, \u0026quot;y\u0026quot;));//删除匹配的字符\rSystem.out.println(org.springframework.util.StringUtils.deleteAny(\u0026quot;yuiyuiyui\u0026quot;, \u0026quot;yi\u0026quot;));//删除出现且匹配的字符\rSystem.out.println(org.springframework.util.StringUtils.quote(\u0026quot;yuiyuiyui\u0026quot;));//为字符串加上''号\rSystem.out.println(org.springframework.util.StringUtils.unqualify(\u0026quot;yuiyuiy.ui\u0026quot;));//字符串截取，，从'.'号+1的未知开始\rSystem.out.println(org.springframework.util.StringUtils.unqualify(\u0026quot;yuiyuiy.ui\u0026quot;,'y'));//字符串截取，，从字符最后出现的位置+1开始\rSystem.out.println(org.springframework.util.StringUtils.capitalize(\u0026quot;yuiyuiy\u0026quot;));//首字母大写\rSystem.out.println(org.springframework.util.StringUtils.uncapitalize(\u0026quot;YuIyuiy\u0026quot;));//首字母小写\rSystem.out.println(org.springframework.util.StringUtils.uncapitalize(\u0026quot;YuIyuiy\u0026quot;));//首字母小写 changeFirstCharacterCase(String str, boolean capitalize),capitalize为true则为大写\rSystem.out.println(org.springframework.util.StringUtils.getFilename(\u0026quot;D://Java\u0026quot;));//截取最后一个\\出现的未知+1的字符串 Java\rSystem.out.println(org.springframework.util.StringUtils.getFilenameExtension(\u0026quot;D:/Java.fdsdf\u0026quot;));//获取路劲下的后缀名 fdsdf\rSystem.out.println(org.springframework.util.StringUtils.stripFilenameExtension(\u0026quot;D:/Java.fdsdf\u0026quot;));//获取路劲下的后缀名之前的部分 D:/Java\r 2:ObjectUtils  isEmpty(Object obj)\tboolean\t判断对象是否为空\t对象为null或者数组Map为空等都为true\risEmpty(Object[] array)\tboolean\t判断数组是否为空\tisArray(Object obj)\tboolean\t判断对象是否为数组\tcontainsElement(Object[] array, Object element)\tboolean\t判断数据组中是否包含给定的元素\taddObjectToArray(A[] array, O obj)\r 3:NumberUtils  convertNumberToTargetClass(Number number, Class targetClass)\t\u0026lt;T extends Number\u0026gt; T\t将Number转为指定的类型\rparseNumber(String text, Class targetClass)\t\u0026lt;T extends Number\u0026gt; T\t将字符串转为数值类型\rparseNumber(String text, Class targetClass, NumberFormat numberFormat)\t\u0026lt;T extends Number\u0026gt; T\t将字符串转为数值类型\r 4:Base64Utils  encode(byte[] src)\tbyte[]\t编码\rdecode(byte[] src)\tbyte[]\t解码\r"});index.add({'id':26,'href':'/life/docs/javadir/tooldoc/spring%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/','title':"spring常用的工具类",'section':"Java公共库文档总结 ",'content':"spring常用的工具类 #  内置的resouce类型 #  UrlResource\rClassPathResource\rFileSystemResource\rServletContextResource\rInputStreamResource\rByteArrayResource\rEncodedResource 也就是Resource加上encoding, 可以认为是有编码的资源\rVfsResource(在jboss里经常用到, 相应还有 工具类 VfsUtils)\rorg.springframework.util.xml.ResourceUtils 用于处理表达资源字符串前缀描述资源的工具. 如: \u0026amp;quot;classpath:\u0026amp;quot;. 有 getURL, getFile, isFileURL, isJarURL, extractJarFileURL 工具类 #  org.springframework.core.annotation.AnnotationUtils 处理注解\rorg.springframework.core.io.support.PathMatchingResourcePatternResolver 用 于处理 ant 匹配风格(com/*.jsp, com/**/*.jsp),找出所有的资源, 结合上面的resource的概念一起使用,对于遍历文件很有用. 具体请详细查看javadoc\rorg.springframework.core.io.support.PropertiesLoaderUtils 加载Properties资源工具类,和Resource结合\rorg.springframework.core.BridgeMethodResolver 桥接方法分析器. 关于桥接方法请参考: http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.12.4.5\rorg.springframework.core.GenericTypeResolver 范型分析器, 在用于对范型方法, 参数分析.\rorg.springframework.core.NestedExceptionUtils\rxml工具 #  org.springframework.util.xml.AbstractStaxContentHandler\rorg.springframework.util.xml.AbstractStaxXMLReader\rorg.springframework.util.xml.AbstractXMLReader\rorg.springframework.util.xml.AbstractXMLStreamReader\rorg.springframework.util.xml.DomUtils\rorg.springframework.util.xml.SimpleNamespaceContext\rorg.springframework.util.xml.SimpleSaxErrorHandler\rorg.springframework.util.xml.SimpleTransformErrorListener\rorg.springframework.util.xml.StaxUtils\rorg.springframework.util.xml.TransformerUtils\r其它工具集 #  org.springframework.util.xml.AntPathMatcherant风格的处理\rorg.springframework.util.xml.AntPathStringMatcher\rorg.springframework.util.xml.Assert断言,在我们的参数判断时应该经常用\rorg.springframework.util.xml.CachingMapDecorator\rorg.springframework.util.xml.ClassUtils用于Class的处理\rorg.springframework.util.xml.CollectionUtils用于处理集合的工具\rorg.springframework.util.xml.CommonsLogWriter\rorg.springframework.util.xml.CompositeIterator\rorg.springframework.util.xml.ConcurrencyThrottleSupport\rorg.springframework.util.xml.CustomizableThreadCreator\rorg.springframework.util.xml.DefaultPropertiesPersister\rorg.springframework.util.xml.DigestUtils摘要处理, 这里有用于md5处理信息的\rorg.springframework.util.xml.FileCopyUtils文件的拷贝处理, 结合Resource的概念一起来处理, 真的是很方便\rorg.springframework.util.xml.FileSystemUtils\rorg.springframework.util.xml.LinkedCaseInsensitiveMap\rkey值不区分大小写的LinkedMap\rorg.springframework.util.xml.LinkedMultiValueMap一个key可以存放多个值的LinkedMap\rorg.springframework.util.xml.Log4jConfigurer一个log4j的启动加载指定配制文件的工具类\rorg.springframework.util.xml.NumberUtils处理数字的工具类, 有parseNumber 可以把字符串处理成我们指定的数字格式, 还支持format格式, convertNumberToTargetClass 可以实现Number类型的转化. org.springframework.util.xml.ObjectUtils有很多处理null object的方法. 如nullSafeHashCode, nullSafeEquals, isArray, containsElement, addObjectToArray, 等有用的方法\rorg.springframework.util.xml.PatternMatchUtilsspring里用于处理简单的匹配. 如 Spring's typical \u0026amp;quot;xxx*\u0026amp;quot;, \u0026amp;quot;*xxx\u0026amp;quot; and \u0026amp;quot;*xxx*\u0026amp;quot; pattern styles\rorg.springframework.util.xml.PropertyPlaceholderHelper用于处理占位符的替换\rorg.springframework.util.xml.ReflectionUtils反映常用工具方法. 有 findField, setField, getField, findMethod, invokeMethod等有用的方法\rorg.springframework.util.xml.SerializationUtils用于java的序列化与反序列化. serialize与deserialize方法\rorg.springframework.util.xml.StopWatch一个很好的用于记录执行时间的工具类, 且可以用于任务分阶段的测试时间. 最后支持一个很好看的打印格式. 这个类应该经常用\rorg.springframework.util.xml.StringUtils\rorg.springframework.util.xml.SystemPropertyUtils\rorg.springframework.util.xml.TypeUtils用于类型相容的判断. isAssignable\rorg.springframework.util.xml.WeakReferenceMonitor弱引用的监控 和web相关的工具 #  org.springframework.web.util.CookieGenerator\rorg.springframework.web.util.HtmlCharacterEntityDecoder\rorg.springframework.web.util.HtmlCharacterEntityReferences\rorg.springframework.web.util.HtmlUtils\rorg.springframework.web.util.HttpUrlTemplate\r这个类用于用字符串模板构建url, 它会自动处理url里的汉字及其它相关的编码. 在读取别人提供的url资源时, 应该经常用 String url = \u0026amp;quot;http://localhost/myapp/{name}/{id}\u0026amp;quot;\rorg.springframework.web.util.JavaScriptUtils\rorg.springframework.web.util.Log4jConfigListener\r用listener的方式来配制log4j在web环境下的初始化\rorg.springframework.web.util.UriTemplate\rorg.springframework.web.util.UriUtils处理uri里特殊字符的编码\rorg.springframework.web.util.WebUtils\rorg.springframework.web.util.\r"});index.add({'id':27,'href':'/life/docs/operating_system/linux/ubuntu16.04%E4%BF%AE%E6%94%B9hosts/','title':"Ubuntu 16.04修改hosts",'section':"linux学习与使用 ",'content':"IntelliJ IDE运行Tomcat报错解决办法的相关资料,出现“Unable to ping server at localhost:1099”错误解决方法，需要的朋友可以参考下\nsudo gedit /etc/hosts\n"});index.add({'id':28,'href':'/life/docs/operating_system/linux/ubuntu%E5%AE%89%E8%A3%85chmsee/','title':"ubuntu安装chmsee",'section':"linux学习与使用 ",'content':"垃圾的ubuntu 14.04 又一次去掉一些特别好用的软件, 官方给的解释是怕破坏他们系统. 只想说一句 我去年买了个本.\n14.04 之前的版本,如13.10, 12.04 继续能够使用 sudo apt-get install chmsee 来安装.\n14.04 需要下载安装包来安装:\nsudo apt-get install libc6 libchm1 libgcrypt11 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk2.0-0 libpango1.0-0 libwebkitgtk-1.0-0 libxml2 安装依赖包\n(64位) sudo dpkg -i chmsee_1.3.0-2ubuntu2_amd64.deb 安装软件包,下载地址: http://kr.archive.ubuntu.com/ubuntu/pool/universe/c/chmsee/chmsee_1.3.0-2ubuntu2_amd64.deb Ubuntu的官方软件库放心下载.\n(32位) sudo dpkg -i chmsee_1.3.0-2ubuntu2_i386.deb 安装软件包,下载地址: http://kr.archive.ubuntu.com/ubuntu/pool/universe/c/chmsee/chmsee_1.3.0-2ubuntu2_i386.deb Ubuntu的官方软件库放心下载.\n"});index.add({'id':29,'href':'/life/docs/operating_system/linux/ubuntu%E6%B8%85%E7%90%86%E7%B3%BB%E7%BB%9F%E5%9E%83%E5%9C%BE/','title':"Ubuntu清理系统垃圾",'section':"linux学习与使用 ",'content':"1，非常有用的清理命令： sudo apt-get autoclean \u0026ndash;清理旧版本的软件缓存 www.2cto.com\nsudo apt-get clean\u0026ndash;清理所有软件缓存\nsudo apt-get autoremove\u0026ndash;删除系统不再使用的孤立软件\n这三个命令主要清理升级缓存以及无用包的。\n2，清理opera firefox的缓存文件： ls ~/.opera/cache4 ls ~/.mozilla/firefox/*.default/Cache\n3，清理Linux下孤立的包： 图形界面下我们可以用：gtkorphan sudo apt-get install gtkorphan -y 终端命令下我们可以用：deborphan sudo apt-get install deborphan -y\n4，卸载：tracker 这个东西一般我只要安装Ubuntu就会第一删掉tracker 他不仅会产生大量的cache文件而且还会影响开机速度。所以在新得利里面删掉就行。 www.2cto.com\n5，删除多余的内核：一定不要删错哦，切记！！ 打开终端敲命令：dpkg \u0026ndash;get-selections|grep linux 有image的就是内核文件 删除老的内核文件： sudo apt-get remove 内核文件名（例如：linux-image-2.6.27-2-generic） 内核删除，释放空间了，应该能释放130－140M空间。\n最后不要忘了看看当前内核：uname -a 附录： 包管理的临时文件目录: 包在 /var/cache/apt/archives 没有下载完的在 /var/cache/apt/archives/partial\n"});index.add({'id':30,'href':'/life/docs/operating_system/linux/ubuntu%E8%BD%AF%E4%BB%B6%E5%8D%B8%E8%BD%BD/','title':"ubuntu软件卸载",'section':"linux学习与使用 ",'content':"ubuntu软件卸载\n安装Synaptic\nsudo apt-get install synaptic\n"});index.add({'id':31,'href':'/life/docs/javadir/tooldoc/js_console%E7%94%A8%E6%B3%95/','title':"常用 Console 调试命令",'section':"Java公共库文档总结 ",'content':"Console 对象方法 #    常用 Console 调试命令\n  console.log('hello');\rconsole.info('信息');\rconsole.error('错误');\rconsole.warn('警告');\rassert() #   ssert方法接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。  // 实例\rconsole.assert(true === false, \u0026quot;判断条件不成立\u0026quot;)\r// Assertion failed: 判断条件不成立\rclear() #   清除当前控制台的所有输出，将光标回置到第一行。  console.clear()\rcount() #   用于计数，输出它被调用了多少次。  (function() {\rfor (var i = 0; i \u0026lt; 5; i++) { console.count('count'); }\r})()\rerror() #   输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发生的堆栈。  console.error(\u0026quot;Error: %s (%i)\u0026quot;, \u0026quot;Server is not responding\u0026quot;,500)\rgroup() #   用于将显示的信息分组，可以把信息进行折叠和展开。  console.group('第一层');\rconsole.group('第二层');\rconsole.log('error');\rconsole.error('error');\rconsole.warn('error');\rconsole.groupEnd(); console.groupEnd();\rinfo() #   console.log 别名，输出信息  console.info(\u0026quot;runoob\u0026quot;)\rlog() #   输出信息  console.log(\u0026quot;runoob\u0026quot;)\rtable() #   将复合类型的数据转为表格显示。  var arr= [ { num: \u0026quot;1\u0026quot;},\r{ num: \u0026quot;2\u0026quot;}, { num: \u0026quot;3\u0026quot; }\r];\rconsole.table(arr);\rvar obj= {\ra:{ num: \u0026quot;1\u0026quot;},\rb:{ num: \u0026quot;2\u0026quot;},\rc:{ num: \u0026quot;3\u0026quot; }\r};\rconsole.table(obj);\rtime() #  ++ 计时开始\nconsole.time('计时器1');\rfor (var i = 0; i \u0026lt; 100; i++) {\rfor (var j = 0; j \u0026lt; 100; j++) {}\r}\rconsole.timeEnd('计时器1');\rconsole.time('计时器2');\rfor (var i = 0; i \u0026lt; 1000; i++) {\rfor (var j = 0; j \u0026lt; 1000; j++) {}\r}\rconsole.timeEnd('计时器2');\rtimeEnd() #   计时结束  console.time('计时器1');\rfor (var i = 0; i \u0026lt; 100; i++) {\rfor (var j = 0; j \u0026lt; 100; j++) {}\r}\rconsole.timeEnd('计时器1');\rconsole.time('计时器2');\rfor (var i = 0; i \u0026lt; 1000; i++) {\rfor (var j = 0; j \u0026lt; 1000; j++) {}\r}\rconsole.timeEnd('计时器2');\rwarn() #   输出警告信息  console.warn(\u0026quot;警告\u0026quot;)\r 最常用的就是 console.log 了。 console上述的集中度支持printf的占位符格式，支持的占位符有：字符（%s）、整数（%d或%i）、浮点数（%f）和对象（%o）:   占位符\t作用\r%s\t字符串\r%d or %i\t整数\r%f\t浮点数\r%o\t可展开的DOM\r%O\t列出DOM的属性\r%c\t根据提供的css样式格式化字符串\r实例:\rconsole.log(\u0026quot;%d年%d月%d日\u0026quot;,2011,3,26);\r"});index.add({'id':32,'href':'/life/docs/databases/postgresql/postgresql_create%E7%94%A8%E6%88%B7%E4%B8%8E%E6%9D%83%E9%99%90/','title':"权限",'section':"postgresql学习笔记",'content':"权限 #   系统权限 role和user都是用户,只不过role属性不能登录当然也可以指定 超级权限 不做权限检查(实际中是很危险的)\n Pg权限分为两部分，一部分是“系统权限”或者数据库用户的属性，可以授予role或user（两者区别在于login权限）；\r一部分为数据库对象上的操作权限。对超级用户不做权限检查，其它走acl。\r对于数据库对象，开始只有所有者和超级用户可以做任何操作，其它走acl。\r在pg里，对acl模型做了简化，组和角色都是role，用户和角色的区别是角色没有login权限。\r超级权限 #   创建超级用户(create user alice with superuser password \u0026lsquo;123456\u0026rsquo;;)系统不会做权限操作校验,仅仅是不能够创建用户与删除用户  系统权限 #    (create role blake password \u0026lsquo;123456\u0026rsquo;;)(create user bob password \u0026lsquo;123456\u0026rsquo;;)(create database testdb;)\n  (grant all on database testdb to bob;grant all on database testdb to blake;)\n  测试如下 用户bob可以登录而blake不能登录直接抛出了FATL:role blake is not \u0026lsquo;permitted to log in\u0026rsquo;\n  ( drop database testdb;drop role blake;drop user bob;)\n  (create user bob password \u0026lsquo;123456\u0026rsquo;;)(alter user bob set default_transaction_read_only=on;grant all on database testdb to bob;grant select on all tables in schema public to bob; )\n  (revoke all on database testdb from bob;revoke select on all tables in schema public from bob;)删除前撤销(drop user bob)\n  (grant DELETE,UPDATE,SELECT,INSERT on all tables in schema public to bob;)\n  查询 #   查询系统中用户的权限(SELECT * FROM pg_roles;) 显示用户和用户的用户属性(\\du) 查看全部可设置的管理权限(\\h)  删除 #   (drop user bob) (drop role bob)要注意在删除前必须把权限先删除,还有一种笨办法就是把数据库先备份然后在删除这时就可以删除用户了  系统登录 #   (sudo su postgres -c psql template1)(psql -U alice -d testdb -h localhost -W)参数含义: -U指定用户 -d要连接的数据库 -h要连接的主机 -W提示输入密码。  修改系统密码 #   (sudo passwd -d postgres)  sudo su postgres -c psql template1\r会出现 postgres=#\r输入postgres=# \\password\r输入２次密码\r然后输入(退出)\rpostgres=# \\q\r"});index.add({'id':33,'href':'/life/docs/operating_system/one_chapter/1_1_/','title':"操作系统的概念、功能",'section':"第一章 操作系统概述 ",'content':"一:大家熟悉的操作系统 #  二:知识总览 #   1:操作系统的概念（定义）   操作系统（Operating System， OS）是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调 度计算机的工作和资源的分配；以提供给用户和其他软件方便的接口和环境；它是计算机系统中最基本 的系统软件。\n   直观的例子：打开 Windows 操作系统的“任务管理器”（快捷键：Ctrl+Alt+Del）\n  ①操作系统是系统资源的管理者\n  ②向上层提供方便易用的服务\n  ③是最接近硬件的一层软件\n  一台电脑的诞生~\rStep 1：厂家组装一台裸机\rStep 2：出售前安装操作系统\rStep 3：用户安装应用程序（eg：QQ）\rStep 4：使用 QQ 聊天\r 2:操作系统的功能和目标——作为系统资源的管理者   操作系统的功能和目标——向上层提供方便易用的服务  "});index.add({'id':34,'href':'/life/docs/computer_network/physical_layer/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/','title':"数据通信基础知识 ",'section':"物理层 ",'content':"典型的数据通信模型 #  数据通信相关术语 #   通信的目的是传送消息(消息:语音、文字、图像、视频等)。\n   信号:数据的电气/电磁的表现，是数据在传输过程中的存在形式。\n  数字信号/离散信号:代表消息的参数的取值是离散的\n   模拟信号/连续信号:代表消息的参数的取值是连续的   信源:产生和发送数据的源头。 信宿:接收数据的终点。 信道:信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。   信道  按传输信号分 模拟信道(传送模拟信号) 数字信道(传送数字信号) 按传输介质分 无线信道 有线信道    设计数据通信系统要考虑的三个问题 #  采用单工通信(只有一个方向)/半双工通信(回合制)/全双工通信(可以同时如擂台上拳击手打击) * #  采用串行通信/并行通信 #  采用同步通信/异步通信 #  串行传输\u0026amp;并行传输 #  同步传输\u0026amp;异步传输 #  "});index.add({'id':35,'href':'/life/docs/computer_network/physical_layer/%E7%89%A9%E7%90%86%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/','title':"物理层基本概念 ",'section':"物理层 ",'content':"物理层接口特性 #   物理层解决如何在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体。 物理层主要任务：确定与传输媒体接口有关的一些特性 ==\u0026gt; 定义标准\n  1.机械特性 定义物理连接的特性，规定物理连接时所采用的规格、接口形状、引线数目、引脚数量、排列情况  2.电器特性 规定传输二进制位时，线路上信号的电压范围、阻抗匹配、传输速率和距离限制。 某网络在物理层规定，信号的电平用+10V~+15V表示二进制0，用-10V~-15V表示二进制1，电线长度限于15m以内 3.功能特性 指明某条线上出现的某一电平表示何种意义，接口部件的信号线的用途。 描述一个物理层接口引脚处于高电平时的含义 4.过程特性 定义各条物理线路的工作规程和时序关系。  "});index.add({'id':36,'href':'/life/docs/computer_network/network_architecture/1.1.1%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E5%BF%B5-%E7%BB%84%E6%88%90-%E5%8A%9F%E8%83%BD-%E5%88%86%E7%B1%BB/','title':"计算机概念 组成 功能 分类 * ",'section':"网络体系结构",'content':"计算机网络 #  概念 #   计算机网络是互连的、自治的计算机集合。  组成 #   组成部分:硬件、软件、协议 1 工作方式:边缘部分、核心部分 2 功能组成:通信子网、资源子网  分类 #   1 分布范围:广域网、城域网、局域网、个人区域网 2 使用者: 公用网、专用网 3 交换技术:电路交换、报文交换、分组交换 4 拓扑结构:总线型、星型、环型、网状型 5 传输技术:广播式、点对点  功能 #   1:数据通信 2:资源共享 3:分布式处理、提高可靠性、负载均衡  "});index.add({'id':37,'href':'/life/docs/operating_system/two_chapter/2_1_1/','title':"进程的概念、组成、特征",'section':"第二章 进程管理 ",'content':""});index.add({'id':38,'href':'/life/docs/%E8%84%9A%E6%9C%AC/npm%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85%E6%9C%BA%E5%88%B6%E7%AE%80%E4%BB%8B/','title':"node js - npm ",'section':"脚本",'content':" npm 是 Node 的模块管理器，功能极其强大。它是 Node 获得成功的重要原因之一\n  假如是nodejs 高版本 那么不需要再安装npm了因为node js已经包含了npm  一、从 npm install 说起 #   npm install 命令用来安装模块到node_modules目录。  $ npm install \u0026lt;packageName\u0026gt;   安装之前，npm install会先检查，node_modules目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。\n  如果你希望，一个模块不管是否安装过，npm 都要强制重新安装，可以使用-f 或 \u0026ndash;force 参数。\n  $ npm install \u0026lt;packageName\u0026gt; --force 二、npm update #   如果想更新已安装模块，就要用到npm update命令。  $ npm update \u0026lt;packageName\u0026gt;  它会先到远程仓库查询最新版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装。  三、registry #    npm update命令怎么知道每个模块的最新版本呢？\n  答案是 npm 模块仓库提供了一个查询服务，叫做 registry 。以 npmjs.org 为例，它的查询服务网址是 https://registry.npmjs.org/ 。\n  这个网址后面跟上模块名，就会得到一个 JSON 对象，里面是该模块所有版本的信息。比如，访问 https://registry.npmjs.org/react，就会看到 react 模块所有版本的信息。\n  它跟下面命令的效果是一样的。\n  $ npm view react # npm view 的别名 $ npm info react $ npm show react $ npm v react 四、缓存目录 #    npm install或npm update命令，从 registry 下载压缩包之后，都存放在本地的缓存目录。\n  这个缓存目录，在 Linux 或 Mac 默认是用户主目录下的.npm目录，在 Windows 默认是%AppData%/npm-cache。通过配置命令，可以查看这个目录的具体位置。\n  $ npm config get cache $HOME/.npm  你最好浏览一下这个目录。  $ ls ~/.npm # 或者 $ npm cache ls  你会看到里面存放着大量的模块，储存结构是{cache}/{name}/{version}。  $ npm cache ls react ~/.npm/react/react/0.14.6/ ~/.npm/react/react/0.14.6/package.tgz ~/.npm/react/react/0.14.6/package/ ~/.npm/react/react/0.14.6/package/package.json  .npm目录保存着大量文件，清空它的命令如下。  $ rm -rf ~/.npm/* # 或者 $ npm cache clean 五、模块的安装过程 #   总结一下，Node模块的安装过程是这样的。  1:发出npm install命令\r2:npm 向 registry 查询模块压缩包的网址\r3:下载压缩包，存放在~/.npm目录\r4:解压压缩包到当前项目的node_modules目录\r 注意，一个模块安装以后，本地其实保存了两份。一份是~/.npm目录下的压缩包，另一份是node_modules目录下解压后的代码。 但是，运行npm install的时候，只会检查node_modules目录，而不会检查~/.npm目录。也就是说，如果一个模块在～/.npm下有压缩包，但是没有安装在node_modules目录中，npm 依然会从远程仓库下载一次新的压缩包。 这种行为固然可以保证总是取得最新的代码，但有时并不是我们想要的。最大的问题是，它会极大地影响安装速度。即使某个模块的压缩包就在缓存目录中，也要去远程仓库下载，这怎么可能不慢呢？ 另外，有些场合没有网络（比如飞机上），但是你想安装的模块，明明就在缓存目录之中，这时也无法安装。\n "});index.add({'id':39,'href':'/life/docs/operating_system/windows/dos_basic/','title':"DOS基本命令 ",'section':"windows学习与使用 ",'content':"DOS基本命令 #   wing+r ==\u0026gt; cmd 进入dos控制台   打开屏幕键盘  C:\\Users\\noatn\u0026gt;osk;\r dos各种操作查看参数用法 command params ==? command /?  C:\\Users\\noatn\u0026gt;cd /?\r显示当前目录名或改变当前目录。\rCHDIR [/D] [drive:][path]\rCHDIR [..]\rCD [/D] [drive:][path]\rCD [..]\r.. 指定要改成父目录。\r键入 CD drive: 显示指定驱动器中的当前目录。\r不带参数只键入 CD，则显示当前驱动器和目录。\r使用 /D 开关，除了改变驱动器的当前目录之外，\r还可改变当前驱动器。\r如果命令扩展被启用，CHDIR 会如下改变:\r当前的目录字符串会被转换成使用磁盘名上的大小写。所以，\r如果磁盘上的大小写如此，CD C:\\TEMP 会将当前目录设为\rC:\\Temp。\rCHDIR 命令不把空格当作分隔符，因此有可能将目录名改为一个\r带有空格但不带有引号的子目录名。例如:\rcd \\winnt\\profiles\\username\\programs\\start menu\r与下列相同:\rcd \u0026quot;\\winnt\\profiles\\username\\programs\\start menu\u0026quot;\r在扩展停用的情况下，你必须键入以上命令。\r  显示文件夹列表 dir\n  改变目录 cd\n  返回上一级目录 cd ..\n  返回根目录 cd \\\n  创建子目录 md\n  删除目录 rd\n  清理屏幕 cls\n  cd s ==\u0026gt; 按住tab键切换\n  DOS窗口中创建用户并设定为管理员 #   查看本机用户数量 net user  PS E:\\\u0026gt; net user; \\\\DESKTOP-GN2SF7M 的用户帐户\r-------------------------------------------------------------------------------\rAdministrator DefaultAccount Guest\rWDAGUtilityAccount zch\r命令成功完成。\r 创建一个新用户 net user name password /add  PS E:\\\u0026gt; net user blake 123456 /add ; 命令成功完成。\r 提升到管理员权限 net localgroup administrators 用户名 /add  PS E:\\\u0026gt; net localgroup administrators blake /add; 命令成功完成。\rPS E:\\\u0026gt;  删除某个用户名 net user user1 /del  PS E:\\\u0026gt; net user alice /del 命令成功完成。\rPS E:\\\u0026gt;  修改用户密码 net user user1 （直接输入新密码）即可  PS E:\\\u0026gt; net user alice 000000 命令成功完成。\rPS E:\\\u0026gt;  dos备份磁盘   XCOPY D: E:\\backup /s/e/c/h/j/g\rPS E:\\\u0026gt; XCOPY D: E:\\kao /e/h/k/y/c\r"});index.add({'id':40,'href':'/life/docs/javadir/basedir/jsp_dir/jsp_el%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/','title':"EL基础教程 ",'section':"jsp 基础知识 ",'content':"EL基础教程 #  El标签语法 #   ${参数名}\n EL标签的功能 #    可以访问JSP中不同的域的对象    可以访问JavaBean中的属性    可以访问集合元素    支持简单的运算操作   访问JSP中不同的域的对象 #  \u0026lt;%\rpageContext.setAttribute(\u0026quot;name1\u0026quot;, \u0026quot;zhangsan\u0026quot;);\rrequest.setAttribute(\u0026quot;name2\u0026quot;, \u0026quot;lisi\u0026quot;);\rsession.setAttribute(\u0026quot;name3\u0026quot;, \u0026quot;wangwu\u0026quot;);\rapplication.setAttribute(\u0026quot;name4\u0026quot;, \u0026quot;liuliu\u0026quot;);\r%\u0026gt;\r\u0026lt;!--范围.参数名 --\u0026gt;\r${pageScope.name1 } ${requestScope.name2 } ${sessionScope.name3 }\r${applicationScope.name4 }\r\u0026lt;br\u0026gt;\r\u0026lt;!-- 直接写参数名称 --\u0026gt;\r${name1 } ${name2 } ${name3 } ${name4 }\r 访问JavaBean中的属性 #  \u0026lt;%\rUser user=new User(\u0026quot;zhangsan\u0026quot;,20,\u0026quot;北京\u0026quot;);\rrequest.setAttribute(\u0026quot;user\u0026quot;, user);\r%\u0026gt;\ruser name:${user.name }\u0026lt;br\u0026gt; user age:${user.age }\u0026lt;br\u0026gt; user address:${user.address }\r 访问集合元素 #  \u0026lt;%\r//数组\rint[] array=new int[]{1,2,3};\r//列表\rList list=new ArrayList();\rlist.add(\u0026quot;list1\u0026quot;);\rlist.add(20);\rlist.add(true);\rpageContext.setAttribute(\u0026quot;array\u0026quot;, array);\rpageContext.setAttribute(\u0026quot;list\u0026quot;, list);\r%\u0026gt;\r数组:${array[0] },${array[1] },${array[2] }\u0026lt;br\u0026gt; List列表:${list }\u0026lt;br\u0026gt;\r 简单的运算操作 #  算术运算符:\n2+3=${2+3 }\r2-3=${2-3 }\r2*3=${2*3 }\r2/3=${2/3 }\r 逻辑运算符:\ntrue\u0026amp;\u0026amp;false=${true\u0026amp;\u0026amp;false }\ttrue||false=${true||false }\t!true=${!true }\t 关系运算符:\n2==5 ${2==5 }\r2!=5 ${2!=5 }\r2\u0026gt;5 ${2\u0026gt;5 }\r2\u0026lt;5 ${2\u0026lt;5 }\r2\u0026gt;=5 ${2\u0026gt;=5 }\r2\u0026lt;=5 ${2\u0026lt;=5 }\r 其他运算符:\n\u0026lt;%\rUser user=new User();\rUser user1=new User(\u0026quot;zhangsan\u0026quot;,20,\u0026quot;北京\u0026quot;);\rString arr=new String();\rString[] arr1=new String[]{\u0026quot;one\u0026quot;,\u0026quot;two\u0026quot;};\tpageContext.setAttribute(\u0026quot;user\u0026quot;, user);\rpageContext.setAttribute(\u0026quot;user1\u0026quot;, user1);\rpageContext.setAttribute(\u0026quot;arr\u0026quot;, arr);\tpageContext.setAttribute(\u0026quot;arr1\u0026quot;, arr1);\r%\u0026gt;\ruser 是否为空:${empty user }\rarr 是否为空:${empty arr }\ruser1 是否为空:${empty user1 }\rarr1 是否为空:${empty arr1 }\r三元目运算符2\u0026lt;5?yes:no:${2\u0026lt;5?\u0026quot;yes\u0026quot;:\u0026quot;no\u0026quot; }\ruser1.address:${user1.address }\rarr1[1]:${arr1[1] }\r EL标签的隐形变量 #    page \u0026lt;==============================\u0026gt; pageScope    request \u0026lt;============================\u0026gt; requestScope    session \u0026lt;============================\u0026gt; sessionScope    application \u0026lt;=========================\u0026gt; applicationScope    request.getParameter(String name) \u0026lt;=======\u0026gt; param   A.jsp\n\u0026lt;form action=\u0026quot;B.jsp\u0026quot; method=\u0026quot;get\u0026quot;\u0026gt;\r\u0026lt;input name=\u0026quot;name\u0026quot;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt;\r\u0026lt;/form\u0026gt;\r B.jsp\n${param.name }\r  request.getParameterValues(String name) \u0026lt;==\u0026gt; paramValues   A.jsp\n\u0026lt;form action=\u0026quot;B.jsp\u0026quot; method=\u0026quot;get\u0026quot;\u0026gt;\r\u0026lt;input name=\u0026quot;name\u0026quot;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input name=\u0026quot;name\u0026quot;\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt;\r\u0026lt;/form\u0026gt;\r B.jsp\n${paramValues.name[0] },${paramValues.name[1] }\r  request.getHeader(String name) \u0026lt;=========\u0026gt; header    request.getHeaderNames() \u0026lt;=============\u0026gt; headerValues    所有请求cookie \u0026lt;=====================\u0026gt; cookie    application.getInitParameter(String name) \u0026lt;==\u0026gt; initParam    pageContext   ${pageContext.request.queryString}\u0026lt;!-- 获取请求名参数 --\u0026gt;\r${pageContext.request.requestURL}\u0026lt;!-- 获取请求的URL --\u0026gt;\r${pageContext.request.contextPath }\u0026lt;!-- 获取服务应用的名称 --\u0026gt;\r${pageContext.request.method }\u0026lt;!-- 获取http提交方法 --\u0026gt;\r${pageContext.request.protocol }\u0026lt;!-- 获取使用的协议 --\u0026gt;\r${pageContext.request.remoteUser }\u0026lt;!-- 获取登录用户名 --\u0026gt;\r${pageContext.request.remoteAddr }\u0026lt;!-- 获取登录用户IP地址 --\u0026gt;\r${pageContext.session.id }\u0026lt;!-- 获取session的ID --\u0026gt;\r${pageContext.servletContext.serverInfo }\u0026lt;!-- 获取主机端的服务信息 --\u0026gt;\r "});index.add({'id':41,'href':'/life/docs/javadir/groovy/groovy%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/','title':"groovy 数据类型 ",'section':"groovy 学习与使用 ",'content':"Groovy 数据类型 #   在任何编程语言中，需要使用各种变量来存储各种类型的信息。变量只是保留值的存储位置,这意味着，当你创建一个变量，你保留在内存中的一些空间来存储与变量相关的值。\n  您可能喜欢存储各种数据类型的信息，如字符串，字符，宽字符，整数，浮点数，布尔值等。基于变量的数据类型，操作系统分配内存并决定什么可以存储在保留的存储器中。\n 内置数据类型 #   byte -这是用来表示字节值。例如2。 short -这是用来表示一个短整型。例如10。 int -这是用来表示整数。例如1234。 long -这是用来表示一个长整型。例如10000090。 float -这是用来表示32位浮点数。例如12.34。 double -这是用来表示64位浮点数，这些数字是有时可能需要的更长的十进制数表示。例如12.3456565。 char -这定义了单个字符文字。例如“A”。 Boolean -这表示一个布尔值，可以是true或false。 String -这些是以字符串的形式表示的文本。例如，“Hello World”的  绑定值 #     类型 值     byte -128到127   short -32,768到32,767   int 2,147,483,648 到,147,483,647   long -9,223,372,036,854,775,808到+9,223,372,036,854,775,807   float 1.40129846432481707e-45到3.40282346638528860e + 38   double 4.94065645841246544e-324d 到1.79769313486231570e + 308d    包装器类型 #   java.lang.Byte java.lang.Short java.lang.Integer java.lang.Long java.lang.Float java.lang.Double     名称 描述 例如     java.math.BigInteger 不可变的任意精度的有符号整数数字 30克   java.math.BigDecimal 不可变的任意精度的有符号十进制数 3.5克    package gr.h1\r//Example of a int datatype\rint x = 5;\r//Example of a long datatype\rlong y = 100L;\r//Example of a floating point datatype\rfloat a = 10.56f;\r//Example of a double datatype\rdouble b = 10.5e40;\r//Example of a BigInteger datatype\rBigInteger bi = 30g;\r//Example of a BigDecimal datatype\rBigDecimal bd = 3.5g; //加上这个g也没事的 这是groovy特有的如java中的double a = 3.232d\rBigDecimal bd2 = 235.2323552;\rprintln(x);\rprintln(y);\rprintln(a);\rprintln(b);\rprintln(bi);\rprintln(bd);\rprintln(bd2);\r5\r100\r10.56\r1.05E41\r30\r3.5\r235.2323552\r"});index.add({'id':42,'href':'/life/docs/computer_network/physical_layer/','title':"物理层 ",'section':"计算机网络 ",'content':" 物理层基本概念 数据通信基础知识  "});index.add({'id':43,'href':'/life/docs/operating_system/two_chapter/','title':"第二章 进程管理 ",'section':"操作系统 ",'content':"进程管理 #  目录 #    2.1_1_进程的概念、组成、特征\n  2.1_2_进程的状态与转换\n  2.1_3_进程控制\n  2.1_4_进程通信\n  2.1_5_线程概念与多线程模型\n  2.2_1_处理机调度的概念、层次\n  2.2_2_进程调度的时机、切换与过程、方式\n  2.2_3_调度算法的评价指标\n  "});index.add({'id':44,'href':'/life/docs/databases/mysql/','title':"mysql学习笔记",'section':" 数据库",'content':"mysql学习笔记 #  windows下 Mysql安装 #  Win10一台电脑安装多个版本的Mysql #  windows下 Mysql安装的一些问题解决方法 #  centos7安装多个mysql #  mysql查询数据准备 #  mysql查询 #  mysql新查询 #  mysql视图 #  mysql正则表达式 #  mysql事务 #  mysql函数 #  mysql存储过程 #  mysql存储函数 #  mysql用户与权限 #  mysql整理 #  mysql存储引擎 #  mysql运维 #  开发规范 #  数据库设计三范式 #  mysql索引 #  MySQL分库分表原理 #  mysql优化 #  "});index.add({'id':45,'href':'/life/docs/databases/postgresql/','title':"postgresql学习笔记",'section':" 数据库",'content':"postgresql学习笔记 #  postgresql用户与权限 #  "});index.add({'id':46,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/2021-04%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/','title':"学习计划",'section':"自我提升",'content':"  Java 消息中间件 RabbitMq 和 kafka (建议学习RabbitMq)\n  web socket or spring socket\n  springboot (spring cloud考虑)\n  redis (深入使用)\n  mysql 这次复习以往 突破 存储和锁 如行锁\n  java 并发(深入)\n  nio netty\n  "});index.add({'id':47,'href':'/life/docs/databases/mysql_163%E8%AF%BE%E5%A0%82/','title':"网易云课堂MySQL微专业学习笔记",'section':" 数据库",'content':"网易云课堂MySQL微专业学习笔记 #   但愿可以不弃坑。\n 目录 #   数据库基础  1.1-认识MySQL 1.2-轻松安装MySQL 1.3-MySQL数据库连接 1.4-SQL语言入门 1.5-认识DBA   MySQL数据库对象与应用  2.1-MySQL数据类型 2.2-MySQL数据对象 2.3-MySQL权限管理 2.4-SQL语言进阶 2.5-内置函数 2.6-触发器与存储过程 2.7-MySQL字符集 2.8程序连接MySQL 2.9-DAO框架的使用   MySQL事务与存储引擎  3.1-数据库事务 3.2-存储引擎概述 3.3-InnoDB存储引擎 3.4-InnoDB事务锁   MySQL应用优化  4.1-MySQL索引优化与设计 4.2-MySQL数据库设计 4.3-MySQL容量评估 4.4-MySQL性能测试   MySQL运维实践  5.1-MySQL日志系统 5.2-MySQL数据备份 5.3-MySQL数据恢复 5.4-MySQL线上部署 5.5-MySQL主从复制 5.6-MySQL日常运维 5.7-MySQL参数调优    "});index.add({'id':48,'href':'/life/docs/databases/','title':" 数据库",'section':"Docs",'content':" 数据库，简而言之可视为电子化的文件柜——存储电子文件的处所，用户可以对文件中的数据进行新增、查询、更新、删除等操作。\n 目录 #   数据库基础  1.1-认识MySQL 1.2-轻松安装MySQL 1.3-MySQL数据库连接 1.4-SQL语言入门 1.5-认识DBA   MySQL数据库对象与应用  2.1-MySQL数据类型 2.2-MySQL数据对象 2.3-MySQL权限管理 2.4-SQL语言进阶 2.5-内置函数 2.6-触发器与存储过程 2.7-MySQL字符集 2.8程序连接MySQL 2.9-DAO框架的使用   MySQL事务与存储引擎  3.1-数据库事务 3.2-存储引擎概述 3.3-InnoDB存储引擎 3.4-InnoDB事务锁   MySQL应用优化  4.1-MySQL索引优化与设计 4.2-MySQL数据库设计 4.3-MySQL容量评估 4.4-MySQL性能测试   MySQL运维实践  5.1-MySQL日志系统 5.2-MySQL数据备份 5.3-MySQL数据恢复 5.4-MySQL线上部署 5.5-MySQL主从复制 5.6-MySQL日常运维 5.7-MySQL参数调优    "});index.add({'id':49,'href':'/life/docs/operating_system/one_chapter/1_2_/','title':"操作系统的特征",'section':"第一章 操作系统概述 ",'content':"一:知识总览 #  二:分类描述 #   1:操作系统的特征——并发   2:操作系统的特征——共享   3:操作系统的特征——并发和共享的关系   4:操作系统的特征——虚拟   5:操作系统的特征——异步   总结  "});index.add({'id':50,'href':'/life/docs/computer_network/network_architecture/1.1.2%E6%A0%87%E5%87%86%E5%8C%96%E5%B7%A5%E4%BD%9C%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%BB%84%E7%BB%87/','title':"标准的分类",'section':"网络体系结构",'content':"标准的分类 #  法定标准 #   由权威机构制定的正式的、合法的标准 OSI  事实标准 #   某些公司的产品在竞争中占据了主流 ， TCP/IP 时间长了，这些产品中的协议和技术就成了标准  RFC #    因特网标准的形式 (4个阶段)\n  1:因特网草案\n  2:建议标准\n  3:草案标准\n  4:因特网标准\n  国际标准化组织 ISO (最重要) #  国际电信联盟 ITU #  国际电气电子工程协会 IEEE #  "});index.add({'id':51,'href':'/life/docs/operating_system/two_chapter/2_1_2/','title':"进程的状态与转换",'section':"第二章 进程管理 ",'content':""});index.add({'id':52,'href':'/life/docs/operating_system/windows/dos_file/','title':"DOS基本文件操作命令 ",'section':"windows学习与使用 ",'content':"DOS基本文件操作命令 #    wing+r ==\u0026gt; cmd 进入dos控制台\n  D:\n  进入D盘\r cd命令  CD命令是更改目录命令 如果要进入D盘不用这个命令直接输入 D: 回车 即可\r例如:\rC:\\Users\\HP\u0026gt;D:\rD:\\\u0026gt;\rD:\\\u0026gt;dir\r驱动器 D 中的卷是 新加卷\r卷的序列号是 DAB4-11FE\rD:\\ 的目录\r2019-10-10 14:15 \u0026lt;DIR\u0026gt; 360极速浏览器下载\r2020-01-13 13:47 \u0026lt;DIR\u0026gt; BaiduNetdiskDownload\r2020-01-20 13:59 \u0026lt;DIR\u0026gt; CS\r2019-12-13 16:53 \u0026lt;DIR\u0026gt; data\r2020-02-10 15:55 \u0026lt;DIR\u0026gt; IdeaProjects\r2019-12-06 15:01 \u0026lt;DIR\u0026gt; log\r2019-10-23 10:40 \u0026lt;DIR\u0026gt; MailMasterData\r2019-09-29 10:43 \u0026lt;DIR\u0026gt; output\r2020-01-13 13:40 \u0026lt;DIR\u0026gt; soft\r2020-02-04 17:43 \u0026lt;DIR\u0026gt; temp\r2020-01-15 18:05 \u0026lt;DIR\u0026gt; ultraeditWork\r2019-12-10 09:47 \u0026lt;DIR\u0026gt; workspace\r0 个文件 0 字节\r12 个目录 463,738,040,320 可用字节\rD:\\\u0026gt;cd CS\rD:\\CS\u0026gt; /*进入了CS目录**/\r cd .. (进入当前磁盘的上一级)  \r类似于 linux 下的cd ~\rzch@zch MINGW64 /d/data\r$ cd ~\r已经在某个磁盘下的情况下可以用cd 进入目录\rC:\\Users\\noatn\u0026gt;cd d:\\tencent\rC:\\Users\\noatn\u0026gt;cd C:\\Users\\noatn\\.android\rC:\\Users\\noatn\\.android\u0026gt;\r这里进入d盘失败但是成功进入了C盘预计的目录\r 创建文件 echo \u0026gt;fileName或者 echo [this content] \u0026gt; fileName  \recho \u0026gt;d.txt;\r============\u0026gt;\rE:\\temp\u0026gt;echo \u0026gt;d.txt;\rE:\\temp\u0026gt;dir\r驱动器 E 中的卷是 新加卷\r卷的序列号是 64E8-4ABF\rE:\\temp 的目录\r2020/02/14 18:56 \u0026lt;DIR\u0026gt; .\r2020/02/14 18:56 \u0026lt;DIR\u0026gt; ..\r2020/02/14 18:56 3 d.txt\r1 个文件 3 字节\r2 个目录 264,645,689,344 可用字节\r 查看文件内容 type fileName  E:\\temp\u0026gt;type d.txt\rthis is a text file\r 创建目录 md pathName  E:\\temp\u0026gt;md cc\rE:\\temp\u0026gt;dir\r驱动器 E 中的卷是 新加卷\r卷的序列号是 64E8-4ABF\rE:\\temp 的目录\r2020/02/14 19:02 \u0026lt;DIR\u0026gt; .\r2020/02/14 19:02 \u0026lt;DIR\u0026gt; ..\r2020/02/14 19:02 \u0026lt;DIR\u0026gt; cc\r2020/02/14 18:59 19 d.txt\r1 个文件 19 字节\r3 个目录 264,645,689,344 可用字节\r 复制文件 copy fileName path+fileName  E:\\temp\u0026gt;copy d.txt E:\\temp\\cc;\r已复制 1 个文件。\r 深复制 XCOPY  H:\\\u0026gt;xcopy /?\r复制文件和目录树。\rXCOPY source [destination] [/A | /M] [/D[:date]] [/P] [/S [/E]] [/V] [/W]\r[/C] [/I] [/Q] [/F] [/L] [/G] [/H] [/R] [/T] [/U]\r[/K] [/N] [/O] [/X] [/Y] [/-Y] [/Z] [/B] [/J]\r[/EXCLUDE:file1[+file2][+file3]...]\rsource 指定要复制的文件。\rdestination 指定新文件的位置和/或名称。\r/A 仅复制有存档属性集的文件，\r但不更改属性。\r/M 仅复制有存档属性集的文件，\r并关闭存档属性。\r/D:m-d-y 复制在指定日期或指定日期以后更改的文件。\r如果没有提供日期，只复制那些\r源时间比目标时间新的文件。\r/EXCLUDE:file1[+file2][+file3]...\r指定含有字符串的文件列表。每个字符串\r在文件中应位于单独的一行。如果任何\r字符串与复制文件的绝对路径的任何部分相符，\r则排除复制该文件。例如，\r指定如 \\obj\\ 或 .obj 的字符串会分别\r排除目录 obj 下面的所有文件或带有\r.obj 扩展名的所有文件。\r/P 创建每个目标文件之前提示你。\r/S 复制目录和子目录，不包括空目录。\r/E 复制目录和子目录，包括空目录。\r与 /S /E 相同。可以用来修改 /T。\r/V 验证每个新文件的大小。\r/W 提示你在复制前按键。\r/C 即使有错误，也继续复制。\r/I 如果目标不存在，且要复制多个文件，\r则假定目标必须是目录。\r/Q 复制时不显示文件名。\r/F 复制时显示完整的源文件名和目标文件名。\r/L 显示要复制的文件。\r/G 允许将加密文件复制到\r不支持加密的目标。\r/H 也复制隐藏文件和系统文件。\r/R 覆盖只读文件。\r/T 创建目录结构，但不复制文件。不\r包括空目录或子目录。/T /E 包括\r空目录和子目录。\r/U 只复制已经存在于目标中的文件。\r/K 复制属性。一般的 Xcopy 会重置只读属性。\r/N 用生成的短名称复制。\r/O 复制文件所有权和 ACL 信息。\r/X 复制文件审核设置(隐含 /O)。\r/Y 取消提示以确认要覆盖\r现有目标文件。\r/-Y 要提示以确认要覆盖\r现有目标文件。\r/Z 在可重新启动模式下复制网络文件。\r/B 复制符号链接本身与链接目标。\r/J 复制时不使用缓冲的 I/O。推荐复制大文件时使用。\r开关 /Y 可以预先在 COPYCMD 环境变量中设置。\r这可能被命令行上的 /-Y 覆盖。\r 深复制 案例  \rH:\\\u0026gt;XCOPY Java学习相关电子书籍 E:\\temp\\mess\r不加参数只是复制了文件，并没有复制要复制的文件夹里的文件夹\r接下来复制一个包含子文件夹的案例\rH:\\\u0026gt;XCOPY Java学习相关电子书籍 E:\\temp\\aess /s/e\r目标 E:\\temp\\aess 是文件名\r还是目录名\r(F = 文件，D = 目录)? d\rJava学习相关电子书籍\\Algorithms 4th Edition.pdf\rJava学习相关电子书籍\\Core Java. Volume II. Advanced Features, 8th Edition.pdf\rJava学习相关电子书籍\\Core.Java.Volume.I.Fundamentals,8th.Edition.pdf\rJava学习相关电子书籍\\Effective.Enterprise.Java.pdf\rJava学习相关电子书籍\\Flex+白皮书.pdf\rJava学习相关电子书籍\\Flex3高级图表开发指南.pdf\rJava学习相关电子书籍\\Google笔试题.pdf\rJava学习相关电子书籍\\head first javascript中文版.pdf\rJava学习相关电子书籍\\Head First Java中文版(深入浅出Java)[零基础推荐].pdf\rJava学习相关电子书籍\\Head First Servlet JSP(清晰中文版).PDF\rJava学习相关电子书籍\\Head First 设计模式.pdf\rJava学习相关电子书籍\\HttpClient入门.pdf\rJava学习相关电子书籍\\ibatis开发指南.pdf\rJava学习相关电子书籍\\J2EE反模式.pdf\rJava学习相关电子书籍\\Java Collections中的Fail Fast机制.pdf\rJava学习相关电子书籍\\Java Network Programming.pdf\rJava学习相关电子书籍\\Java Web动态图表编程.pdf\rJava学习相关电子书籍\\Java Web开发典型模块大全.pdf\rJava学习相关电子书籍\\Java 编程思想 -- 面向对象逻辑思维.pdf\rJava学习相关电子书籍\\Java.Rules中文版.pdf\rJava学习相关电子书籍\\Java.Web服务开发.pdf\rJava学习相关电子书籍\\JAVA2核心技术第1卷.基础知识7th.pdf\rJava学习相关电子书籍\\Java2网络协议技术内幕.pdf\rJava学习相关电子书籍\\JavaScript王者归来.pdf\rJava学习相关电子书籍\\JavaScript高级程序设计（第3版）中文 高清 完整 (1).pdf\rJava学习相关电子书籍\\JAVA与XML.pdf\rJava学习相关电子书籍\\JAVA优化编程.pdf\rJava学习相关电子书籍\\java入门到详解[推荐].pdf\rJava学习相关电子书籍\\java华为面试题.pdf\rJava学习相关电子书籍\\Java基础与案例开发详解.pdf\rJava学习相关电子书籍\\java基础教程(强烈推荐).pdf\rJava学习相关电子书籍\\Java夜未眠_程序员的心声.pdf\rJava学习相关电子书籍\\java实例详解.pdf\rJava学习相关电子书籍\\Java并发程序设计教程.pdf\rJava学习相关电子书籍\\Java开发利器Myeclipse全面详解.pdf\rJava学习相关电子书籍\\Java开发实战经典.pdf\rJava学习相关电子书籍\\Java数据结构和算法.pdf\rJava学习相关电子书籍\\Java数据结构和算法中文第二版[jb51.net].pdf\rJava学习相关电子书籍\\Java最著名的开源项目.pdf\rJava学习相关电子书籍\\Java核心技术 卷1 基础知识 原书第9版.pdf\rJava学习相关电子书籍\\JAVA核心技术卷2：高级特征.pdf\rJava学习相关电子书籍\\java核心技术，完整中文版.pdf\rJava学习相关电子书籍\\Java线程.pdf\rJava学习相关电子书籍\\Java经典问题答案.pdf\rJava学习相关电子书籍\\Java经典问题答案（带书签）.pdf\rJava学习相关电子书籍\\Java编程及相关书籍.O\u0026amp;#39;Reilly.Creating.Effective.Javahelp.pdf\rJava学习相关电子书籍\\Java编程指南.pdf\rJava学习相关电子书籍\\Java编程规范.pdf\rJava学习相关电子书籍\\Java编辑思想（第四版）..pdf\rJava学习相关电子书籍\\Java网络socket编程详解.pdf\rJava学习相关电子书籍\\Java网络编程技术与实践.pdf\rJava学习相关电子书籍\\Java虚拟机规范（Java SE 7）.pdf\rJava学习相关电子书籍\\Java解惑(中文).pdf\rJava学习相关电子书籍\\Java设计模式之抽象工厂模式.pdf\rJava学习相关电子书籍\\Java语言导学(第3版)CN.pdf\rJava学习相关电子书籍\\Java语言规范中文版(第三版).pdf\rJava学习相关电子书籍\\JAVA面向对象编程(孙卫琴).pdf\rJava学习相关电子书籍\\Java项目开发案例全程实录_第二版_.pdf\rJava学习相关电子书籍\\JDK1.5的泛型实现.pdf\rJava学习相关电子书籍\\jQuery基础教程第四版 (2).pdf\rJava学习相关电子书籍\\jQuery技术内幕：深入解析jQuery架构设计与实现原理.pdf\rJava学习相关电子书籍\\JSTL标签.pdf\rJava学习相关电子书籍\\Oracle与SQLServe..pdf\rJava学习相关电子书籍\\oracle存储过程超详细使用手册..pdf\rJava学习相关电子书籍\\Oracle数据库性能优化.pdf\rJava学习相关电子书籍\\Python Programming With The Java Class Libraries - A Tutorial For Building Web And Enterprise Applications With Jython..pdf\rJava学习相关电子书籍\\Spring.2.0核心技术与最佳实践.廖雪峰.扫描版.pdf\rJava学习相关电子书籍\\Spring基础教程.pdf\rJava学习相关电子书籍\\SPRING开发指南.pdf\rJava学习相关电子书籍\\SSH基础知识 常用命令 配置实例.pdf\rJava学习相关电子书籍\\Struts 2 in Action.pdf\rJava学习相关电子书籍\\Struts中文手册.pdf\rJava学习相关电子书籍\\The Java Virtual Machine Specification, Java SE 7 Edition.pdf\rJava学习相关电子书籍\\Thinking.In.Java(中文版).pdf\rJava学习相关电子书籍\\Windows API开发详解 函数、接口、编程实例.pdf\rJava学习相关电子书籍\\[21天学通Java.6(第5版)].Rogers.Cadenhead\u0026amp;Laura.Lemay.扫描版.pdf\rJava学习相关电子书籍\\[Flex.3实战].（美）艾哈迈德，（美）赫希，（美）阿比德.扫描版.pdf\rJava学习相关电子书籍\\[Java并发编程实践].(Java.Concurrency.in.Practice).Brian.Goetz.文字版(1).pdf\rJava学习相关电子书籍\\[JAVA消息服务].（美）Mark.Richards,.Richard.Monson-Haefel,.David.A.Chappell.文字版.pdf\rJava学习相关电子书籍\\[Java编程及相关书籍].O\u0026amp;#39;Reilly.Creating.Effective.Javahelp.pdf\rJava学习相关电子书籍\\[Java网络编程(第3版,2004)].(Java.Network.Programming).Elliotte.Rusty.Harold.文字版.pdf\rJava学习相关电子书籍\\[Java语言程序设计].(Introduction.to.Java.Programming,.Brief.Version,.8ed),.Liang,.文字版.pdf\rJava学习相关电子书籍\\[代码大全2中文版(完整清晰版)].pdf\rJava学习相关电子书籍\\《Effective JavaScript》扫描版（中文） (3).pdf\rJava学习相关电子书籍\\《SQL查询的艺术》.(张权,郭天娇).[PDF]@jb51.net.pdf\rJava学习相关电子书籍\\《经典JavaEE企业应用实战》 (1).pdf\rJava学习相关电子书籍\\中兴面试题.pdf\rJava学习相关电子书籍\\初学者第1章 对象入门.pdf..pdf\rJava学习相关电子书籍\\北京中软笔试题.pdf\rJava学习相关电子书籍\\华为试题.pdf\rJava学习相关电子书籍\\基于MVC的JavaScript Web富应用开发(完整版).pdf\rJava学习相关电子书籍\\大话数据结构.pdf\rJava学习相关电子书籍\\大话设计模式(1).pdf\rJava学习相关电子书籍\\大话设计模式.pdf\rJava学习相关电子书籍\\实用J2EE设计模式编程指南.pdf\rJava学习相关电子书籍\\实用算法基础教程.pdf\rJava学习相关电子书籍\\广东北电面试题.pdf\rJava学习相关电子书籍\\快速软件开发..pdf\rJava学习相关电子书籍\\排序算法汇总.pdf\rJava学习相关电子书籍\\新手学Java 7编程（第5版）.pdf\rJava学习相关电子书籍\\深入JAVA虚拟机.pdf\rJava学习相关电子书籍\\深入JAVA虚拟机第二版.pdf\rJava学习相关电子书籍\\深入体验Java Web开发内幕——核心基础.pdf\rJava学习相关电子书籍\\深入体验Javaweb开发内幕（高级特性）.pdf\rJava学习相关电子书籍\\深入学习：JFC SWING—JAVA 基础类组件集.pdf\rJava学习相关电子书籍\\王牌1 Java SE 类库查询手册.pdf\rJava学习相关电子书籍\\王牌2 学习成果检测——【练一练】答案.pdf\rJava学习相关电子书籍\\王牌3 Eclipse常用快捷键.pdf\rJava学习相关电子书籍\\王牌4 Eclipse提示与技巧.pdf\rJava学习相关电子书籍\\王牌5 Java程序员职业规划.pdf\rJava学习相关电子书籍\\王牌6 Java程序员面试技巧.pdf\rJava学习相关电子书籍\\王牌7 Java常见面试题.pdf\rJava学习相关电子书籍\\王牌8 扫雷英雄榜——Java常见错误及解决方案.pdf\rJava学习相关电子书籍\\王牌9 优秀程序员之路——Java开发经验及技巧大汇总.pdf\rJava学习相关电子书籍\\百度试题.pdf\rJava学习相关电子书籍\\第10章 Java IO系统.pdf\rJava学习相关电子书籍\\第11章 运行期类型鉴定.pdf\rJava学习相关电子书籍\\第12章 传递和返回对象.pdf\rJava学习相关电子书籍\\第13章 创建窗口和程序片.pdf\rJava学习相关电子书籍\\第14章 多线程.pdf\rJava学习相关电子书籍\\第15章 网络编程(1).pdf\rJava学习相关电子书籍\\第16章 设计范式.pdf\rJava学习相关电子书籍\\第17章 项目.pdf\rJava学习相关电子书籍\\第2章 一切都是对象.pdf\rJava学习相关电子书籍\\第3章 控制程序流程.pdf\rJava学习相关电子书籍\\第4章 初始化和清除.pdf\rJava学习相关电子书籍\\第5章 隐藏实施过程.pdf\rJava学习相关电子书籍\\第6章 类再生.pdf\rJava学习相关电子书籍\\第7章 多形性.pdf\rJava学习相关电子书籍\\第8章 对象的容纳.pdf\rJava学习相关电子书籍\\第9章 异常差错控制.pdf\rJava学习相关电子书籍\\算法与数据结构-实用算法基础教程.pdf\rJava学习相关电子书籍\\算法导论.pdf\rJava学习相关电子书籍\\精通JavaScript动态网页编程(实例版).pdf\rJava学习相关电子书籍\\精通JavaScript（中文清晰优化版）.pdf\rJava学习相关电子书籍\\精通spring - Mastering Spring.pdf\rJava学习相关电子书籍\\精通Struts基于MVC的Java Web设计与开发(1).pdf\rJava学习相关电子书籍\\精通Struts基于MVC的Java Web设计与开发.pdf\rJava学习相关电子书籍\\经典查询练手.pdf\rJava学习相关电子书籍\\编程之美-完整版.pdf\rJava学习相关电子书籍\\网易笔试题.pdf\rJava学习相关电子书籍\\网站开发前台后台技术指南.pdf\rJava学习相关电子书籍\\罗时飞.精通spring.pdf\rJava学习相关电子书籍\\腾讯试题.pdf\rJava学习相关电子书籍\\解析Java虚拟机器开发：权衡优化、高效和安全的最优方案.pdf\rJava学习相关电子书籍\\计算机导论与JavaScript编程(第3版).pdf\rJava学习相关电子书籍\\设计模式：Java语言中的应用.pdf\rJava学习相关电子书籍\\迅雷笔试题.pdf\rJava学习相关电子书籍\\重构-改善既有代码的设计.pdf\rJava学习相关电子书籍\\重构_改善既有代码的设计[高清版]..pdf\rJava学习相关电子书籍\\附录A 使用非JAVA代码.pdf\rJava学习相关电子书籍\\附录B 对比C++和java.pdf\rJava学习相关电子书籍\\附录C Java编程规则.pdf\rJava学习相关电子书籍\\附录D 性能.pdf\rJava学习相关电子书籍\\附录E 关于垃圾收集的一些话.pdf\rJava学习相关电子书籍\\高效程序员的45个习惯：敏捷开发修炼之道.pdf\rJava学习相关电子书籍\\黑客入门(超级详细版).pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\100道趣题.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\15天学会jQuery(0-5).pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\15天学会jQuery(11-15).pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\15天学会jQuery(6-10).pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\15天学会jquery(完整版).pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\css权威指南.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\CSS禅意花园.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\CSS网站布局实录 （第二版）.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\Head First HTML与CSS、XHTML （中文版）.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\HTML5高级程序设计 [西林街 - 千万亿网盘资源 www.xilinjie.com].pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\HTML_5从入门到精通.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\JavaScript DOM编程艺术（中文第二版）.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\JavaScript.DOM高级程序设计.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\JavaScript设计模式.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\JavaScript语言精粹_修订版.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\JavaScript高级程序设计（第3版）中文 高清 完整.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\JQUERY权威指南（完整版）.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\ppk谈JavaScript.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\Secrets of the JavaScript Ninja.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[HTML5游戏开发].(Jeanine Meyer).徐阳等.扫描版.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[HTML5资料]Canvas入门基础教程.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[JavaScript高级程序设计(第2版)].（美）泽卡斯.扫描版.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[jQuery攻略].(印)哈瓦尼.扫描版.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[JQuery菜鸟到忍者].Sitepoint.jQuery.Novice.to.Ninja.Feb.2010.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[ppk谈JavaScript].(荷)科克.扫描版(第一部分).pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[web开发CSS系列].Apress.Pro.CSS.Techniques.Nov.2006.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[web开发CSS系列].SitePoint.Everything.You.Know.About.CSS.is.Wrong.Oct.2008.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[web开发CSS系列].The.Art.and.Science.of.CSS.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[web开发CSS系列].The.Principles.of.Beautiful.Web.Design.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[web开发CSS系列].The.Ultimate.CSS.Reference.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[web开发CSS系列].UIdesignForMereMortals.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[web开发CSS系列].WebDevelopmentSolutions.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[大家网]高性能网站建设指南[www.TopSage.com].pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[深入浅出Javascript].O'reilly.Head.First.Javascript.Jan.2008.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[精通CSS高级Web标准解决方案].CSS.Mastery.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[网页重构xhtml.css].Ajax.In.Action.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[网页重构xhtml.css].Bulletproof_Web_Design.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[网页重构xhtml.css].css.hack.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[网页重构xhtml.css].css.mastery.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[高性能网站建设指南——前端工程师技能精粹(英文原版)].O'Reilly.High.Performance.Web.Sites.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[高性能网站建设进阶指南].(Even.Faster.Web.Sites).Steve.Souders.文字版.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\[高流量网站的CSS设计].(Pro.CSS.for.High.Traffic.Websites).A.Kennedy\u0026amp;I.d.Leon.文字版.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\大巧不工Web前端设计修炼之道 [西林街 - 千万亿网盘资源 www.xilinjie.com].pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\悟透JavaScript.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\淘宝的HTML5实践.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\用AngularJS开发下一代Web应用.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\瞬间之美 Web界面设计如何让用户心动.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\精彩绝伦的CSS.pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\精通JavaScript(图灵计算机科学丛书).pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\网站重构—应用Web标准进行设计[中文版].pdf\rJava学习相关电子书籍\\JavaWEB(htmi,css）、JavaScript、jQuery等相关书籍\\高性能JavaScript.pdf\r复制了 208 个文件\rJavaWEB(htmi,css）、JavaScript、jQuery等相关书籍 这个就是子文件夹\rxcopy D:\\CS E:\\kk\\ /s/c\r 文件重命名命令 ren sourceFileName targetFileName  E:\\temp\\cc\u0026gt;ren d.txt d2.txt;\rE:\\temp\\cc\u0026gt;type d2.txt\rthis is a text file\r 文件移动命令(剪贴命令) move fileName path+FileName  E:\\temp\\cc\u0026gt;move d2.txt E:\\temp\\kk\r移动了 1 个文件。\r 文件删除操作 del fileName  E:\\temp\\kk\u0026gt;dir\r驱动器 E 中的卷是 新加卷\r卷的序列号是 64E8-4ABF\rE:\\temp\\kk 的目录\r2020/02/14 19:10 \u0026lt;DIR\u0026gt; .\r2020/02/14 19:10 \u0026lt;DIR\u0026gt; ..\r2020/02/14 18:59 19 d2.txt\r1 个文件 19 字节\r2 个目录 264,645,689,344 可用字节\rE:\\temp\\kk\u0026gt;del d2.txt\rE:\\temp\\kk\u0026gt;dir\r驱动器 E 中的卷是 新加卷\r卷的序列号是 64E8-4ABF\rE:\\temp\\kk 的目录\r2020/02/14 19:12 \u0026lt;DIR\u0026gt; .\r2020/02/14 19:12 \u0026lt;DIR\u0026gt; ..\r0 个文件 0 字节\r2 个目录 264,645,689,344 可用字节\r 删除特定文件夹下的文件  E:\\temp\u0026gt;del kk\rE:\\temp\\kk\\*, 是否确认(Y/N)? Y\r删除kk文件夹下所以的文件\r 文件夹删除 rd /s path  E:\\temp\\kk\u0026gt;rd /s dg\rdg, 是否确认(Y/N)? Y\r 文件夹删除 rd path  PS E:\\temp\u0026gt; dir 目录: E:\\temp\rMode LastWriteTime Length Name\r---- ------------- ------ ----\rd----- 2020/2/15 10:40 cc\rd----- 2020/2/15 12:01 kk\r-a---- 2020/2/14 18:59 19 d2.txt\rPS E:\\temp\u0026gt; rd cc  dos命令下正则表达式有效  D:\\ter\u0026gt;del *.txt ;\r"});index.add({'id':53,'href':'/life/docs/javadir/basedir/jsp_dir/jsp_jstl_core%E6%A0%87%E7%AD%BE%E5%BA%93/','title':"jsp jstl core 标签库 ",'section':"jsp 基础知识 ",'content':"JSTL标签库 #  JSTL主要有五大类标签库\n core标签库(核心标签库),包括通用标签(输出标签),流程控制和循环控制标签 fmt标签库,包括格式化,国际格式化标签等 fn标签库,函数标签库 XML标签库,关于XML操作的标签库 SQL标签库,操作数据库标签  core标签库用法 #  使用core标签前必须添加taglie指令\n %@ taglib prefix=\u0026ldquo;c\u0026rdquo; uri=\u0026ldquo;http://java.sun.com/jsp/jstl/core\u0026quot; %\u0026gt;\n  \u0026lt;c:set\u0026gt;在某个范围设定某个值   \u0026lt;c:set value=\u0026ldquo;表达式\u0026rdquo; var=\u0026ldquo;varname\u0026rdquo; [scope=\u0026ldquo;request|page|session|application\u0026rdquo;]\u0026gt;\u0026lt;/c:set\u0026gt;\n \u0026lt;c:set value=\u0026quot;${1+2 }\u0026quot; var=\u0026quot;variable\u0026quot;\u0026gt;\u0026lt;/c:set\u0026gt;\r${variable }\r \u0026lt;c:out\u0026gt;把表达式的结构输出到页面中   \u0026lt;c:out value=\u0026ldquo;表达式\u0026rdquo; [escapeXml=\u0026ldquo;true|false\u0026rdquo;]\u0026gt;\u0026lt;/c:out\u0026gt;\n \u0026lt;c:set value=\u0026quot;${1+2 }\u0026quot; var=\u0026quot;variable\u0026quot;\u0026gt;\u0026lt;/c:set\u0026gt;\r\u0026lt;c:out value=\u0026quot;${variable }\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r \u0026lt;c:if\u0026gt;条件判断   \u0026lt;c:if test=\u0026ldquo;判断条件\u0026rdquo; [var=\u0026ldquo;varname\u0026rdquo;] [scope=\u0026ldquo;request|page|session|application\u0026rdquo;]\u0026gt; 条件为真执行的语句 \u0026lt;/c:if\u0026gt;\n \u0026lt;c:if test=\u0026quot;${1\u0026lt;2 }\u0026quot; var=\u0026quot;result\u0026quot;\u0026gt;\r\u0026lt;c:out value=\u0026quot;${result }\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r\u0026lt;/c:if\u0026gt;\r \u0026lt;c:choose\u0026gt;,\u0026lt;c:when\u0026gt;,\u0026lt;c:otherwise\u0026gt;流程控制标签   \u0026lt;c:choose\u0026gt; \u0026lt;c:when test=\u0026ldquo;表达式\u0026rdquo;\u0026gt; 表达式为真执行的语句 \u0026lt;/c:when\u0026gt; [\u0026lt;c:otherwise\u0026gt; 表达式为假执行的语句 \u0026lt;/c:otherwise\u0026gt;] \u0026lt;/c:choose\u0026gt;\n  \u0026lt;c:when\u0026gt;必须在\u0026lt;c:otherwise\u0026gt;前边,\u0026lt;c:choose\u0026gt;可以添加多个\u0026lt;c:choose\u0026gt;,类似于if else if写法\n \u0026lt;c:set value=\u0026quot;8\u0026quot; var=\u0026quot;variable1\u0026quot;\u0026gt;\u0026lt;/c:set\u0026gt;\r\u0026lt;c:set value=\u0026quot;9\u0026quot; var=\u0026quot;variable2\u0026quot;\u0026gt;\u0026lt;/c:set\u0026gt;\r\u0026lt;c:choose\u0026gt;\r\u0026lt;c:when test=\u0026quot;${variable1%2==0 }\u0026quot;\u0026gt;\r\u0026lt;c:out value=\u0026quot;variable1:偶数\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r\u0026lt;c:choose\u0026gt;\r\u0026lt;c:when test=\u0026quot;${variable2%2==0 }\u0026quot;\u0026gt;\r\u0026lt;c:out value=\u0026quot;variable2:偶数\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r\u0026lt;/c:when\u0026gt;\r\u0026lt;c:otherwise\u0026gt;\r\u0026lt;c:out value=\u0026quot;variable2:奇数\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r\u0026lt;/c:otherwise\u0026gt;\r\u0026lt;/c:choose\u0026gt;\r\u0026lt;/c:when\u0026gt;\r\u0026lt;c:otherwise\u0026gt;\r\u0026lt;c:out value=\u0026quot;variable1:奇数\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r\u0026lt;/c:otherwise\u0026gt;\r\u0026lt;/c:choose\u0026gt;\r \u0026lt;c:forEach\u0026gt;迭代标签   \u0026lt;c:forEach [var=\u0026ldquo;varname\u0026rdquo;] [varStatus=\u0026ldquo;varStatusName\u0026rdquo;] [begin=\u0026ldquo;开始\u0026rdquo;] [end=\u0026ldquo;结束\u0026rdquo;] [step=\u0026ldquo;步数\u0026rdquo;]\u0026gt; java or html code \u0026lt;/c:forEach\u0026gt;\n \u0026lt;table\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;行号1\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;行号2\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;当前迭代项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;是否第一项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;是否最后一项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;结果\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;c:forEach var=\u0026quot;i\u0026quot; varStatus=\u0026quot;j\u0026quot; begin=\u0026quot;1\u0026quot; end=\u0026quot;10\u0026quot; step=\u0026quot;2\u0026quot;\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;${j.index }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.count }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.current }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.first }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.last }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${i }\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/c:forEach\u0026gt;\r\u0026lt;/table\u0026gt;\r  \u0026lt;c:forEach item=\u0026ldquo;collection\u0026rdquo; [varStatus=\u0026ldquo;varStatusName\u0026rdquo; [begin=\u0026ldquo;开始\u0026rdquo;] [end=\u0026ldquo;结束\u0026rdquo;] [step=\u0026ldquo;步数\u0026rdquo;]]\u0026gt; java or heml code \u0026lt;/c:forEach\u0026gt;\n \u0026lt;%\rList list=new ArrayList();\rlist.add(\u0026quot;zhangsan\u0026quot;);\rlist.add(\u0026quot;lisi\u0026quot;);\rlist.add(\u0026quot;wangwu\u0026quot;);\rlist.add(\u0026quot;liuliu\u0026quot;);\rpageContext.setAttribute(\u0026quot;collection\u0026quot;, list);\r%\u0026gt;\r\u0026lt;table\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;行号1\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;行号2\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;当前迭代项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;是否第一项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;是否最后一项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;姓名\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;c:forEach items=\u0026quot;${collection }\u0026quot; var=\u0026quot;i\u0026quot; varStatus=\u0026quot;j\u0026quot;\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;${j.index }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.count }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.current }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.first }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.last }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${i }\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/c:forEach\u0026gt;\r\u0026lt;/table\u0026gt;\r \u0026lt;c;forTokens\u0026gt;字符串分割标签   \u0026lt;c:forTokens items=\u0026ldquo;字符串\u0026rdquo; delims=\u0026ldquo;分割符\u0026rdquo; [var=\u0026ldquo;別名\u0026rdquo;] [varStatus=\u0026ldquo;varStatusName\u0026rdquo;] [begin=\u0026ldquo;开始\u0026rdquo;] [end=\u0026ldquo;结束\u0026rdquo;] [step=\u0026ldquo;步数\u0026rdquo;]\u0026gt; java or html code \u0026lt;/c:forTokens\u0026gt;\n \u0026lt;table\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;行号1\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;行号2\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;当前迭代项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;是否第一项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;是否最后一项\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;子字符串\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;c:forTokens items=\u0026quot;this is a jstl code\u0026quot; delims=\u0026quot; \u0026quot; var=\u0026quot;i\u0026quot; varStatus=\u0026quot;j\u0026quot;\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;${j.index }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.count }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.current }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.first }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${j.last }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${i }\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/c:forTokens\u0026gt;\r \u0026lt;c;remove\u0026gt;删除某个范围内的值   \u0026lt;c:remove var=\u0026ldquo;varname\u0026rdquo; [scope=\u0026ldquo;request|page|session|application\u0026rdquo;]/\u0026gt;\n \u0026lt;%\rpageContext.setAttribute(\u0026quot;varname1\u0026quot;, \u0026quot;one\u0026quot;);\rrequest.setAttribute(\u0026quot;varname2\u0026quot;, \u0026quot;two\u0026quot;);\rsession.setAttribute(\u0026quot;varname3\u0026quot;, \u0026quot;three\u0026quot;);\rapplication.setAttribute(\u0026quot;varname4\u0026quot;, \u0026quot;four\u0026quot;);\r%\u0026gt;\r\u0026lt;table\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;pageContext\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;request\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;session\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;application\u0026lt;/th\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;${varname1 }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${varname2 }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${varname3 }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${varname4 }\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/table\u0026gt;\r\u0026lt;c:remove var=\u0026quot;varname1\u0026quot;/\u0026gt;\r\u0026lt;c:remove var=\u0026quot;varname2\u0026quot;/\u0026gt;\r\u0026lt;c:remove var=\u0026quot;varname3\u0026quot;/\u0026gt;\r\u0026lt;c:remove var=\u0026quot;varname4\u0026quot;/\u0026gt;\r\u0026lt;c:out value=\u0026quot;删除后\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;table\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;pageContext\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;request\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;session\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;application\u0026lt;/th\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;${varname1 }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${varname2 }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${varname3 }\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;${varname4 }\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/table\u0026gt;\r \u0026lt;c:catch\u0026gt;抛出异常标签   \u0026lt;c:catch [var=\u0026ldquo;varname\u0026rdquo;]\u0026gt; code \u0026lt;/c:catch\u0026gt;\n \u0026lt;c:catch var=\u0026quot;error\u0026quot;\u0026gt;\r\u0026lt;%\rint[] arr=new int[4];\rint j=arr[5];\r%\u0026gt;\r\u0026lt;/c:catch\u0026gt;\r\u0026lt;c:out value=\u0026quot;错误信息:${error }\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;c:catch var=\u0026quot;error1\u0026quot;\u0026gt;\r\u0026lt;%\rint j=5/0;\r%\u0026gt;\r\u0026lt;/c:catch\u0026gt;\r\u0026lt;c:out value=\u0026quot;错误信息:${error1 }\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r \u0026lt;c:param\u0026gt;向导入的页面传入参数,与\u0026lt;c:import\u0026gt;结合使用   \u0026lt;c:param name=\u0026ldquo;paramName\u0026rdquo; value=\u0026ldquo;paramValue\u0026rdquo;\u0026gt;\u0026lt;/c:param\u0026gt;\n \u0026lt;c:import\u0026gt;导入静|动态文件   \u0026lt;c:import url=\u0026ldquo;url\u0026rdquo; [context=\u0026ldquo;context\u0026rdquo;] [var=\u0026ldquo;varname\u0026rdquo;] [scope=\u0026ldquo;request|page|session|application\u0026rdquo;] [charEncoding=\u0026ldquo;coding\u0026rdquo;]\u0026gt; [\u0026lt;c:param name=\u0026ldquo;paramName\u0026rdquo; [value=\u0026ldquo;valueName\u0026rdquo;]\u0026gt;\u0026lt;/c:param\u0026gt;] \u0026lt;/c:import\u0026gt;\n \u0026lt;c:import url=\u0026quot;https://www.baidu.com/s\u0026quot;\u0026gt;\r\u0026lt;c:param name=\u0026quot;wd\u0026quot; value=\u0026quot;java\u0026quot;/\u0026gt;\r\u0026lt;/c:import\u0026gt;\r \u0026lt;c:redirect\u0026gt;重定向另一个页面   \u0026lt;c:redirect url=\u0026ldquo;url\u0026rdquo; [contex=\u0026ldquo;context\u0026rdquo;]\u0026gt; [\u0026lt;c:param name=\u0026ldquo;paramName\u0026rdquo; [value=\u0026ldquo;valueName\u0026rdquo;]\u0026gt;\u0026lt;/c:param\u0026gt;] \u0026lt;/c:redirect\u0026gt;\n \u0026lt;c:redirect url=\u0026quot;https://www.baidu.com/s\u0026quot;\u0026gt;\r\u0026lt;c:param name=\u0026quot;wd\u0026quot; value=\u0026quot;java\u0026quot;/\u0026gt;\r\u0026lt;/c:redirect\u0026gt;  \u0026lt;c:url\u0026gt;生成一个url   \u0026lt;c:url value=\u0026ldquo;url\u0026rdquo; [context=\u0026ldquo;context\u0026rdquo;] var=\u0026ldquo;varname\u0026rdquo; [scope=\u0026ldquo;request|page|session|application\u0026rdquo;]\u0026gt; [\u0026lt;c:param name=\u0026ldquo;paramName\u0026rdquo; [value=\u0026ldquo;valueName\u0026rdquo;]\u0026gt;\u0026lt;/c:param\u0026gt;] \u0026lt;/c:url\u0026gt;\n \u0026lt;c:url value=\u0026quot;https://www.baidu.com/s\u0026quot; var=\u0026quot;varname\u0026quot;\u0026gt;\r\u0026lt;c:param name=\u0026quot;wd\u0026quot; value=\u0026quot;java\u0026quot;\u0026gt;\u0026lt;/c:param\u0026gt;\r\u0026lt;/c:url\u0026gt;\r\u0026lt;c:out value=\u0026quot;${varname }\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r\u0026lt;br\u0026gt;\r\u0026lt;c:url value=\u0026quot;/index.jsp\u0026quot; var=\u0026quot;varname\u0026quot;\u0026gt;\u0026lt;/c:url\u0026gt;\r\u0026lt;c:out value=\u0026quot;${varname }\u0026quot;\u0026gt;\u0026lt;/c:out\u0026gt;\r 表格合并   \u0026lt;div class=\u0026quot;page-inner mt--5\u0026quot; style=\u0026quot;margin-bottom: 1rem;\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;row mt--2\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;col-md-12\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;card full-height\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;card-header\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;card-head-row\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;card-title\u0026quot;\u0026gt;工作事项配置\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026quot;card-body\u0026quot;\u0026gt;\r\u0026lt;form class=\u0026quot;form-horizontal\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;row form-group\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;col-md-12\u0026quot;\u0026gt;\r\u0026lt;table class=\u0026quot;table table-bordered table-striped\u0026quot;\u0026gt;\r\u0026lt;thead\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;阶段\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;工作事项\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;名称\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;排序\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;责任人\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;描述\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;编辑\u0026lt;/th\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/thead\u0026gt;\r\u0026lt;tbody\u0026gt;\r\u0026lt;c:forEach items=\u0026quot;${projectWorkStageConfigVoList}\u0026quot; var=\u0026quot;ProjectWorkStageConfigVo\u0026quot; varStatus=\u0026quot;StatusWorkStageConfigVo\u0026quot;\u0026gt;\r\u0026lt;c:forEach items=\u0026quot;${ProjectWorkStageConfigVo.projectPhaseConfigVoList}\u0026quot; var=\u0026quot;ProjectPhaseConfigVo\u0026quot; varStatus=\u0026quot;StatusPhaseConfigVo\u0026quot;\u0026gt;\r\u0026lt;c:forEach items=\u0026quot;${ProjectPhaseConfigVo.projectPhaseConfigList}\u0026quot; var=\u0026quot;ProjectPhaseConfig\u0026quot; varStatus=\u0026quot;StatusConfig\u0026quot;\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;c:choose\u0026gt;\r\u0026lt;c:when test=\u0026quot;${ StatusConfig.first \u0026amp;\u0026amp; StatusPhaseConfigVo.first}\u0026quot;\u0026gt;\r\u0026lt;td rowspan=\u0026quot;${fn:length(ProjectWorkStageConfigVo.projectPhaseConfigVoList) * fn:length(ProjectPhaseConfigVo.projectPhaseConfigList)}\u0026quot;\u0026gt;\r${ProjectWorkStageConfigVo.workStageName}\r\u0026lt;/td\u0026gt;\r\u0026lt;/c:when\u0026gt;\r\u0026lt;/c:choose\u0026gt;\r\u0026lt;c:choose\u0026gt;\r\u0026lt;c:when test=\u0026quot;${ StatusConfig.first}\u0026quot;\u0026gt;\r\u0026lt;td rowspan=\u0026quot;${fn:length(ProjectPhaseConfigVo.projectPhaseConfigList)}\u0026quot;\u0026gt;\r${ProjectPhaseConfigVo.projectPhaseName}\r\u0026lt;/td\u0026gt;\r\u0026lt;/c:when\u0026gt;\r\u0026lt;/c:choose\u0026gt;\r\u0026lt;td \u0026gt;${ProjectPhaseConfig.parName} \u0026lt;/td\u0026gt;\r\u0026lt;td \u0026gt;${ProjectPhaseConfig.sorting} \u0026lt;/td\u0026gt;\r\u0026lt;td \u0026gt;${ProjectPhaseConfig.parValues} \u0026lt;/td\u0026gt;\r\u0026lt;td \u0026gt;${ProjectPhaseConfig.remark} \u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;\r\u0026lt;button type=\u0026quot;button\u0026quot; onclick=\u0026quot;editProjectPhaseConfig('${ProjectPhaseConfig.id}');\u0026quot;\rstyle=\u0026quot;margin-left: 5px;\u0026quot;\rclass=\u0026quot;btn btn-primary btn-xs tooltips\u0026quot;\rdata-placement=\u0026quot;bottom\u0026quot; data-original-title=\u0026quot;编辑\u0026quot;\u0026gt;\r\u0026lt;i class=\u0026quot;fa fa-pen\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\r\u0026lt;/button\u0026gt;\r\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/c:forEach\u0026gt;\r\u0026lt;/c:forEach\u0026gt;\r\u0026lt;/c:forEach\u0026gt;\r\u0026lt;/tbody\u0026gt;\r\u0026lt;/table\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r"});index.add({'id':54,'href':'/life/docs/operating_system/three_chapter/','title':"第三章 内存管理 ",'section':"操作系统 ",'content':"内存管理 #  "});index.add({'id':55,'href':'/life/docs/car_study/three/','title':"科目三",'section':"汽车教学",'content':""});index.add({'id':56,'href':'/life/docs/databases/mysql/mysql_basis/','title':"基本命令",'section':"mysql学习笔记",'content':"  停止命令：net stop mysql\n  启动命令：net start mysql\n  登陆 mysql -u 用户名 -p\n  查看数据库版本: mysql \u0026ndash;version：用于在未登录情况下，查看本机mysql版本,select version();：登录情况下，查看链接的库版本\n  显示所有数据库：show databases;\n  进入指定的库：use 库名;\n  显示当前库中所有的表：show tables;\n  查看其他库中所有的表：show tables from 库名;\n  查看表的创建语句：show create table 表名;\n  查看表结构：desc 表名;\n  SQL的语言分类 #  DQL（Data Query Language）：数据查询语言\rselect 相关语句\rDML（Data Manipulate Language）：数据操作语言\rinsert 、update、delete 语句\rDDL（Data Define Languge）：数据定义语言\rcreate、drop、alter 语句\rTCL（Transaction Control Language）：事务控制语言\rset autocommit=0、start transaction、savepoint、commit、rollback\rmysql语法规范 #  不区分大小写，但建议关键字大写，表名、列名小写\r每条命令最好用英文分号结尾\r每条命令根据需要，可以进行缩进或换行\r注释\r单行注释：#注释文字\r单行注释：-- 注释文字 ，注意， 这里需要加空格\r多行注释：/* 注释文字 */\rMySQL删除数据库中的所有表 #  SELECT CONCAT('drop table ',table_name,';') FROM information_schema.`TABLES` WHERE table_schema='数据库名';\r# 然后复制结果 然后重新执行\r"});index.add({'id':57,'href':'/life/docs/hugo%E5%AD%A6%E4%B9%A0/','title':"hugo教程",'section':"Docs",'content':"hugo学习\n"});index.add({'id':58,'href':'/life/docs/operating_system/one_chapter/1_3_/','title':" 操作系统的发展与分类 ",'section':"第一章 操作系统概述 ",'content':"一:知识总览 #  二:分类描述 #   1:手工操作阶段   2:批处理阶段——单道批处理系统   引入脱机输入/输出技术（用外围机+磁带完成），并由监督程序负责控制作业的输入、输出\n  和上面不同的是不必等结果输出在执行而是计算机执行完毕马上将结果输入磁带中并在同事已经开始执行其它数据程序\n  3:批处理阶段——多道批处理系统   4:分时操作系统   5:实时操作系统   主要优点：能够优先响应一些紧急任务，某些紧急任务不需时间片排队。在实时操作系统的控制下，计算机系统接收到外部信号后及时进行处理，并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性  三:其他几种操作系统 #   网络操作系统：是伴随着计算机网络的发展而诞生的，能把网络中各个计算机有机地结合起来，实现数据传送等功能，实现网络中各种资源的共享（如文件共享）和各台计算机之间的通信。（如：Windows NT 就是一种典型的网络操作系统，网站服务器就可以使用） 分布式操作系统：主要特点是分布性和并行性。系统中的各台计算机地位相同，任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务。 个人计算机操作系统：如 Windows XP、MacOS，方便个人使用。  四:知识回顾与重要考点 #  "});index.add({'id':59,'href':'/life/docs/operating_system/two_chapter/2_1_3/','title':"进程控制",'section':"第二章 进程管理 ",'content':""});index.add({'id':60,'href':'/life/docs/computer_network/network_architecture/1.1.3%E9%80%9F%E7%8E%87%E7%9B%B8%E5%85%B3%E7%9A%84%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/','title':"速率",'section':"网络体系结构",'content':"速率 #   速率即数据率或称数据传输率或比特率\n  速率即数据率或称数据传输率或比特率 比特 1/0 位 连接在计算机网络上的主机在数字信道上传输数据位数的速率 单位是b/s , kb/s,Gb/s,Gb/s ,Tb/s 发送端 ==\u0026gt; 接收端 速率是10b/s 0101010101  宽带 #   \u0026ldquo;带宽\u0026quot;原本指某个信号具有的频道宽度，即最高频率与最低频率之差，单位是赫兹(Hz) 计算机网络中，带宽用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的\u0026quot;最高数据率\u0026rdquo;。单位是\u0026quot;比特/秒\u0026quot;  吞吐量 #   表示在单位时间内通过某个网络(或信道、接口)的数据量。单位b/s,kb/s,Mb/s 吞吐量受网络的带宽或网络的额定速率的限制   时延 #    时延 = 发送时延 + 传播时延 + 排队时延 + 处理时延\n  发送时延 : 从发送分组的第一个比特算起，到分组的最后一个比特发送完毕所需的时间(分组交换/路由器将数据推到信道上的时间)\n  传播时延 : 这里看什么介质来传播数据 计算机网络中是 数字信号 -\u0026gt; 模拟信号 因此假如是光纤那么传播速度非常快2x⑩9 当然也有用无线电波我个人不知道无限电波是怎样模拟的无法知道速度究竟怎样,公示 传播时间 = 数据长度 / 传播速率(发送速率,带宽)\n  排队时延 : 等待输出/入链路可用\n  处理时延 : 检查找出口 (如果大陆地区还会有数据拆分与重新组合过滤检查)\n  时延带宽积 (可以理解为物理中的长度) #   时延带宽积 = 传播时延 x 带宽 (时间 x 速度)  往返时延RTT #    从发送方发送数据开始，到发送方收到接收方的确认\n  RTT 包括 往返传播时延 = 传播时延 * 2 ，末端处理时间\n  利用率 (信道利用率 , 网络利用率) #    信道利用率 有数据通过时间 / 总体通过时间(有无数据通过时间)\n  网络利用率 信道利用率加权平均值\n  "});index.add({'id':61,'href':'/life/docs/operating_system/windows/dos_network/','title':" DOS网络操作命令 ",'section':"windows学习与使用 ",'content':"DOS网络操作命令 #   netstat -ano (列出所有端口的情况)  PS C:\\Users\\noatn\u0026gt; netstat -ano\r活动连接\r协议 本地地址 外部地址 状态 PID\rTCP 0.0.0.0:135 0.0.0.0:0 LISTENING 1028\rTCP 0.0.0.0:445 0.0.0.0:0 LISTENING 4\rTCP 0.0.0.0:1024 0.0.0.0:0 LISTENING 852\rTCP 0.0.0.0:1025 0.0.0.0:0 LISTENING 2232\rTCP 0.0.0.0:3306 0.0.0.0:0 LISTENING 3672\rTCP 0.0.0.0:5040 0.0.0.0:0 LISTENING 5660\rTCP 0.0.0.0:7680 0.0.0.0:0 LISTENING 6628\rTCP 0.0.0.0:49664 0.0.0.0:0 LISTENING 868\rTCP 0.0.0.0:49665 0.0.0.0:0 LISTENING 784\rTCP 0.0.0.0:49666 0.0.0.0:0 LISTENING 1580\rTCP 0.0.0.0:49667 0.0.0.0:0 LISTENING 1316\rTCP 127.0.0.1:1036 0.0.0.0:0 LISTENING 2536\rTCP 127.0.0.1:1155 127.0.0.1:1156 ESTABLISHED 1204\rTCP 127.0.0.1:1156 127.0.0.1:1155 ESTABLISHED 1204\rTCP 127.0.0.1:1157 127.0.0.1:1158 ESTABLISHED 1204\rTCP 127.0.0.1:1158 127.0.0.1:1157 ESTABLISHED 1204\rTCP 127.0.0.1:6942 0.0.0.0:0 LISTENING 1204\rTCP 127.0.0.1:10000 0.0.0.0:0 LISTENING 3556\rTCP 127.0.0.1:63342 0.0.0.0:0 LISTENING 1204\rTCP 192.168.31.208:139 0.0.0.0:0 LISTENING 4\rTCP 192.168.31.208:3810 104.18.25.243:80 ESTABLISHED 6976\rTCP 192.168.31.208:4258 13.107.3.254:443 ESTABLISHED 6976\rTCP 192.168.31.208:4368 40.90.189.152:443 ESTABLISHED 3700\rTCP 192.168.31.208:4571 111.231.211.246:443 FIN_WAIT_1 9324\rTCP 192.168.31.208:4589 111.12.62.190:443 LAST_ACK 9324\rTCP 192.168.31.208:4593 185.199.108.153:443 FIN_WAIT_1 9324\rTCP 192.168.31.208:4595 112.25.253.5:443 ESTABLISHED 9324\rTCP 192.168.31.208:4596 223.85.58.79:443 CLOSE_WAIT 9324\rTCP 192.168.31.208:4600 223.85.58.79:443 LAST_ACK 9324\rTCP 192.168.31.208:4602 192.144.173.136:7823 ESTABLISHED 9324\rTCP 192.168.31.208:4609 192.30.252.153:80 LAST_ACK 9324\rTCP 192.168.31.208:4610 192.30.252.153:80 LAST_ACK 9324\rTCP 192.168.31.208:4611 192.30.252.153:80 LAST_ACK 9324\rTCP 192.168.31.208:4616 209.197.3.24:443 LAST_ACK 9324\rTCP 192.168.31.208:4617 140.205.33.7:443 TIME_WAIT 0\rTCP [::]:135 [::]:0 LISTENING 1028\rTCP [::]:445 [::]:0 LISTENING 4\rTCP [::]:1024 [::]:0 LISTENING 852\rTCP [::]:1025 [::]:0 LISTENING 2232\rTCP [::]:3306 [::]:0 LISTENING 3672\rTCP [::]:7680 [::]:0 LISTENING 6628\rTCP [::]:49664 [::]:0 LISTENING 868\rTCP [::]:49665 [::]:0 LISTENING 784\rTCP [::]:49666 [::]:0 LISTENING 1580\rTCP [::]:49667 [::]:0 LISTENING 1316\rUDP 0.0.0.0:500 *:* 3540\rUDP 0.0.0.0:4500 *:* 3540\rUDP 0.0.0.0:5050 *:* 5660\rUDP 0.0.0.0:5353 *:* 6324\rUDP 0.0.0.0:5353 *:* 9324\rUDP 0.0.0.0:5353 *:* 6324\rUDP 0.0.0.0:5353 *:* 8372\rUDP 0.0.0.0:5353 *:* 10032\rUDP 0.0.0.0:5353 *:* 10032\rUDP 0.0.0.0:5353 *:* 9324\rUDP 0.0.0.0:5353 *:* 8372\rUDP 0.0.0.0:5353 *:* 2076\rUDP 0.0.0.0:5355 *:* 2076\rUDP 0.0.0.0:49665 *:* 3636\rUDP 0.0.0.0:57076 *:* 2076\rUDP 0.0.0.0:58215 *:* 2076\rUDP 127.0.0.1:1900 *:* 9868\rUDP 127.0.0.1:40000 *:* 3556\rUDP 127.0.0.1:49664 *:* 4008\rUDP 127.0.0.1:51112 *:* 6976\rUDP 127.0.0.1:62732 *:* 9868\rUDP 192.168.31.208:137 *:* 4\rUDP 192.168.31.208:138 *:* 4\rUDP 192.168.31.208:1900 *:* 9868\rUDP 192.168.31.208:2177 *:* 8424\rUDP 192.168.31.208:62731 *:* 9868\rUDP [::]:500 *:* 3540\rUDP [::]:4500 *:* 3540\rUDP [::]:5353 *:* 6324\rUDP [::]:5353 *:* 2076\rUDP [::]:5353 *:* 8372\rUDP [::]:5353 *:* 10032\rUDP [::]:5353 *:* 9324\rUDP [::]:5355 *:* 2076\rUDP [::]:57076 *:* 2076\rUDP [::]:58215 *:* 2076\rUDP [::1]:1900 *:* 9868\rUDP [::1]:62730 *:* 9868\rUDP [fe80::6d6c:6e66:c80:456b%16]:1900 *:* 9868\rUDP [fe80::6d6c:6e66:c80:456b%16]:2177 *:* 8424\rUDP [fe80::6d6c:6e66:c80:456b%16]:62729 *:* 9868\r 查看被占用端口对应的PID，输入命令： netstat -ano|findstr \u0026lsquo;3306\u0026rsquo; ，回车，记下最后一位数字，即PID,这里是3672  PS C:\\Users\\noatn\u0026gt; netstat -ano|findstr '3306' TCP 0.0.0.0:3306 0.0.0.0:0 LISTENING 3672\rTCP [::]:3306 [::]:0 LISTENING 3672\r ipconfig用法  PS C:\\WINDOWS\\system32\u0026gt; ipconfig /?\r用法:\ripconfig [/allcompartments] [/? | /all |\r/renew [adapter] | /release [adapter] |\r/renew6 [adapter] | /release6 [adapter] |\r/flushdns | /displaydns | /registerdns |\r/showclassid adapter |\r/setclassid adapter [classid] |\r/showclassid6 adapter |\r/setclassid6 adapter [classid] ]\r其中\radapter 连接名称\r(允许使用通配符 * 和 ?，参见示例)\r选项:\r/? 显示此帮助消息\r/all 显示完整配置信息。\r/release 释放指定适配器的 IPv4 地址。\r/release6 释放指定适配器的 IPv6 地址。\r/renew 更新指定适配器的 IPv4 地址。\r/renew6 更新指定适配器的 IPv6 地址。\r/flushdns 清除 DNS 解析程序缓存。\r/registerdns 刷新所有 DHCP 租用并重新注册 DNS 名称\r/displaydns 显示 DNS 解析程序缓存的内容。\r/showclassid 显示适配器允许的所有 DHCP 类 ID。\r/setclassid 修改 DHCP 类 ID。\r/showclassid6 显示适配器允许的所有 IPv6 DHCP 类 ID。\r/setclassid6 修改 IPv6 DHCP 类 ID。\r默认情况下，仅显示绑定到 TCP/IP 的每个适配器的 IP 地址、子网掩码和\r默认网关。\r对于 Release 和 Renew，如果未指定适配器名称，则会释放或更新所有绑定\r到 TCP/IP 的适配器的 IP 地址租用。\r对于 Setclassid 和 Setclassid6，如果未指定 ClassId，则会删除 ClassId。\r示例:\r\u0026gt; ipconfig ... 显示信息\r\u0026gt; ipconfig /all ... 显示详细信息\r\u0026gt; ipconfig /renew ... 更新所有适配器\r\u0026gt; ipconfig /renew EL* ... 更新所有名称以 EL 开头\r的连接\r\u0026gt; ipconfig /release *Con* ... 释放所有匹配的连接，\r例如“有线以太网连接 1”或\r“有线以太网连接 2”\r\u0026gt; ipconfig /allcompartments ... 显示有关所有隔离舱的\r信息\r\u0026gt; ipconfig /allcompartments /all ... 显示有关所有隔离舱的\r详细信息\r1.显示网络协议配置 ipconfig 如果要查看跟详细的网络配置信息 /all 包括MAC地址、IP地址、子网掩码、默认网关、DNS\r2.更新IP地址 ipconfig/renew\r3.初始化网络配置 ipconfig/registerdns 将网络状态还原到初始状态\r4.显示本地DNS信息 ipconfig/displaydns\r5.清除本地DNS缓存内容 ipconfig/flushdns\r6.取消IP地址租用 ipconfig/release DHCP服务器：动态获取到IP地址及其他网络设置\r7.备份网络设置 ipconfig/all\u0026gt;c:\\bak.txt 将所有网络配置信息备份到bak.txt中\r ipconfig 举例用法 显示本地DNS信息  PS C:\\WINDOWS\\system32\u0026gt; ipconfig /displaydns\rWindows IP 配置\r1.0.0.127.in-addr.arpa\r----------------------------------------\r记录名称. . . . . . . : 1.0.0.127.in-addr.arpa.\r记录类型. . . . . . . : 12\r生存时间. . . . . . . : 540319\r数据长度. . . . . . . : 8\r部分. . . . . . . . . : 答案\rPTR 记录 . . . . . . : www.xmind.net\rroot-c3-ca2-2009.ocsp.d-trust.net\r----------------------------------------\r记录名称. . . . . . . : root-c3-ca2-2009.ocsp.d-trust.net\r记录类型. . . . . . . : 5\r生存时间. . . . . . . : 9\r数据长度. . . . . . . : 8\r部分. . . . . . . . . : 答案\rCNAME 记录 . . . . . : ocsp.d-trust.net\r记录名称. . . . . . . : ocsp.d-trust.net\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 9\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 213.61.227.196\rhm.baidu.com\r----------------------------------------\r记录名称. . . . . . . : hm.baidu.com\r记录类型. . . . . . . : 5\r生存时间. . . . . . . : 194\r数据长度. . . . . . . : 8\r部分. . . . . . . . . : 答案\rCNAME 记录 . . . . . : hm.e.shifen.com\r记录名称. . . . . . . : hm.e.shifen.com\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 194\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 39.156.66.179\rwww.xmind.net\r----------------------------------------\r没有 AAAA 类型的记录\rwww.xmind.net\r----------------------------------------\r记录名称. . . . . . . : www.xmind.net\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 540319\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 127.0.0.1\rzhidao.baidu.com\r----------------------------------------\r记录名称. . . . . . . : zhidao.baidu.com\r记录类型. . . . . . . : 5\r生存时间. . . . . . . : 20\r数据长度. . . . . . . : 8\r部分. . . . . . . . . : 答案\rCNAME 记录 . . . . . : iknow.baidu.com\r记录名称. . . . . . . : iknow.baidu.com\r记录类型. . . . . . . : 5\r生存时间. . . . . . . : 20\r数据长度. . . . . . . : 8\r部分. . . . . . . . . : 答案\rCNAME 记录 . . . . . : iknow.n.shifen.com\r记录名称. . . . . . . : iknow.n.shifen.com\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 20\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 112.34.111.123\rblog.csdn.net\r----------------------------------------\r记录名称. . . . . . . : blog.csdn.net\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 3\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 47.95.47.253\radservice.google.com\r----------------------------------------\r记录名称. . . . . . . : adservice.google.com\r记录类型. . . . . . . : 5\r生存时间. . . . . . . : 11\r数据长度. . . . . . . : 8\r部分. . . . . . . . . : 答案\rCNAME 记录 . . . . . : pagead46.l.doubleclick.net\r记录名称. . . . . . . : pagead46.l.doubleclick.net\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 11\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 203.208.50.58\r记录名称. . . . . . . : pagead46.l.doubleclick.net\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 11\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 203.208.50.57\r记录名称. . . . . . . : pagead46.l.doubleclick.net\r记录类型. . . . . . . : 1\r生存时间. . . . . . . : 11\r数据长度. . . . . . . : 4\r部分. . . . . . . . . : 答案\rA (主机)记录 . . . . : 203.208.50.45\r 检测自己的ip ipconfig  C:\\Users\\noatn\u0026gt;ipconfig\rWindows IP 配置\r以太网适配器 以太网:\r媒体状态 . . . . . . . . . . . . : 媒体已断开连接\r连接特定的 DNS 后缀 . . . . . . . :\r无线局域网适配器 本地连接* 1:\r媒体状态 . . . . . . . . . . . . : 媒体已断开连接\r连接特定的 DNS 后缀 . . . . . . . :\r无线局域网适配器 本地连接* 2:\r媒体状态 . . . . . . . . . . . . : 媒体已断开连接\r连接特定的 DNS 后缀 . . . . . . . :\r以太网适配器 以太网 2:\r媒体状态 . . . . . . . . . . . . : 媒体已断开连接\r连接特定的 DNS 后缀 . . . . . . . :\r无线局域网适配器 WLAN:\r连接特定的 DNS 后缀 . . . . . . . :\r本地链接 IPv6 地址. . . . . . . . : fe80::6d6c:6e66:c80:456b%16\rIPv4 地址 . . . . . . . . . . . . : 192.168.31.208\r子网掩码 . . . . . . . . . . . . : 255.255.255.0\r默认网关. . . . . . . . . . . . . : 192.168.31.1\r   \r 检测是否连上外网 ping url  C:\\Users\\noatn\u0026gt;ping 192.168.31.208\r正在 Ping 192.168.31.208 具有 32 字节的数据:\r来自 192.168.31.208 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r来自 192.168.31.208 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r来自 192.168.31.208 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r来自 192.168.31.208 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r192.168.31.208 的 Ping 统计信息:\r数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，\r往返行程的估计时间(以毫秒为单位):\r最短 = 0ms，最长 = 0ms，平均 = 0ms\rC:\\Users\\noatn\u0026gt;ping www.baidu.com\r正在 Ping www.baidu.com [39.156.66.14] 具有 32 字节的数据:\r来自 39.156.66.14 的回复: 字节=32 时间=152ms TTL=50\r来自 39.156.66.14 的回复: 字节=32 时间=821ms TTL=50\r来自 39.156.66.14 的回复: 字节=32 时间=76ms TTL=50\r来自 39.156.66.14 的回复: 字节=32 时间=157ms TTL=50\r39.156.66.14 的 Ping 统计信息:\r数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，\r往返行程的估计时间(以毫秒为单位):\r最短 = 76ms，最长 = 821ms，平均 = 301ms\r这个网络情况就是不好的样子time\u0026gt;821毫秒了 ==就是延迟821毫秒\r 清屏命令 cls   C:\\Users\\noatn\u0026gt;dir\r驱动器 C 中的卷没有标签。\r卷的序列号是 1CE3-274F\rC:\\Users\\noatn 的目录\r2020/02/14 18:32 \u0026lt;DIR\u0026gt; .\r2020/02/14 18:32 \u0026lt;DIR\u0026gt; ..\r2020/01/24 13:55 \u0026lt;DIR\u0026gt; .android\r2020/01/23 08:12 100 .gitconfig\r2019/12/19 20:15 \u0026lt;DIR\u0026gt; .IntelliJIdea2017.3\r2020/01/26 17:53 \u0026lt;DIR\u0026gt; .m2\r2020/02/14 18:32 \u0026lt;DIR\u0026gt; .oracle_jre_usage\r2020/01/23 08:14 \u0026lt;DIR\u0026gt; .ssh\r2020/01/14 23:17 \u0026lt;DIR\u0026gt; .translation\r2020/01/20 21:52 \u0026lt;DIR\u0026gt; .vscode\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; 3D Objects\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; Contacts\r2020/02/14 18:32 \u0026lt;DIR\u0026gt; Desktop\r2020/02/14 17:57 \u0026lt;DIR\u0026gt; Documents\r2020/02/14 18:47 \u0026lt;DIR\u0026gt; Downloads\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; Favorites\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; Links\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; Music\r2020/02/14 10:57 \u0026lt;DIR\u0026gt; OneDrive\r2020/01/22 21:45 \u0026lt;DIR\u0026gt; Pictures\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; Saved Games\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; Searches\r2020/01/11 16:34 \u0026lt;DIR\u0026gt; Videos\r1 个文件 100 字节\r22 个目录 91,425,759,232 可用字节\rC:\\Users\\noatn\u0026gt;cls;\r然后就没有任何了\r 系统情况查看 systeminfo  //这里切记不要输入;\rC:\\Users\\noatn\u0026gt;systeminfo\r主机名: DESKTOP-GN2SF7M\rOS 名称: Microsoft Windows 10 家庭中文版\rOS 版本: 10.0.18363 暂缺 Build 18363\rOS 制造商: Microsoft Corporation\rOS 配置: 独立工作站\rOS 构件类型: Multiprocessor Free\r注册的所有人: noatnu@163.com\r注册的组织: 暂缺\r产品 ID: 00342-35097-36011-AAOEM\r初始安装日期: 2019/12/18, 21:19:37\r系统启动时间: 2020/2/14, 18:40:59\r系统制造商: LENOVO\r系统型号: 20KSA00FCD\r系统类型: x64-based PC\r处理器: 安装了 1 个处理器。\r[01]: Intel64 Family 6 Model 142 Stepping 10 GenuineIntel ~1801 Mhz\rBIOS 版本: LENOVO R0PET42W (1.19 ), 2018/6/14\rWindows 目录: C:\\WINDOWS\r系统目录: C:\\WINDOWS\\system32\r启动设备: \\Device\\HarddiskVolume5\r系统区域设置: zh-cn;中文(中国)\r输入法区域设置: zh-cn;中文(中国)\r时区: (UTC+08:00) 北京，重庆，香港特别行政区，乌鲁木齐\r物理内存总量: 16,281 MB\r可用的物理内存: 10,187 MB\r虚拟内存: 最大值: 18,713 MB\r虚拟内存: 可用: 11,653 MB\r虚拟内存: 使用中: 7,060 MB\r页面文件位置: C:\\pagefile.sys\r域: WORKGROUP\r登录服务器: \\\\DESKTOP-GN2SF7M\r修补程序: 安装了 9 个修补程序。\r[01]: KB4534132\r[02]: KB4513661\r[03]: KB4516115\r[04]: KB4517245\r[05]: KB4521863\r[06]: KB4524569\r[07]: KB4528759\r[08]: KB4537759\r[09]: KB4528760\r网卡: 安装了 3 个 NIC。\r[01]: Realtek PCIe GbE Family Controller\r连接名: 以太网\r状态: 媒体连接已中断\r[02]: Realtek 8821CE Wireless LAN 802.11ac PCI-E NIC\r连接名: WLAN\r启用 DHCP: 是\rDHCP 服务器: 192.168.31.1\rIP 地址\r[01]: 192.168.31.208\r[02]: fe80::6d6c:6e66:c80:456b\r[03]: Sangfor SSL VPN CS Support System VNIC\r连接名: 以太网 2\r状态: 媒体连接已中断\rHyper-V 要求: 虚拟机监视器模式扩展: 是\r固件中已启用虚拟化: 否\r二级地址转换: 是\r数据执行保护可用: 是\r//具体用法\rC:\\Users\\noatn\u0026gt;SYSTEMINFO /?\rSYSTEMINFO [/S system [/U username [/P [password]]]] [/FO format] [/NH]\r描述:\r该工具显示本地或远程机器(包括服务包级别)的操作系统配置的信息。\r参数列表:\r/S system 指定要连接的远程系统。\r/U [domain\\]user 指定应该在哪个用户上下文执行命令。\r/P [password] 指定给定用户上下文的密码。如果省略则\r提示输入。\r/FO format 指定显示结果的格式。\r有效值: \u0026quot;TABLE\u0026quot;、\u0026quot;LIST\u0026quot;、\u0026quot;CSV\u0026quot;。\r/NH 指定“列标题”不应该在输出中显示。\r只对 \u0026quot;TABLE\u0026quot; 和 \u0026quot;CSV\u0026quot; 格式有效。\r/? 显示帮助消息。\r例如:\rSYSTEMINFO\rSYSTEMINFO /?\rSYSTEMINFO /S system\rSYSTEMINFO /S system /U user\rSYSTEMINFO /S system /U domain\\user /P password /FO TABLE\rSYSTEMINFO /S system /FO LIST\rSYSTEMINFO /S system /FO CSV /NH\r  内存查看 mem (部分windows不支持了或者缺失此条程序)\n  磁盘检测 chkdsk D:\n  PS C:\\WINDOWS\\system32\u0026gt; chkdsk /?\r检查磁盘并显示状态报告。\rCHKDSK [volume[[path]filename]]] [/F] [/V] [/R] [/X] [/I] [/C] [/L[:size]] [/B] [/scan] [/spotfix]\rvolume 指定驱动器号(后面跟一个冒号)、\r装入点或卷名。\rfilename 仅 FAT/FAT32: 指定要检查\r碎片的文件。\r/F 修复磁盘上的错误。\r/V 在 FAT/FAT32 上: 显示磁盘上每个文件的\r完整路径和名称。\r在 NTFS 上: 显示清理消息(如果有)。\r/R 查找坏扇区并恢复可读信息\r(未指定 /scan 时，隐含 /F)。\r/L:size 仅 NTFS: 将日志文件大小更改为指定\r的 KB 数。如果未指定大小，则显示\r当前大小。\r/X 如果必要，则先强制卸除卷。\r该卷的所有打开的句柄都将无效\r(隐含 /F)。\r/I 仅 NTFS: 对索引项进行强度较小的\r检查。\r/C 仅 NTFS: 跳过文件夹结构内的\r循环检查。\r/B 仅 NTFS: 重新评估该卷上的坏簇\r(隐含 /R)\r/scan 仅 NTFS: 在卷上运行联机扫描\r/forceofflinefix 仅 NTFS: (必须与 \u0026quot;/scan\u0026quot; 一起使用)\r跳过所有联机修复；找到的所有故障都\r排队等待脱机修复(即 \u0026quot;chkdsk /spotfix\u0026quot;)。\r/perf 仅 NTFS: (必须与 \u0026quot;/scan\u0026quot; 一起使用)\r使用更多系统资源尽快完成\r扫描。这可能会对系统中运行的其他任务的性能\r造成负面影响。\r/spotfix 仅 NTFS: 在卷上运行点修复\r/sdcleanup 仅 NTFS: 回收不需要的安全描述符\r数据(隐含 /F)。\r/offlinescanandfix 在卷上运行脱机扫描并进行修复。\r/freeorphanedchains 仅 FAT/FAT32/exFAT: 释放所有孤立的簇链\r而不恢复其内容。\r/markclean 仅 FAT/FAT32/exFAT: 如果未检测到损坏，则将卷\r标记为干净，即使未指定 /F 也是如此。\r/I 或 /C 开关通过跳过对卷的某些检查，\r来减少运行 Chkdsk 所需的时间。\rE:\\temp\u0026gt;chkdsk D:\r访问被拒绝，因为你没有足够的权限，或\r该磁盘可能被另一个进程锁定。\r你必须调用这一在提升模式下运行的实用工具\r并确保磁盘处于解锁状态。\r采用管理员登陆\rPS C:\\WINDOWS\\system32\u0026gt; chkdsk d:\r文件系统的类型是 NTFS。\r卷标是 新加卷。\r警告! 未指定 /F 参数。\r将在只读模式下运行 CHKDSK。\r阶段 1: 检查基本文件系统结构...\r已处理 143872 个文件记录。\r文件验证完成。\r已处理 37 个大型文件记录。\r已处理 0 个错误的文件记录。\r阶段 2: 检查文件名链接...\r已处理 92 个重新解析记录。\r已处理 178806 个索引项。\r索引验证完成。\r已扫描到 0 个未索引文件。\r已将 0 个未编制索引的文件恢复到回收箱。\r已处理 92 个重新解析记录。\r阶段 3: 检查安全描述符...\r安全描述符验证完成。\r已处理 17467 个数据文件。\rWindows 已扫描文件系统并且没有发现问题。\r无需采取进一步操作。\r总共有 307199999 KB 磁盘空间。\r79964 个文件中有 26412124 KB。\r17469 个索引 18832 KB。\r坏扇区 0 KB。\r系统正在使用 219231 KB。\r日志文件占用了 65536 KB。\r磁盘上 280549812 KB 可用。\r每个分配单元中有 4096 字节。\r磁盘上共有 76799999 个分配单元。\r磁盘上有 70137453 个可用的分配单元。\r dos 版本  E:\\temp\u0026gt;ver\rMicrosoft Windows [版本 10.0.18363.592]\r 探测对方计算机名  netstat -a 192.168.2.8\rPS C:\\Users\\noatn\u0026gt; netstat -a 192.168.2.8\r活动连接\r协议 本地地址 外部地址 状态\rTCP 0.0.0.0:135 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:445 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:1024 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:1025 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:3306 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:5040 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:7680 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:49664 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:49665 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:49666 DESKTOP-GN2SF7M:0 LISTENING\rTCP 0.0.0.0:49667 DESKTOP-GN2SF7M:0 LISTENING\rTCP 127.0.0.1:1036 DESKTOP-GN2SF7M:0 LISTENING\rTCP 127.0.0.1:1155 www:1156 ESTABLISHED\rTCP 127.0.0.1:1156 www:nfa ESTABLISHED\rTCP 127.0.0.1:1157 www:1158 ESTABLISHED\rTCP 127.0.0.1:1158 www:1157 ESTABLISHED\rTCP 127.0.0.1:6942 DESKTOP-GN2SF7M:0 LISTENING\rTCP 127.0.0.1:10000 DESKTOP-GN2SF7M:0 LISTENING\rTCP 127.0.0.1:63342 DESKTOP-GN2SF7M:0 LISTENING\rTCP 192.168.31.208:139 DESKTOP-GN2SF7M:0 LISTENING\r 快速诊断网卡故障 ping 127.0.0.1  PS C:\\WINDOWS\\system32\u0026gt; ping 127.0.0.1; 正在 Ping 127.0.0.1 具有 32 字节的数据:\r来自 127.0.0.1 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r来自 127.0.0.1 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r来自 127.0.0.1 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r来自 127.0.0.1 的回复: 字节=32 时间\u0026lt;1ms TTL=128\r127.0.0.1 的 Ping 统计信息:\r数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，\r往返行程的估计时间(以毫秒为单位):\r最短 = 0ms，最长 = 0ms，平均 = 0ms\r 网络连接查看  PS C:\\Users\\noatn\u0026gt; netstat /?\r显示协议统计信息和当前 TCP/IP 网络连接。\rNETSTAT [-a] [-b] [-e] [-f] [-n] [-o] [-p proto] [-r] [-s] [-x] [-t] [interval]\r-a 显示所有连接和侦听端口。\r-b 显示在创建每个连接或侦听端口时涉及的\r可执行程序。在某些情况下，已知可执行程序承载\r多个独立的组件，这些情况下，\r显示创建连接或侦听端口时\r涉及的组件序列。在此情况下，可执行程序的\r名称位于底部 [] 中，它调用的组件位于顶部，\r直至达到 TCP/IP。注意，此选项\r可能很耗时，并且在你没有足够\r权限时可能失败。\r-e 显示以太网统计信息。此选项可以与 -s 选项\r结合使用。\r-f 显示外部地址的完全限定\r域名(FQDN)。\r-n 以数字形式显示地址和端口号。\r-o 显示拥有的与每个连接关联的进程 ID。\r-p proto 显示 proto 指定的协议的连接；proto\r可以是下列任何一个: TCP、UDP、TCPv6 或 UDPv6。如果与 -s\r选项一起用来显示每个协议的统计信息，proto 可以是下列任何一个:\rIP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 或 UDPv6。\r-q 显示所有连接、侦听端口和绑定的\r非侦听 TCP 端口。绑定的非侦听端口\r不一定与活动连接相关联。\r-r 显示路由表。\r-s 显示每个协议的统计信息。默认情况下，\r显示 IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 和 UDPv6 的统计信息;\r-p 选项可用于指定默认的子网。\r-t 显示当前连接卸载状态。\r-x 显示 NetworkDirect 连接、侦听器和共享\r终结点。\r-y 显示所有连接的 TCP 连接模板。\r无法与其他选项结合使用。\rinterval 重新显示选定的统计信息，各个显示间暂停的\r间隔秒数。按 CTRL+C 停止重新显示\r统计信息。如果省略，则 netstat 将打印当前的\r配置信息一次。\r 网络连接查看 数字形式显示地址和端口号  PS C:\\Users\\noatn\u0026gt; netstat -n\r活动连接\r协议 本地地址 外部地址 状态\rTCP 127.0.0.1:1155 127.0.0.1:1156 ESTABLISHED\rTCP 127.0.0.1:1156 127.0.0.1:1155 ESTABLISHED\rTCP 127.0.0.1:1157 127.0.0.1:1158 ESTABLISHED\rTCP 127.0.0.1:1158 127.0.0.1:1157 ESTABLISHED\rTCP 192.168.31.208:3032 117.18.237.29:80 CLOSE_WAIT\rTCP 192.168.31.208:3312 117.174.50.69:80 ESTABLISHED\rTCP 192.168.31.208:3810 104.18.25.243:80 ESTABLISHED\rTCP 192.168.31.208:3870 203.119.218.69:443 ESTABLISHED\rTCP 192.168.31.208:3880 40.119.211.203:443 ESTABLISHED\rTCP 192.168.31.208:3931 117.174.50.69:80 ESTABLISHED\rTCP 192.168.31.208:3982 213.61.227.196:80 LAST_ACK\rTCP 192.168.31.208:4021 59.110.73.45:443 LAST_ACK\rTCP 192.168.31.208:4023 112.29.158.132:443 LAST_ACK\rTCP 192.168.31.208:4026 112.29.158.132:443 LAST_ACK\rTCP 192.168.31.208:4027 112.18.249.241:443 TIME_WAIT\rTCP 192.168.31.208:4028 112.18.249.241:443 TIME_WAIT\rTCP 192.168.31.208:4029 47.95.47.253:443 TIME_WAIT\rTCP 192.168.31.208:4030 39.107.189.15:443 LAST_ACK\rTCP 192.168.31.208:4032 112.29.158.132:443 LAST_ACK\rTCP 192.168.31.208:4035 112.29.158.132:443 LAST_ACK\rTCP 192.168.31.208:4036 52.114.128.44:443 TIME_WAIT\rTCP 192.168.31.208:4038 131.253.33.254:443 ESTABLISHED\rTCP 192.168.31.208:4039 204.79.197.222:443 ESTABLISHED\rTCP 192.168.31.208:4040 204.79.197.222:443 ESTABLISHED\rTCP 192.168.31.208:4041 131.253.33.254:443 ESTABLISHED\rTCP 192.168.31.208:4042 131.253.33.254:443 ESTABLISHED\rTCP 192.168.31.208:4044 62.96.224.156:389 ESTABLISHED\rTCP 192.168.31.208:4045 117.18.237.29:80 ESTABLISHED\rTCP 192.168.31.208:4046 47.95.47.253:443 ESTABLISHED\rTCP 192.168.31.208:4047 117.177.133.243:443 ESTABLISHED\rTCP 192.168.31.208:4048 112.18.249.239:443 ESTABLISHED\rTCP 192.168.31.208:4049 204.79.197.222:443 ESTABLISHED\rTCP 192.168.31.208:4050 221.178.73.35:443 ESTABLISHED\rTCP 192.168.31.208:4051 39.107.11.172:443 ESTABLISHED\rTCP 192.168.31.208:4052 112.29.158.132:443 ESTABLISHED\rTCP 192.168.31.208:4053 183.220.151.49:443 ESTABLISHED\rTCP 192.168.31.208:4054 13.107.3.254:443 ESTABLISHED\r"});index.add({'id':62,'href':'/life/docs/javadir/groovy/groovy%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8A%A0%E5%BC%BA/','title':" groovy变量和数据类型 ",'section':"groovy 学习与使用 ",'content':"groovy 变量和数据类型 #  groovy类型自动推断 #   先看有一段代码  def a = 12;\rdef int a1 = 12;\rdef a_type = a instanceof Integer ;\rdef a1_type = a1 instanceof Integer ;\rprintln(a_type) ;\rprintln(a1_type) ;\r//打印结果如下\rtrue\rtrue\r 从上面我们可以看出a和a1实际推导出的类型是一样的,但是有哪些不同呢 接着我把上面的例子改了  def a = 12;\rdef int a1 = 12;\rdef a_type = a instanceof Integer ;\rdef a1_type = a1 instanceof Integer ;\rprintln(a_type) ;\rprintln(a1_type) ;\ra = 52253.46f ;\ra1 = 52253.46f ;\rprintln(a instanceof Integer) ;\rprintln(a1 instanceof Integer) ;\rprintln(\u0026quot;a1 的值:\u0026quot;+a1) ;\rprintln(\u0026quot;a 的 值 :\u0026quot;+a) ;\r//print result\rtrue\rtrue\rfalse\rtrue\ra1 的值:52253\ra 的 值 :52253.46\r  看吧神奇的事情出来了, a1 的 参数类型即便被赋值了浮点数但是类型并没有改变,并且精度和赋值的值相比降低了,而 a 的类型却改变了\n另外假如在idea中编辑变量 编辑器也会提示你\rAssignment is not used less... (Ctrl+F1) Inspection info: Reports on unnecessary Groovy assignment statement Possible loss of precision from 'Float' to 'int' less... (Ctrl+F1) Inspection info: Reports assignments with incompatible types\r  假如接着上面的例子给 a变量和a1变量分别赋值字符串类型会怎样呢 (算了还是重新写吧好看点)\n  int b = 141;\rx = 141;\rprintln(b) ;\rprintln(x) ;\rb = \u0026quot;字符串b\u0026quot; ;\rx = \u0026quot;字符串x\u0026quot; ;\rprintln(b) ;\rprintln(x) ;\r//运行会怎样呢?\r141\rCaught: org.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object '字符串b' with class 'java.lang.String' to class 'int'\r141\rorg.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object '字符串b' with class 'java.lang.String' to class 'int'\rat gr.h1.t4.run(t4.groovy:10)\r  以上我们可以看出在groovy中赋值的时候系统会尝试强转类型,上面的例子是转失败的情况\n  因此在定义变量的时候尽量不要去更改已经定义的变量的类型,尽量 申明变量类型\n  变量的类型检测方法\n  var_name instanceof type 如 a instanceof Integer\n  b.class == Integer 或 b.class.equals(Integer)\n  "});index.add({'id':63,'href':'/life/docs/operating_system/one_chapter/1_4_/','title':" 操作系统的运行机制与体系结构 ",'section':"第一章 操作系统概述 ",'content':"运行机制 #  一: 知识总览 #  二: 预备知识：程序是如何运行的？ #  三:内核程序 v.s. 应用程序 #  四:特权指令 v.s. 非特权指令 #  五:内核态 v.s. 用户态 #  六:内核态、用户态 的切换 #  知识回顾与重要考点 #  体系结构 #  两种指令、两种处理器状态、两种程序 #  操作系统的内核 #   Yo~生活经验：我们安装完 Windows 操作系统后，会发现操作系统提供了多种多样的功能，比如“记事本”、 “任务管理器”。然而，这些功能并不是必不可少的。即使没有“任务管理器”，我们仍然可以使用计算机。\n  内核是计算机上配置的底层软件，是操作系统最基本、最核心的部分。实现操作系统内核功能的那些程序就是内核程序。   计算机系统的层次结构  知识回顾与重要考点 #  "});index.add({'id':64,'href':'/life/docs/javadir/basedir/jsp_dir/jsp_jstl_session/','title':"jsp jstl session ",'section':"jsp 基础知识 ",'content':"Session #   HTTP是无状态协议，这意味着每次客户端检索网页时，都要单独打开一个服务器连接，因此服务器不会记录下先前客户端请求的任何信息 #    会话,当用户打开一个浏览器连接到web应用或者打开某个页面,直到关闭浏览器这个过程叫做会话 #    Session是保存在服务器上的数据结构，用于跟踪用户的状态。此数据可以保存在群集、数据库、文件中 #   Session常用方法 #    public boolean isNew()\n返回是否为一个新的客户端，或者客户端是否拒绝加入session     public Enumeration getAttributeNames()\n返回session对象中所有的对象名称     public int getMaxInactiveInterval()\n返回最大时间间隔，以秒为单位，servlet 容器将会在这段时间内保持会话打开     public long getCreationTime()\n返回session对象被创建的时间， 以毫秒为单位，从1970年1月1号凌晨开始算起     public long getLastAccessedTime()\n返回客户端最后访问的时间，以毫秒为单位，从1970年1月1号凌晨开始算起     public Object getAttribute(String name)\n返回session对象中与指定名称绑定的对象，如果不存在则返回null     public Object getAttribute(String name)\n返回session对象中与指定名称绑定的对象，如果不存在则返回null     public String getId()\n返回session对象的ID     public void invalidate()\n将session无效化，解绑任何与该session绑定的对象     public void removeAttribute(String name)\n移除session中指定名称的对象     public void setAttribute(String name, Object value)\n使用指定的名称和值来产生一个对象并绑定到session中     public void setMaxInactiveInterval(int interval)\n用来指定时间，以秒为单位，servlet容器将会在这段时间内保持会话有效   Session应用 #  新建SessionDemo类 #  @WebServlet(\u0026quot;/SessionDemo\u0026quot;)\rpublic class SessionDemo extends HttpServlet {\rprivate int count=0;\rprotected void doGet(HttpServletRequest request, HttpServletResponse response)\rthrows ServletException, IOException {\rrequest.setCharacterEncoding(\u0026quot;utf-8\u0026quot;);\rresponse.setCharacterEncoding(\u0026quot;utf-8\u0026quot;);\rcount++;\rHttpSession session = request.getSession();\rString id = session.getId();\rlong startTime = session.getCreationTime();\rlong lastTime = session.getLastAccessedTime();\rlong validTime = session.getMaxInactiveInterval();\rsession.setMaxInactiveInterval(60);\rSimpleDateFormat myFormat=new SimpleDateFormat(\u0026quot;yyyy/MM/dd HH:mm:ss\u0026quot;);\rresponse.setContentType(\u0026quot;text/html\u0026quot;);\rPrintWriter out = response.getWriter();\rout.println(\u0026quot;\u0026lt;!DOCTYPE HTML PUBLIC \\\u0026quot;-\rout.println(\u0026quot;\u0026lt;HTML\u0026gt;\u0026quot;);\rout.println(\u0026quot; \u0026lt;HEAD\u0026gt;\u0026lt;TITLE\u0026gt;A Servlet\u0026lt;/TITLE\u0026gt;\u0026lt;/HEAD\u0026gt;\u0026quot;);\rout.println(\u0026quot; \u0026lt;BODY\u0026gt;\u0026quot;);\rif(session.isNew()) {\rout.println(\u0026quot;新客户\u0026lt;br\u0026gt;\u0026quot;);\r}else {\rout.println(\u0026quot;不是新客户\u0026lt;br\u0026gt;\u0026quot;);\r}\rout.println(\u0026quot;会话ID:\u0026quot; + id+\u0026quot;\u0026lt;br\u0026gt;\u0026quot;);\rout.println(\u0026quot;会话创建时间:\u0026quot;+myFormat.format(startTime)+\u0026quot;\u0026lt;br\u0026gt;\u0026quot;);\rout.println(\u0026quot;会话有效时间:\u0026quot;+validTime+\u0026quot;秒\u0026lt;br\u0026gt;\u0026quot;);\rout.println(\u0026quot;当前会话有效时间:\u0026quot;+session.getMaxInactiveInterval()+\u0026quot;秒\u0026lt;br\u0026gt;\u0026quot;);\rout.println(\u0026quot;最后访问时间:\u0026quot;+myFormat.format(lastTime)+\u0026quot;\u0026lt;br\u0026gt;\u0026quot;);\rout.println(\u0026quot;访问次数:\u0026quot;+count+\u0026quot;\u0026lt;br\u0026gt;\u0026quot;);\rout.println(\u0026quot; \u0026lt;/BODY\u0026gt;\u0026quot;);\rout.println(\u0026quot;\u0026lt;/HTML\u0026gt;\u0026quot;);\rout.flush();\rout.close();\r}\r}\r会话监听器 #  新建SerssionListenerDemo类 #  @WebListener\rpublic class SerssionListenerDemo implements HttpSessionListener{\rprivate static int count=0;\r@Override\rpublic void sessionCreated(HttpSessionEvent se) {\rHttpSessionListener.super.sessionCreated(se);\rcount++;\rSystem.out.println(\u0026quot;第\u0026quot;+count+\u0026quot;个会话被创建\u0026quot;);\r}\r@Override\rpublic void sessionDestroyed(HttpSessionEvent se) {\r// TODO Auto-generated method stub\rHttpSessionListener.super.sessionDestroyed(se);\rSystem.out.println(\u0026quot;会话被毁灭\u0026quot;);\rcount--;\rSystem.out.println(\u0026quot;当前剩余\u0026quot;+count+\u0026quot;个会话\u0026quot;);\r}\r}\r新建SessionAttributeListener类 #  @WebListener\rpublic class SessionAttributeListener implements HttpSessionAttributeListener{\r@Override\rpublic void attributeAdded(HttpSessionBindingEvent event) {\rHttpSessionAttributeListener.super.attributeAdded(event);\rSystem.out.println(\u0026quot;session添加了一个属性\u0026quot;);\r}\r@Override\rpublic void attributeRemoved(HttpSessionBindingEvent event) {\rHttpSessionAttributeListener.super.attributeRemoved(event);\rSystem.out.println(\u0026quot;session删除了某个属性\u0026quot;);\r}\r@Override\rpublic void attributeReplaced(HttpSessionBindingEvent event) {\rHttpSessionAttributeListener.super.attributeReplaced(event);\rSystem.out.println(\u0026quot;session修改了某个属性\u0026quot;);\r}\r}\r新建ServletRequestListener类 #  @WebListener\rpublic class ServletRequestListener implements javax.servlet.ServletRequestListener{\r@Override\rpublic void requestInitialized(ServletRequestEvent sre) {\rjavax.servlet.ServletRequestListener.super.requestInitialized(sre);\rSystem.out.println(\u0026quot;生成新的请求\u0026quot;);\r}\r@Override\rpublic void requestDestroyed(ServletRequestEvent sre) {\rjavax.servlet.ServletRequestListener.super.requestDestroyed(sre);\rSystem.out.println(\u0026quot;请求毁灭\u0026quot;);\r}\r}\r"});index.add({'id':65,'href':'/life/docs/operating_system/four_chapter/','title':"第四章 文件管理 ",'section':"操作系统 ",'content':"文件管理 #  "});index.add({'id':66,'href':'/life/docs/databases/mysql/mysql_data/','title':"数据准备",'section':"mysql学习笔记",'content':" 数据准备  数据准备\ndrop datbase ch10; create database ch10; use ch10; CREATE TABLE fruits ( f_id char(10) NOT NULL, s_id INT NOT NULL, f_name char(255) NOT NULL, f_price decimal(8,2) NOT NULL, PRIMARY KEY(f_id) ); INSERT INTO fruits (f_id, s_id, f_name, f_price) VALUES(\u0026#39;a1\u0026#39;, 101,\u0026#39;apple\u0026#39;,5.2), (\u0026#39;b1\u0026#39;,101,\u0026#39;blackberry\u0026#39;, 10.2), (\u0026#39;bs1\u0026#39;,102,\u0026#39;orange\u0026#39;, 11.2), (\u0026#39;bs2\u0026#39;,105,\u0026#39;melon\u0026#39;,8.2), (\u0026#39;t1\u0026#39;,102,\u0026#39;banana\u0026#39;, 10.3), (\u0026#39;t2\u0026#39;,102,\u0026#39;grape\u0026#39;, 5.3), (\u0026#39;o2\u0026#39;,103,\u0026#39;coconut\u0026#39;, 9.2), (\u0026#39;c0\u0026#39;,101,\u0026#39;cherry\u0026#39;, 3.2), (\u0026#39;a2\u0026#39;,103, \u0026#39;apricot\u0026#39;,2.2), (\u0026#39;l2\u0026#39;,104,\u0026#39;lemon\u0026#39;, 6.4), (\u0026#39;b2\u0026#39;,104,\u0026#39;berry\u0026#39;, 7.6), (\u0026#39;m1\u0026#39;,106,\u0026#39;mango\u0026#39;, 15.6), (\u0026#39;m2\u0026#39;,105,\u0026#39;xbabay\u0026#39;, 2.6), (\u0026#39;t4\u0026#39;,107,\u0026#39;xbababa\u0026#39;, 3.6), (\u0026#39;m3\u0026#39;,105,\u0026#39;xxtt\u0026#39;, 11.6), (\u0026#39;b5\u0026#39;,107,\u0026#39;xxxx\u0026#39;, 3.6); CREATE TABLE customers ( c_id int NOT NULL AUTO_INCREMENT, c_name char(50) NOT NULL, c_address char(50) NULL, c_city char(50) NULL, c_zip char(10) NULL, c_contact char(50) NULL, c_email char(255) NULL, PRIMARY KEY (c_id) ); INSERT INTO customers(c_id, c_name, c_address, c_city, c_zip, c_contact, c_email) VALUES(10001, \u0026#39;RedHook\u0026#39;, \u0026#39;200 Street \u0026#39;, \u0026#39;Tianjin\u0026#39;, \u0026#39;300000\u0026#39;, \u0026#39;LiMing\u0026#39;, \u0026#39;LMing@163.com\u0026#39;), (10002, \u0026#39;Stars\u0026#39;, \u0026#39;333 Fromage Lane\u0026#39;, \u0026#39;Dalian\u0026#39;, \u0026#39;116000\u0026#39;, \u0026#39;Zhangbo\u0026#39;,\u0026#39;Jerry@hotmail.com\u0026#39;), (10003, \u0026#39;Netbhood\u0026#39;, \u0026#39;1 Sunny Place\u0026#39;, \u0026#39;Qingdao\u0026#39;, \u0026#39;266000\u0026#39;, \u0026#39;LuoCong\u0026#39;, NULL), (10004, \u0026#39;JOTO\u0026#39;, \u0026#39;829 Riverside Drive\u0026#39;, \u0026#39;Haikou\u0026#39;, \u0026#39;570000\u0026#39;, \u0026#39;YangShan\u0026#39;, \u0026#39;sam@hotmail.com\u0026#39;); CREATE TABLE orderitems ( o_num int NOT NULL, o_item int NOT NULL, f_id char(10) NOT NULL, quantity int NOT NULL, item_price decimal(8,2) NOT NULL, PRIMARY KEY (o_num,o_item) ) ; INSERT INTO orderitems(o_num, o_item, f_id, quantity, item_price) VALUES(30001, 1, \u0026#39;a1\u0026#39;, 10, 5.2), (30001, 2, \u0026#39;b2\u0026#39;, 3, 7.6), (30001, 3, \u0026#39;bs1\u0026#39;, 5, 11.2), (30001, 4, \u0026#39;bs2\u0026#39;, 15, 9.2), (30002, 1, \u0026#39;b3\u0026#39;, 2, 20.0), (30003, 1, \u0026#39;c0\u0026#39;, 100, 10), (30004, 1, \u0026#39;o2\u0026#39;, 50, 2.50), (30005, 1, \u0026#39;c0\u0026#39;, 5, 10), (30005, 2, \u0026#39;b1\u0026#39;, 10, 8.99), (30005, 3, \u0026#39;a2\u0026#39;, 10, 2.2), (30005, 4, \u0026#39;m1\u0026#39;, 5, 14.99); CREATE TABLE suppliers ( s_id int NOT NULL AUTO_INCREMENT, s_name char(50) NOT NULL, s_city char(50) NULL, s_zip char(10) NULL, s_call CHAR(50) NOT NULL, PRIMARY KEY (s_id) ) ; INSERT INTO suppliers(s_id, s_name,s_city, s_zip, s_call) VALUES(101,\u0026#39;FastFruit Inc.\u0026#39;,\u0026#39;Tianjin\u0026#39;,\u0026#39;300000\u0026#39;,\u0026#39;48075\u0026#39;), (102,\u0026#39;LT Supplies\u0026#39;,\u0026#39;Chongqing\u0026#39;,\u0026#39;400000\u0026#39;,\u0026#39;44333\u0026#39;), (103,\u0026#39;ACME\u0026#39;,\u0026#39;Shanghai\u0026#39;,\u0026#39;200000\u0026#39;,\u0026#39;90046\u0026#39;), (104,\u0026#39;FNK Inc.\u0026#39;,\u0026#39;Zhongshan\u0026#39;,\u0026#39;528437\u0026#39;,\u0026#39;11111\u0026#39;), (105,\u0026#39;Good Set\u0026#39;,\u0026#39;Taiyuang\u0026#39;,\u0026#39;030000\u0026#39;, \u0026#39;22222\u0026#39;), (106,\u0026#39;Just Eat Ours\u0026#39;,\u0026#39;Beijing\u0026#39;,\u0026#39;010\u0026#39;, \u0026#39;45678\u0026#39;), (107,\u0026#39;DK Inc.\u0026#39;,\u0026#39;Zhengzhou\u0026#39;,\u0026#39;450000\u0026#39;, \u0026#39;33332\u0026#39;); CREATE TABLE orders ( o_num int NOT NULL AUTO_INCREMENT, o_date datetime NOT NULL, c_id int NOT NULL, PRIMARY KEY (o_num) ) ; INSERT INTO orders(o_num, o_date, c_id) VALUES(30001, \u0026#39;2008-09-01\u0026#39;, 10001), (30002, \u0026#39;2008-09-12\u0026#39;, 10003), (30003, \u0026#39;2008-09-30\u0026#39;, 10004), (30004, \u0026#39;2008-10-03\u0026#39;, 10005), (30005, \u0026#39;2008-10-08\u0026#39;, 10001); CREATE TABLE dept ( d_no INT NOT NULL PRIMARY KEY AUTO_INCREMENT, d_name VARCHAR(50), d_location VARCHAR(100) ); # 由于employee表dept_no依赖于父表dept的主键d_no，因此需要先创建dept表，然后创建employee表。 CREATE TABLE employee ( e_no INT NOT NULL PRIMARY KEY, e_name VARCHAR(100) NOT NULL, e_gender CHAR(2) NOT NULL, dept_no INT NOT NULL, e_job VARCHAR(100) NOT NULL, e_salary SMALLINT NOT NULL, hireDate DATE, CONSTRAINT dno_fk FOREIGN KEY(dept_no) REFERENCES dept(d_no) ); INSERT INTO dept VALUES (10, \u0026#39;ACCOUNTING\u0026#39;, \u0026#39;ShangHai\u0026#39;), (20, \u0026#39;RESEARCH \u0026#39;, \u0026#39;BeiJing \u0026#39;), (30, \u0026#39;SALES \u0026#39;, \u0026#39;ShenZhen \u0026#39;), (40, \u0026#39;OPERATIONS \u0026#39;, \u0026#39;FuJian \u0026#39;); INSERT INTO employee VALUES (1001, \u0026#39;SMITH\u0026#39;, \u0026#39;m\u0026#39;,20, \u0026#39;CLERK\u0026#39;,800,\u0026#39;2005-11-12\u0026#39;), (1002, \u0026#39;ALLEN\u0026#39;, \u0026#39;f\u0026#39;,30, \u0026#39;SALESMAN\u0026#39;, 1600,\u0026#39;2003-05-12\u0026#39;), (1003, \u0026#39;WARD\u0026#39;, \u0026#39;f\u0026#39;,30, \u0026#39;SALESMAN\u0026#39;, 1250,\u0026#39;2003-05-12\u0026#39;), (1004, \u0026#39;JONES\u0026#39;, \u0026#39;m\u0026#39;,20, \u0026#39;MANAGER\u0026#39;, 2975,\u0026#39;1998-05-18\u0026#39;), (1005, \u0026#39;MARTIN\u0026#39;, \u0026#39;m\u0026#39;,30, \u0026#39;SALESMAN\u0026#39;, 1250,\u0026#39;2001-06-12\u0026#39;), (1006, \u0026#39;BLAKE\u0026#39;, \u0026#39;f\u0026#39;,30, \u0026#39;MANAGER\u0026#39;, 2850,\u0026#39;1997-02-15\u0026#39;), (1007, \u0026#39;CLARK\u0026#39;, \u0026#39;m\u0026#39;,10, \u0026#39;MANAGER\u0026#39;, 2450,\u0026#39;2002-09-12\u0026#39;), (1008, \u0026#39;SCOTT\u0026#39;, \u0026#39;m\u0026#39;,20, \u0026#39;ANALYST\u0026#39;, 3000,\u0026#39;2003-05-12\u0026#39;), (1009, \u0026#39;KING\u0026#39;, \u0026#39;f\u0026#39;,10, \u0026#39;PRESIDENT\u0026#39;, 5000,\u0026#39;1995-01-01\u0026#39;), (1010, \u0026#39;TURNER\u0026#39;, \u0026#39;f\u0026#39;,30, \u0026#39;SALESMAN\u0026#39;, 1500,\u0026#39;1997-10-12\u0026#39;), (1011, \u0026#39;ADAMS\u0026#39;, \u0026#39;m\u0026#39;,20, \u0026#39;CLERK\u0026#39;, 1100,\u0026#39;1999-10-05\u0026#39;), (1012, \u0026#39;JAMES\u0026#39;, \u0026#39;m\u0026#39;,30, \u0026#39;CLERK\u0026#39;, 950,\u0026#39;2008-06-15\u0026#39;); SET NAMES utf8mb4; SET FOREIGN_KEY_CHECKS = 0; -- ---------------------------- -- Table structure for score -- ---------------------------- DROP TABLE IF EXISTS `score`; CREATE TABLE `score` ( `id` int(0) NOT NULL AUTO_INCREMENT, `stu_id` int(0) NOT NULL, `c_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL, `grade` int(0) NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE, UNIQUE INDEX `id`(`id`) USING BTREE ) ENGINE = InnoDB AUTO_INCREMENT = 11 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_bin ROW_FORMAT = Dynamic; -- ---------------------------- -- Records of score -- ---------------------------- INSERT INTO `score` VALUES (1, 901, \u0026#39;计算机\u0026#39;, 98); INSERT INTO `score` VALUES (2, 901, \u0026#39;英语\u0026#39;, 80); INSERT INTO `score` VALUES (3, 902, \u0026#39;计算机\u0026#39;, 65); INSERT INTO `score` VALUES (4, 902, \u0026#39;中文\u0026#39;, 88); INSERT INTO `score` VALUES (5, 903, \u0026#39;中文\u0026#39;, 95); INSERT INTO `score` VALUES (6, 904, \u0026#39;计算机\u0026#39;, 70); INSERT INTO `score` VALUES (7, 904, \u0026#39;英语\u0026#39;, 92); INSERT INTO `score` VALUES (8, 905, \u0026#39;英语\u0026#39;, 94); INSERT INTO `score` VALUES (9, 906, \u0026#39;计算机\u0026#39;, 90); INSERT INTO `score` VALUES (10, 906, \u0026#39;英语\u0026#39;, 85); -- ---------------------------- -- Table structure for student -- ---------------------------- DROP TABLE IF EXISTS `student`; CREATE TABLE `student` ( `id` int(0) NOT NULL, `class_id` int(0) NULL DEFAULT NULL, `name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL, `sex` varchar(4) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL, `birth` year NULL DEFAULT NULL, `department` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL, `address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE, UNIQUE INDEX `id`(`id`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic; -- ---------------------------- -- Records of student -- ---------------------------- INSERT INTO `student` VALUES (901, 1, \u0026#39;张老大\u0026#39;, \u0026#39;男\u0026#39;, 1985, \u0026#39;计算机系\u0026#39;, \u0026#39;北京市海淀区\u0026#39;); INSERT INTO `student` VALUES (902, 1, \u0026#39;张老二\u0026#39;, \u0026#39;男\u0026#39;, 1986, \u0026#39;中文系\u0026#39;, \u0026#39;北京市昌平区\u0026#39;); INSERT INTO `student` VALUES (903, 1, \u0026#39;张三\u0026#39;, \u0026#39;女\u0026#39;, 1990, \u0026#39;中文系\u0026#39;, \u0026#39;湖南省永州市\u0026#39;); INSERT INTO `student` VALUES (904, 2, \u0026#39;李四\u0026#39;, \u0026#39;男\u0026#39;, 1990, \u0026#39;英语系\u0026#39;, \u0026#39;辽宁省阜新市\u0026#39;); INSERT INTO `student` VALUES (905, 1, \u0026#39;王五\u0026#39;, \u0026#39;女\u0026#39;, 1991, \u0026#39;英语系\u0026#39;, \u0026#39;福建省厦门市\u0026#39;); INSERT INTO `student` VALUES (906, 2, \u0026#39;王六\u0026#39;, \u0026#39;男\u0026#39;, 1988, \u0026#39;计算机系\u0026#39;, \u0026#39;湖南省衡阳市\u0026#39;); -- ---------------------------- -- Table structure for tb_class -- ---------------------------- DROP TABLE IF EXISTS `tb_class`; CREATE TABLE `tb_class` ( `id` int(0) NOT NULL AUTO_INCREMENT, `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic; -- ---------------------------- -- Records of tb_class -- ---------------------------- INSERT INTO `tb_class` VALUES (1, \u0026#39;一班\u0026#39;); INSERT INTO `tb_class` VALUES (2, \u0026#39;二班\u0026#39;); SET FOREIGN_KEY_CHECKS = 1; "});index.add({'id':67,'href':'/life/docs/javadir/','title':" Java技术栈",'section':"Docs",'content':"目录 #    工具文档\n  中间件\n  groovy 脚本\n  "});index.add({'id':68,'href':'/life/docs/computer_network/network_architecture/%E5%88%86%E5%B1%82%E7%BB%93%E6%9E%84/','title':"分层结构",'section':"网络体系结构",'content':"为什么要分层，分层要做什么 #   （1）发起通信的计算机必须将数据通信的通路进行激活。 （2）要告诉网络如何识别目的主机。 （3）发起通信的计算机要查明目的主机是否开机，并且与网络连接正常。 （4）发起通信的计算机要弄清楚，对方计算机中文件管理程序是否已经做好准备工作。 （5）确保差错和意外可以解决。  正式认识分层结构 #   使用 协议 ，服务， 接口 来完成分层\n 总结 #   网络体系结构是从功能上描述计算机网络结构 计算机网络体系结构简称网络体系结构是分层结构 每层遵循某个/多个网络协议以完成本层功能 计算机网络体系结构是计算机网络的各层及其协议的集合 上层要求服务 下层提供服务 实际是上层制定接口标准，下层实现接口标准  "});index.add({'id':69,'href':'/life/docs/operating_system/two_chapter/2_1_4/','title':"进程通信",'section':"第二章 进程管理 ",'content':""});index.add({'id':70,'href':'/life/docs/%E8%84%9A%E6%9C%AC/uniapp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/','title':"uniapp基础知识 ",'section':"脚本",'content':"uni-app的基本使用 #  课程介绍：\n基础部分：\n 环境搭建 页面外观配置 数据绑定 uni-app的生命周期 组件的使用 uni-app中样式学习 在uni-app中使用字体图标和开启scss 条件注释跨端兼容 uni中的事件 导航跳转 组件创建和通讯，及组件的生命周期 uni-app中使用uni-ui库  项目：黑马商城项目\nuni-app介绍 官方网页 #  uni-app view uni-app view #  uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。\n即使不跨端，uni-app同时也是更好的小程序开发框架。\n具有vue和微信小程序的开发经验，可快速上手uni-app\n为什么要去学习uni-app？\n相对开发者来说，减少了学习成本，因为只学会uni-app之后，即可开发出iOS、Android、H5、以及各种小程序的应用，不需要再去学习开发其他应用的框架，相对公司而言，也大大减少了开发成本。\n环境搭建 #  安装编辑器HbuilderX 下载地址\nHBuilderX是通用的前端开发工具，但为uni-app做了特别强化。\n下载App开发版，可开箱即用\n安装微信开发者工具 下载地址\n利用HbuilderX初始化项目 #    点击HbuilderX菜单栏文件\u0026gt;项目\u0026gt;新建\n  选择uni-app,填写项目名称，项目创建的目录\n  运行项目 #  在菜单栏中点击运行，运行到浏览器，选择浏览器即可运行\n在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -\u0026gt; 运行到小程序模拟器 -\u0026gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app\n在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -\u0026gt; 运行到手机或模拟器 -\u0026gt; 选择调式的手机\n注意：\n 如果是第一次使用，需要先配置小程序ide的相关路径，才能运行成功 微信开发者工具在设置中安全设置，服务端口开启  介绍项目目录和文件作用 #  pages.json 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等\nmanifest.json 文件是应用的配置文件，用于指定应用的名称、图标、权限等。\nApp.vue是我们的跟组件，所有页面都是在App.vue下进行切换的，是页面入口文件，可以调用应用的生命周期函数。\nmain.js是我们的项目入口文件，主要作用是初始化vue实例并使用需要的插件。\nuni.scss文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，uni.scss文件里预置了一批scss变量预置。\nunpackage 就是打包目录，在这里有各个平台的打包文件\npages 所有的页面存放目录\nstatic 静态资源目录，例如图片等\ncomponents 组件存放目录\n为了实现多端兼容，综合考虑编译速度、运行性能等因素，uni-app 约定了如下开发规范：\n 页面文件遵循 Vue 单文件组件 (SFC) 规范 组件标签靠近小程序规范，详见uni-app 组件规范 接口能力（JS API）靠近微信小程序规范，但需将前缀 wx 替换为 uni，详见uni-app接口规范 数据绑定及事件处理同 Vue.js 规范，同时补充了App及页面的生命周期 为兼容多端运行，建议使用flex布局进行开发  全局配置和页面配置 #  通过globalStyle进行全局配置 #  用于设置应用的状态栏、导航条、标题、窗口背景色等。详细文档\n   属性 类型 默认值 描述     navigationBarBackgroundColor HexColor #F7F7F7 导航栏背景颜色（同状态栏背景色）   navigationBarTextStyle String white 导航栏标题颜色及状态栏前景颜色，仅支持 black/white   navigationBarTitleText String  导航栏标题文字内容   backgroundColor HexColor #ffffff 窗口的背景色   backgroundTextStyle String dark 下拉 loading 的样式，仅支持 dark / light   enablePullDownRefresh Boolean false 是否开启下拉刷新，详见页面生命周期。   onReachBottomDistance Number 50 页面上拉触底事件触发时距页面底部距离，单位只支持px，详见页面生命周期    创建新的message页面 #  右键pages新建message目录，在message目录下右键新建.vue文件,并选择基本模板\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; 这是信息页面 \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; 通过pages来配置页面 #     属性 类型 默认值 描述     path String  配置页面路径   style Object  配置页面窗口表现，配置项参考 pageStyle    pages数组数组中第一项表示应用启动页\n\u0026#34;pages\u0026#34;: [ 、 { \u0026#34;path\u0026#34;:\u0026#34;pages/message/message\u0026#34; }, { \u0026#34;path\u0026#34;: \u0026#34;pages/index/index\u0026#34;, \u0026#34;style\u0026#34;: { \u0026#34;navigationBarTitleText\u0026#34;: \u0026#34;uni-app\u0026#34; } } ] 通过style修改页面的标题和导航栏背景色，并且设置h5下拉刷新的特有样式\n\u0026#34;pages\u0026#34;: [ //pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages \t{ \u0026#34;path\u0026#34;:\u0026#34;pages/message/message\u0026#34;, \u0026#34;style\u0026#34;: { \u0026#34;navigationBarBackgroundColor\u0026#34;: \u0026#34;#007AFF\u0026#34;, \u0026#34;navigationBarTextStyle\u0026#34;: \u0026#34;white\u0026#34;, \u0026#34;enablePullDownRefresh\u0026#34;: true, \u0026#34;disableScroll\u0026#34;: true, \u0026#34;h5\u0026#34;: { \u0026#34;pullToRefresh\u0026#34;: { \u0026#34;color\u0026#34;: \u0026#34;#007AFF\u0026#34; } } } } ] 配置tabbar #  如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。\nTips\n 当设置 position 为 top 时，将不会显示 icon tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。  属性说明：\n   属性 类型 必填 默认值 描述 平台差异说明     color HexColor 是  tab 上的文字默认颜色    selectedColor HexColor 是  tab 上的文字选中时的颜色    backgroundColor HexColor 是  tab 的背景色    borderStyle String 否 black tabbar 上边框的颜色，仅支持 black/white App 2.3.4+ 支持其他颜色值   list Array 是  tab 的列表，详见 list 属性说明，最少2个、最多5个 tab    position String 否 bottom 可选值 bottom、top top 值仅微信小程序支持    其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：\n   属性 类型 必填 说明     pagePath String 是 页面路径，必须在 pages 中先定义   text String 是 tab 上按钮文字，在 5+APP 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标   iconPath String 否 图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片，不支持字体图标   selectedIconPath String 否 选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效    案例代码：\n\u0026#34;tabBar\u0026#34;: { \u0026#34;list\u0026#34;: [ { \u0026#34;text\u0026#34;: \u0026#34;首页\u0026#34;, \u0026#34;pagePath\u0026#34;:\u0026#34;pages/index/index\u0026#34;, \u0026#34;iconPath\u0026#34;:\u0026#34;static/tabs/home.png\u0026#34;, \u0026#34;selectedIconPath\u0026#34;:\u0026#34;static/tabs/home-active.png\u0026#34; }, { \u0026#34;text\u0026#34;: \u0026#34;信息\u0026#34;, \u0026#34;pagePath\u0026#34;:\u0026#34;pages/message/message\u0026#34;, \u0026#34;iconPath\u0026#34;:\u0026#34;static/tabs/message.png\u0026#34;, \u0026#34;selectedIconPath\u0026#34;:\u0026#34;static/tabs/message-active.png\u0026#34; }, { \u0026#34;text\u0026#34;: \u0026#34;我们\u0026#34;, \u0026#34;pagePath\u0026#34;:\u0026#34;pages/contact/contact\u0026#34;, \u0026#34;iconPath\u0026#34;:\u0026#34;static/tabs/contact.png\u0026#34;, \u0026#34;selectedIconPath\u0026#34;:\u0026#34;static/tabs/contact-active.png\u0026#34; } ] } condition启动模式配置 #  启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。\n属性说明：\n   属性 类型 是否必填 描述     current Number 是 当前激活的模式，list节点的索引值   list Array 是 启动模式列表    list说明：\n   属性 类型 是否必填 描述     name String 是 启动模式名称   path String 是 启动页面路径   query String 否 启动参数，可在页面的 onLoad 函数里获得    组件的基本使用 #  uni-app提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼接称自己的应用\nuni-app中的组件，就像 HTML 中的 div 、p、span 等标签的作用一样，用于搭建页面的基础结构\ntext文本组件的用法 #  001 - text 组件的属性 #     属性 类型 默认值 必填 说明     selectable boolean false 否 文本是否可选   space string . 否 显示连续空格，可选参数：ensp、emsp、nbsp   decode boolean false 否 是否解码     text 组件相当于行内标签、在同一行显示 除了文本节点以外的其他节点都无法长按选中  002 - 代码案例 #  \u0026lt;view\u0026gt; \u0026lt;!-- 长按文本是否可选 --\u0026gt; \u0026lt;text selectable=\u0026#39;true\u0026#39;\u0026gt;来了老弟\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view\u0026gt; \u0026lt;!-- 显示连续空格的方式 --\u0026gt; \u0026lt;view\u0026gt; \u0026lt;text space=\u0026#39;ensp\u0026#39;\u0026gt;来了 老弟\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view\u0026gt; \u0026lt;text space=\u0026#39;emsp\u0026#39;\u0026gt;来了 老弟\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view\u0026gt; \u0026lt;text space=\u0026#39;nbsp\u0026#39;\u0026gt;来了 老弟\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view\u0026gt; \u0026lt;text\u0026gt;skyblue\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view\u0026gt; \u0026lt;!-- 是否解码 --\u0026gt; \u0026lt;text decode=\u0026#39;true\u0026#39;\u0026gt;\u0026amp;nbsp; \u0026amp;lt; \u0026amp;gt; \u0026amp;amp; \u0026amp;apos; \u0026amp;ensp; \u0026amp;emsp;\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; view视图容器组件的用法 #   View 视图容器， 类似于 HTML 中的 div\n 001 - 组件的属性 #  002 - 代码案例 #  \u0026lt;view class=\u0026#34;box2\u0026#34; hover-class=\u0026#34;box2_active\u0026#34;\u0026gt; \u0026lt;view class=\u0026#39;box1\u0026#39; hover-class=\u0026#39;active\u0026#39; hover-stop-propagation :hover-start-time=\u0026#34;2000\u0026#34; :hover-stay-time=\u0026#39;2000\u0026#39;\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; button按钮组件的用法 #  001 - 组件的属性 #     属性名 类型 默认值 说明     size String default 按钮的大小   type String default 按钮的样式类型   plain Boolean false 按钮是否镂空，背景色透明   disabled Boolean false 是否按钮   loading Boolean false 名称是否带 loading t图标     button 组件默认独占一行，设置 size 为 mini 时可以在一行显示多个  002 - 案例代码 #  \u0026lt;button size=\u0026#39;mini\u0026#39; type=\u0026#39;primary\u0026#39;\u0026gt;前端\u0026lt;/button\u0026gt; \u0026lt;button size=\u0026#39;mini\u0026#39; type=\u0026#39;default\u0026#39; disabled=\u0026#39;true\u0026#39;\u0026gt;前端\u0026lt;/button\u0026gt; \u0026lt;button size=\u0026#39;mini\u0026#39; type=\u0026#39;warn\u0026#39; loading=\u0026#39;true\u0026#39;\u0026gt;前端\u0026lt;/button\u0026gt; image组件的使用 #  image #  图片。\n   属性名 类型 默认值 说明 平台差异说明     src String  图片资源地址    mode String \u0026lsquo;scaleToFill\u0026rsquo; 图片裁剪、缩放的模式     Tips\n \u0026lt;image\u0026gt; 组件默认宽度 300px、高度 225px； src 仅支持相对路径、绝对路径，支持 base64 码； 页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 image{will-change: transform} ,可优化此问题。  uni-app中的样式 #    rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。\n  使用@import语句可以导入外联样式表，@import后跟需要导入的外联样式表的相对路径，用;表示语句结束\n  支持基本常用的选择器class、id、element等\n  在 uni-app 中不能使用 * 选择器。\n  page 相当于 body 节点\n  定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。\n  uni-app 支持使用字体图标，使用方式与普通 web 项目相同，需要注意以下几点：\n  字体文件小于 40kb，uni-app 会自动将其转化为 base64 格式；\n  字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；\n  字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。\n @font-face {\rfont-family: test1-icon;\rsrc: url('~@/static/iconfont.ttf');\r}\r    如何使用scss或者less\n  uni-app中的数据绑定 #  在页面中需要定义数据，和我们之前的vue一摸一样，直接在data中定义数据即可\nexport default { data () { return { msg: \u0026#39;hello-uni\u0026#39; } } } 插值表达式的使用 #    利用插值表达式渲染基本数据\n\u0026lt;view\u0026gt;{{msg}}\u0026lt;/view\u0026gt;   在插值表达式中使用三元运算\n\u0026lt;view\u0026gt;{{ flag ? \u0026#39;我是真的\u0026#39;:\u0026#39;我是假的\u0026#39; }}\u0026lt;/view\u0026gt;   基本运算\n\u0026lt;view\u0026gt;{{1+1}}\u0026lt;/view\u0026gt;   v-bind动态绑定属性 #  在data中定义了一张图片，我们希望把这张图片渲染到页面上\nexport default { data () { return { img: \u0026#39;http://destiny001.gitee.io/image/monkey_02.jpg\u0026#39; } } } 利用v-bind进行渲染\n\u0026lt;image v-bind:src=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/image\u0026gt; 还可以缩写成:\n\u0026lt;image :src=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/image\u0026gt; v-for的使用 #  data中定以一个数组，最终将数组渲染到页面上\ndata () { return { arr: [ { name: \u0026#39;刘能\u0026#39;, age: 29 }, { name: \u0026#39;赵四\u0026#39;, age: 39 }, { name: \u0026#39;宋小宝\u0026#39;, age: 49 }, { name: \u0026#39;小沈阳\u0026#39;, age: 59 } ] } } 利用v-for进行循环\n\u0026lt;view v-for=\u0026#34;(item,i) in arr\u0026#34; :key=\u0026#34;i\u0026#34;\u0026gt;名字：{{item.name}}---年龄：{{item.age}}\u0026lt;/view\u0026gt; uni中的事件 #  事件绑定 #  在uni中事件绑定和vue中是一样的，通过v-on进行事件的绑定，也可以简写为@\n\u0026lt;button @click=\u0026#34;tapHandle\u0026#34;\u0026gt;点我啊\u0026lt;/button\u0026gt; 事件函数定义在methods中\nmethods: { tapHandle () { console.log(\u0026#39;真的点我了\u0026#39;) } } 事件传参 #    默认如果没有传递参数，事件函数第一个形参为事件对象\n// template\r\u0026lt;button @click=\u0026quot;tapHandle\u0026quot;\u0026gt;点我啊\u0026lt;/button\u0026gt;\r// script\rmethods: {\rtapHandle (e) {\rconsole.log(e)\r}\r}\r  如果给事件函数传递参数了，则对应的事件函数形参接收的则是传递过来的数据\n// template\r\u0026lt;button @click=\u0026quot;tapHandle(1)\u0026quot;\u0026gt;点我啊\u0026lt;/button\u0026gt;\r// script\rmethods: {\rtapHandle (num) {\rconsole.log(num)\r}\r}\r  如果获取事件对象也想传递参数\n// template\r\u0026lt;button @click=\u0026quot;tapHandle(1,$event)\u0026quot;\u0026gt;点我啊\u0026lt;/button\u0026gt;\r// script\rmethods: {\rtapHandle (num,e) {\rconsole.log(num,e)\r}\r}\r  uni的生命周期 #  应用的生命周期 #  生命周期的概念：一个对象从创建、运行、销毁的整个过程被成为生命周期。\n生命周期函数：在生命周期中每个阶段会伴随着每一个函数的触发，这些函数被称为生命周期函数\nuni-app 支持如下应用生命周期函数：\n   函数名 说明     onLaunch 当uni-app 初始化完成时触发（全局只触发一次）   onShow 当 uni-app 启动，或从后台进入前台显示   onHide 当 uni-app 从前台进入后台   onError 当 uni-app 报错时触发    页面的生命周期 #  uni-app 支持如下页面生命周期函数：\n   函数名 说明 平台差异说明 最低版本     onLoad 监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参），参考示例     onShow 监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面     onReady 监听页面初次渲染完成。     onHide 监听页面隐藏     onUnload 监听页面卸载      下拉刷新 #  开启下拉刷新 #  在uni-app中有两种方式开启下拉刷新\n 需要在 pages.json 里，找到的当前页面的pages节点，并在 style 选项中开启 enablePullDownRefresh 通过调用uni.startPullDownRefresh方法来开启下拉刷新  通过配置文件开启 #  创建list页面进行演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; 杭州学科 \u0026lt;view v-for=\u0026#34;(item,index) in arr\u0026#34; :key=\u0026#34;index\u0026#34;\u0026gt; {{item}} \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data () { return { arr: [\u0026#39;前端\u0026#39;,\u0026#39;java\u0026#39;,\u0026#39;ui\u0026#39;,\u0026#39;大数据\u0026#39;] } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; 通过pages.json文件中找到当前页面的pages节点，并在 style 选项中开启 enablePullDownRefresh\n{ \u0026#34;path\u0026#34;:\u0026#34;pages/list/list\u0026#34;, \u0026#34;style\u0026#34;:{ \u0026#34;enablePullDownRefresh\u0026#34;: true } } 通过API开启 #  api文档\nuni.startPullDownRefresh() 监听下拉刷新 #  通过onPullDownRefresh可以监听到下拉刷新的动作\nexport default { data () { return { arr: [\u0026#39;前端\u0026#39;,\u0026#39;java\u0026#39;,\u0026#39;ui\u0026#39;,\u0026#39;大数据\u0026#39;] } }, methods: { startPull () { uni.startPullDownRefresh() } }, onPullDownRefresh () { console.log(\u0026#39;触发下拉刷新了\u0026#39;) } } 关闭下拉刷新 #  uni.stopPullDownRefresh()\n停止当前页面下拉刷新。\n案例演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;startPull\u0026#34;\u0026gt;开启下拉刷新\u0026lt;/button\u0026gt; 杭州学科 \u0026lt;view v-for=\u0026#34;(item,index) in arr\u0026#34; :key=\u0026#34;index\u0026#34;\u0026gt; {{item}} \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data () { return { arr: [\u0026#39;前端\u0026#39;,\u0026#39;java\u0026#39;,\u0026#39;ui\u0026#39;,\u0026#39;大数据\u0026#39;] } }, methods: { startPull () { uni.startPullDownRefresh() } }, onPullDownRefresh () { this.arr = [] setTimeout(()=\u0026gt; { this.arr = [\u0026#39;前端\u0026#39;,\u0026#39;java\u0026#39;,\u0026#39;ui\u0026#39;,\u0026#39;大数据\u0026#39;] uni.stopPullDownRefresh() }, 1000); } } \u0026lt;/script\u0026gt; 上拉加载 #  通过在pages.json文件中找到当前页面的pages节点下style中配置onReachBottomDistance可以设置距离底部开启加载的距离，默认为50px\n通过onReachBottom监听到触底的行为\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;startPull\u0026#34;\u0026gt;开启下拉刷新\u0026lt;/button\u0026gt; 杭州学科 \u0026lt;view v-for=\u0026#34;(item,index) in arr\u0026#34; :key=\u0026#34;index\u0026#34;\u0026gt; {{item}} \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data () { return { arr: [\u0026#39;前端\u0026#39;,\u0026#39;java\u0026#39;,\u0026#39;ui\u0026#39;,\u0026#39;大数据\u0026#39;,\u0026#39;前端\u0026#39;,\u0026#39;java\u0026#39;,\u0026#39;ui\u0026#39;,\u0026#39;大数据\u0026#39;] } }, onReachBottom () { console.log(\u0026#39;触底了\u0026#39;) } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; view{ height: 100px; line-height: 100px; } \u0026lt;/style\u0026gt; 网络请求 #  在uni中可以调用uni.request方法进行请求网络请求\n需要注意的是：在小程序中网络相关的 API 在使用前需要配置域名白名单。\n发送get请求\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button @click=\u0026#34;sendGet\u0026#34;\u0026gt;发送请求\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { methods: { sendGet () { uni.request({ url: \u0026#39;http://localhost:8082/api/getlunbo\u0026#39;, success(res) { console.log(res) } }) } } } \u0026lt;/script\u0026gt; 发送post请求\n数据缓存 #  uni.setStorage #  官方文档\n将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口。\n代码演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;setStor\u0026#34;\u0026gt;存储数据\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { methods: { setStor () { uni.setStorage({ key: \u0026#39;id\u0026#39;, data: 100, success () { console.log(\u0026#39;存储成功\u0026#39;) } }) } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; uni.setStorageSync #  将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口。\n代码演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;setStor\u0026#34;\u0026gt;存储数据\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { methods: { setStor () { uni.setStorageSync(\u0026#39;id\u0026#39;,100) } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; uni.getStorage #  从本地缓存中异步获取指定 key 对应的内容。\n代码演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;getStorage\u0026#34;\u0026gt;获取数据\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data () { return { id: \u0026#39;\u0026#39; } }, methods: { getStorage () { uni.getStorage({ key: \u0026#39;id\u0026#39;, success: res=\u0026gt;{ this.id = res.data } }) } } } \u0026lt;/script\u0026gt; uni.getStorageSync #  从本地缓存中同步获取指定 key 对应的内容。\n代码演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;getStorage\u0026#34;\u0026gt;获取数据\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { methods: { getStorage () { const id = uni.getStorageSync(\u0026#39;id\u0026#39;) console.log(id) } } } \u0026lt;/script\u0026gt; uni.removeStorage #  从本地缓存中异步移除指定 key。\n代码演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;removeStorage\u0026#34;\u0026gt;删除数据\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { methods: { removeStorage () { uni.removeStorage({ key: \u0026#39;id\u0026#39;, success: function () { console.log(\u0026#39;删除成功\u0026#39;) } }) } } } \u0026lt;/script\u0026gt; uni.removeStorageSync #  从本地缓存中同步移除指定 key。\n代码演示\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;removeStorage\u0026#34;\u0026gt;删除数据\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { methods: { removeStorage () { uni.removeStorageSync(\u0026#39;id\u0026#39;) } } } \u0026lt;/script\u0026gt; 上传图片、预览图片 #  上传图片 #  uni.chooseImage方法从本地相册选择图片或使用相机拍照。\n案例代码\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;button @click=\u0026#34;chooseImg\u0026#34; type=\u0026#34;primary\u0026#34;\u0026gt;上传图片\u0026lt;/button\u0026gt; \u0026lt;view\u0026gt; \u0026lt;image v-for=\u0026#34;item in imgArr\u0026#34; :src=\u0026#34;item\u0026#34; :key=\u0026#34;index\u0026#34;\u0026gt;\u0026lt;/image\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data () { return { imgArr: [] } }, methods: { chooseImg () { uni.chooseImage({ count: 9, success: res=\u0026gt;{ this.imgArr = res.tempFilePaths } }) } } } \u0026lt;/script\u0026gt; 预览图片 #  结构\n\u0026lt;view\u0026gt; \u0026lt;image v-for=\u0026#34;item in imgArr\u0026#34; :src=\u0026#34;item\u0026#34; @click=\u0026#34;previewImg(item)\u0026#34; :key=\u0026#34;item\u0026#34;\u0026gt;\u0026lt;/image\u0026gt; \u0026lt;/view\u0026gt; 预览图片的方法\npreviewImg (current) { uni.previewImage({ urls: this.imgArr, current }) } 条件注释实现跨段兼容 #  条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。\n**写法：**以 #ifdef 加平台标识 开头，以 #endif 结尾。\n平台标识\n   值 平台 参考文档     APP-PLUS 5+App HTML5+ 规范   H5 H5    MP-WEIXIN 微信小程序 微信小程序   MP-ALIPAY 支付宝小程序 支付宝小程序   MP-BAIDU 百度小程序 百度小程序   MP-TOUTIAO 头条小程序 头条小程序   MP-QQ QQ小程序 （目前仅cli版支持）   MP 微信小程序/支付宝小程序/百度小程序/头条小程序/QQ小程序     组件的条件注释 #  代码演示\n\u0026lt;!-- #ifdef H5 --\u0026gt; \u0026lt;view\u0026gt; h5页面会显示 \u0026lt;/view\u0026gt; \u0026lt;!-- #endif --\u0026gt; \u0026lt;!-- #ifdef MP-WEIXIN --\u0026gt; \u0026lt;view\u0026gt; 微信小程序会显示 \u0026lt;/view\u0026gt; \u0026lt;!-- #endif --\u0026gt; \u0026lt;!-- #ifdef APP-PLUS --\u0026gt; \u0026lt;view\u0026gt; app会显示 \u0026lt;/view\u0026gt; \u0026lt;!-- #endif --\u0026gt; api的条件注释 #  代码演示\nonLoad () { //#ifdef MP-WEIXIN  console.log(\u0026#39;微信小程序\u0026#39;) //#endif  //#ifdef H5  console.log(\u0026#39;h5页面\u0026#39;) //#endif } 样式的条件注释\n代码演示\n/* #ifdef H5 */ view{ height: 100px; line-height: 100px; background: red; } /* #endif */ /* #ifdef MP-WEIXIN */ view{ height: 100px; line-height: 100px; background: green; } /* #endif */ uni中的导航跳转 #  利用navigator进行跳转 #  navigator详细文档：文档地址\n跳转到普通页面\n\u0026lt;navigator url=\u0026#34;/pages/about/about\u0026#34; hover-class=\u0026#34;navigator-hover\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;default\u0026#34;\u0026gt;跳转到关于页面\u0026lt;/button\u0026gt; \u0026lt;/navigator\u0026gt; 跳转到tabbar页面\n\u0026lt;navigator url=\u0026#34;/pages/message/message\u0026#34; open-type=\u0026#34;switchTab\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;default\u0026#34;\u0026gt;跳转到message页面\u0026lt;/button\u0026gt; \u0026lt;/navigator\u0026gt; 利用编程式导航进行跳转 #  导航跳转文档\n利用navigateTo进行导航跳转\n保留当前页面，跳转到应用内的某个页面，使用uni.navigateBack可以返回到原页面。\n\u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;goAbout\u0026#34;\u0026gt;跳转到关于页面\u0026lt;/button\u0026gt; 通过navigateTo方法进行跳转到普通页面\ngoAbout () { uni.navigateTo({ url: \u0026#39;/pages/about/about\u0026#39;, }) } 通过switchTab跳转到tabbar页面\n跳转到tabbar页面\n\u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;goMessage\u0026#34;\u0026gt;跳转到message页面\u0026lt;/button\u0026gt; 通过switchTab方法进行跳转\ngoMessage () { uni.switchTab({ url: \u0026#39;/pages/message/message\u0026#39; }) } redirectTo进行跳转\n关闭当前页面，跳转到应用内的某个页面。\n\u0026lt;!-- template --\u0026gt; \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;goMessage\u0026#34;\u0026gt;跳转到message页面\u0026lt;/button\u0026gt; \u0026lt;!-- js --\u0026gt; goMessage () { uni.switchTab({ url: \u0026#39;/pages/message/message\u0026#39; }) } 通过onUnload测试当前组件确实卸载\nonUnload () { console.log(\u0026#39;组件卸载了\u0026#39;) } 导航跳转传递参数 #  在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过onLoad生命周期进行接收\n传递参数的页面\ngoAbout () { uni.navigateTo({ url: \u0026#39;/pages/about/about?id=80\u0026#39;, }); } 接收参数的页面\n\u0026lt;script\u0026gt; export default { onLoad (options) { console.log(options) } } \u0026lt;/script\u0026gt; #  uni-app中组件的创建 #  在uni-app中，可以通过创建一个后缀名为vue的文件，即创建一个组件成功，其他组件可以将该组件通过impot的方式导入，在通过components进行注册即可\n  创建login组件，在component中创建login目录，然后新建login.vue文件\n\u0026lt;template\u0026gt;\r\u0026lt;view\u0026gt;\r这是一个自定义组件\r\u0026lt;/view\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;script\u0026gt;\r\u0026lt;/script\u0026gt;\r\u0026lt;style\u0026gt;\r\u0026lt;/style\u0026gt;\r  在其他组件中导入该组件并注册\nimport login from \u0026quot;@/components/test/test.vue\u0026quot;\r  注册组件\ncomponents: {test}   使用组件\n\u0026lt;test\u0026gt;\u0026lt;/test\u0026gt;\r  组件的生命周期函数 #     beforeCreate 在实例初始化之后被调用。详见       created 在实例创建完成后被立即调用。详见     beforeMount 在挂载开始之前被调用。详见     mounted 挂载到实例上去之后调用。详见 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用$nextTickVue官方文档     beforeUpdate 数据更新时调用，发生在虚拟 DOM 打补丁之前。详见 仅H5平台支持    updated 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。详见 仅H5平台支持    beforeDestroy 实例销毁之前调用。在这一步，实例仍然完全可用。详见     destroyed Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。详见      组件的通讯 #  父组件给子组件传值 #  通过props来接受外界传递到组件内部的值\n\u0026lt;template\u0026gt;\r\u0026lt;view\u0026gt;\r这是一个自定义组件 {{msg}}\r\u0026lt;/view\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;script\u0026gt;\rexport default {\rprops: ['msg']\r}\r\u0026lt;/script\u0026gt;\r\u0026lt;style\u0026gt;\r\u0026lt;/style\u0026gt;\r其他组件在使用login组件的时候传递值\n\u0026lt;template\u0026gt;\r\u0026lt;view\u0026gt;\r\u0026lt;test :msg=\u0026quot;msg\u0026quot;\u0026gt;\u0026lt;/test\u0026gt;\r\u0026lt;/view\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;script\u0026gt;\rimport test from \u0026quot;@/components/test/test.vue\u0026quot;\rexport default {\rdata () {\rreturn {\rmsg: 'hello'\r}\r},\rcomponents: {test}\r}\r\u0026lt;/script\u0026gt;\r子组件给父组件传值 #  通过$emit触发事件进行传递参数\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; 这是一个自定义组件 {{msg}} \u0026lt;button type=\u0026#34;primary\u0026#34; @click=\u0026#34;sendMsg\u0026#34;\u0026gt;给父组件传值\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data () { return { status: \u0026#39;打篮球\u0026#39; } }, props: { msg: { type: String, value: \u0026#39;\u0026#39; } }, methods: { sendMsg () { this.$emit(\u0026#39;myEvent\u0026#39;,this.status) } } } \u0026lt;/script\u0026gt; 父组件定义自定义事件并接收参数\n\u0026lt;template\u0026gt; \u0026lt;view\u0026gt; \u0026lt;test :msg=\u0026#34;msg\u0026#34; @myEvent=\u0026#34;getMsg\u0026#34;\u0026gt;\u0026lt;/test\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import test from \u0026#34;@/components/test/test.vue\u0026#34; export default { data () { return { msg: \u0026#39;hello\u0026#39; } }, methods: { getMsg (res) { console.log(res) } }, components: {test} } \u0026lt;/script\u0026gt; 兄弟组件通讯 #  uni-ui的使用 #  uni-ui文档\n1、进入Grid宫格组件\n2、使用HBuilderX导入该组件\n3、导入该组件\nimport uniGrid from \u0026#34;@/components/uni-grid/uni-grid.vue\u0026#34; import uniGridItem from \u0026#34;@/components/uni-grid-item/uni-grid-item.vue\u0026#34; 4、注册组件\ncomponents: {uniGrid,uniGridItem} 5、使用组件\n\u0026lt;uni-grid :column=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;uni-grid-item\u0026gt; \u0026lt;text class=\u0026#34;text\u0026#34;\u0026gt;文本\u0026lt;/text\u0026gt; \u0026lt;/uni-grid-item\u0026gt; \u0026lt;uni-grid-item\u0026gt; \u0026lt;text class=\u0026#34;text\u0026#34;\u0026gt;文本\u0026lt;/text\u0026gt; \u0026lt;/uni-grid-item\u0026gt; \u0026lt;uni-grid-item\u0026gt; \u0026lt;text class=\u0026#34;text\u0026#34;\u0026gt;文本\u0026lt;/text\u0026gt; \u0026lt;/uni-grid-item\u0026gt; \u0026lt;/uni-grid\u0026gt; "});index.add({'id':71,'href':'/life/docs/operating_system/windows/ftp/','title':" FTP ",'section':"windows学习与使用 ",'content':"本地设置FTP服务器 #  步骤1：在计算机上打开“控制面板”，然后单击“程序和功能”。 #  步骤2：在“程序和功能”窗口中，单击“控制面板”窗口左侧的“打开或关闭Windows功能”。 #  第3步：现在等待一段时间并向下滚动以找出“Internet信息服务”。 只需展开它，打开“FTP服务器”，“Web管理工具”和“万维网服务”下的所有内容，与下面的屏幕截图相同。 完成所有服务后，单击“确定” #  第4步：应用更改需要一些时间，完成后，单击“立即重新启动”以重新启动计算机并应用所做的更改 #  步骤5：重新启动计算机后，再次打开“控制面板”，然后单击“管理工具”将其打开 #  步骤7：在IIS管理器窗口的左侧，展开窗口左侧的计算机名称，除非您找到“站点”。 只需右键单击“站点”，然后单击“添加FTP站点\u0026hellip;” #  第8步：这里给FTP站点命名。 我将\u0026rsquo;sampleftp\u0026rsquo;赋予FTP站点名称。 现在单击“\u0026hellip;”按钮以找到要通过FTP服务器访问的文件夹或驱动程序。 我为本教程选择了“C：FTP_Path”。 完成所有操作后，单击“下一步” #  步骤9：在下一个窗口中，单击与“IP Address：”对应的下拉菜单，然后在本地网络上选择计算机的IP地址。 #   将端口号保留为“21”，默认情况下是这样。  步骤10：选择“No SSL”并启用“自动启动FTP站点”，然后单击“下一步”。 #   *由于这是一个教程，我不允许使用SSL。 但是，如果您想通过FTP服务器访问敏感数据，我建议您使用SSL  步骤11：现在选择“基本”的身份验证方法，并向“所有用户”提供“授权”。 用户必须输入您的Windows用户名和密码才能使用此身份验证方法访问FTP服务器上的文件 #   现在，根据您要如何设置FTP服务器，将权限设置为“读取”和“写入”或仅设置为“读取”。 之后，单击“完成”以完成站点设置并在Windows计算机上启动FTP服务器  配置防火墙 #   您的FTP服务器已准备就绪并且正在运行 但是，您需要配置Windows防火墙以允许与您的计算机进行FTP通信的事务处理。  步骤12：打开“控制面板”并在Windows 10上单击“Windows Defender Firewall”或在Windows 7上单击“Windows防火墙” #  步骤13：单击窗口左侧的“允许通过Windows Defender防火墙的应用程序或功能” #  步骤14：在新窗口中，单击“更改设置”并标记“FTP服务器”的“公共”和“私人”对应的复选框，然后单击“确定”。 #    现在，您可以使用适当的应用程序轻松地从本地网络中的任何其他计算机或移动设备访问FTP服务器，或者只需从浏览器访问即可。\n  步骤15：只需输入\u0026rsquo;ftp：//'，然后输入计算机的IP地址和端口号，即21。对于本教程，我的计算机的IP地址为192.168.1.108。\n  所以完整的地址将是\u0026rsquo;ftp://192.168.1.108:21'\n  步骤16：如果输入的地址正确，将要求您输入Windows计算机的用户名和密码。 最后，点击“确定”或“登录”，以适用于您的方式为准 #   如果身份验证成功，您将能够看到通过FTP服务器共享的文件夹或驱动器中的内容。    这样，您就可以在本地网络上访问Windows计算机上的文件。\n  通过Internet访问本地FTP服务器\n  通过Internet访问本地或家庭FTP服务器需要在路由器上配置一些设置。因此，该过程可能会根据您使用的路由器的公司和型号而有所不同。不过，我在此基本了解如何配置路由器以通过互联网访问您的FTP服务器。\n  在继续之前，请记下您的Internet服务提供商从以下链接提供给您的外部IP地址。\n  打开路由器配置页面，该页面应为192.168.1.1,192.168.0.1或左右。您可以在配置手册中找到路由器配置页面的地址。\n  对我来说，它是192.168.1.1。只需打开配置页面，然后使用用户名和密码登录即可。\n  然后转到“高级设置”，并在其下选择“NAT”。\n  步骤17：在“Virtual Circuit”中选择“PVC2”，然后单击“Virtual Server”。将“IP数量”设置为“单个”，这应该是默认值。 #  步骤18：现在点击“应用程序”对应的下拉菜单，然后从菜单中选择“FTP”。 之后将自动应用其他配置。 您甚至会注意到FTP应用程序的端口号也被分配为“21” #   现在为我设置本地IP地址，即192.168.1.108。  第19步：完成后，单击“保存”。 #  第20步：一切准备就绪。 现在输入\u0026rsquo;ftp：//'，后跟前面提到的外部IP地址，以及冒号后的端口号，即21。 #   所以对我来说地址是\u0026rsquo;ftp://117.194.16.221:21'。 如果您的ISP为您分配动态IP地址，则每次重新启动路由器时外部IP地址都会更改。  "});index.add({'id':72,'href':'/life/docs/javadir/groovy/%E5%A6%82%E4%BD%95%E5%9C%A8groovy%E4%B8%AD%E8%8E%B7%E5%8F%96%E4%BB%A5%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E7%9A%84%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/','title':" groovy变量值获取 ",'section':"groovy 学习与使用 ",'content':"groovy变量值获取 #  `\nhttps://www.codenong.com/34288451/\n`\n"});index.add({'id':73,'href':'/life/docs/operating_system/one_chapter/1_5_/','title':" 中断和异常 ",'section':"第一章 操作系统概述 ",'content':"一:知识总览 #  中断的作用 #   “中断”会使CPU由用户态变为内核态，使操作系统重新夺回对CPU的控制权\n   CPU 上会运行两种程序，一种是操作系统内核程序，一种是应用程序\n  在合适的情况下，操作系统内核会把CPU的使用权主动让给应用程序(进程管理相关内容)\n  如果没有“中断”机制，那么一旦应用程序上CPU运行，CPU就会一直运行这个应用程序\n    内核态à用户态：执行一条特权指令——修改PSW的标志位为“用户态”，这个动作意味着操作系统将主动让出CPU使用权\n  用户态à内核态：由“中断”引发，硬件自动完成变态过程，触发中断信号意味着操作系统将强行夺回CPU的使用权\n  中断的类型 #  中断机制的基本原理 #  二:知识回顾与重要考点 #  "});index.add({'id':74,'href':'/life/docs/javadir/basedir/jsp_dir/jsp_%E5%AD%97%E7%AC%A6%E4%B8%B2el%E8%A1%A8%E8%BE%BE%E5%BC%8F/','title':"字符串el表达式 ",'section':"jsp 基础知识 ",'content':"字符串el表达式 #  fn:contains 判断字符串是否包含另外一个字符串 \u0026lt;c:if test=\u0026quot;${fn:contains(name, searchString)}\u0026quot;\u0026gt;\rfn:containsIgnoreCase 判断字符串是否包含另外一个字符串(大小写无关) \u0026lt;c:if test=\u0026quot;${fn:containsIgnoreCase(name, searchString)}\u0026quot;\u0026gt;\rfn:endsWith 判断字符串是否以另外字符串结束 \u0026lt;c:if test=\u0026quot;${fn:endsWith(filename, \u0026quot;.txt\u0026quot;)}\u0026quot;\u0026gt;\rfn:escapeXml 把一些字符转成XML表示，例如 \u0026lt;字符应该转为\u0026lt; ${fn:escapeXml(param:info)}\rfn:indexOf 子字符串在母字符串中出现的位置 ${fn:indexOf(name, \u0026quot;-\u0026quot;)}\rfn:join 将数组中的数据联合成一个新字符串，并使用指定字符格开 ${fn:join(array, \u0026quot;;\u0026quot;)}\rfn:length 获取字符串的长度，或者数组的大小 ${fn:length(shoppingCart.products)}\rfn:replace 替换字符串中指定的字符 ${fn:replace(text, \u0026quot;-\u0026quot;, \u0026quot;?\u0026quot;)}\rfn:split 把字符串按照指定字符切分 ${fn:split(customerNames, \u0026quot;;\u0026quot;)}\rfn:startsWith 判断字符串是否以某个子串开始 \u0026lt;c:if test=\u0026quot;${fn:startsWith(product.id, \u0026quot;100-\u0026quot;)}\u0026quot;\u0026gt;\rfn:substring 获取子串 ${fn:substring(zip, 6, -1)}\rfn:substringAfter 获取从某个字符所在位置开始的子串 ${fn:substringAfter(zip, \u0026quot;-\u0026quot;)}\rfn:substringBefore 获取从开始到某个字符所在位置的子串 ${fn:substringBefore(zip, \u0026quot;-\u0026quot;)}\rfn:toLowerCase 转为小写 ${fn.toLowerCase(product.name)}\rfn:toUpperCase 转为大写字符 ${fn.UpperCase(product.name)}\rfn:trim 去除字符串前后的空格 ${fn.trim(name)}\r函数 描述\rfn:contains(string, substring)\r如果参数string中包含参数substring，返回true\rfn:containsIgnoreCase(string, substring)\r如果参数string中包含参数substring（忽略大小写），返回true\rfn:endsWith(string, suffix)\r如果参数 string 以参数suffix结尾，返回true\rfn:escapeXml(string)\r将有特殊意义的XML (和HTML)转换为对应的XML character entity code，并返回\rfn:indexOf(string, substring)\r返回参数substring在参数string中第一次出现的位置\rfn:join(array, separator)\r将一个给定的数组array用给定的间隔符separator串在一起，组成一个新的字符串并返回。\rfn:length(item)\r返回参数item中包含元素的数量。参数Item类型是数组、collection或者String。如果是String类型,返回值是String中的字符数。\rfn:replace(string, before, after)\r返回一个String对象。用参数after字符串替换参数string中所有出现参数before字符串的地方，并返回替换后的结果 fn:split(string, separator)\r返回一个数组，以参数separator 为分割符分割参数string，分割后的每一部分就是数组的一个元素\rfn:startsWith(string, prefix)\r如果参数string以参数prefix开头，返回true\rfn:substring(string, begin, end)\r返回参数string部分字符串, 从参数begin开始到参数end位置，包括end位置的字符\rfn:substringAfter(string, substring)\r返回参数substring在参数string中后面的那一部分字符串?? fn:substringBefore(string, substring)\r返回参数substring在参数string中前面的那一部分字符串\rfn:toLowerCase(string)\r将参数string所有的字符变为小写，并将其返回\rfn:toUpperCase(string)\r将参数string所有的字符变为大写，并将其返回\rfn:trim(string)\r在jsp中 使用EL表达式时，不可以使用java提供的功能，比如indexOf()等。\r\u0026lt;c:if test=\u0026quot;${Boolean.valueOf(requestScope.addresult)==false}\u0026quot;\u0026gt; "});index.add({'id':75,'href':'/life/docs/operating_system/','title':"操作系统 ",'section':"Docs",'content':"现代操作系统 #   操作系统的基本特征是：\n  1、并发性：  是在计算机系统中同时存在多个程序，宏观上看，这些程序是同时向前推进的。 在单CPU上，这些并发执行的程序是交替在CPU上运行的。\n程序并发性体现在两个方面： 用户程序与用户程序之间的并发执行。 用户程序与操作系统程序之间的并发。\n 2、共享性：  资源共享是操作系统程序和多个用户程序共用系统中的资源。\n 3、 随机性：  随机性指：操作系统的运行是在一个随机的环境中，一个设备可能在任何时间向处理机发出中断请求，系统无法知道运行着的程序会在什么时候做什么事情。\n操作系统分类： #   1、批处理操作系统 ：  批处理操作系统的工作方式是：用户将作业交给系统操作员，系统操作员将许多用户的作业组成一批作业，之后输入到计算机中，在系统中形成一个自动转接的连续的作业流，然后启动操作系统，系统自动、依次执行每个作业。最后由操作员将作业结果交给用户。\n批处理操作系统的特点是：多道和成批处理。\n 2、分时操作系统 ：  分时操作系统的工作方式是：一台主机连接了若干个终端，每个终端有一个用户在使用。用户交互式地向系统提出命令请求，系统接受每个用户的命令，采用时间片轮转方式处理服务请求，并通过交互方式在终端上向用户显示结果。\n常见的通用操作系统是分时系统与批处理系统的结合。其原则是：分时优先，批处理后。“前台”响应需频繁交互的作业，如终端的要求； “后台”处理时间性要求不强的作业。\n 3、实时操作系统 ：  实时操作系统是指使计算机能及时响应外部事件的请求在规定的严格时间内完成对该事件的处理，并控制所有实时设备和实时任务协调一致地工作的操作系统。实时操作系统要追求的目标是：对外部请求在严格时间范围内做出反应，有高可靠性和完整性。\n 4、嵌入式操作系统 ：  嵌入式操作系统是运行在嵌入式系统环境中，对整个嵌入式系统以及它所操作、控制的各种部件装置等资源进行统一协调、调度、指挥和控制的系统软件。程，并使整个系统能高效地运行。\n 5、个人计算机操作系统 ：  个人计算机操作系统是一种单用户多任务的操作系统。个人计算机操作系统主要供个人使用，功能强、价格便宜，可以在几乎任何地方安装使用。它能满足一般人操作、学习、游戏等方面的需求。个人计算机操作系统的主要特点是计算机在某一时间内为单个用户服务；采用图形界面人机交互的工作方式，界面友好；使用方便，用户无需专门学习，也能熟练操纵机器。\n 6、网络操作系统 ：  网络操作系统是基于计算机网络的，是在各种计算机操作系统上按网络体系结构协议标准开发的软件，包括网络管理、通信、安全、资源共享和各种网络应用。其目标是相互通信及资源共享。\n 7、分布式操作系统 ：  大量的计算机通过网络被连结在一起，可以获得极高的运算能力及广泛的数据共享。这种系统被称作分布式系统。\n"});index.add({'id':76,'href':'/life/docs/operating_system/five_chapter/','title':"第五章 输入，输出（I,O） ",'section':"操作系统 ",'content':"输入，输出（I,O） #  "});index.add({'id':77,'href':'/life/docs/think/criticalthinking/','title':"批判性思维",'section':"思维",'content':" 批判性思维  "});index.add({'id':78,'href':'/life/docs/databases/mysql/mysql_distinguish/','title':"MySQL分库分表原理",'section':"mysql学习笔记",'content':"前言 #  在互联网还未崛起的时代,我们的传统应用都有这样一个特点：访问量、数据量都比较小，单库单表都完全可以支撑整个业务。\r随着互联网的发展和用户规模的迅速扩大,对系统的要求也越来越高。因此传统的MySQL单库单表架构的性能问题就暴露出来了。而有下面几个因素会影响数据库性能:\r 数据量  MySQL单库数据量在5000万以内性能比较好,超过阈值后性能会随着数据量的增大而变弱。\rMySQL单表的数据量是500w-1000w之间性能比较好,超过1000w性能也会下降。\r 磁盘  因为单个服务的磁盘空间是有限制的,如果并发压力下,所有的请求都访问同一个节点,肯定会对磁盘IO造成非常大的影响。\r 数据库连接  数据库连接是非常稀少的资源,如果一个库里既有用户、商品、订单相关的数据,当海量用户同时操作时,数据库连接就很可能成为瓶颈。\r为了提升性能,所以我们必须要解决上述几个问题,那就有必要引进分库分表。\r垂直拆分 or 水平拆分？ #  当我们单个库太大时,我们先要看一下是因为表太多还是数据量太大，如果是表太多,则应该将部分表进行迁移(可以按业务区分),这就是所谓的垂直切分。\r如果是数据量太大,则需要将表拆成更多的小表,来减少单表的数据量,这就是所谓的水平拆分。\r垂直拆分 #   垂直分库  垂直分库针对的是一个系统中的不同业务进行拆分,比如用户一个库,商品一个库,订单一个库。 一个购物网站对外提供服务时,会同时对用户、商品、订单表进行操作。没拆分之前, 全部都是落到单一的库上的,这会让数据库的单库处理能力成为瓶颈。如果垂直分库后还是将用户、商品、订单放到同一个服务器上,只是分到了不同的库,这样虽然会减少单库的压力,但是随着用户量增大,这会让整个数据库的处理能力成为瓶颈,还有单个服务器的磁盘空间、内存也会受非常大的影响。 所以我们要将其拆分到多个服务器上，这样上面的问题都解决了，以后也不会面对单机资源问题。\r 垂直分表  也就是“大表拆小表”，基于列字段进行的。一般是表中的字段较多，将不常用的， 数据较大，长度较长（比如text类型字段）的拆分到“扩展表“。一般是针对那种几百列的大表，也避免查询时，数据量太大造成的“跨页”问题。\r水平拆分 #   水平分表  和垂直分表有一点类似,不过垂直分表是基于列的,而水平分表是基于全表的。水平拆分可以大大减少单表数据量,提升查询效率。\r 水平分库分表  将单张表的数据切分到多个服务器上去，每个服务器具有相应的库与表，只是表中数据集合不同。 水平分库分表能够有效的缓解单机和单库的性能瓶颈和压力，突破IO、连接数、硬件资源等的瓶颈。\r几种常用的分库分表的策略 #   HASH取模  假设有用户表user,将其分成3个表user0,user1,user2.路由规则是对3取模,当uid=1时,对应到的是user1,uid=2时,对应的是user2。\r 范围分片  从1-10000一个表,10001-20000一个表。\r 地理位置分片  华南区一个表,华北一个表。\r 时间分片  按月分片，按季度分片等等,可以做到冷热数据。\r分库分表后引入的问题 #   分布式事务问题  如果我们做了垂直分库或者水平分库以后,就必然会涉及到跨库执行SQL的问题,这样就引发了互联网界的老大难问题-\u0026quot;分布式事务\u0026quot;。那要如何解决这个问题呢？\r1.使用分布式事务中间件 2.使用MySQL自带的针对跨库的事务一致性方案(XA),不过性能要比单库的慢10倍左右。3.能否避免掉跨库操作(比如将用户和商品放在同一个库中)\r 跨库join的问题  分库分表后表之间的关联操作将受到限制，我们无法join位于不同分库的表，也无法join分表粒度不同的表， 结果原本一次查询能够完成的业务，可能需要多次查询才能完成。粗略的解决方法： 全局表：基础数据，所有库都拷贝一份。 字段冗余：这样有些字段就不用join去查询了。 系统层组装：分别查询出所有，然后组装起来，较复杂。\r 横向扩容的问题  当我们使用HASH取模做分表的时候,针对数据量的递增,可能需要动态的增加表,此时就需要考虑因为reHash导致数据迁移的问题。\r 结果集合并、排序的问题  因为我们是将数据分散存储到不同的库、表里的,当我们查询指定数据列表时,数据来源于不同的子库或者子表,就必然会引发结果集合并、排序的问题。如果每次查询都需要排序、合并等操作,性能肯定会受非常大的影响。走缓存可能一条路!\r使用分库分表中间件 #   Mycat  Mycat发展到现在，适用的场景已经很丰富，而且不断有新用户给出新的创新性的方案，以下是几个典型的应用场景：\r单纯的读写分离，此时配置最为简单，支持读写分离，主从切换\r分表分库，对于超过1000万的表进行分片，最大支持1000亿的单表分片\r多租户应用，每个应用一个库，但应用程序只连接Mycat，从而不改造程序本身，实现多租户化报表系统，借助于Mycat的分表能力，处理大规模报表的统计\r替代Hbase，分析大数据作为海量数据实时查询的一种简单有效方案，比如100亿条频繁查询的记录需要在3秒内查询出来结果，除了基于主键的查询，还可能存在范围查询或其他属性查询，此时Mycat可能是最简单有效的选择。\r Sharding-JDBC  当当网开发的简单易用、轻量级的中间件。\r此外还有淘宝的TDDL,支付宝的OneProxy,360的Atlas等。\r"});index.add({'id':79,'href':'/life/docs/computer_network/network_architecture/%E5%88%86%E5%B1%82%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/','title':"分层参考模型",'section':"网络体系结构",'content':"   名称 英文 作用     应用层 Application Layer 直接为用户的应用进程（例如电子邮件、文件传输和终端仿真）提供服务。如HTTP、SMTP、FTP、DNS等   表示层 Presentation Layer 把数据转换为能与接收者的系统格式兼容并适合传输的格式，即让两个系统可以交换信息   会话层 Session Layer 负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接   传输层 Transport Layer 负责端到端通讯，可靠传输，不可靠传输 ，流量控制，复用分用   网络层 Network Layer 负责选择路由最佳路径，规划IP地址(ipv4和ipv6变化只会影响网络层)，拥塞控制   数据链路层 Data Link Layer 帧的开始和结束，还有透明传输，差错校验(纠错由传输层解决)   物理层 Physical Layer 定义网络设备接口标准，电气标准(电压)，如何在物理链路上传输的更快    "});index.add({'id':80,'href':'/life/docs/operating_system/two_chapter/2_1_5/','title':"线程概念与多线程模型",'section':"第二章 进程管理 ",'content':""});index.add({'id':81,'href':'/life/docs/%E8%84%9A%E6%9C%AC/webpack/','title':"webpack ",'section':"脚本",'content':"（十五）webpack #  15.1\twebpack起步 #  15.1.1\t什么是webpack #  webpack是一个JavaScript应用的静态模块打包工具。\n从这句话中有两个要点，模块和打包需要关注。grunt/gulp都可以打包，那有什么区别。\n 模块化\n webpack可以支持前端模块化的一些方案，例如AMD、CMD、CommonJS、ES6。可以处理模块之间的依赖关系。不仅仅是js文件可以模块化，图片、css、json文件等等都可以模块化。\n 打包\n webpack可以将模块资源打包成一个或者多个包，并且在打包过程中可以处理资源，例如压缩图片，将scss转成css，ES6语法转成ES5语法，将TypeScript转成JavaScript等等操作。grunt/gulp也可以打包。\n和grunt/glup的对比\n grunt/glup的核心是Task  我们可以配置一系列的task，并且定义task要处理的事务（例如ES6/TS转化，图片压缩，scss转css） 之后可以让grunt/glup来执行依次这些任务，让整个流程自动化 所以grunt/glup也被称为前端自动化任务管理工具   看一个gulp例子  task将src下的js文件转化为ES5语法 并输入到dist文件夹中     什么时候使用grunt/gulp呢？  如果工程依赖简单，甚至没有模块化 只需要进行简单的合并/压缩 如果模块复杂，相互依赖性强，我们需要使用webpack   grunt/glup和webpack区别  grunt/glup更加强调的是前端自动化流程，模块化不是其核心 webpack加强模块化开发管理，而文件压缩/合并/预处理等功能，是附带功能    webpack就是前端模块化打包工具\n15.1.2\twebpack的安装 #   webpack依赖node环境。 node环境依赖众多包，所以需要npm，npm（node packages manager）node包管理工具 nvm是node管理工具可以自由切换node环境版本  全局安装webpack\nnpm install webpack -g //指定版本安装 npm install webpack@3.6.0 -g  由于vue-cli2基于webpack3.6.0 如果要用vue-cli2的可以使用npm install webpack@3.6.0 -g\n 局部安装\nnpm install webpack --save-dev   在终端执行webpack命令，使用的是全局安装。\n  当在package.json中定义了scripts时，其中包括了webpack命令，那么使用的是局部webpack\n  15.1.3 起步 #  新建一个文件夹，新建如下结构的目录：\n目录结构\n如图所示在src文件夹（源码文件夹），dist（要发布的文件，已经处理过的）。\n1.新建入口js文件main.js和mathUtils.js，main.js依赖mathUtils.js。\n mathUtils\n //1.新建mathUtils.js，用CommonJs规范导出 function add(num1,num2) { return num1+num2 } function mul(num1,num2) { return num1*num2 } module.exports = { add,mul }  main.js\n //2.新建入口js文件main.js 导入mathUtil.js文件，并调用 const {add,mul} = require(\u0026#34;./mathUtils.js\u0026#34;) console.log(add(10,20)) console.log(mul(10,10)) 2.使用webpack命令打包js文件\n 注意：webpack3使用webpack ./src/main.js ./dist/bundle.js\nwebpack4，webpack打包在01-webpack的起步目录下打开终端 webpack ./scr/main.js -o ./dist/bundle.js\n 我全局安装的是webpack@3.6.0，所以在根路径执行\n如图显示打包成功，查看dist文件夹下自动生成了一个bundle.js。\n bundle.js\n //2.新建入口js文件main.js 导入mathUtil.js文件，并调用 const {add,mul} = __webpack_require__(1) console.log(add(10,20)) console.log(mul(10,10)) /***/ }), /* 1 */ /***/ (function(module, exports) { //1.新建mathUtils.js，用CommonJs规范导出 function add(num1,num2) { return num1+num2 } function mul(num1,num2) { return num1*num2 } module.exports = { add,mul } 内容很多，其中包含mathUtils.js和main.js 内容，打包成功。\n3.新建一个index.html文件，导入bundle.js\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;webpack入门\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- 3.新建一个indexhtml文件并使用 webpack ./src/main.js ./dist/bundle.js webpack3使用此命令 --\u0026gt; \u0026lt;!-- 4.引用webpack打包后的js文件 --\u0026gt; \u0026lt;script src=\u0026#34;./dist/bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 如图测试，打印成功。\n4.新建一个info.js使用ES6的语法导出\n info.js\n //es6语法导出 export default { name:\u0026#39;zzz\u0026#39;, age:24, }  main.js导入info.js\n //使用es6语法导入 import info from \u0026#39;./info.js\u0026#39; console.log(info.name) console.log(info.age)  再次使用webpack ./src/main.js ./dist/bundle.js，重新打包\n 5.打开index.html测试\n 总结\n webpack可以帮我们打包js文件，只要指定入口文件（main.js）和输出的文件（bundle.js），不管是es6的模块化还是CommonJs的模块化，webpack都可以帮我们打包，还可以帮我们处理模块之间的依赖。\n15.2\twebpack的配置 #  15.2.1\t基本配置 #  如果每次都用webpack命令自己写入口文件和出口文件会很麻烦，此时我们可以使用webpack的配置。\n 准备工作：复制01-webpack的起步文件夹并粘贴在同级目录，改名为02-webpack的配置。\n 1.在根目录（02-webpack的配置）下新建一个webpack.config.js\n webpack.config.js\n //1.导入node的path包获取绝对路径，需要使用npm init初始化node包 const path = require(\u0026#39;path\u0026#39;) //2.配置webpack的入口和出口 module.exports = { entry: \u0026#39;./src/main.js\u0026#39;,//入口文件  output:{ path: path.resolve(__dirname, \u0026#39;dist\u0026#39;),//动态获取打包后的文件路径,path.resolve拼接路径  filename: \u0026#39;bundle.js\u0026#39;//打包后的文件名  } } 2.在02-webpack的配置根目录执行npm init初始化node包，因为配置文件中用到了node的path包\nnpm init 初始化\n3.使用webpack打包\nwebkpack 这样入口和出口的配置已经配置完成了，只需要使用webpack命令就行了。\n4.使用自定义脚本（script）启动\n一般来是我们使用的是\nnpm run dev//开发环境 npm run build//生产环境 在package.json中的script中加上\n\u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; 使用npm run build\nnpm run build 15.2.2\t全局安装和局部安装 #  webpack有全局安装和局部安装。\n 局部安装\n 使用npm run build执行webpack会先从本地查找是否有webpack，如果没有会使用全局的。\n此时本地需要安装webapck\nnpm install webpack@3.6.0 --save-dev package.json中自动加上开发时的依赖devDependencies\n再次使用npm run build，使用的是本地webpack版本。\n15.3\twebpack的loader #  15.3.1\t什么是loader #  loader是webpack中一个非常核心的概念。\nwebpack可以将js、图片、css处理打包，但是对于webpack本身是不能处理css、图片、ES6转ES5等。\n此时就需要webpack的扩展，使用对应的loader就可以。\nloader使用\n 步骤一：通过npm安装需要使用的loader\n  步骤二：通过webpack.config.js中的modules关键字下进行配置\n 大部分loader可以在webpack的官网找到对应的配置。\n15.3.2\tCSS文件处理 #   准备工作：复制02-webpack的配置到根目录，改名字为03-webpack的loader\n 1.将除了入口文件（main.js）所有js文件放在js文件夹，新建一个css文件夹，新建一个normal.css文件\n normal.css\n body{ background-color: red; } 2.main.js导入依赖\n//4.依赖css文件 require(\u0026#39;./css/normal.css\u0026#39;) 此时如果直接进行打包npm run build。\n 提示信息很清楚，打包到css文件时报错，提示我们可能需要一个loader来处理css文件。\n 3.安装css-loader\nnpm install --save-dev css-loader 4.使用css-loader\nmodule.exports = { module: { rules: [ { test: /\\.css$/,//正则表达式匹配css文件  //css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader  use: [{ loader: \u0026#39;css-loader\u0026#39; }]//使用loader  } ] } }  执行npm run build，提示打包成功，但是背景色并没有变红色，是因为css-loader只负责加载css文件，不负责解析，如果要将样式解析到dom元素中需要使用style-loader。\n 5.安装使用style-loader\nnpm install --save-dev style-loader module: { rules: [ { test: /\\.css$/,//正则表达式匹配css文件  //css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader  use: [{ loader: \u0026#39;style-loader\u0026#39; }, { loader: \u0026#39;css-loader\u0026#39; }]//使用loader  } ] }  webpack使用多个loader是从右往左解析的，所以需要将css-loader放在style-loader右边，先加载后解析。\n 此时样式成加载解析到DOM元素上。\n15.3.3\tless文件处理 #  1.在css文件夹中新增一个less文件\n special.less\n @fontSize:50px;//定义变量字体大小\r@fontColor:orange;//定义变量字体颜色\rbody{\rfont-size: @fontSize;\rcolor: @fontColor;\r}\r2.main.js中导入less文件模块\n//5.依赖less文件 require(\u0026#39;./css/special.less\u0026#39;) //6.向页面写入一些内容 document.writeln(\u0026#34;hello,zzzz!\u0026#34;) 3.安装使用less-loader\nnpm install --save-dev less-loader less 在webpack.config.js中使用less-loader\nmodule: { rules: [ { test: /\\.less$/,//正则表达式匹配css文件  //css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader  use: [{ loader: \u0026#39;style-loader\u0026#39; }, { loader: \u0026#39;css-loader\u0026#39; }, { loader: \u0026#39;less-loader\u0026#39;//less文件loader  }]//使用loader  } ] } 4.执行npm run build\nless文件生效了，字体是orange，大小为50px。\n15.3.4\t图片文件的处理 #   准备工作，准备两张图片，图片大小为一张8KB以下（实际大小为5KB，名称为small.jpg），一张大于8KB（实际大小为10KB，名称为big.jpg），新建一个img文件夹将两张图片放入。\n 1.修改normal.css样式，先使用小图片作为背景\nbody{\r/* background-color: red; */\rbackground: url(\u0026quot;../img/small.jpg\u0026quot;);\r}\r此时如果直接使用npm run build 直接打包会报错，因为css文件中引用了图片url，此时需要使用url-loader。\n2.安装使用url-loader处理图片\nurl-loader像 file loader 一样工作，但如果文件小于限制，可以返回 data URL 。\nnpm install --save-dev url-loader 配置\n{ test: /\\.(png|jpg|gif)$/,//匹配png/jpg/gif格式图片  use: [ { loader: \u0026#39;url-loader\u0026#39;, options: { limit: 8192//图片小于8KB时候将图片转成base64字符串，大于8KB需要使用file-loader  } } ] } 3.打包\n使用npm run build打包后，打开index.html。\n 小于limit大小的图片地址被编译成base64格式的字符串。\n 此时修改css文件，使用big.jpg做背景。\nbody{ /* background-color: red; */ /* background: url(\u0026#34;../img/small.jpg\u0026#34;); */ background: url(\u0026#34;../img/big.jpg\u0026#34;); } 再次打包，报错，提示未找到file-loader模块。\n 因为大于limit的图片需要file-loader来打包。\n 4.安装使用file-loader处理图片\nnpm install --save-dev file-loader 不需要配置，因为url-loader超过limit的图片会直接使用file-loader。\n再次打包，没有报错，打包成功，但是图片未显示。\n 1.当加载的图片大小小于limit，使用base64将图片编译成字符串\n2.当加载的图片大小大于limit，使用file-loader模块直接将big.jpg直接打包到dist文件家，文件名会使用hash值防止重复。\n3.此时由于文件路径不对所以导致没有加载到图片\n 5.如何使用file-loader，指定路径\n修改output属性\noutput:{ path: path.resolve(__dirname, \u0026#39;dist\u0026#39;),//动态获取打包后的文件路径,path.resolve拼接路径  filename: \u0026#39;bundle.js\u0026#39;,//打包后的文件名  publicPath: \u0026#39;dist/\u0026#39; }, 此时打包，图片正常显示\n 注意：一般来说，index.html最终也会打包到dist文件夹下，所以，并不需要配置publicPath，如何打包index.html请看webpack处理.vue文件。\n  file-loader打包后，使用hash值做文件名太长，此时可以使用options的一些配置。\n options: { limit: 8192,//图片小于8KB时候将图片转成base64字符串，大于8KB需要使用file-loader  name: \u0026#39;img/[name].[hash:8].[ext]\u0026#39;//img表示文件父目录，[name]表示文件名,[hash:8]表示将hash截取8位[ext]表示后缀  }  修改options，加上name属性，其中img表示文件父目录，[name]表示文件名,[hash:8]表示将hash截取8位[ext]表示后缀\n 再次打包\n15.3.5\tES6语法处理 #  webpack打包时候ES6语法没有打包成ES5语法，如果需要将ES6打包成ES5语法，那么就需要使用babel。直接使用babel对应的loader就可以了。\n安装\nnpm install --save-dev babel-loader@7 babel-core babel-preset-es2015 配置\n{ test: /\\.js$/, //排除node模块的js和bower的js  exclude: /(node_modules|bower_components)/, use: { loader: \u0026#39;babel-loader\u0026#39;, options: { //如果要使用@babel/preset-env这里需要在根目录新建一个babel的文件  // presets: [\u0026#39;@babel/preset-env\u0026#39;]  //这里直接使用指定  presets: [\u0026#39;es2015\u0026#39;] } } }  1.如果要使用@babel/preset-env这里需要在根目录新建一个babel的文件\n2.exclude排除不需要打包的文件\n 15.4\twebpack的vue #  15.4.1\t简单安装使用vue #  如果需要使用vue，必须使用npm先安装vue。\nnpm install vue --save\t使用vue简单开发。\n 准备工作\n 复制03-webpack的loader到同级目录，改名为04-webpack的vue，并在04-webpack的vue根目录执行npm install vue --save\t，下载安装vue。\n1.在入口文件main.js导入已安装的vue，并在index.html声明要挂载的div。在main.js加入以下代码。\n//6.使用vue开发 import Vue from \u0026#39;vue\u0026#39; const app = new Vue({ el: \u0026#34;#app\u0026#34;, data: { message: \u0026#34;hello webpack and vue\u0026#34; } }) 修改index.html代码，添加\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;{{message}}\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; 2.再次打包npm run build后打开index.html\n发现message并没有正确显示，打开console发现vue报错。错误提示我们，正在使用runtime-only构建，不能将template模板编译。\n 1.runtime-only模式，代码中不可以有任何template，因为无法解析。\n2.runtime-complier模式，代码中可以有template，因为complier可以用于编译template。\n 在webpack中配置，设置指定使用runtime-complier模式。\n webpack.config.js\n resolve: { // alias:别名  alias: { //指定vue使用vue.esm.js  \u0026#39;vue$\u0026#39;:\u0026#39;vue/dist/vue.esm.js\u0026#39; } } 3.重新打包，显示正确\n15.4.2\t如何分步抽取实现vue模块 #   创建vue的template和el关系\nel表示挂载DOM的挂载点\ntemplate里面的html将替换挂载点\n 一般我们使用vue会开发单页面富应用(single page application)，只有一个index.html，而且index.html都是简单结构。\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;webpack入门\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./dist/bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1.第一次抽取，使用template替换\u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;。\n 修改mian.js的vue相关代码\n //6.使用vue开发 import Vue from \u0026#39;vue\u0026#39; new Vue({ el: \u0026#34;#app\u0026#34;, template:` \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;{{message}}\u0026lt;/h2\u0026gt; \u0026lt;button @click=\u0026#39;btnClick\u0026#39;\u0026gt;这是一个按钮\u0026lt;/button\u0026gt; \u0026lt;h2\u0026gt;{{name}}\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; `, data: { message: \u0026#34;hello webpack and vue\u0026#34;, name: \u0026#39;zzzz\u0026#39; }, methods: { btnClick(){ console.log(\u0026#34;按钮被点击了\u0026#34;) } }, }) 使用template模板替换挂载的id为app的div元素，此时不需要修改html代码了，只需要写template。\n再次打包，显示成功。\n2.第二次抽取，使用组件化思想替换template\n考虑第一次抽取，写在template中，main.js的vue代码太冗余。\n 修改main.js的代码\n //1.定义一个组件 const App = { template: ` \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;{{message}}\u0026lt;/h2\u0026gt; \u0026lt;button @click=\u0026#39;btnClick\u0026#39;\u0026gt;这是一个按钮\u0026lt;/button\u0026gt; \u0026lt;h2\u0026gt;{{name}}\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; `, data() { return { message: \u0026#34;hello webpack and vue\u0026#34;, name: \u0026#39;zzzz\u0026#39; } }, methods: { btnClick(){ console.log(\u0026#34;按钮被点击了\u0026#34;) } }, }  修改main.js，vue实例中注册组件，并使用组件\n new Vue({ el: \u0026#34;#app\u0026#34;, //使用组件  template: \u0026#39;\u0026lt;App/\u0026gt;\u0026#39;, components: { //注册局部组件  App } }) 再次使用npm run build打包，打包成功，显示和使用template替换div一样。\n3.第三次抽取组件对象，封装到新的js文件，并使用模块化导入main.js\n此处我的vue-loader是15.7.2。\n将其修改为13.0.0\n\u0026#34;vue-loader\u0026#34;: \u0026#34;^13.0.0\u0026#34; 重新安装版本\nnpm install 再次打包，打包成功，样式生效了。\n6.组件化开发\n我们使用app.vue分离了模板、行为、样式，但是不可能所有的模板和样式都在一个vue文件内，所以要用组件化。\n在vue文件夹下新建一个Cpn.vue文件\n Cpn.vue组件\n \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2 class=\u0026#39;title\u0026#39;\u0026gt;{{name}}\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script type=\u0026#34;text/ecmascript-6\u0026#34;\u0026gt; export default { name: \u0026#34;Cpn\u0026#34;, data() { return { name: \u0026#34;组件名字是Cpn\u0026#34; }; } }; \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .title { color: red; } \u0026lt;/style\u0026gt; 将Cpn.vue组件导入到App.vue\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2 class=\u0026#39;title\u0026#39;\u0026gt;{{message}}\u0026lt;/h2\u0026gt; \u0026lt;button @click=\u0026#34;btnClick\u0026#34;\u0026gt;按钮\u0026lt;/button\u0026gt; \u0026lt;h2\u0026gt;{{name}}\u0026lt;/h2\u0026gt; \u0026lt;!-- 使用Cpn组件 --\u0026gt; \u0026lt;Cpn/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script type=\u0026#34;text/ecmascript-6\u0026#34;\u0026gt; //导入Cpn组件 import Cpn from \u0026#39;./Cpn.vue\u0026#39; export default { name: \u0026#34;App\u0026#34;, data() { return { message: \u0026#34;hello webpack\u0026#34;, name: \u0026#34;zzz\u0026#34; }; }, methods: { btnclick() {} }, components: { Cpn//注册Cpn组件  } }; \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .title { color: green; } \u0026lt;/style\u0026gt; 再次打包，打开index.html，cpn组件的内容显示\n基于此，一个vue文件可以依赖导入很多vue文件，组成一个单页面富应用。\n 如果你在使用ES6语法导入模块时候想要简写的时候，例如这样省略.vue后缀\n import Cpn from \u0026#39;./Cpn\u0026#39; 可以在webpack.config.js中配置：\nresolve: { //导入模块简写省略指定后缀  extensions: [\u0026#39;.js\u0026#39;, \u0026#39;.css\u0026#39;, \u0026#39;.vue\u0026#39;], // alias:别名  alias: { //指定vue使用vue.esm.js  \u0026#39;vue$\u0026#39;:\u0026#39;vue/dist/vue.esm.js\u0026#39; } } 15.5\twebpack的plugin #  plugin插件用于扩展webpack的功能的扩展，例如打包时候优化，文件压缩。\nloader和plugin的区别\nloader主要用于转化某些类型的模块，是一个转化器。\nplugin主要是对webpack的本身的扩展，是一个扩展器。\nplugin的使用过程\n步骤一：通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要在安装)\n步骤二：在webpack.config.js中的plugins中配置插件。\n 准备工作\n复制04-webpack的vue到同级目录，并改名为05-webpack的plugin\n 15.5.1\t添加版权的Plugin #  BannerPlugin插件是属于webpack自带的插件可以添加版权信息。\n自带的插件无需安装，直接配置。\n先获取webpack的对象，在配置BannerPlugin插件。\n//获取webpack const webpack = require(\u0026#39;webpack\u0026#39;) //2.配置plugins module.exports = { ... plugins:[ new webpack.BannerPlugin(\u0026#39;最终解释权归zz所有\u0026#39;) ] } 打包后，查看bundle.js，结果如图所示：\n多了一行我们自定义的版权声明注释。\n15.5.2\t打包html的plugin #  之前我们的index.html文件都是存放在根目录下的。\n在正式发布项目的时候发布的是dist文件夹的内容，但是dist文件夹是没有index.html文件的，那么打包就没有意义了。\n所以我们需要将index.html也打包到dist文件夹中，这就需要使用**HtmlWebpackPlugin**插件了。\n HtmlWebpackPlugin：\n自动生成一个index.html文件（指定模板）\n将打包的js文件，自动同script标签插入到body中\n 首先需要安装**HtmlWebpackPlugin**插件\nnpm install html-webpack-plugin --save-dev\t使用插件，修改webpack.config.js文件中的plugins部分\n//获取htmlWebpackPlugin对象 const htmlWbepackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;) //2.配置plugins module.exports = { ... plugins:[ new webpack.BannerPlugin(\u0026#39;最终解释权归zz所有\u0026#39;), new htmlWbepackPlugin({ template: \u0026#39;index.html\u0026#39; }) ] }  1.template表示根据哪个模板来生成index.html\n2.需要删除output中添加的publicPath属性，否则插入的script标签的src可能有误\n 再次打包，打开dist文件夹，多了一个index.html\n自动加入了script引入了bundle.js。\n15.5.3\t压缩打包代码插件 #  uglifyjs-webpack-plugin是第三方插件，如果是vuecli2需要指定版本1.1.1。\n安装：\nnpm install uglifyjs-webpack-plugin@1.1.1 --save-dev 配置plugin\n//获取uglifyjs-webpack-plugin对象 const uglifyjsWebpackPlugin = require(\u0026#39;uglifyjs-webpack-plugin\u0026#39;) //2.配置plugins module.exports = { ... plugins:[ new webpack.BannerPlugin(\u0026#39;最终解释权归zz所有\u0026#39;), new htmlWbepackPlugin({ template: \u0026#39;index.html\u0026#39; }), new uglifyjsWebpackPlugin() ] } 打包过后，打开bundle.js，发现已经压缩了，此时版权声明被删除了。\n webpack高版本自带了压缩插件。\n 15.6\twebpack搭建本地服务器 #  webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用了express框架，可以实现热启动。\n 准备工作复制05-webpack的plugin文件夹到同级目录，并改名为06-webpack搭建本地服务器。\n 不过这是一个单独的模块，在webpack中使用之前需要先安装：\nnpm install --save-dev webpack-dev-server@2.9.1 devServe也是webpack中一个选项，选项本省可以设置一些属性：\n contentBase：为哪个文件夹提供本地服务，默认是根文件夹，这里我们需要改成./dist port：端口号 inline：页面实时刷新 historyApiFallback：在SPA（单页面富应用）页面中，依赖HTML5的history模式  修改webpack.config.js的文件配置\n//2.配置webpack的入口和出口 module.exports = { ... devServer: { contentBase: \u0026#39;./dist\u0026#39;,//服务的文件夹  port: 4000, inline: true//是否实时刷新  } } 配置package.json的script：\n\u0026#34;dev\u0026#34;: \u0026#34;webpack-dev-server --open\u0026#34;  \u0026ndash;open表示直接打开浏览器\n 启动服务器\nnpm run dev 启动成功，自动打开浏览器，发现在本地指定端口启动了，此时你修改src文件内容，会热修改。\n 1.服务器启动在内存中。\n2.开发调试时候最好不要使用压缩js文件的插件，不易调试。\n 15.7\twebpack的配置文件分离 #  webpack.config.js文件中有些是开发时候需要配置，有些事生产环境发布编译需要的配置，比如搭建本地服务器的devServer配置就是开发时配置，接下来我们分析如何分离配置文件。\n 准备工作：复制06-webpack搭建本地服务器文件夹到同级目录，并改名为07-webpack的配置文件分离。\n 在根目录下新建一个build的文件夹，新建配置文件。\n base.config.js（公共的配置）\n //1.导入node的path包获取绝对路径，需要使用npm init初始化node包 const path = require(\u0026#39;path\u0026#39;) //获取webpack const webpack = require(\u0026#39;webpack\u0026#39;) //获取htmlWebpackPlugin对象 const htmlWbepackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;) //2.配置webpack的入口和出口 module.exports = { entry: \u0026#39;./src/main.js\u0026#39;,//入口文件  output:{ path: path.resolve(__dirname, \u0026#39;dist\u0026#39;),//动态获取打包后的文件路径,path.resolve拼接路径  filename: \u0026#39;bundle.js\u0026#39;,//打包后的文件名  // publicPath: \u0026#39;dist/\u0026#39;  }, module: { rules: [ { test: /\\.css$/,//正则表达式匹配css文件  //css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader  use: [{ loader: \u0026#39;style-loader\u0026#39; }, { loader: \u0026#39;css-loader\u0026#39; }]//使用loader  }, { test: /\\.less$/,//正则表达式匹配css文件  //css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader  use: [{ loader: \u0026#39;style-loader\u0026#39; }, { loader: \u0026#39;css-loader\u0026#39; }, { loader: \u0026#39;less-loader\u0026#39;//less文件loader  }]//使用loader  }, { test: /\\.(png|jpg|gif)$/,//匹配png/jpg/gif格式图片  use: [ { loader: \u0026#39;url-loader\u0026#39;, options: { limit: 8192,//图片小于8KB时候将图片转成base64字符串，大于8KB需要使用file-loader  name: \u0026#39;img/[name].[hash:8].[ext]\u0026#39;//img表示文件父目录，[name]表示文件名,[hash:8]表示将hash截取8位[ext]表示后缀  } } ] }, { test: /\\.js$/, //排除node模块的js和bower的js  exclude: /(node_modules|bower_components)/, use: { loader: \u0026#39;babel-loader\u0026#39;, options: { //如果要使用@babel/preset-env这里需要在根目录新建一个babel的文件  // presets: [\u0026#39;@babel/preset-env\u0026#39;]  //这里直接使用指定  presets: [\u0026#39;es2015\u0026#39;] } } }, { test: /\\.vue$/,//正则匹配.vue文件  use: { loader: \u0026#39;vue-loader\u0026#39; } } ] }, resolve: { // alias:别名  alias: { //指定vue使用vue.esm.js  \u0026#39;vue$\u0026#39;:\u0026#39;vue/dist/vue.esm.js\u0026#39; } }, plugins:[ new webpack.BannerPlugin(\u0026#39;最终解释权归zz所有\u0026#39;), new htmlWbepackPlugin({ template: \u0026#39;index.html\u0026#39; }) ] }  dev.config.js（开发时候需要的配置）\n module.exports = { devServer: { contentBase: \u0026#39;./dist\u0026#39;,//服务的文件夹  port: 4000, inline: true//是否实时刷新  } }  prod.config.js（构建发布时候需要的配置）\n const uglifyjsWebpackPlugin = require(\u0026#39;uglifyjs-webpack-plugin\u0026#39;) module.exports = { plugins:[ new uglifyjsWebpackPlugin() ] } 此时我们将webpack.config.js文件分成了三个部分，公共部分、开发部分、构建发布的部分。\n 1.如果此时是dev环境，我们只需要使用base.config.js+dev.config.js的内容\n2.如果此时是生产发布构建的环境，我们只需要使用base.config.js+prod.config.js的内容\n 要将两个文件内容合并需要使用webpack-merge插件，安装webpack-merge。\nnpm isntall webpack-merge --save-dev 合并内容都是将base.config.js的内容合并到dev或者prod的文件中，修改dev.config.js和prod.config.js文件。\n 修改dev.config.js\n //导入webpack-merge对象 const webpackMerge = require(\u0026#39;webpack-merge\u0026#39;) //导入base.config.js const baseConfig = require(\u0026#39;./base.config\u0026#39;) //使用webpackMerge将baseConfig和dev.config的内容合并 module.exports = webpackMerge(baseConfig, { devServer: { contentBase: \u0026#39;./dist\u0026#39;,//服务的文件夹  port: 4000, inline: true//是否实时刷新  } })  修改prod.config.js\n const uglifyjsWebpackPlugin = require(\u0026#39;uglifyjs-webpack-plugin\u0026#39;) //导入webpack-merge对象 const webpackMerge = require(\u0026#39;webpack-merge\u0026#39;) //导入base.config.js const baseConfig = require(\u0026#39;./base.config\u0026#39;) //使用webpackMerge将baseConfig和prod.config的内容合并 module.exports = webpackMerge(baseConfig, { plugins:[ new uglifyjsWebpackPlugin() ] }) 此时我们使用三个文件构成了配置文件，此时在不同环境使用不同的配置文件，但是webpack不知道我们新配置文件，此时我们需要在package.json中的script指定要使用的配置文件。\n\u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack --config ./build/prod.config.js\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;webpack-dev-server --open --config ./build/dev.config.js\u0026#34; } 此时使用npm run build打包文件，dist文件并不在根目录下，因为我们在base.config.js中配置的出口文件使用的是当前文件的路径，即打包的根路径是配置文件的当前路径，也就是build文件夹。\nentry: \u0026#39;./src/main.js\u0026#39;,//入口文件  output:{ path: path.resolve(__dirname, \u0026#39;dist\u0026#39;),//动态获取打包后的文件路径,path.resolve拼接路径  filename: \u0026#39;bundle.js\u0026#39;,//打包后的文件名  // publicPath: \u0026#39;dist/\u0026#39;  }  注意：__dirname是当前文件路径，path.resolve拼接路径，所以在当前路径下创建了一个dist文件夹。\n 此时修改output属性：\noutput:{ path: path.resolve(__dirname, \u0026#39;../dist\u0026#39;),//动态获取打包后的文件路径,path.resolve拼接路径  filename: \u0026#39;bundle.js\u0026#39;,//打包后的文件名  // publicPath: \u0026#39;dist/\u0026#39;  }  使用../dist，在当前目录的上级目录创建dist文件夹\n "});index.add({'id':82,'href':'/life/docs/%E8%84%9A%E6%9C%AC/simple-webpack/','title':"webpack simple",'section':"脚本",'content':"webpack #  一:卸载 #   全局卸载  D:\\IdeaProjects\\cycle\\docs\\webc\\web\\webpack-study\\one\u0026gt;npm uninstall webpack webpack-cli -g removed 73 packages in 0.726s  本地卸载  D:\\IdeaProjects\\cycle\\docs\\webc\\web\\webpack-study\\one\u0026gt;npm uninstall webpack webpack-cli -D npm WARN saveError ENOENT: no such file or directory, open \u0026#39;D:\\IdeaProjects\\package.json\u0026#39; npm WARN enoent ENOENT: no such file or directory, open \u0026#39;D:\\IdeaProjects\\package.json\u0026#39; npm WARN IdeaProjects No description npm WARN IdeaProjects No repository field. npm WARN IdeaProjects No README data npm WARN IdeaProjects No license field. up to date in 0.791s 16 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\docs\\webc\\web\\webpack-study\\one\u0026gt; 二:安装 #   1:webpack依赖node环境。 2:node环境依赖众多包，所以需要npm，npm（node packages manager）node包管理工具 3:nvm是node管理工具可以自由切换node环境版本   在终端执行webpack命令，使用的是全局安装(在某个地方看到)\n  1: 全局安装webpack simple (低版本)  npm install webpack -g //指定版本安装 npm install webpack@3.6.0 -g  2: 全局安装webpack (高版本)  npm install webpack webpack-cli -g //或指定版本，类似这样： npm install webpack@4.16.5 webpack-cli -g  3:本地安装 ?  npm install webpack webpack-cli --save-dev //或者 npm install webpack webpack-cli -D //或者指定版本 npm install webpack@4.16.5 webpack-cli -D 三:使用 #    1:简单使用\n  1、初始化\n  D:\\IdeaProjects\\cycle\\docs\\webc\\web\\webpack-study\\one\u0026gt;npm init This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See `npm help init` for definitive documentation on these fields and exactly what they do. Use `npm install \u0026lt;pkg\u0026gt;` afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. package name: (one) version: (1.0.0) description: entry point: (index.js) test command: git repository: keywords: author: license: (ISC) About to write to D:\\IdeaProjects\\cycle\\docs\\webc\\web\\webpack-study\\one\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;one\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } Is this OK? (yes) yes D:\\IdeaProjects\\cycle\\docs\\webc\\web\\webpack-study\\one\u0026gt; 包初始化之后 就会生成package.json dependencies和devDependencies的区别 #   devDependencies：开发环境使用 dependencies：生产环境使用   举例说明\n webpack，gulp等打包工具，这些都是我们开发阶段使用的，代码提交线上时，不需要这些工具，所以我们将它放入devDependencies即可，但是像jquery这类插件库，是我们生产环境所使用的，所以如要放入dependencies，如果未将jquery安装到dependencies，那么项目就可能报错，无法运行，所以类似这种项目必须依赖的插件库，我们则必须打入dependencies中，这下子都明白了吧。 简单版本 (webpack使用高版本5.42.0) #   生成必要的文件  Microsoft Windows [版本 10.0.19043.1052] (c) Microsoft Corporation。保留所有权利。 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;mkdir demo01 创建文件夹 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;cd demo01 进入文件夹 D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;npm install -g webpack webpack-cli 安装全局webpack D:\\CS\\node\\node-v14.17.2-win-x64\\webpack -\u0026gt; D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\bin\\webpack.js D:\\CS\\node\\node-v14.17.2-win-x64\\webpack-cli -\u0026gt; D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack-cli\\bin\\cli.js + webpack@5.42.0 + webpack-cli@4.7.2 updated 2 packages in 4.11s D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;echo index.js windows错误创建文件 必须 echo \u0026gt; file.suffix index.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;echo \u0026gt; index.js windows正确创建方法 D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;webpack index.js webpack打包编译(实际上这是低版本至少是低于4.0.0的目前我安装的是非常高的版本) assets by status 0 bytes [cached] 1 asset WARNING in configuration The \u0026#39;mode\u0026#39; option has not been set, webpack will fallback to \u0026#39;production\u0026#39; for this value. Set \u0026#39;mode\u0026#39; option to \u0026#39;development\u0026#39; or \u0026#39;production\u0026#39; to enable defaults for each environment. You can also set it to \u0026#39;none\u0026#39; to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/ ERROR in main Module not found: Error: Can\u0026#39;t resolve \u0026#39;index.js\u0026#39; in \u0026#39;D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026#39; Did you mean \u0026#39;./index.js\u0026#39;? Requests that should resolve in the current directory need to start with \u0026#39;./\u0026#39;. Requests that start with a name are treated as module requests and resolve within module directories (node_modules). If changing the source code is not an option there is also a resolve options called \u0026#39;preferRelative\u0026#39; which tries to resolve these kind of requests in the current directory too. resolve \u0026#39;index.js\u0026#39; in \u0026#39;D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026#39; Parsed request is a module No description file found in D:\\IdeaProjects\\cycle\\study\\webpack\\demo01 or above resolve as module D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\\node_modules doesn\u0026#39;t exist or is not a directory D:\\IdeaProjects\\cycle\\study\\webpack\\node_modules doesn\u0026#39;t exist or is not a directory D:\\IdeaProjects\\cycle\\study\\node_modules doesn\u0026#39;t exist or is not a directory D:\\IdeaProjects\\cycle\\node_modules doesn\u0026#39;t exist or is not a directory D:\\IdeaProjects\\node_modules doesn\u0026#39;t exist or is not a directory D:\\node_modules doesn\u0026#39;t exist or is not a directory webpack 5.42.0 compiled with 1 error and 1 warning in 147 ms   高版本采用低版本显然的报错了\n  找解决办法 网上找到解决方案是必须要配置开发模式还是生产模式,要求指定\n  生成 package.json 并设置相应内容 这里 package.json 不要手动设置 直接node js 的包初始化命令即可生成 npm init\n  D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;npm init This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See `npm help init` for definitive documentation on these fields and exactly what they do. Use `npm install \u0026lt;pkg\u0026gt;` afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. package name: (demo01) version: (1.0.0) description: entry point: (index.js) test command: git repository: keywords: author: license: (ISC) About to write to D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo01\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } Is this OK? (yes) // end 设置内容 { \u0026#34;name\u0026#34;: \u0026#34;demo01\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;main.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; , \u0026#34;dev\u0026#34;: \u0026#34;webpack --mode development\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack --mode production\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; }  完毕再次执行 webpack index.js 不要意思又报错了  D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;webpack index.js [Browserslist] Could not parse D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\\package.json. Ignoring it. [webpack-cli] SyntaxError: Unexpected token / in JSON at position 204 while determining default \u0026#39;output.uniqueName\u0026#39; from \u0026#39;name\u0026#39; in D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\\package.json at JSON.parse (\u0026lt;anonymous\u0026gt;) at D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\config\\defaults.js:599:29 at F (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\config\\defaults.js:71:15) at applyOutputDefaults (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\config\\defaults.js:594:2) at applyWebpackOptionsDefaults (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\config\\defaults.js:182:2) at createCompiler (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\webpack.js:78:2) at create (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\webpack.js:127:16) at webpack (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\webpack.js:135:47) at WebpackCLI.f [as webpack] (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack\\lib\\index.js:55:16) at WebpackCLI.createCompiler (D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\webpack-cli\\lib\\webpack-cli.js:2053:29)   实际上是高版本的情况下是必须要配置webpack.config.js\n  因此我们来配置webpack.config.js\n  D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;echo \u0026gt; webpack.config.js webconfig.js 内容 const path = require(\u0026#39;path\u0026#39;) module.exports = { entry: \u0026#39;./main.js\u0026#39;, output: { path: path.resolve(__dirname, \u0026#39;dist\u0026#39;), filename: \u0026#39;my-first-webpack.bundle.js\u0026#39; }, mode: \u0026#39;development\u0026#39; // 设置mode }  执行打包编译 这里需要注意的是高版本不允许 webpack index.js 的方式了 直接是webpack 执行后自动找此命令下的配置然后输出编译文件  D:\\IdeaProjects\\cycle\\study\\webpack\\demo01\u0026gt;webpack asset my-first-webpack.bundle.js 1.19 KiB [emitted] (name: main) ./main.js 40 bytes [built] [code generated] webpack 5.42.0 compiled successfully in 69 ms  Java生成目录结构  @Test public void printFileDir() { String path = \u0026#34;D:\\\\IdeaProjects\\\\cycle\\\\study\\\\webpack\\\\demo01\u0026#34;; // String path = \u0026#34;D:\\\\IdeaProjects\\\\lifeDoc\\\\book\\\\public\u0026#34;; File file = new File(path); print(file, 0, file.getParent()); } private void print(File file, int index, final String parent) { StringBuilder stringBuilder = new StringBuilder(); String str = \u0026#34;▸\u0026#34;; if (file.isFile()) { stringBuilder.append(str).append(StringUtils.repeat(\u0026#34; \u0026#34;, index)).append(StringUtils.remove(file.getPath(), parent)); System.out.println(stringBuilder.toString()); } else { stringBuilder.append(str).append(StringUtils.repeat(\u0026#34; \u0026#34;, index)).append(StringUtils.remove(file.getPath(),parent)); System.out.println(stringBuilder.toString()); for (File f : file.listFiles()) { int newIndex = index + 2; print(f, newIndex, parent); } } }  文件结构  ▸\\demo01 ▸ \\demo01\\dist ▸ \\demo01\\dist\\my-first-webpack.bundle.js ▸ \\demo01\\index.js ▸ \\demo01\\package.json ▸ \\demo01\\webpack.config.js 简单版本局部情况 (webpack使用高版本5.42.0) #   生成必要的文件   npm init -y 初始化的时候不会提示输入yes\n Microsoft Windows [版本 10.0.19043.1052] D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;mkdir demo02 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;cd demo02 D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\u0026gt;echo document.writeln(\u0026#39;hello blake\u0026#39;) \u0026gt; index.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\u0026gt;npm init -y Wrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo02\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\u0026gt;echo \u0026gt; webpack.config.js  局部安装说明   局部安装必须在package.json中 scripts \u0026gt; \u0026ldquo;build\u0026rdquo;: \u0026ldquo;webpack\u0026rdquo;\n  命令 npm add -D webpack webpack-cli  D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\u0026gt;npm -D webpack webpack-cli Usage: npm \u0026lt;command\u0026gt; where \u0026lt;command\u0026gt; is one of: access, adduser, audit, bin, bugs, c, cache, ci, cit, clean-install, clean-install-test, completion, config, create, ddp, dedupe, deprecate, dist-tag, docs, doctor, edit, explore, fund, get, help, help-search, hook, i, init, install, install-ci-test, install-test, it, link, list, ln, login, logout, ls, org, outdated, owner, pack, ping, prefix, profile, prune, publish, rb, rebuild, repo, restart, root, run, run-script, s, se, search, set, shrinkwrap, star, stars, start, stop, t, team, test, token, tst, un, uninstall, unpublish, unstar, up, update, v, version, view, whoami npm \u0026lt;command\u0026gt; -h quick help on \u0026lt;command\u0026gt; npm -l display full usage info npm help \u0026lt;term\u0026gt; search for help on \u0026lt;term\u0026gt; npm help npm involved overview Specify configs in the ini-formatted file: C:\\Users\\dell\\.npmrc or on the command line via: npm \u0026lt;command\u0026gt; --key value Config info can be viewed via: npm help config npm@6.14.13 D:\\CS\\node\\node-v14.17.2-win-x64\\node_modules\\npm Did you mean this? pack D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\u0026gt;npm add -D webpack webpack-cli npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN demo02@1.0.0 No description npm WARN demo02@1.0.0 No repository field. + webpack-cli@4.7.2 + webpack@5.42.0 added 121 packages from 155 contributors in 7.307s 16 packages are looking for funding run `npm fund` for details  编译打包  D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\u0026gt;webpack asset bundle.js 1.19 KiB [emitted] (name: main) ./index.js 34 bytes [built] [code generated] webpack 5.42.0 compiled successfully in 69 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo02\u0026gt;  文件目录  [TestNG] Running: C:\\Users\\dell\\.IntelliJIdea2018.3\\system\\temp-testng-customsuite.xml ▸\\demo02 ▸ \\demo02\\dist ▸ \\demo02\\dist\\bundle.js ▸ \\demo02\\index.html ▸ \\demo02\\index.js ▸ \\demo02\\node_modules ▸ \\demo02\\node_modules\\.bin ▸ \\demo02\\node_modules\\.bin\\acorn ▸ \\demo02\\node_modules\\.bin\\acorn.cmd ▸ \\demo02\\node_modules\\.bin\\acorn.ps1 ▸ \\demo02\\node_modules\\.bin\\browserslist ▸ \\demo02\\node_modules\\.bin\\browserslist.cmd ▸ \\demo02\\node_modules\\.bin\\browserslist.ps1 ▸ \\demo02\\node_modules\\.bin\\envinfo ▸ \\demo02\\node_modules\\.bin\\envinfo.cmd ▸ \\demo02\\node_modules\\.bin\\envinfo.ps1 ▸ \\demo02\\node_modules\\.bin\\  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ 目录太多我删掉了差不多就是这样 ▸ \\demo02\\node_modules\\yocto-queue\\index.d.ts ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ ▸ \\demo02\\node_modules\\yocto-queue\\index.d.ts ▸ \\demo02\\node_modules\\yocto-queue\\index.js ▸ \\demo02\\node_modules\\yocto-queue\\license ▸ \\demo02\\node_modules\\yocto-queue\\package.json ▸ \\demo02\\node_modules\\yocto-queue\\readme.md ▸ \\demo02\\package-lock.json ▸ \\demo02\\package.json ▸ \\demo02\\webpack.config.js =============================================== Default Suite Total tests run: 1, Failures: 0, Skips: 0 =============================================== Process finished with exit code 0 自定义版本(局部) (webpack使用高版本5.42.0) #   生成必要的文件  Microsoft Windows [版本 10.0.19043.1052] (c) Microsoft Corporation。保留所有权利。 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;mkdir demo03 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;cd demo03 D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;npm init -y Wrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo03\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;echo \u0026gt; index.html D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;echo \u0026gt; main.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;echo webpack.config.js webpack.config.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;echo \u0026gt; webpack.config.js   安装之前查询版本webpack和webpack-cli版本不一致的否则会报错\n  版本查询 webpack版本地址 webpack-cli版本地址\n  安装命令 npm add -D webpack@5.32.0 webpack-cli@4.0.0-alpha-5\n  D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;npm add -D webpack@5.32.0 webpack-cli@5.32.0 npm ERR! code ETARGET npm ERR! notarget No matching version found for webpack-cli@5.32.0. npm ERR! notarget In most cases you or one of your dependencies are requesting npm ERR! notarget a package version that doesn\u0026#39;t exist. npm ERR! A complete log of this run can be found in: npm ERR! C:\\Users\\dell\\AppData\\Roaming\\npm-cache\\_logs\\2021-07-04T04_40_27_844Z-debug.log D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;npm add -D webpack@5.32.0 webpack-cli@4.0.0-alpha-5 \u0026gt; ejs@2.7.4 postinstall D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\\node_modules\\ejs \u0026gt; node ./postinstall.js Thank you for installing EJS: built with the Jake JavaScript build tool (https://jakejs.com/) npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN webpack-cli@4.0.0-alpha-5 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself. npm WARN demo03@1.0.0 No description npm WARN demo03@1.0.0 No repository field. + webpack@5.32.0 + webpack-cli@4.0.0-alpha-5 added 365 packages from 245 contributors in 23.014s 19 packages are looking for funding run `npm fund` for details  安装完成之后到package.json 中查看 devDependencies 即可查询到版本  { \u0026#34;name\u0026#34;: \u0026#34;demo03\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;webpack\u0026#34;: \u0026#34;^5.32.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.0.0-alpha-5\u0026#34; } }  打包编译  D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;webpack asset bundle.js 1.2 KiB [emitted] (name: main) ./main.js 44 bytes [built] [code generated] webpack 5.42.0 compiled successfully in 72 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo03\u0026gt;  文件目录  ▸\\demo03 ▸ \\demo03\\dist ▸ \\demo03\\dist\\bundle.js ▸ \\demo03\\index.html ▸ \\demo03\\main.js ▸ \\demo03\\node_modules ▸ \\demo03\\node_modules\\.bin ▸ \\demo03\\node_modules\\.bin\\acorn ▸ \\demo03\\node_modules\\.bin\\acorn.cmd ▸ \\demo03\\node_modules\\.bin\\acorn.ps1 ▸ \\demo03\\node_modules\\.bin\\browserslist ▸ \\demo03\\node_modules\\.bin\\browserslist.cmd ▸ \\demo03\\node_modules\\.bin\\browserslist.ps1 ▸ \\demo03\\node_modules\\.bin\\errno ▸ \\demo03\\node_modules\\.bin\\errno.cmd ▸ \\demo03\\node_modules\\.bin\\errno.ps1 ▸ \\demo03\\node_modules\\.bin\\is-ci ..................省略node model dir index ▸ \\demo03\\node_modules\\yocto-queue ▸ \\demo03\\node_modules\\yocto-queue\\index.d.ts ▸ \\demo03\\node_modules\\yocto-queue\\index.js ▸ \\demo03\\node_modules\\yocto-queue\\license ▸ \\demo03\\node_modules\\yocto-queue\\package.json ▸ \\demo03\\node_modules\\yocto-queue\\readme.md ▸ \\demo03\\package-lock.json ▸ \\demo03\\package.json ▸ \\demo03\\webpack.config.js 使用html插件 #   生成必要的文件  Microsoft Windows [版本 10.0.19043.1052] (c) Microsoft Corporation。保留所有权利。 D:\\IdeaProjects\\cycle\u0026gt;cd study D:\\IdeaProjects\\cycle\\study\u0026gt;mkdir demo04 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;cd demo04 D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\u0026gt;npm init -y Wrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo04\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\u0026gt;echo \u0026gt; webpack.config.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\u0026gt;md src D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\u0026gt;cd src D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\\src\u0026gt;echo \u0026gt; index.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\\src\u0026gt;cd D:\\IdeaProjects\\cycle\\study\\webpack\\demo04   找到html-webpack-load\n  html-webpack-plugin\n  HtmlWebpackPlugin\n  如果您有多个webpack入口点，它们都将包含在生成的HTML中的\u0026lt;script\u0026gt;标记中\n  插件命令\n  npm install --save-dev html-webpack-plugin\r局部 npm install -D --save-dev html-webpack-plugin\r 配置  const HtmlWebpackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;); const path = require(\u0026#39;path\u0026#39;); module.exports = { entry: \u0026#39;index.js\u0026#39;, output: { path: path.resolve(__dirname, \u0026#39;./dist\u0026#39;), filename: \u0026#39;index_bundle.js\u0026#39;, }, plugins: [new HtmlWebpackPlugin()], };  生成包含以下内容的文件dist/index.html  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;webpack App\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026#34;index_bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  安装命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\u0026gt;npm add -D webpack webpack-cli npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN demo04@1.0.0 No description npm WARN demo04@1.0.0 No repository field. + webpack-cli@4.7.2 + webpack@5.42.0 added 121 packages from 155 contributors in 13.022s 16 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\u0026gt;npm install -D --save-dev html-webpack-plugin npm WARN demo04@1.0.0 No description npm WARN demo04@1.0.0 No repository field. + html-webpack-plugin@5.3.2 added 19 packages from 8 contributors in 4.707s 27 packages are looking for funding run `npm fund` for details  webpack.config.js 配置  const path = require(\u0026#39;path\u0026#39;); const HtmlWebpackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;); module.exports = { entry: \u0026#34;./src/index.js\u0026#34;, output: { path: path.resolve(__dirname, \u0026#39;dist\u0026#39;), filename: \u0026#39;bundle2.js\u0026#39; }, plugins: [ new HtmlWebpackPlugin({}), ], mode: \u0026#39;development\u0026#39; // 设置mode }  打包编译 npm run build(实际相当于执行了webpack命令)  D:\\IdeaProjects\\cycle\\study\\webpack\\demo04\u0026gt;npm run build \u0026gt; demo04@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo04 \u0026gt; webpack asset bundle2.js 1.4 KiB [compared for emit] (name: main) asset index.html 234 bytes [compared for emit] ./src/index.js 207 bytes [built] [code generated] webpack 5.42.0 compiled successfully in 122 ms  文件目录  ▸\\demo04 ▸ \\demo04\\dist ▸ \\demo04\\dist\\bundle2.js ▸ \\demo04\\dist\\index.html ▸ \\demo04\\node_modules ▸ \\demo04\\node_modules\\.bin ▸ \\demo04\\node_modules\\.bin\\acorn ▸ \\demo04\\node_modules\\.bin\\acorn.cmd ▸ \\demo04\\node_modules\\.bin\\acorn.ps1 ▸ \\demo04\\node_modules\\.bin\\browserslist ▸ \\demo04\\node_modules\\yocto-queue ||省略 ▸ \\demo04\\node_modules\\yocto-queue\\index.d.ts ▸ \\demo04\\node_modules\\yocto-queue\\index.js ▸ \\demo04\\node_modules\\yocto-queue\\license ▸ \\demo04\\node_modules\\yocto-queue\\package.json ▸ \\demo04\\node_modules\\yocto-queue\\readme.md ▸ \\demo04\\package-lock.json ▸ \\demo04\\package.json ▸ \\demo04\\src ▸ \\demo04\\src\\index.js ▸ \\demo04\\webpack.config.js 多入口 #   生成必要的文件  Microsoft Windows [版本 10.0.19043.1052] (c) Microsoft Corporation。保留所有权利。 D:\\IdeaProjects\\cycle\u0026gt;cd study D:\\IdeaProjects\\cycle\\study\u0026gt;cd webpack D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;mkdir demo05 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;cd demo05 D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;mkdir src D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;cd src D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\\src\u0026gt;echo -\u0026gt; main.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\\src\u0026gt;echo -\u0026gt; home.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\\src\u0026gt;echo -\u0026gt; register.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\\src\u0026gt;cd .. D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;echo \u0026#39;\u0026#39; \u0026gt; webpack.config.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;npm init -y Wrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo05\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt; npm add -D webpack webpack-cli npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN demo05@1.0.0 No description npm WARN demo05@1.0.0 No repository field. + webpack-cli@4.7.2 + webpack@5.42.1 added 121 packages from 155 contributors in 9.549s 16 packages are looking for funding run `npm fund` for details  webpack.config.js 配置  const path = require(\u0026#39;path\u0026#39;); module.exports = { entry: { home : \u0026#34;./src/home.js\u0026#34; , main : \u0026#34;./src/main.js\u0026#34; , register : \u0026#34;./src/register.js\u0026#34; , }, output :{ path: path.resolve(__dirname, \u0026#39;dist\u0026#39;), }, mode: \u0026#39;development\u0026#39; // 设置mode } ;  package.json 配置  { \u0026#34;name\u0026#34;: \u0026#34;demo05\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;webpack --mode development\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack --mode production\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;webpack\u0026#34;: \u0026#34;^5.42.1\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.7.2\u0026#34; } }  执行以及校验js (这里使用nodejs直接在命令行执行js)  D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;npm run build \u0026gt; demo05@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo05 \u0026gt; webpack --mode production asset register.js 54 bytes [emitted] [minimized] (name: register) asset home.js 50 bytes [emitted] [minimized] (name: home) asset main.js 50 bytes [emitted] [minimized] (name: main) ./src/home.js 50 bytes [built] [code generated] ./src/main.js 50 bytes [built] [code generated] ./src/register.js 54 bytes [built] [code generated] webpack 5.42.1 compiled successfully in 207 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;node dist/main.js main 15 D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;node dist/home.js home 20 D:\\IdeaProjects\\cycle\\study\\webpack\\demo05\u0026gt;node dist/register.js register 63  附 main.js内容  console.log(\u0026#34;main\u0026#34;,Math.round(Math.random()*100));  文件目录  ▸\\demo05\r▸ \\demo05\\dist\r▸ \\demo05\\dist\\home.js\r▸ \\demo05\\dist\\main.js\r▸ \\demo05\\dist\\register.js\r▸ \\demo05\\node_modules\r▸ \\demo05\\node_modules\\.bin\r▸ \\demo05\\node_modules\\.bin\\acorn\r▸ \\demo05\\node_modules\\.bin\\acorn.cmd\r▸ \\demo05\\node_modules\\.bin\\acorn.ps1\r▸ \\demo05\\node_modules\\.bin\\browserslist\r▸ \\demo05\\node_modules\\.bin\\browserslist.cmd\r||省略\r▸ \\demo05\\node_modules\\wildcard\\README.md\r▸ \\demo05\\node_modules\\wildcard\\test\r▸ \\demo05\\node_modules\\wildcard\\test\\all.js\r▸ \\demo05\\node_modules\\wildcard\\test\\arrays.js\r▸ \\demo05\\node_modules\\wildcard\\test\\objects.js\r▸ \\demo05\\node_modules\\wildcard\\test\\strings.js\r▸ \\demo05\\node_modules\\wildcard\\yarn.lock\r▸ \\demo05\\node_modules\\yocto-queue\r▸ \\demo05\\node_modules\\yocto-queue\\index.d.ts\r▸ \\demo05\\node_modules\\yocto-queue\\index.js\r▸ \\demo05\\node_modules\\yocto-queue\\license\r▸ \\demo05\\node_modules\\yocto-queue\\package.json\r▸ \\demo05\\node_modules\\yocto-queue\\readme.md\r▸ \\demo05\\package-lock.json\r▸ \\demo05\\package.json\r▸ \\demo05\\src\r▸ \\demo05\\src\\home.js\r▸ \\demo05\\src\\main.js\r▸ \\demo05\\src\\register.js\r▸ \\demo05\\webpack.config.js\r多出口 #   生成必要的文件  Microsoft Windows [版本 10.0.19043.1052] (c) Microsoft Corporation。保留所有权利。 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;mkdir demo06 D:\\IdeaProjects\\cycle\\study\\webpack\u0026gt;cd demo06 D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;mkdir src D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;cd src D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\\src\u0026gt;echo console.log(\u0026#39;index\u0026#39;); \u0026gt; index.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\\src\u0026gt;echo console.log(\u0026#39;main\u0026#39;); \u0026gt; main.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\\src\u0026gt;cd .. D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;cd \u0026gt; webpack.config.js D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm init -y Wrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo06\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; }  安装  D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm add -D webpack webpack-cli npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN demo06@1.0.0 No description npm WARN demo06@1.0.0 No repository field. + webpack@5.42.1 + webpack-cli@4.7.2 added 121 packages from 155 contributors in 10.332s 16 packages are looking for funding run `npm fund` for details 报错了 执行npm install时出现npm notice created a lockfile as package-lock.json. You should commit this file 在package.json中增加private字段； 将项目声明为私有项目：\u0026#34;private\u0026#34;: true, 再重新运行，notice就没有了  增加如下  { \u0026#34;name\u0026#34;: \u0026#34;demo06\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; }, \u0026#34;private\u0026#34;: true, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; }  重新安装  D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm add -D webpack webpack-cli + webpack@5.42.1 + webpack-cli@4.7.2 updated 2 packages in 4.494s 1 package is looking for funding run `npm fund` for details  关于 webpack.config.js 配置   我是从下面一次注释运行的\n const path = require(\u0026#34;path\u0026#34;) ; module.exports = { entry :{ index :\u0026#34;./src/index.js\u0026#34; , //这样写 可以不要output  main :\u0026#34;./src/main.js\u0026#34; , }, mode :\u0026#34;development\u0026#34; , output :{ // path:path.join(__dirname,\u0026#34;release\u0026#34;)  // path:path.join(__dirname,\u0026#34;output1\u0026#34;),  path:path.join(__dirname,\u0026#34;output\u0026#34;), // filename:\u0026#34;[name].js\u0026#34;//如index.js  // filename:\u0026#34;[name]_.js\u0026#34; //如index_.js  // filename:\u0026#34;[name]_[hash].js\u0026#34; //如 index_42e300f860ec901c7866.js  filename:\u0026#34;[name]_[hash:4].js\u0026#34; //如 index_42e3.js  } }  执行命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm run build \u0026gt; demo06@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo06 \u0026gt; webpack asset index.js 1.2 KiB [emitted] (name: index) asset main.js 1.2 KiB [emitted] (name: main) ./src/index.js 24 bytes [built] [code generated] ./src/main.js 23 bytes [built] [code generated] webpack 5.42.1 compiled successfully in 75 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;node src/index.js index D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;node src/main.js main D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm run build \u0026gt; demo06@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo06 \u0026gt; webpack asset index.js 1.2 KiB [emitted] (name: index) asset main.js 1.2 KiB [emitted] (name: main) ./src/index.js 24 bytes [built] [code generated] ./src/main.js 23 bytes [built] [code generated] webpack 5.42.1 compiled successfully in 77 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm run build \u0026gt; demo06@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo06 \u0026gt; webpack asset index.js 1.2 KiB [emitted] (name: index) asset main.js 1.2 KiB [emitted] (name: main) ./src/index.js 24 bytes [built] [code generated] ./src/main.js 23 bytes [built] [code generated] webpack 5.42.1 compiled successfully in 77 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm run build \u0026gt; demo06@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo06 \u0026gt; webpack asset index_.js 1.2 KiB [emitted] (name: index) asset main_.js 1.2 KiB [emitted] (name: main) ./src/index.js 24 bytes [built] [code generated] ./src/main.js 23 bytes [built] [code generated] webpack 5.42.1 compiled successfully in 80 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm run build \u0026gt; demo06@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo06 \u0026gt; webpack (node:8048) [DEP_WEBPACK_TEMPLATE_PATH_PLUGIN_REPLACE_PATH_VARIABLES_HASH] DeprecationWarning: [hash] is now [fullhash] (also consider using [chunkhash] or [contenthash], see documenta tion for details) (Use `node --trace-deprecation ...` to show where the warning was created) asset index_42e300f860ec901c7866.js 1.2 KiB [emitted] [immutable] (name: index) asset main_42e300f860ec901c7866.js 1.2 KiB [emitted] [immutable] (name: main) ./src/index.js 24 bytes [built] [code generated] ./src/main.js 23 bytes [built] [code generated] webpack 5.42.1 compiled successfully in 81 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;npm run build \u0026gt; demo06@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo06 \u0026gt; webpack (node:15188) [DEP_WEBPACK_TEMPLATE_PATH_PLUGIN_REPLACE_PATH_VARIABLES_HASH] DeprecationWarning: [hash] is now [fullhash] (also consider using [chunkhash] or [contenthash], see document ation for details) (Use `node --trace-deprecation ...` to show where the warning was created) asset index_42e3.js 1.2 KiB [emitted] [immutable] (name: index) asset main_42e3.js 1.2 KiB [emitted] [immutable] (name: main) ./src/index.js 24 bytes [built] [code generated] ./src/main.js 23 bytes [built] [code generated] webpack 5.42.1 compiled successfully in 76 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo06\u0026gt;  文件结构  ▸\\demo06 ▸ \\demo06\\dist ▸ \\demo06\\dist\\index.js ▸ \\demo06\\dist\\main.js ▸ \\demo06\\node_modules ▸ \\demo06\\node_modules\\yocto-queue //省略 ▸ \\demo06\\node_modules\\yocto-queue\\index.d.ts ▸ \\demo06\\node_modules\\yocto-queue\\index.js ▸ \\demo06\\node_modules\\yocto-queue\\license ▸ \\demo06\\node_modules\\yocto-queue\\package.json ▸ \\demo06\\node_modules\\yocto-queue\\readme.md ▸ \\demo06\\output ▸ \\demo06\\output\\index_42e3.js ▸ \\demo06\\output\\index_42e300f860ec901c7866.js ▸ \\demo06\\output\\main_42e3.js ▸ \\demo06\\output\\main_42e300f860ec901c7866.js ▸ \\demo06\\output1 ▸ \\demo06\\output1\\index.js ▸ \\demo06\\output1\\index_.js ▸ \\demo06\\output1\\main.js ▸ \\demo06\\output1\\main_.js ▸ \\demo06\\package-lock.json ▸ \\demo06\\package.json ▸ \\demo06\\readme.md ▸ \\demo06\\release ▸ \\demo06\\release\\index.js ▸ \\demo06\\release\\main.js ▸ \\demo06\\src ▸ \\demo06\\src\\index.js ▸ \\demo06\\src\\main.js ▸ \\demo06\\webpack.config.js "});index.add({'id':83,'href':'/life/docs/javadir/groovy/groovy%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AF%94%E8%BE%83%E4%BB%A5%E5%8F%8A%E9%9D%9E%E7%A9%BA%E5%88%A4%E6%96%AD/','title':" groovy对象比较以及空判断 ",'section':"groovy 学习与使用 ",'content':"groovy 对象比较以及空判断 #   目前测试得知 groovy的比较貌似很多直接可以使用==来比较\n groovy对象的比较 #  1.字符串比较 #  def str1 = \u0026quot;Hello World1\u0026quot;\rif (\u0026quot;Hello World\u0026quot; == str1) {\rprintln \u0026quot;Hello World\u0026quot;\r} else {\rprintln \u0026quot;不匹配\u0026quot;\r}\r2.map集合的比较（list集合也可以这样比较） #  \tdef m1=[\u0026quot;name\u0026quot;:\u0026quot;李明\u0026quot;,\u0026quot;age\u0026quot;:20]\rdef m2=[\u0026quot;name\u0026quot;:\u0026quot;李明\u0026quot;,\u0026quot;age\u0026quot;:21]\rdef m3=[\u0026quot;name\u0026quot;:\u0026quot;李明\u0026quot;,\u0026quot;age\u0026quot;:21]\rif(m1==m2){\rprintln \u0026quot;m1和m2匹配\u0026quot;\r}else{\rprintln \u0026quot;m1和m2不匹配\u0026quot;\r}\r  特别是字符串的比较，是不是比java要简洁的多呢\n  如果要比较两个对象的引用是否相同在groovy中可以使用is\n  def list1 = []\rdef list2 = [1,2,3,4]\rboolean check = list1.is(list2) ;\rprintln(check)\rif 判断对象是否为空 #   groovy中判断对象是否为空，直接if(对象){}即可，这种便捷真的很强  def list1 = []\rdef list2 = [1,2,3,4]\r//直接写入 有点像C语言里面if可以直接把0,和非0作为boolean来比较\rif (!list1){\rprintln(\u0026quot;list1为null\u0026quot;) ;\r}\rif (list2){\rprintln(\u0026quot;list2不为null\u0026quot;) ;\r}\r 特殊判断法  //def m5 = [name:\u0026quot;a\u0026quot;];\rdef m5 = [];\rprintln \u0026quot;${m5?.name}\u0026quot; ;\r//注意目前我用list失败了\rprintln \u0026quot;${list1?.get(0)}\u0026quot; ; //报error 数组越界 因此这种写法只适合map\r"});index.add({'id':84,'href':'/life/docs/operating_system/windows/windows_question/','title':" windows 问题 ",'section':"windows学习与使用 ",'content':" 磁盘变为了动态磁盘解决办法 最好是找软件解决 如DiskGenius 或者 傲梅分区助手 暴力解决办法  \r1、diskpart\r2、list disk\r3、select disk n\r4、convert basic\rSTEP 1：打开命令提示符窗口，在其中键入：“diskpart”命令并按下回车键。 STEP 2：在DISKPART命令提示符下，键入“list disk”命令并按下回车键后，能够查看到电脑中的磁盘情况。 STEP 3：在DISKPART命令提示符下，继续键入“select disk n”命令并按下回车键，其中n代表磁盘的序号。 STEP 4：在DISKPART命令提示符下，键入“convert dynamic”命令并按下回车键后，开始转换的工作。\r"});index.add({'id':85,'href':'/life/docs/operating_system/one_chapter/1_6_/','title':" 系统调用 ",'section':"第一章 操作系统概述 ",'content':"一:知识总览 #  什么是系统调用，有何作用？ #   知识点回顾：操作系统作为用户和计算机硬件之间的接口，需要向上提供一些简单易用的服务。主要包括命令接口和程序接口。其中，程序接口由一组系统调用组成。\n  “系统调用”是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以通过系统调用来请求获得操作系统内核的服务\n 系统调用与库函数的区别 #  小例子：为什么系统调用是必须的？ #  什么功能要用到系统调用？ #   应用程序通过系统调用请求操作系统的服务。而系统中的各种共享资源都由操作系统内核统一掌管，因此凡是与共享资源有关的操作（如存储分配、I/O操作、文件管理等），都必须通过系统调用的方式向操作系统内核提出服务请求，由操作系统内核代为完成。这样可以保证系统的稳定性和安全性，防止用户进行非法操作。\n 系统调用的过程 #  二:知识回顾与重要考点 #  "});index.add({'id':86,'href':'/life/docs/think/jinzita/','title':"金字塔原理",'section':"思维",'content':" 金字塔原理  "});index.add({'id':87,'href':'/life/docs/databases/mysql/mysql_install/','title':"mysql安装",'section':"mysql学习笔记",'content':"mysql安装 #   这里我们不再采用exe的安装的方式,我们使用压缩包的方式安装\n   地址 https://downloads.mysql.com/archives/community/\n  将页面拉到最下面选择选择操作系统后，选择要下载的版本点击 Downloads\n  我选择安装的版本为8.0.13。如果不想要最新的版本也可以进Archives页面选择其他版本\n  选择压缩包的版本哦\n  一:配置环境变量 #    因为下载的mysql数据库包的格式是zip的，下载完成后直接解压就可以用，但解压后需要进行配置。\n  首先进行环境变量的配置：右击计算机-\u0026gt;属性-\u0026gt;高级系统设置-\u0026gt;环境变量，选择双击Path，在最后面添加你的mysql bin文件夹的路径\n  我的目录是：D:\\databases\\mysql-8.0.13-winx64\n   必须设置这个才行,因为后面我们要在控制台运行命令,假如你不设置这个环境变量那么在控制台根本识别不了,exe安装会自动在环境中设置,而压缩包没有设置  二:在 D:\\databases\\mysql-8.0.13-winx64 目录下新建一个my.ini的文件 #  [mysqld]\r# skip-grant-tables 暂时注释了 容易引起 mysql服务启动后立马关闭 这个错误\r# 设置3306端口\rport=3306\r# 自定义设置mysql的安装目录，即解压mysql压缩包的目录\r# 切记此处一定要用双斜杠\\\\，单斜杠这里会出错。\rbasedir=D:\\\\databases\\\\mysql-8.0.13-winx64\r# 自定义设置mysql数据库的数据存放目录\rdatadir=D:\\\\databases\\\\mysql-8.0.13-winx64\\\\data\r# 允许最大连接数\rmax_connections=200\r# 允许连接失败的次数，这是为了防止有人从该主机试图攻击数据库系统\rmax_connect_errors=10\r# 服务端使用的字符集默认为UTF8\rcharacter-set-server=utf8mb4\r# 创建新表时将使用的默认存储引擎\rdefault-storage-engine=INNODB\r# 默认使用“mysql_native_password”插件认证\rdefault_authentication_plugin=mysql_native_password\r[mysql]\r# 设置mysql客户端默认字符集\rdefault-character-set=utf8mb4\r[client]\r# 设置mysql客户端连接服务端时默认使用的端口和默认字符集\rport=3306\rdefault-character-set=utf8mb4\r三:windows下运行控制台程序 #   进入 C:\\Windows\\System32 中搜索   右键用管理员权限执行  四:初始化mysql #   mysqld \u0026ndash;initialize \u0026ndash;console，等待一会出现几行代码，root@localhost：后面的是随机生成的数据库初始密码，将初始密码记下来后面会用到。 没记住初始密码的话，删掉初始化的 data目录，再执行一遍初始化命令又会重新生成  D:\\databases\\mysql-8.0.13-winx64\\bin\u0026gt;mysqld --initialize --console\r2020-04-06T07:51:43.421098Z 0 [System] [MY-013169] [Server] D:\\databases\\mysql-8.0.13-winx64\\bin\\mysqld.exe (mysqld 8.0.13) initializing of server in progress as process 21400\r2020-04-06T07:52:04.903297Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: gMmik3IyFW!D\r2020-04-06T07:52:19.868074Z 0 [System] [MY-013170] [Server] D:\\databases\\mysql-8.0.13-winx64\\bin\\mysqld.exe (mysqld 8.0.13) initializing of server has completed\r五:mysql执行核心插件服务 #  D:\\databases\\mysql-8.0.13-winx64\\bin\u0026gt;mysqld --install\rService successfully installed.\r六:启动服务 #  net start mysql，启动服务,假如要关闭则是net stop mysql\rD:\\databases\\mysql-8.0.13-winx64\\bin\u0026gt;net start mysql\rMySQL 服务正在启动 ...\rMySQL 服务已经启动成功。\r七:登录 #  # gMmik3IyFW!D 上面这个就是随即临时密码\rD:\\databases\\mysql-8.0.13-winx64\\bin\u0026gt;mysql -u root -p\rEnter password: ************\rWelcome to the MySQL monitor. Commands end with ; or \\g.\rYour MySQL connection id is 8\rServer version: 8.0.13\rCopyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.\rOracle is a registered trademark of Oracle Corporation and/or its\raffiliates. Other names may be trademarks of their respective\rowners.\rType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\r# 显示为这样就表示登录成功了\r八:修改密码 #  mysql\u0026gt; alter user root@localhost identified by '123456';\rQuery OK, 0 rows affected (0.20 sec)\r"});index.add({'id':88,'href':'/life/docs/databases/mysql/mysql_install_more/','title':"Win10一台电脑安装多个版本的Mysql",'section':"mysql学习笔记",'content':"mysql安装 #   这里我们不再采用exe的安装的方式,我们使用压缩包的方式安装\n   地址 https://downloads.mysql.com/archives/community/\n  将页面拉到最下面选择选择操作系统后，选择要下载的版本点击 Downloads\n  我选择安装的版本为8.0.22。如果不想要最新的版本也可以进Archives页面选择其他版本\n  选择压缩包的版本哦\n  一:配置环境变量 #    因为下载的mysql数据库包的格式是zip的，下载完成后直接解压就可以用，但解压后需要进行配置。\n  首先进行环境变量的配置：右击计算机-\u0026gt;属性-\u0026gt;高级系统设置-\u0026gt;环境变量，选择双击Path，在最后面添加你的mysql bin文件夹的路径\n  我的目录是：D:\\CS\\databases\\mysql-8.0.22-winx64   必须设置这个才行,因为后面我们要在控制台运行命令,假如你不设置这个环境变量那么在控制台根本识别不了,exe安装会自动在环境中设置,而压缩包没有设置\n  二:在D:\\CS\\databases\\mysql-8.0.22-winx64 目录下新建一个my.ini的文件 #  [mysqld] # skip-grant-tables 暂时注释了 容易引起 mysql服务启动后立马关闭 这个错误 # 设置3307端口 port=3307 # 自定义设置mysql的安装目录，即解压mysql压缩包的目录 # 切记此处一定要用双斜杠\\\\，单斜杠这里会出错。 basedir=D:\\\\CS\\\\databases\\\\mysql-8.0.22-winx64 # 自定义设置mysql数据库的数据存放目录 datadir=D:\\\\CS\\\\databases\\\\mysql-8.0.22-winx64\\\\data # 允许最大连接数 max_connections=200 # 允许连接失败的次数，这是为了防止有人从该主机试图攻击数据库系统 max_connect_errors=10 # 服务端使用的字符集默认为UTF8 character-set-server=utf8mb4 # 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB # 默认使用“mysql_native_password”插件认证 default_authentication_plugin=mysql_native_password [mysql] # 设置mysql客户端默认字符集 default-character-set=utf8mb4 [client] # 设置mysql客户端连接服务端时默认使用的端口和默认字符集 port=3307 default-character-set=utf8mb4 三:windows下运行控制台程序 #   进入 C:\\Windows\\System32 中搜索   右键用管理员权限执行  四:mysql执行核心插件服务 #  D:\\CS\\databases\\mysql-8.0.22-winx64\\bin\u0026gt;mysqld install MySQL8022 --default-file=\u0026quot;D:\\CS\\databases\\mysql-8.0.22-winx64\\my.ini\u0026quot;\rService successfully installed.\r  提示Service successfully installed.说明服务安装成功，在计算机管理服务里可以看到新增一个MySQL8022的服务，接着输入mysqld \u0026ndash;initialize，回车后没有任何提示，但是在文件夹下新增了一个data文件夹，说明初始化成功\n  MySQL8022是新增mysql的名称，启动或关闭服务的时候用到\n  五:初始化mysql #  mysqld --initialize\r六:修改注册表 #   注册表路径：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services 找到MySQL8022 MySQL8022 source value: D:\\CS\\databases\\mysql-8.0.22-winx64\\bin\\mysqld \u0026ndash;default-file=D:\\CS\\databases\\mysql-8.0.22-winx64\\my.ini MySQL8022 修改为 D:\\CS\\databases\\mysql-8.0.22-winx64\\bin\\mysqld.exe MySQL8022  七:启动修改密码 #    首先找到临时密码 由于安装多个mysql无法执行mysqld \u0026ndash;initialize \u0026ndash;console 实际是mysqld \u0026ndash;initialize 所以控制台无法看到密码\n  临时密码可以去data文件夹下，一个后缀为err的文件中找到root@localhost:后面的就是\n  如图:   启动 并且修改密码   "});index.add({'id':89,'href':'/life/docs/%E8%84%9A%E6%9C%AC/','title':"脚本",'section':"Docs",'content':" dos,lua,sheel,python,js\n   dos 可以使用VisualBat编辑器编写以及调试\n  lua 可以运行在redis ,dos,Java,c++等里面另外还可以用来写触屏精灵 http://www.touchsprite.com/docs/5362 ==\u0026gt; https://www.zybuluo.com/miniknife/note/317045#%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\n  sheel脚本 运行在linux或者unix上相当于windows上的dos\n  python 胶水语言 可以直接在linux当成sheel使用,也是人工智能的一种使用工具\n   js 浏览器脚本  "});index.add({'id':90,'href':'/life/docs/operating_system/two_chapter/2_2_1/','title':"处理机调度的概念、层次",'section':"第二章 进程管理 ",'content':""});index.add({'id':91,'href':'/life/docs/computer_network/network_architecture/%E6%A8%A1%E5%9E%8B%E5%B1%82%E6%AC%A1%E8%AF%A6%E8%A7%A3/','title':"模型层次详解",'section':"网络体系结构",'content':"计算机网络分成结构 #  7层OSI参考模型 #  4层TCP/IP参考模型 #  5层体系结构 #  ISO/OSI模型怎么来的 #  ISO/OSI参考模型 #  ISO/OSI参考模型解释通信过程 #  应用层 #  表示层 #  会话层 #  传输层 #  网络层 #  数据链路层 #  物理层 #  OSI参考模型 与 TCP/IP参考模型 #  OSI参考模型与TCP/IP参考模型 #  相同点 #   1:都分层 2:基于独立的协议栈的概念 3:可以实现异构网络互联  不同点 #  面向连接分为三个阶段，第一是建立连接，在此阶段，发出一个建立连接的请求。\r只有在连接成功建立之后，才能开始数据传输，这是第二阶段。接着，当数据传输完毕，必须释放连接。\r而面向无连接没有这么多阶段，它直接进行数据传输。\r    ISO/OSI参考模型 TCP/IP模型     网络层 无连接 + 面向连接 无连接   传输层 面向连接 无连接 + 面向连接    五层参考模型 #   综合了OSI和TCP/IP的优点\n    参考层 说明     应用层 支持各种网络应用 FTP\\SMTP\\HTTP   传输层 进程-进程的数据传输 TCP\\UDP   网络层 源主机到目的主机的数据分组路由与转发 IP\\ICMP\\OSPF   数据链路层 把网络层传下来的数据报组装成帧 Ethernet ppp   物理层 比特传输    5层参考模型的数据封装与解封装 #  "});index.add({'id':92,'href':'/life/docs/%E8%84%9A%E6%9C%AC/webpack%E5%92%8Cnodejs%E5%85%B3%E7%B3%BB/','title':"webpack和nodejs关系 ",'section':"脚本",'content':"webpack和nodejs关系 #   webpack可以将 .vue 文件转换为 .js 文件，而这个转换需要借助打包器vue-loader，这个打包器的下载是在node环境使用 npm 下载的（npm类似与一个应用商店，里面有很多包）；这样webpack在打包的时候是在node环境中运行的。\n  nodejs是js后端运行平台，可以把它看成java体系中对应的jdk，是三个里面最基础的。 npm是nodejs的包管理工具，可以把它看成maven中包依赖管理那部分。 webpack是前端工程化打包工具，可以把它看成maven中工程自动化那部分  npm #  npm是什么 #  是Node.js的包管理工具，是全球最大的开发库生态系统（注册表）\r为何产生？ #  当网站的依赖的js越来越多，程序员发现这是一件麻烦事：\r去JQuery官网下载JQuery，去 BootStrap 官网下载 BootStrap ，去 Underscore 官网下载 Underscore .......没完没了\r于是npm就出来了（全称 Node Package Manager 包管理工具），大家把自己写好的源码上传到npm官网上，如果要用某个或某些个，直接通过npm安装就可以了，并且模块A依赖B，B依赖C、D，此时只需安装A即可，因为此时npm会根据依赖关系，把所有依赖的包都下载下来并且管理起来；\r这一点和maven、gradle十分相似，只不过maven、gradle是用来管理java jar包的，而npm是用来管理js的。\r常用命令 #   npm init：初始化一个项目包，包含package.json文件 npm install：package.json的devDependencies字段里的插件全部安装到node_modules下  node #  node.js是javascript的一种运行环境，是对Google V8引擎进行的封装。是一个服务器端的javascript的解释器。\r包含关系，nodejs中含有npm，比如说你安装好nodejs，你打开cmd输入npm -v会发现出啊线npm的版本号，说明npm已经安装好。\rwebpack #  Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将这些模块按照指定的规则生成对应的静态资源。\r我们为什么使用webpack? #  开发是时候需要一个开发环境，要是我们修改一下代码保存之后浏览器就自动展现最新的代码就好了（热更新服务）\r本地代码的时候，要是调后端的接口不跨域就好了（代理服务）\r为了跟上时代，要是能用上ES678N就好了（翻译服务）\r项目要上线了，要是能一键压缩代码，图片什么的就好了（压缩打包服务）\r我们平时的静态资源都是放到CDN上的，要是能自动帮我把这些搞好的静态资源怼到CDN上就好了（自动上传服务）\r这么多服务，我们需要webpack帮我们去整合那么多的服务，而node的出现，赋予了我们操作系统的能力，要根据自己的需求来使用webpack，知道自己需要什么样的服务，webpack能不能提供这样的服务，如果可以，那么这个服务应该在构建中的呢个环节被处理。\r1.如果与输入相关的需求，找entry（比如多页面就有多个入口）\r2.如果与输出相关的需求，找output（比如你要定义输出文件的路径）\r3.如果与模块寻址相关的需求，找resolve（比如定义别名alias）\r4.如果与转译相关的需求，找loader（比如处理sass处理es678N）\r5.如果与构建流程相关的需求，找plugin（比如我需要在打包完成后，将打包好的文件复制到某个目录，然后提交到git上）\r4人点赞\r工程化\r其它 #    提问：\n  1.webpack安装一般使用npm，那么也需要安装node，而后台不想用nodeJs编写，这样是不是多余，毕竟不用nodeJs,为什么要因为使用webpage而被动安装node呢？（请原谅我对这方面知识的欠缺= =）\n  2.不仅是vue.js使用npm，很多好的框架和工具都使用，这里还请大神告诉我npm、node、nodejs他们之间的关系，好混乱啊。。\n  问题一：\n  使用webpack跟后台是否用nodejs无关，因为webpack在执行打包压缩的时候是依赖nodejs的，没有nodejs就不能使用webpack就好比你要使用电灯，首先必须得有电流，而电流是需要发动机来发电的，你不能因为说我不要发动机而直接使用电流吧~\n  问题二：\n  node和nodejs就是同一个东西，只是名字不同而已，而npm只是nodejs的一个模块\n  webpack是基于nodejs实现的， Node.js 是前端工程化的重要支柱之一\nwebpack打包后的web工程，不需要一定在nodejs环境中运行 比如在apache中也可以运行\n"});index.add({'id':93,'href':'/life/docs/javadir/groovy/groovy%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/','title':" groovy使用场景 ",'section':"groovy 学习与使用 ",'content':"groovy 使用场景 #  Groovy可以用于多种情况。比如 #    1、作为shell脚本语言完成数据处理和文件操作任务。\n  2、在Java或者Java EE应用程序中嵌入Groovy，实现Java和Groovy的集成。（这样有助于编写和集中处理经常变化的业务逻辑，或者给应用程序架构提供可编程的配置管理能力。）\n  Groovy是增强Java平台的唯一的脚本语言。 #   它提供了类似于Java的语法，内置映射（Map）、列表（List）、方法、类、闭包（closure）以及生成器。  脚本语言与系统编程语言： #   脚本语言不会替代系统编程语言，两者是相互补充的。\n 系统编程语言的目的： #    开发复杂的算法或者数据结构\n  实现计算密集型应用\n  操作大型数据集\n  实现定义良好的、变更缓慢的需求\n  脚本语言应用的目的： #    连接已有的组件\n  处理经常变化的多种类型的实体\n  具有图形化用户界面\n  拥有快速变化的功能\n  Java编译器会产生可以在Java虚拟机上运行的字节码。 #  Groovy类和Java是二进制兼容的。 #  Groovy编译器产生的字节码与Java编译器产生的字节码是完全一样的。 #  ——对于JVM而言，Groovy和Java是完全一样的。 #  因此，Groovy能够完全使用各种Java API。 #  Groovy是一门面向对象的语言。也就是说，Groovy中每一个事物最终都会被当做某些类 的一个实例对象。 #  "});index.add({'id':94,'href':'/life/docs/operating_system/one_chapter/1_7_/','title':" 操作系统的体系结构 ",'section':"第一章 操作系统概述 ",'content':"一:知识总览 #  操作系统的内核 #  二:知识回顾与重要考点 #  "});index.add({'id':95,'href':'/life/docs/databases/mysql/mysql_install_problem/','title':"windows下 Mysql安装的一些问题解决方法",'section':"mysql学习笔记",'content':"windows下 Mysql安装的一些问题解决方法 #  1: The service already exists #    在mysql安装的时候要执行 mysqld \u0026ndash;install 这个命令,假如你已经安装完之后觉得不对，但是mysql服务已经生成(windows注册服务已经有mysql了),你不删除此服务为报一个错误\n  The service already exists\n  决绝方法就是 删除mysql相关的服务\n  首先查询下是否存在mysql服务\n  sc query mysql\rSERVICE_NAME: mysql\rTYPE : 10 WIN32_OWN_PROCESS\rSTATE : 4 RUNNING\r(STOPPABLE, PAUSABLE, ACCEPTS_SHUTDOWN)\rWIN32_EXIT_CODE : 0 (0x0)\rSERVICE_EXIT_CODE : 0 (0x0)\rCHECKPOINT : 0x0\rWAIT_HINT : 0x0\r# 这种情况就是mysql 没有删除干净\r 删除该mysql  sc delete mysql\r Please consider using UTF8MB4 in order to be unambiguous.  utf 的别名是 UTF8MB4\r这里在my.ini 的文件中最好是设置 default-character-set=utf8mb4  windows系统下Mysql服务启动后立即关闭问题-排查及解决方法  查看 my.ini 中 多了这个 skip-grant-tables ,这个的原意思是跳过检查,但是在不同版本有些命令是不能使用的\r然后就是目前我暂时发现我自己使用的这个版本出了这个问题,在不同版本下最好是仔细查看配置和日志才是解决之道\r"});index.add({'id':96,'href':'/life/docs/operating_system/two_chapter/2_2_2/','title':"进程调度的时机、切换与过程、方式",'section':"第二章 进程管理 ",'content':""});index.add({'id':97,'href':'/life/docs/%E8%84%9A%E6%9C%AC/webpack_loader/','title':"webpack loader",'section':"脚本",'content':"first css-loader #   文件目录  ▸\\t1 ▸ \\t1\\dist ▸ \\t1\\dist\\index.js ▸ \\t1\\node_modules ▸ \\t1\\node_modules\\.bin //省略 ▸ \\t1\\node_modules\\yocto-queue\\readme.md ▸ \\t1\\package-lock.json ▸ \\t1\\package.json ▸ \\t1\\src ▸ \\t1\\src\\index.css ▸ \\t1\\src\\index.js ▸ \\t1\\webpack.config.js  webpack.config.js content  module.exports = { entry: { index :\u0026#34;./src/index.js\u0026#34; }, mode :\u0026#39;development\u0026#39; , module :{ rules:[ {test :/.css$/ ,use : \u0026#34;css-loader\u0026#34;} ] } }  package.json content  { \u0026#34;name\u0026#34;: \u0026#34;t1\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;css-loader\u0026#34;: \u0026#34;^5.2.6\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^5.44.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.7.2\u0026#34; } }  命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\u0026gt;npm init -y\rWrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\package.json:\r{\r\u0026quot;name\u0026quot;: \u0026quot;t1\u0026quot;,\r\u0026quot;version\u0026quot;: \u0026quot;1.0.0\u0026quot;,\r\u0026quot;description\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;main\u0026quot;: \u0026quot;webpack.config.js\u0026quot;,\r\u0026quot;scripts\u0026quot;: {\r\u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot;\r},\r\u0026quot;keywords\u0026quot;: [],\r\u0026quot;author\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;license\u0026quot;: \u0026quot;ISC\u0026quot;\r}\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\u0026gt;npm add -D webpack webpack-cli\rnpm notice created a lockfile as package-lock.json. You should commit this file.\rnpm WARN t1@1.0.0 No description\rnpm WARN t1@1.0.0 No repository field.\r+ webpack-cli@4.7.2\r+ webpack@5.44.0\radded 121 packages from 155 contributors in 12.283s\r16 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\u0026gt;npm run build\r\u0026gt; t1@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\r\u0026gt; webpack\rassets by status 159 bytes [cached] 1 asset\r./src/index.js 55 bytes [built] [code generated]\rWARNING in configuration\rThe 'mode' option has not been set, webpack will fallback to 'production' for this value.\rSet 'mode' option to 'development' or 'production' to enable defaults for each environment.\rYou can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/\rERROR in ./src/index.js 1:0-20\rModule not found: Error: Can't resolve 'index.css' in 'D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\src'\rDid you mean './index.css'?\rRequests that should resolve in the current directory need to start with './'.\rRequests that start with a name are treated as module requests and resolve within module directories (node_modules).\rIf changing the source code is not an option there is also a resolve options called 'preferRelative' which tries to resolve these kind of requests in the current directory too.\rresolve 'index.css' in 'D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\src'\rParsed request is a module\rusing description file: D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\package.json (relative path: ./src)\rField 'browser' doesn't contain a valid alias configuration\rresolve as module\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\src\\node_modules doesn't exist or is not a directory\rlooking for modules in D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\rsingle file module\rusing description file: D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\package.json (relative path: ./node_modules/index.css)\rno extension\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css doesn't exist\r.js\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css.js doesn't exist\r.json\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css.json doesn't exist\r.wasm\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css.wasm doesn't exist\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css doesn't exist\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\cycle\\study\\webpack\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\cycle\\study\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\cycle\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\node_modules doesn't exist or is not a directory\rD:\\node_modules doesn't exist or is not a directory\rwebpack 5.44.0 compiled with 1 error and 1 warning in 189 ms\rnpm ERR! code ELIFECYCLE\rnpm ERR! errno 1\rnpm ERR! t1@1.0.0 build: `webpack`\rnpm ERR! Exit status 1\rnpm ERR!\rnpm ERR! Failed at the t1@1.0.0 build script.\rnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\rnpm ERR! A complete log of this run can be found in:\rnpm ERR! C:\\Users\\dell\\AppData\\Roaming\\npm-cache\\_logs\\2021-07-10T09_07_28_227Z-debug.log\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\u0026gt;npm run build\r\u0026gt; t1@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\r\u0026gt; webpack\rasset index.js 2.19 KiB [emitted] (name: index)\rruntime modules 274 bytes 1 module\r./src/index.js 55 bytes [built] [code generated]\rERROR in ./src/index.js 1:0-20\rModule not found: Error: Can't resolve 'index.css' in 'D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\src'\rDid you mean './index.css'?\rRequests that should resolve in the current directory need to start with './'.\rRequests that start with a name are treated as module requests and resolve within module directories (node_modules).\rIf changing the source code is not an option there is also a resolve options called 'preferRelative' which tries to resolve these kind of requests in the current directory too.\rresolve 'index.css' in 'D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\src'\rParsed request is a module\rusing description file: D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\package.json (relative path: ./src)\rField 'browser' doesn't contain a valid alias configuration\rresolve as module\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\src\\node_modules doesn't exist or is not a directory\rlooking for modules in D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\rsingle file module\rusing description file: D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\package.json (relative path: ./node_modules/index.css)\rno extension\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css doesn't exist\r.js\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css.js doesn't exist\r.json\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css.json doesn't exist\r.wasm\rField 'browser' doesn't contain a valid alias configuration\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css.wasm doesn't exist\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\\node_modules\\index.css doesn't exist\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\cycle\\study\\webpack\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\cycle\\study\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\cycle\\node_modules doesn't exist or is not a directory\rD:\\IdeaProjects\\node_modules doesn't exist or is not a directory\rD:\\node_modules doesn't exist or is not a directory\rwebpack 5.44.0 compiled with 1 error in 84 ms\rnpm ERR! code ELIFECYCLE\rnpm ERR! errno 1\rnpm ERR! t1@1.0.0 build: `webpack`\rnpm ERR! Exit status 1\rnpm ERR!\rnpm ERR! Failed at the t1@1.0.0 build script.\rnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\rnpm ERR! A complete log of this run can be found in:\rnpm ERR! C:\\Users\\dell\\AppData\\Roaming\\npm-cache\\_logs\\2021-07-10T09_08_41_846Z-debug.log\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t1\u0026gt;npm add -D css-loader\rnpm WARN t1@1.0.0 No description\rnpm WARN t1@1.0.0 No repository field.\r+ css-loader@5.2.6\radded 21 packages from 55 contributors in 8.209s\r18 packages are looking for funding\rrun `npm fund` for details\rsecond css-loader #   文件目录  ▸\\t2\r▸ \\t2\\dist\r▸ \\t2\\dist\\index.js\r▸ \\t2\\node_modules\r▸ \\t2\\node_modules\\.bin\r▸ \\t2\\node_modules\\.bin\\acorn\r//省略\r▸ \\t2\\node_modules\\yocto-queue\r▸ \\t2\\node_modules\\yocto-queue\\index.d.ts\r▸ \\t2\\node_modules\\yocto-queue\\index.js\r▸ \\t2\\node_modules\\yocto-queue\\license\r▸ \\t2\\node_modules\\yocto-queue\\package.json\r▸ \\t2\\node_modules\\yocto-queue\\readme.md\r▸ \\t2\\package-lock.json\r▸ \\t2\\package.json\r▸ \\t2\\src\r▸ \\t2\\src\\index.css\r▸ \\t2\\src\\index.js\r▸ \\t2\\webpack.config.js\r webpack.config.js content  const path = require(\u0026#34;path\u0026#34;) ; module.exports = { entry: { index :\u0026#34;./src/index.js\u0026#34; }, mode :\u0026#39;development\u0026#39; , output: { path: path.resolve(__dirname, \u0026#39;dist\u0026#39;) }, module :{ rules:[ {test : /.css$/ , use : \u0026#34;css-loader\u0026#34;} ] } }  package.json content  { \u0026#34;name\u0026#34;: \u0026#34;t2\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;css-loader\u0026#34;: \u0026#34;^5.2.6\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^5.44.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.7.2\u0026#34; } }  命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\u0026gt;npm init -y\rWrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\\package.json:\r{\r\u0026quot;name\u0026quot;: \u0026quot;t2\u0026quot;,\r\u0026quot;version\u0026quot;: \u0026quot;1.0.0\u0026quot;,\r\u0026quot;description\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;main\u0026quot;: \u0026quot;webpack.config.js\u0026quot;,\r\u0026quot;scripts\u0026quot;: {\r\u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot;\r},\r\u0026quot;keywords\u0026quot;: [],\r\u0026quot;author\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;license\u0026quot;: \u0026quot;ISC\u0026quot;\r}\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\u0026gt;npm add -D webpack webpack-cli\rnpm notice created a lockfile as package-lock.json. You should commit this file.\rnpm WARN t2@1.0.0 No description\rnpm WARN t2@1.0.0 No repository field.\r+ webpack@5.44.0\r+ webpack-cli@4.7.2\radded 121 packages from 155 contributors in 10.062s\r16 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\u0026gt;npm add -D css-loader\rnpm WARN t2@1.0.0 No description\rnpm WARN t2@1.0.0 No repository field.\r+ css-loader@5.2.6\radded 21 packages from 55 contributors in 3.292s\r18 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\u0026gt;npm run build\r\u0026gt; t2@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\r\u0026gt; webpack\rasset index.js 7.23 KiB [emitted] (name: index)\rruntime modules 937 bytes 4 modules\rcacheable modules 1.95 KiB\r./src/index.js 57 bytes [built] [code generated]\r./src/index.css 333 bytes [built] [code generated]\r./node_modules/css-loader/dist/runtime/api.js 1.57 KiB [built] [code generated]\rwebpack 5.44.0 compiled successfully in 311 ms\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\u0026gt;node dist/index.js\rhello index.js\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t2\u0026gt;\r index.css || index.js content  //css content .main { color: #0d6efd; } //js content import \u0026#34;./index.css\u0026#34; ; console.log(\u0026#34;hello index.js\u0026#34;) ; second - 2 css-loader #   webpack.config.js content  module.exports = { entry: { index :\u0026#34;./src/index.js\u0026#34; }, mode :\u0026#39;development\u0026#39; , module :{ rules:[ {test : /.css$/ , use : \u0026#34;css-loader\u0026#34;} ] } }  其他和 second 内容一致  first [\u0026ldquo;style-loader\u0026rdquo;, \u0026ldquo;css-loader\u0026rdquo;] #   文件目录  ▸\\t3\r▸ \\t3\\dist\r▸ \\t3\\dist\\index.js\r▸ \\t3\\node_modules\r▸ \\t3\\node_modules\\.bin\r▸ \\t3\\node_modules\\.bin\\acorn\r//省略\r▸ \\t3\\node_modules\\yocto-queue\\index.js\r▸ \\t3\\node_modules\\yocto-queue\\license\r▸ \\t3\\node_modules\\yocto-queue\\package.json\r▸ \\t3\\node_modules\\yocto-queue\\readme.md\r▸ \\t3\\package-lock.json\r▸ \\t3\\package.json\r▸ \\t3\\src\r▸ \\t3\\src\\index.css\r▸ \\t3\\src\\index.js\r▸ \\t3\\webpack.config.js\r webpack.config.js content  const HtmlWebPackPlugin = require(\u0026#34;html-webpack-plugin\u0026#34;); module.exports = { entry: { index: \u0026#34;./src/index.js\u0026#34; }, mode: \u0026#39;development\u0026#39;, module: { rules: [ { test: /.css$/, use: [\u0026#34;style-loader\u0026#34;, \u0026#34;css-loader\u0026#34;] } ] }, plugins: [ new HtmlWebPackPlugin( { /*你帮我应用这个模板*/ template: \u0026#34;./src/indexTemplate.html\u0026#34; } ), ] }  package.json content  { \u0026#34;name\u0026#34;: \u0026#34;t4\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;css-loader\u0026#34;: \u0026#34;^5.2.6\u0026#34;, \u0026#34;html-webpack-plugin\u0026#34;: \u0026#34;^5.3.2\u0026#34;, \u0026#34;style-loader\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^5.44.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.7.2\u0026#34; } }  index.css || index.js || indexTemplate.html  \u0026lt;! -- index.css .main { color: #0d6efd; } --\u0026gt; \u0026lt;! -- index.js import \u0026#34;./index.css\u0026#34; ; console.log(\u0026#34;hello index.js\u0026#34;) ; --\u0026gt; \u0026lt;! -- indexTemplate.html \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; hello world \u0026lt;/div\u0026gt; --\u0026gt;  命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\u0026gt;npm init -y\rWrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\\package.json:\r{\r\u0026quot;name\u0026quot;: \u0026quot;t4\u0026quot;,\r\u0026quot;version\u0026quot;: \u0026quot;1.0.0\u0026quot;,\r\u0026quot;description\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;main\u0026quot;: \u0026quot;webpack.config.js\u0026quot;,\r\u0026quot;scripts\u0026quot;: {\r\u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot;\r},\r\u0026quot;keywords\u0026quot;: [],\r\u0026quot;author\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;license\u0026quot;: \u0026quot;ISC\u0026quot;\r}\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\u0026gt;npm add -D webpack webpack-cli\rnpm notice created a lockfile as package-lock.json. You should commit this file.\rnpm WARN t4@1.0.0 No description\rnpm WARN t4@1.0.0 No repository field.\r+ webpack@5.44.0\r+ webpack-cli@4.7.2\radded 121 packages from 155 contributors in 12.528s\r16 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\u0026gt;npm install -D --save-dev html-webpack-plugin\rnpm WARN t4@1.0.0 No description\rnpm WARN t4@1.0.0 No repository field.\r+ html-webpack-plugin@5.3.2\radded 33 packages from 19 contributors in 7.603s\r26 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\u0026gt;npm add -D style-loader\rnpm WARN t4@1.0.0 No description\rnpm WARN t4@1.0.0 No repository field.\r+ style-loader@3.0.0\radded 1 package from 1 contributor in 2.089s\r27 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\u0026gt;npm add -D css-loader\rnpm WARN t4@1.0.0 No description\rnpm WARN t4@1.0.0 No repository field.\r+ css-loader@5.2.6\radded 21 packages from 55 contributors in 3.031s\r29 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\u0026gt;npm run build\r\u0026gt; t4@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t4\r\u0026gt; webpack\rasset index.js 17.8 KiB [emitted] (name: index)\rasset index.html 94 bytes [compared for emit]\rruntime modules 937 bytes 4 modules\rcacheable modules 7.6 KiB\rmodules by path ./node_modules/ 5.69 KiB\r./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js 2.19 KiB [built] [code generated]\r./node_modules/style-loader/dist/runtime/styleDomAPI.js 1010 bytes [built] [code generated]\r./node_modules/style-loader/dist/runtime/getTarget.js 709 bytes [built] [code generated]\r./node_modules/style-loader/dist/runtime/insertStyleElement.js 261 bytes [built] [code generated]\r./node_modules/css-loader/dist/runtime/api.js 1.57 KiB [built] [code generated]\rmodules by path ./src/ 1.91 KiB\r./src/index.js 57 bytes [built] [code generated]\r./src/index.css 1.53 KiB [built] [code generated]\r./node_modules/css-loader/dist/cjs.js!./src/index.css 333 bytes [built] [code generated]\rwebpack 5.44.0 compiled successfully in 371 ms\r index.css index.js indexTemplate.html  .main {\rcolor: #0d6efd;\r}\rimport \u0026quot;./index.css\u0026quot; ;\rconsole.log(\u0026quot;hello index.js\u0026quot;) ;\r\u0026lt;div class=\u0026quot;main\u0026quot;\u0026gt;\rhello world\r\u0026lt;/div\u0026gt;\r run dist.index.html ==\u0026gt;  \u0026lt;body _c_t_common=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;div data-v-7e2550d6=\u0026#34;\u0026#34; class=\u0026#34;odm_extension image_downloader_wrapper\u0026#34;\u0026gt;\u0026lt;!----\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; hello world \u0026lt;/div\u0026gt;\u0026lt;div data-flash-app-container=\u0026#34;true\u0026#34; id=\u0026#34;flash_player_app_root\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;div id=\u0026#34;fatkun-drop-panel\u0026#34;\u0026gt; \u0026lt;a id=\u0026#34;fatkun-drop-panel-close-btn\u0026#34;\u0026gt;×\u0026lt;/a\u0026gt; \u0026lt;div id=\u0026#34;fatkun-drop-panel-inner\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;fatkun-content\u0026#34;\u0026gt; \u0026lt;svg class=\u0026#34;fatkun-icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;5892\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M494.933333 782.933333c2.133333 2.133333 4.266667 4.266667 8.533334 6.4h8.533333c6.4 0 10.666667-2.133333 14.933333-6.4l2.133334-2.133333 275.2-275.2c8.533333-8.533333 8.533333-21.333333 0-29.866667-8.533333-8.533333-21.333333-8.533333-29.866667 0L533.333333 716.8V128c0-12.8-8.533333-21.333333-21.333333-21.333333s-21.333333 8.533333-21.333333 21.333333v588.8L249.6 475.733333c-8.533333-8.533333-21.333333-8.533333-29.866667 0-8.533333 8.533333-8.533333 21.333333 0 29.866667l275.2 277.333333zM853.333333 874.666667H172.8c-12.8 0-21.333333 8.533333-21.333333 21.333333s8.533333 21.333333 21.333333 21.333333H853.333333c12.8 0 21.333333-8.533333 21.333334-21.333333s-10.666667-21.333333-21.333334-21.333333z\u0026#34; p-id=\u0026#34;5893\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;div class=\u0026#34;fatkun-title\u0026#34;\u0026gt;拖拽到此处\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;fatkun-desc\u0026#34;\u0026gt;图片将完成下载\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;iframe id=\u0026#34;redeviation-bs-sidebar\u0026#34; class=\u0026#34;notranslate\u0026#34; aria-hidden=\u0026#34;true\u0026#34; data-theme=\u0026#34;default\u0026#34; data-pos=\u0026#34;right\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\u0026lt;div id=\u0026#34;redeviation-bs-indicator\u0026#34; data-theme=\u0026#34;default\u0026#34; class=\u0026#34;redeviation-bs-fullHeight\u0026#34; style=\u0026#34;height: 100%; top: 0%;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/body\u0026gt; less-loader #   文件目录  ▸\\t6\r▸ \\t6\\dist\r▸ \\t6\\dist\\index.html\r▸ \\t6\\dist\\index.js\r▸ \\t6\\node_modules\r//省略\r▸ \\t6\\node_modules\\yocto-queue\r▸ \\t6\\node_modules\\yocto-queue\\index.d.ts\r▸ \\t6\\node_modules\\yocto-queue\\index.js\r▸ \\t6\\node_modules\\yocto-queue\\license\r▸ \\t6\\node_modules\\yocto-queue\\package.json\r▸ \\t6\\node_modules\\yocto-queue\\readme.md\r▸ \\t6\\package-lock.json\r▸ \\t6\\package.json\r▸ \\t6\\src\r▸ \\t6\\src\\base.less\r▸ \\t6\\src\\index.css\r▸ \\t6\\src\\index.js\r▸ \\t6\\src\\index.less\r▸ \\t6\\src\\indexTemplate.html\r▸ \\t6\\webpack.config.js\r webpack.config.js content  const HtmlWebPackPlugin = require(\u0026#34;html-webpack-plugin\u0026#34;); module.exports = { entry: { index: \u0026#34;./src/index.js\u0026#34; }, mode: \u0026#39;development\u0026#39;, module: { rules: [ { test: /.css$/, use: [\u0026#34;style-loader\u0026#34;, \u0026#34;css-loader\u0026#34;] , }, { test: /.less$/, use: [\u0026#34;style-loader\u0026#34;, \u0026#34;css-loader\u0026#34;,\u0026#34;less-loader\u0026#34;] , }, ] }, plugins: [ new HtmlWebPackPlugin( { /*你帮我应用这个模板*/ template: \u0026#34;./src/indexTemplate.html\u0026#34; } ), ] }  package.json content  { \u0026#34;name\u0026#34;: \u0026#34;t6\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; , \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;css-loader\u0026#34;: \u0026#34;^5.2.6\u0026#34;, \u0026#34;html-webpack-plugin\u0026#34;: \u0026#34;^5.3.2\u0026#34;, \u0026#34;less\u0026#34;: \u0026#34;^4.1.1\u0026#34;, \u0026#34;less-loader\u0026#34;: \u0026#34;^10.0.1\u0026#34;, \u0026#34;style-loader\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^5.44.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.7.2\u0026#34; } }  重要 html 相关  //base.less @primaryColor : lightcoral ; //index.less @import \u0026#34;./base.less\u0026#34;; .main { background-color: @primaryColor } //index.js import \u0026#34;./index.css\u0026#34; ; import \u0026#34;./index.less\u0026#34; ; console.log(\u0026#34;hello index.js\u0026#34;) ; //index.css .main { color: #0d6efd; } //indexTemplate.html \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; hello world \u0026lt;/div\u0026gt;  命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm init -y\rWrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\\package.json:\r{\r\u0026quot;name\u0026quot;: \u0026quot;t6\u0026quot;,\r\u0026quot;version\u0026quot;: \u0026quot;1.0.0\u0026quot;,\r\u0026quot;description\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;main\u0026quot;: \u0026quot;webpack.config.js\u0026quot;,\r\u0026quot;scripts\u0026quot;: {\r\u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot;\r},\r\u0026quot;keywords\u0026quot;: [],\r\u0026quot;author\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;license\u0026quot;: \u0026quot;ISC\u0026quot;\r}\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm add -D webpack webpack-cli\rnpm notice created a lockfile as package-lock.json. You should commit this file.\rnpm WARN t6@1.0.0 No description\rnpm WARN t6@1.0.0 No repository field.\r+ webpack-cli@4.7.2\r+ webpack@5.44.0\radded 121 packages from 155 contributors in 8.471s\r16 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm add -D style-loader\rnpm WARN t6@1.0.0 No description\rnpm WARN t6@1.0.0 No repository field.\r+ style-loader@3.0.0\radded 1 package from 1 contributor in 0.901s\r17 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm add -D css-loader\rnpm WARN t6@1.0.0 No description\rnpm WARN t6@1.0.0 No repository field.\r+ css-loader@5.2.6\radded 21 packages from 55 contributors in 1.83s\r19 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm add -D less-loader\rnpm WARN less-loader@10.0.1 requires a peer of less@^3.5.0 || ^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN t6@1.0.0 No description\rnpm WARN t6@1.0.0 No repository field.\r+ less-loader@10.0.1\radded 2 packages from 2 contributors in 1.144s\r20 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm add -D less\rnpm WARN t6@1.0.0 No description\rnpm WARN t6@1.0.0 No repository field.\r+ less@4.1.1\radded 18 packages from 18 contributors in 2.175s\r20 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm install -D --save-dev html-webpack-plugin\rnpm WARN t6@1.0.0 No description\rnpm WARN t6@1.0.0 No repository field.\r+ html-webpack-plugin@5.3.2\radded 38 packages from 19 contributors in 2.994s\r30 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm run build\rnpm ERR! missing script: build\rnpm ERR! A complete log of this run can be found in:\rnpm ERR! C:\\Users\\dell\\AppData\\Roaming\\npm-cache\\_logs\\2021-07-11T08_38_54_955Z-debug.log\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm run build\r\u0026gt; t6@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\r\u0026gt; webpack\rasset index.js 24.6 KiB [emitted] (name: index)\rasset index.html 94 bytes [emitted]\rruntime modules 937 bytes 4 modules\rcacheable modules 9.27 KiB\rmodules by path ./src/ 3.58 KiB\rmodules by path ./src/*.css 1.85 KiB 2 modules\rmodules by path ./src/*.less 1.65 KiB\r./src/index.less 1.61 KiB [built] [code generated]\r./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/index.less 39 bytes [built] [code generated] [1 error]\r./src/index.js 82 bytes [built] [code generated]\rmodules by path ./node_modules/ 5.69 KiB\r./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js 2.19 KiB [built] [code generated]\r./node_modules/style-loader/dist/runtime/styleDomAPI.js 1010 bytes [built] [code generated]\r./node_modules/style-loader/dist/runtime/getTarget.js 709 bytes [built] [code generated]\r./node_modules/style-loader/dist/runtime/insertStyleElement.js 261 bytes [built] [code generated]\r./node_modules/css-loader/dist/runtime/api.js 1.57 KiB [built] [code generated]\rERROR in ./src/index.less (./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/index.less)\rModule build failed (from ./node_modules/less-loader/dist/cjs.js):\r@primary-color:lightcoral\r^\r@primary-color rule is missing block or ending semi-colon\rError in D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\\src\\base.less (line 1, column 14)\rError:\r@primary-color:lightcoral\r^\r@primary-color rule is missing block or ending semi-colon\rError in D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\\src\\base.less (line 1, column 14)\rat Object.lessLoader (D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\\node_modules\\less-loader\\dist\\index.js:54:14)\r@ ./src/index.less 6:6-140 45:17-24 49:0-110 49:0-110 50:22-29 50:33-47 50:50-64\r@ ./src/index.js 2:0-23\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;npm run build\r\u0026gt; t6@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\r\u0026gt; webpack\rasset index.js 24.4 KiB [emitted] (name: index)\rasset index.html 94 bytes [compared for emit]\rruntime modules 937 bytes 4 modules\rcacheable modules 9.57 KiB\rmodules by path ./src/ 3.88 KiB\rmodules by path ./src/*.css 1.85 KiB 2 modules\rmodules by path ./src/*.less 1.94 KiB\r./src/index.less 1.61 KiB [built] [code generated]\r./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/index.less 343 bytes [built] [code generated]\r./src/index.js 82 bytes [built] [code generated]\rmodules by path ./node_modules/ 5.69 KiB\r./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js 2.19 KiB [built] [code generated]\r./node_modules/style-loader/dist/runtime/styleDomAPI.js 1010 bytes [built] [code generated]\r./node_modules/style-loader/dist/runtime/getTarget.js 709 bytes [built] [code generated]\r./node_modules/style-loader/dist/runtime/insertStyleElement.js 261 bytes [built] [code generated]\r./node_modules/css-loader/dist/runtime/api.js 1.57 KiB [built] [code generated]\rwebpack 5.44.0 compiled successfully in 425 ms\rextract-text-webpack-plugin 使用 #  const ExtractTextPlugin = require(\u0026#34;extract-text-webpack-plugin\u0026#34;); module.exports = { module: { rules: [ { test: /\\.css$/, use: ExtractTextPlugin.extract({ fallback: \u0026#34;style-loader\u0026#34;, use: \u0026#34;css-loader\u0026#34; }) } ] }, plugins: [ new ExtractTextPlugin(\u0026#34;styles.css\u0026#34;), ] }  该插件有三个参数意义分别如下  use:指需要什么样的loader去编译文件,这里由于源文件是.css所以选择css-loader\rfallback:编译后用什么loader来提取css文件\rpublicfile:用来覆盖项目路径,生成该css文件的文件路径\r  使用\n  webpack.config.js\n  const HtmlWebPackPlugin = require(\u0026#34;html-webpack-plugin\u0026#34;); const ExtractTextWebpackPlugin = require(\u0026#34;extract-text-webpack-plugin\u0026#34;); module.exports = { entry: { index: \u0026#34;./src/index.js\u0026#34; }, mode: \u0026#39;development\u0026#39;, module: { rules: [ { test: /.css$/, use: ExtractTextWebpackPlugin.extract({ fallback :\u0026#34;style-loader\u0026#34;, use : \u0026#34;css-loader\u0026#34; }) }, { test: /.less$/, use: ExtractTextWebpackPlugin.extract({ fallback : \u0026#34;style-loader\u0026#34; , use : [\u0026#34;css-loader\u0026#34;, \u0026#34;less-loader\u0026#34;] }) } ] }, plugins: [ new HtmlWebPackPlugin( { /*你帮我应用这个模板*/ template: \u0026#34;./src/indexTemplate.html\u0026#34; } ), new ExtractTextWebpackPlugin(\u0026#34;styles.css\u0026#34;) ] }  package.json 需要注意下面的依赖版本关系  { \u0026#34;name\u0026#34;: \u0026#34;t6\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;css-loader\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;extract-text-webpack-plugin\u0026#34;: \u0026#34;^4.0.0-beta.0\u0026#34;, \u0026#34;html-webpack-plugin\u0026#34;: \u0026#34;^4.4.0\u0026#34;, \u0026#34;less\u0026#34;: \u0026#34;^4.1.1\u0026#34;, \u0026#34;less-loader\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;style-loader\u0026#34;: \u0026#34;^2.0.0\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^4.12.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.1.0\u0026#34; } }  html  + base.less @primaryColor : lightcoral ; + indexTemplate.html \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; hello world \u0026lt;/div\u0026gt; + index.less @import \u0026#34;./base.less\u0026#34;; .main { background-color: @primaryColor } + index.css .main { color: #0d6efd; } + index.js import \u0026#34;./index.css\u0026#34; ; import \u0026#34;./index.less\u0026#34; ; console.log(\u0026#34;hello index.js\u0026#34;) ;  文件目录  ▸\\t6 ▸ \\t6\\dist ▸ \\t6\\dist\\index.html ▸ \\t6\\dist\\index.js ▸ \\t6\\dist\\styles.css ▸ \\t6\\node_modules ▸ \\t6\\node_modules\\.bin ▸ \\t6\\node_modules\\y18n ▸ \\t6\\node_modules\\y18n\\CHANGELOG.md ▸ \\t6\\node_modules\\y18n\\index.js ▸ \\t6\\node_modules\\y18n\\LICENSE ▸ \\t6\\node_modules\\y18n\\package.json ▸ \\t6\\node_modules\\y18n\\README.md //省略 ▸ \\t6\\package-lock.json ▸ \\t6\\package.json ▸ \\t6\\src ▸ \\t6\\src\\base.less ▸ \\t6\\src\\index.css ▸ \\t6\\src\\index.js ▸ \\t6\\src\\index.less ▸ \\t6\\src\\indexTemplate.html ▸ \\t6\\webpack.config.js ▸ \\t6\\webpack.config2.js ▸ \\t6\\webpack.config3.js  执行结果  D:\\IdeaProjects\\cycle\\study\\webpack\\demo07\\t6\u0026gt;webpack [webpack-cli] Compilation finished Hash: 74f8a85ddd5d6714bb8a Version: webpack 4.12.0 Time: 347ms Built at: 2021/07/13 下午10:00:45 Asset Size Chunks Chunk Names index.js 5.02 KiB index [emitted] index styles.css 73 bytes index [emitted] index index.html 129 bytes [emitted] Entrypoint index = index.js styles.css [./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/lib/loader.js!./src/index.less] 183 bytes [built] [./node_modules/css-loader/dist/cjs.js!./src/index.css] 173 bytes [built] [./node_modules/css-loader/dist/runtime/api.js] 2.61 KiB [built] [./node_modules/less-loader/lib/stringify.loader.js!./src/base.less] 39 bytes [built] [./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js] 6.67 KiB [built] [./src/index.css] 41 bytes [built] [./src/index.js] 82 bytes {index} [built] [./src/index.less] 41 bytes [built] Child HtmlWebpackCompiler: Asset Size Chunks Chunk Names __child-HtmlWebpackPlugin_0 4.46 KiB HtmlWebpackPlugin_0 HtmlWebpackPlugin_0 Entrypoint HtmlWebpackPlugin_0 = __child-HtmlWebpackPlugin_0 [./node_modules/html-webpack-plugin/lib/loader.js!./src/indexTemplate.html] 307 bytes {HtmlWebpackPlugin_0} [built] Child extract-text-webpack-plugin node_modules/extract-text-webpack-plugin/dist node_modules/css-loader/dist/cjs.js!node_modules/less-loader/lib/loader.js!src/index.less: Entrypoint undefined = extract-text-webpack-plugin-output-filename [./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/lib/loader.js!./src/index.less] 183 bytes {0} [built] [./node_modules/css-loader/dist/runtime/api.js] 2.61 KiB {0} [built] [./node_modules/less-loader/lib/stringify.loader.js!./src/base.less] 39 bytes [built] Child extract-text-webpack-plugin node_modules/extract-text-webpack-plugin/dist node_modules/css-loader/dist/cjs.js!src/index.css: Entrypoint undefined = extract-text-webpack-plugin-output-filename [./node_modules/css-loader/dist/cjs.js!./src/index.css] 173 bytes {0} [built] [./node_modules/css-loader/dist/runtime/api.js] 2.61 KiB {0} [built] "});index.add({'id':98,'href':'/life/docs/operating_system/two_chapter/2_2_3/','title':"调度算法的评价指标",'section':"第二章 进程管理 ",'content':""});index.add({'id':99,'href':'/life/docs/%E8%84%9A%E6%9C%AC/npm%E9%87%8D%E8%A6%81%E5%91%BD%E4%BB%A4/','title':"node js - npm 重要命令 ",'section':"脚本",'content':"npm 包管理器查询网址 #   https://www.npmjs.com/ (和java的maven仓库差不多一个意思)  全局安装 #    npm install less-loader@4.1.0\n  npm install less-loader@4.1.0 \u0026ndash;save\n  本地安装命令 #    npm install less-loader@3.0.0 \u0026ndash;save-dev\n  npm add -D less-loader@3.0.0\n   上面两条等价\n 升级到最高版本 , 更新npm到最新版本 #   npm i npm@latest -d npm i npm@latest -g  安装所有依赖 (package.json) #   npm install request  删除包问题 #    npm uninstall webpack webpack-cli -g 全局\n  npm uninstall webpack webpack-cli -d 局部\n  npm uninstall less-loader 不区分局部和全局 卸载\n  "});index.add({'id':100,'href':'/life/docs/databases/mysql/mysql_install_centos/','title':"centos7安装多个mysql",'section':"mysql学习笔记",'content':" centos7单机安装多个mysql8.0\n 一:上传 #  下载地址：https://cdn.mysql.com/archives/mysql-8.0/mysql-8.0.21-linux-glibc2.12-x86_64.tar.xz\r上传mysql-8.0.21-linux-glibc2.12-x86_64.tar.xz到服务器指定文件夹，如：/home/mysql\r二:解压 #  cd /home/mysql\rtar -xvf mysql-8.0.21-linux-glibc2.12-x86_64.tar.xz\r三:重命名文件夹 #  mv mysql-8.0.21-linux-glibc2.12-x86_64 mysql3306\r四:新建mysql用户、mysql用户组 #  cd /home/mysql/mysql3306\r#新建mysql用户、mysql用户组，如果之前已经建立过，就不用建立了\rgroupadd mysql\r#给mysql添加用户为 mysql\ruseradd mysql -g mysql\r五:在mysql3306下新增文件夹data，var，tmp，binlogs，logs备用 #  cd /home/mysql/mysql3306\rmkdir data var tmp binlogs logs\rchmod 777 ./tmp\rchmod 777 ./logs\rcd /home/mysql/mysql3306/logs\rtouch error.log\r六:在/home/mysql/mysql3306/etc下创建数据库配置文件 #  cd /home/mysql/mysql3306\rmkdir etc\rcd /home/mysql/mysql3306/etc\rtouch my.cnf\rvim my.cnf\r# my.cnf内容如下：\r[mysqld]\rport = 3306\rbasedir = /home/mysql/mysql3306\rdatadir = /home/mysql/mysql3306/data\rsocket = /home/mysql/mysql3306/tmp/mysql.sock\rmax_connections = 1000\rmax_user_connections = 500\rwait_timeout = 200\rdefault-time-zone = '+8:00'\rthread_cache_size = 64\rmax_connect_errors = 10000\rserver_id = 1 # backup上设置为2、3，主从复制时使用\rlog-bin = /home/mysql/mysql3306/binlogs/mysql-bin\rlog-bin-index = /home/mysql/mysql3306/binlogs/mysql-bin.index\rbinlog-ignore-db = mysql,information_schema #忽略写入binlogs日志的库\rauto-increment-increment = 1 #字段变化增量值\rauto-increment-offset = 1 #初始字段ID为1\rslave-skip-errors = all #忽略所有复制产生的错误\rsync_binlog = 1 #设置为1，是最安全但是性能损耗最大\r[client]\rsocket = /home/mysql/mysql3306/tmp/mysql.sock\rdefault-character-set = utf8\r[mysqld_safe]\rlog-error = /home/mysql/mysql3306/logs/error.log\rpid-file = /home/mysql/mysql3306/mysql.pid\r七:升级依赖 #  yum -y install make gcc-c++ cmake bison-devel ncurses ncurses-devel libaio-devel\r八:在mysql3306文件夹下面执行，一定要记录最后生成的初始密码 #  cd /home/mysql/mysql3306\r./bin/mysqld --defaults-file=/home/mysql/mysql3306/etc/my.cnf --initialize --user=mysql\r./bin/mysqld_safe --defaults-file=/home/mysql/mysql3306/etc/my.cnf --user=mysql \u0026amp;\r九:将support-files下的mysql.server文件内容修改成如下内容： #  cd support-files\rvim mysql.server\r#!/bin/sh\r# Copyright Abandoned 1996 TCX DataKonsult AB \u0026amp; Monty Program KB \u0026amp; Detron HB\r# This file is public domain and comes with NO WARRANTY of any kind\r# MySQL daemon start/stop script.\r# Usually this is put in /etc/init.d (at least on machines SYSV R4 based\r# systems) and linked to /etc/rc3.d/S99mysql and /etc/rc0.d/K01mysql.\r# When this is done the mysql server will be started when the machine is\r# started and shut down when the systems goes down.\r# Comments to support chkconfig on RedHat Linux\r# chkconfig: 2345 64 36\r# description: A very fast and reliable SQL database engine.\r# Comments to support LSB init script conventions\r### BEGIN INIT INFO\r# Provides: mysql\r# Required-Start: $local_fs $network $remote_fs\r# Should-Start: ypbind nscd ldap ntpd xntpd\r# Required-Stop: $local_fs $network $remote_fs\r# Default-Start: 2 3 4 5\r# Default-Stop: 0 1 6\r# Short-Description: start and stop MySQL\r# Description: MySQL is a very fast and reliable SQL database engine.\r### END INIT INFO\r# If you install MySQL on some other places than /usr/local/mysql, then you\r# have to do one of the following things for this script to work:\r#\r# - Run this script from within the MySQL installation directory\r# - Create a /etc/my.cnf file with the following information:\r# [mysqld]\r# basedir=\u0026lt;path-to-mysql-installation-directory\u0026gt;\r# - Add the above to any other configuration file (for example ~/.my.ini)\r# and copy my_print_defaults to /usr/bin\r# - Add the path to the mysql-installation-directory to the basedir variable\r# below.\r#\r# If you want to affect other MySQL variables, you should make your changes\r# in the /etc/my.cnf, ~/.my.cnf or other MySQL configuration files.\r# If you change base dir, you must also change datadir. These may get\r# overwritten by settings in the MySQL configuration files.\r# 1.这些路径根据实际路径修改\rbasedir=/home/mysql/mysql3306\rdatadir=/home/mysql/mysql3306/data\rconf=/home/mysql/mysql3306/etc/my.cnf\r# Default value, in seconds, afterwhich the script should timeout waiting\r# for server start. # Value here is overriden by value in my.cnf. # 0 means don't wait at all\r# Negative numbers mean to wait indefinitely\rservice_startup_timeout=900\r# Lock directory for RedHat / SuSE.\rlockdir='/var/lock/subsys'\rlock_file_path=\u0026quot;$lockdir/mysql\u0026quot;\r# The following variables are only set for letting mysql.server find things.\r# Set some defaults\rmysqld_pid_file_path=\rif test -z \u0026quot;$basedir\u0026quot;\rthen\rbasedir=/usr/local/mysql\rbindir=/usr/local/mysql/bin\rif test -z \u0026quot;$datadir\u0026quot;\rthen\rdatadir=/usr/local/mysql/data\rfi\rsbindir=/usr/local/mysql/bin\rlibexecdir=/usr/local/mysql/bin\relse\rbindir=\u0026quot;$basedir/bin\u0026quot;\rif test -z \u0026quot;$datadir\u0026quot;\rthen\rdatadir=\u0026quot;$basedir/data\u0026quot;\rfi\rsbindir=\u0026quot;$basedir/sbin\u0026quot;\rlibexecdir=\u0026quot;$basedir/libexec\u0026quot;\rfi\r# datadir_set is used to determine if datadir was set (and so should be\r# *not* set inside of the --basedir= handler.)\rdatadir_set=\r#\r# Use LSB init script functions for printing messages, if possible\r#\rlsb_functions=\u0026quot;/lib/lsb/init-functions\u0026quot;\rif test -f $lsb_functions ; then\r. $lsb_functions\relse\rlog_success_msg()\r{\recho \u0026quot; SUCCESS! $@\u0026quot;\r}\rlog_failure_msg()\r{\recho \u0026quot; ERROR! $@\u0026quot;\r}\rfi\rPATH=\u0026quot;/sbin:/usr/sbin:/bin:/usr/bin:$basedir/bin\u0026quot;\rexport PATH\rmode=$1 # start or stop\r[ $# -ge 1 ] \u0026amp;\u0026amp; shift\rother_args=\u0026quot;$*\u0026quot; # uncommon, but needed when called from an RPM upgrade action\r# Expected: \u0026quot;--skip-networking --skip-grant-tables\u0026quot;\r# They are not checked here, intentionally, as it is the resposibility\r# of the \u0026quot;spec\u0026quot; file author to give correct arguments only.\rcase `echo \u0026quot;testing\\c\u0026quot;`,`echo -n testing` in\r*c*,-n*) echo_n= echo_c= ;;\r*c*,*) echo_n=-n echo_c= ;;\r*) echo_n= echo_c='\\c' ;;\resac\rparse_server_arguments() {\rfor arg do\rcase \u0026quot;$arg\u0026quot; in\r--basedir=*) basedir=`echo \u0026quot;$arg\u0026quot; | sed -e 's/^[^=]*=//'`\rbindir=\u0026quot;$basedir/bin\u0026quot;\rif test -z \u0026quot;$datadir_set\u0026quot;; then\rdatadir=\u0026quot;$basedir/data\u0026quot;\rfi\rsbindir=\u0026quot;$basedir/sbin\u0026quot;\rlibexecdir=\u0026quot;$basedir/libexec\u0026quot;\r;;\r--datadir=*) datadir=`echo \u0026quot;$arg\u0026quot; | sed -e 's/^[^=]*=//'`\rdatadir_set=1\r;;\r--pid-file=*) mysqld_pid_file_path=`echo \u0026quot;$arg\u0026quot; | sed -e 's/^[^=]*=//'` ;;\r--service-startup-timeout=*) service_startup_timeout=`echo \u0026quot;$arg\u0026quot; | sed -e 's/^[^=]*=//'` ;;\resac\rdone\r}\rwait_for_pid () {\rverb=\u0026quot;$1\u0026quot; # created | removed\rpid=\u0026quot;$2\u0026quot; # process ID of the program operating on the pid-file\rpid_file_path=\u0026quot;$3\u0026quot; # path to the PID file.\ri=0\ravoid_race_condition=\u0026quot;by checking again\u0026quot;\rwhile test $i -ne $service_startup_timeout ; do\rcase \u0026quot;$verb\u0026quot; in\r'created')\r# wait for a PID-file to pop into existence.\rtest -s \u0026quot;$pid_file_path\u0026quot; \u0026amp;\u0026amp; i='' \u0026amp;\u0026amp; break\r;;\r'removed')\r# wait for this PID-file to disappear\rtest ! -s \u0026quot;$pid_file_path\u0026quot; \u0026amp;\u0026amp; i='' \u0026amp;\u0026amp; break\r;;\r*)\recho \u0026quot;wait_for_pid () usage: wait_for_pid created|removed pid pid_file_path\u0026quot;\rexit 1\r;;\resac\r# if server isn't running, then pid-file will never be updated\rif test -n \u0026quot;$pid\u0026quot;; then\rif kill -0 \u0026quot;$pid\u0026quot; 2\u0026gt;/dev/null; then\r: # the server still runs\relse\r# The server may have exited between the last pid-file check and now. if test -n \u0026quot;$avoid_race_condition\u0026quot;; then\ravoid_race_condition=\u0026quot;\u0026quot;\rcontinue # Check again.\rfi\r# there's nothing that will affect the file.\rlog_failure_msg \u0026quot;The server quit without updating PID file ($pid_file_path).\u0026quot;\rreturn 1 # not waiting any more.\rfi\rfi\recho $echo_n \u0026quot;.$echo_c\u0026quot;\ri=`expr $i + 1`\rsleep 1\rdone\rif test -z \u0026quot;$i\u0026quot; ; then\rlog_success_msg\rreturn 0\relse\rlog_failure_msg\rreturn 1\rfi\r}\r# Get arguments from the my.cnf file,\r# the only group, which is read from now on is [mysqld]\rif test -x \u0026quot;$bindir/my_print_defaults\u0026quot;; then\rprint_defaults=\u0026quot;$bindir/my_print_defaults\u0026quot;\relse\r# Try to find basedir in /etc/my.cnf\r# 2.注释掉conf=/etc/my.cnf\r# conf=/etc/my.cnf\rprint_defaults=\rif test -r $conf\rthen\rsubpat='^[^=]*basedir[^=]*=\\(.*\\)$'\rdirs=`sed -e \u0026quot;/$subpat/!d\u0026quot; -e 's//\\1/' $conf`\rfor d in $dirs\rdo\rd=`echo $d | sed -e 's/[ ]//g'`\rif test -x \u0026quot;$d/bin/my_print_defaults\u0026quot;\rthen\rprint_defaults=\u0026quot;$d/bin/my_print_defaults\u0026quot;\rbreak\rfi\rdone\rfi\r# Hope it's in the PATH ... but I doubt it\rtest -z \u0026quot;$print_defaults\u0026quot; \u0026amp;\u0026amp; print_defaults=\u0026quot;my_print_defaults\u0026quot;\rfi\r#\r# Read defaults file from 'basedir'. If there is no defaults file there\r# check if it's in the old (depricated) place (datadir) and read it from there\r#\rextra_args=\u0026quot;\u0026quot;\rif test -r \u0026quot;$basedir/my.cnf\u0026quot;\rthen\rextra_args=\u0026quot;-e $basedir/my.cnf\u0026quot;\rfi\r# 3.添加extra_args=\u0026quot;-c $conf\u0026quot;\rextra_args=\u0026quot;-c $conf\u0026quot;\rparse_server_arguments `$print_defaults $extra_args mysqld server mysql_server mysql.server`\r#\r# Set pid file if not given\r#\rif test -z \u0026quot;$mysqld_pid_file_path\u0026quot;\rthen\rmysqld_pid_file_path=$datadir/`hostname`.pid\relse\rcase \u0026quot;$mysqld_pid_file_path\u0026quot; in\r/* ) ;;\r* ) mysqld_pid_file_path=\u0026quot;$datadir/$mysqld_pid_file_path\u0026quot; ;;\resac\rfi\rcase \u0026quot;$mode\u0026quot; in\r'start')\r# Start daemon\r# Safeguard (relative paths, core dumps..)\rcd $basedir\recho $echo_n \u0026quot;Starting MySQL\u0026quot;\rif test -x $bindir/mysqld_safe\rthen\r# Give extra arguments to mysqld with the my.cnf file. This script\r# may be overwritten at next upgrade.\r# 4.增加配置\r$bindir/mysqld_safe --defaults-file=\u0026quot;$conf\u0026quot; --user=root --datadir=\u0026quot;$datadir\u0026quot; --pid-file=\u0026quot;$mysqld_pid_file_path\u0026quot; $other_args \u0026gt;/dev/null \u0026amp;\rwait_for_pid created \u0026quot;$!\u0026quot; \u0026quot;$mysqld_pid_file_path\u0026quot;; return_value=$?\r# Make lock for RedHat / SuSE\rif test -w \u0026quot;$lockdir\u0026quot;\rthen\rtouch \u0026quot;$lock_file_path\u0026quot;\rfi\rexit $return_value\relse\rlog_failure_msg \u0026quot;Couldn't find MySQL server ($bindir/mysqld_safe)\u0026quot;\rfi\r;;\r'stop')\r# Stop daemon. We use a signal here to avoid having to know the\r# root password.\rif test -s \u0026quot;$mysqld_pid_file_path\u0026quot;\rthen\r# signal mysqld_safe that it needs to stop\rtouch \u0026quot;$mysqld_pid_file_path.shutdown\u0026quot;\rmysqld_pid=`cat \u0026quot;$mysqld_pid_file_path\u0026quot;`\rif (kill -0 $mysqld_pid 2\u0026gt;/dev/null)\rthen\recho $echo_n \u0026quot;Shutting down MySQL\u0026quot;\rkill $mysqld_pid\r# mysqld should remove the pid file when it exits, so wait for it.\rwait_for_pid removed \u0026quot;$mysqld_pid\u0026quot; \u0026quot;$mysqld_pid_file_path\u0026quot;; return_value=$?\relse\rlog_failure_msg \u0026quot;MySQL server process #$mysqld_pid is not running!\u0026quot;\rrm \u0026quot;$mysqld_pid_file_path\u0026quot;\rfi\r# Delete lock for RedHat / SuSE\rif test -f \u0026quot;$lock_file_path\u0026quot;\rthen\rrm -f \u0026quot;$lock_file_path\u0026quot;\rfi\rexit $return_value\relse\rlog_failure_msg \u0026quot;MySQL server PID file could not be found!\u0026quot;\rfi\r;;\r'restart')\r# Stop the service and regardless of whether it was\r# running or not, start it again.\rif $0 stop $other_args; then\r$0 start $other_args\relse\rlog_failure_msg \u0026quot;Failed to stop running server, so refusing to try to start.\u0026quot;\rexit 1\rfi\r;;\r'reload'|'force-reload')\rif test -s \u0026quot;$mysqld_pid_file_path\u0026quot; ; then\rread mysqld_pid \u0026lt; \u0026quot;$mysqld_pid_file_path\u0026quot;\rkill -HUP $mysqld_pid \u0026amp;\u0026amp; log_success_msg \u0026quot;Reloading service MySQL\u0026quot;\rtouch \u0026quot;$mysqld_pid_file_path\u0026quot;\relse\rlog_failure_msg \u0026quot;MySQL PID file could not be found!\u0026quot;\rexit 1\rfi\r;;\r'status')\r# First, check to see if pid file exists\rif test -s \u0026quot;$mysqld_pid_file_path\u0026quot; ; then read mysqld_pid \u0026lt; \u0026quot;$mysqld_pid_file_path\u0026quot;\rif kill -0 $mysqld_pid 2\u0026gt;/dev/null ; then log_success_msg \u0026quot;MySQL running ($mysqld_pid)\u0026quot;\rexit 0\relse\rlog_failure_msg \u0026quot;MySQL is not running, but PID file exists\u0026quot;\rexit 1\rfi\relse\r# Try to find appropriate mysqld process\rmysqld_pid=`pidof $libexecdir/mysqld`\r# test if multiple pids exist\rpid_count=`echo $mysqld_pid | wc -w`\rif test $pid_count -gt 1 ; then\rlog_failure_msg \u0026quot;Multiple MySQL running but PID file could not be found ($mysqld_pid)\u0026quot;\rexit 5\relif test -z $mysqld_pid ; then if test -f \u0026quot;$lock_file_path\u0026quot; ; then log_failure_msg \u0026quot;MySQL is not running, but lock file ($lock_file_path) exists\u0026quot;\rexit 2\rfi log_failure_msg \u0026quot;MySQL is not running\u0026quot;\rexit 3\relse\rlog_failure_msg \u0026quot;MySQL is running but PID file could not be found\u0026quot;\rexit 4\rfi\rfi\r;;\r*)\r# usage\rbasename=`basename \u0026quot;$0\u0026quot;`\recho \u0026quot;Usage: $basename {start|stop|restart|reload|force-reload|status} [ MySQL server options ]\u0026quot;\rexit 1\r;;\resac\rexit 0\r十:修改完mysql.serve，在mysql3306文件夹下面执行 #  cd /home/mysql/mysql3306\rsupport-files/mysql.server start\r#查看是否已经启动\rnetstat -ntlp\r#将mysql3306加入服务\rcp /home/mysql/mysql3306/support-files/mysql.server /etc/init.d/mysql3306\r#开机自启\rchkconfig --add mysql3306\r#显示服务列表，如果3,4,5都是开的就说明是自启设置成功\rchkconfig --list\r#重启数据库的命令：\r/etc/init.d/mysql3306 restart\r十一:访问MySql，重置密码 #  #第二个数据库必须使用socket进入，否则默认为第一个数据库。因为配置了全局环境变量\rcd /home/mysql/mysql3306/bin/\r./mysql -uroot -p -h 127.0.0.1 --socket=../tmp/mysql.sock --port=3306\r#输入初始化的密码：a/NRxfzh;87p（上面保存的初始密码）\ralter user 'root'@'localhost' identified by 'suxia@cc2021!';\rflush privileges;\r#远程连接用户设置\ruse mysql;\rselect 'host' from user where user='root';\rupdate user set host = '%' where user ='root';\rflush privileges;\rselect 'host' from user where user='root';\r#退出\rexit\r十二:开放3306端口 #  #查看firewalld状态，如果是dead状态，即防火墙未开启\rsystemctl status firewalld\r#开启防火墙\rsystemctl start firewalld\r#确认firewalld状态\rsystemctl status firewalld\r#关闭\rsystemctl stop firewalld\r#开放端口\rfirewall-cmd --zone=public --add-port=3306/tcp --permanent\rfirewall-cmd --reload\rfirewall-cmd --zone=public --list-ports\r#关闭端口\rfirewall-cmd --zone=public --remove-port=3306/tcp --permanent firewall-cmd --reload\r十三:远程同步文件 #  rsync -av -e 'ssh -p 22' /home/mysql/mysql-8.0.21-linux-glibc2.12-x86_64.tar.xz root@ip:/home/mysql\r"});index.add({'id':101,'href':'/life/docs/databases/mysql/mysql_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B8%89%E8%8C%83%E5%BC%8F/','title':"mysql_数据库设计三范式",'section':"mysql学习笔记",'content':" 设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。\n  目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。\n 数据库三范式 #  第一范式（1NF） #   所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。简而言之，第一范式就是无重复的域。 说明：在任何一个关系数据库中，第一范式（1NF）是对关系模式的设计基本要求，一般设计中都必须满足第一范式（1NF）。不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的关系模型。  第二范式（2NF） #   在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖） 第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。例如在员工表中的身份证号码即可实现每个一员工的区分，该身份证号码即为候选键，任何一个候选键都可以被选作主键。在找不到候选键时，可额外增加属性以实现区分，如果在员工关系中，没有对其身份证号进行存储，而姓名可能会在数据库运行的某个时间重复，无法区分出实体时，设计辟如ID等不重复的编号以实现区分，被添加的编号或ID选作主键。（该主键的添加是在ER设计时添加，不是建库时随意添加） 第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。  第三范式（3NF） #   在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖） 第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足2NF的基础上，任何非主属性不得传递依赖于主属性。  巴斯-科德范式（BCNF） #   Boyce-Codd Normal Form（巴斯-科德范式）\n  在3NF基础上，任何非主属性不能对主键子集依赖（在3NF基础上消除对主码子集的依赖） 巴斯-科德范式（BCNF）是第三范式（3NF）的一个子集，即满足巴斯-科德范式（BCNF）必须满足第三范式（3NF）。通常情况下，巴斯-科德范式被认为没有新的设计规范加入，只是对第二范式与第三范式中设计规范要求更强，因而被认为是修正第三范式，也就是说，它事实上是对第三范式的修正，使数据库冗余度更小。这也是BCNF不被称为第四范式的原因。某些书上，根据范式要求的递增性将其称之为第四范式是不规范，也是更让人不容易理解的地方。而真正的第四范式，则是在设计规范中添加了对多值及依赖的要求。 定义：关系模式R\u0026lt;U,F\u0026gt;∈1FNF,若X→Y且Y不是X的子集时X必含有码，则R\u0026lt;U,F\u0026gt;∈BCNF。也就是说，关系模式R\u0026lt;U,F\u0026gt;中，若每一个决定因素都包含码，则R\u0026lt;U,F\u0026gt;∈BCNF。   由BCNF的定义可以得到结论，一个满足BCNF的关系模式有：\n  -所有非主属性对每一个码都是完全函数依赖。 -所有主属性对每一个不包含它的码也是完全函数依赖。 -没有任何属性完全函数依赖于非码的任何一组属性。 若R∈BCNF，按定义排除了任何属性对码的传递依赖与部分依赖，所以R∈3NF。[1] 一般关系型数据库设计中，达到BCNF就可以了！  #【数据库五大约束】\n 1.primary KEY:设置主键约束； 2.UNIQUE：设置唯一性约束，不能有重复值； 3.DEFAULT 默认值约束，height DOUBLE(3,2)DEFAULT 1.2 height不输入是默认为1,2 4.NOT NULL：设置非空约束，该字段不能为空； 5.FOREIGN key :设置外键约束。  【主键】 #   1.主键的注意事项？ 主键默认非空，默认唯一性约束，只有主键才能设置自动增长，自动增长一定是主键，主键不一定自动增长； 2.设置主键的方式？ 在定义列时设置：ID INT PRIMARY KEY 在列定义完之后设置：primary KEY（id）  【外键】 #   1.设置外键的注意事项：  只有INNODB的数据库引擎支持外键，修改my.ini文件设置default-storage-engine=INNODB 外键必须与参照列的数据类型必须相同（数值型要求长度和无符号都相同，字符串要求类型相同，长度可以不同）。\n  2设置外键的语法：\nCONSTRAINT 外键名 FOREIGN KEY (外键字段)REFERENCES 参照表 (参照字段) ON DELETE SET NULL ON UPDATE CASCADE 设置参照完整性\n  3.外键约束的参照操作？\n   参照表的完整性操作：当对参照表的参照字段进行删除或更新时，外键表中的外键如何应对；\n  参照操作可选值：\n   RESTRICT拒绝参照表删除或更新参照字段；\n  RESTRICT和NO ACTION相同，但这个指令只在mysql生效;\n  CASCADE删除或更新参照表的参照字段时，外键表的记录同步删除更新；\n  SET NULL 删除或更新参照表的参照字段时，外键表的外键设为NULL;\n   1NF, 字段不可再分。这个关系数据库强制了，想建立复合的字段也建立不起来。关系数据库出现之前才有这个问题。 2NF，主键依赖，就是一张表里面的字段，必须是跟主键相关的，不能把无关的数据放进来。主键依赖，实质就是，这个信息如果是对象的属性，就放进来，否则就不放。 3NF，就是不能重复存储相同的信息。这个情况，其实是在一个对象里引用了另外一个对象，这个时候，存一个引用就够了，而不是重复的存储这个对象的多个副本。 2NF和3NF的本质是，对象的属性依赖对象。数据库的主键，作用是什么？它用来唯一的标识这个对象，同时，用来给其他对象引用 引用 引用（重要的事情说三次） 所以，实战中，所有数据库都是用int类型做主键（int，或者bigint），而且，主键一律是自增，这是不成文的规则，凡是不遵守这个规则的，都是错的（虽然理论上可以）这样， 数据库写数据的时候，几乎是永远不写入同一个对象的重复信息的，需要重复的时候，只写这个对象的ID  create table Courses(\rCourseID int identity primary key,\rCourseName nvarchar(50) not null\r)\rcreate table Departments( DepartmentID int identity primary key,\tDepartmentName nvarchar(50) not null,\tHeadName nvarchar(50) not null);\rcreate table Students(\tStudentID int identity primary key,\tName nvarchar(50),\tDepartmentID int not null\tConstraint FkStudentDepartment foreign key (DepartmentID) references Departments(DepartmentID));\rcreate table Results(\tResultID int identity primary key,\tStudentID int not null,\tCourseID int not null,\tResult int not null,\rConstraint FkResultStudent foreign key (StudentID) references Students(StudentID));\r11.数据库设计基础原则：三范式 #   1）表必须有主键 2）字段内容不能是其他的字段加工而成 3）行数据不能相同  12.现今业界主流数据库设计原则：反三范式 #   1）表不是必须有主键 2）字段存一些加工后的中间的结果，冗余设计 3）记录冗余   三范式追求的目标存储空间尽量小；反三范式追求的目标是查询速度。 创建数据库设计时首先按三范式设计，然后局部优化。\n "});index.add({'id':102,'href':'/life/docs/%E8%84%9A%E6%9C%AC/npm%E9%83%A8%E5%88%86%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/','title':"npm部分插件安装问题 ",'section':"脚本",'content':" less版本过高的解决办法  解决方法：\r卸载安装的高版本的less-loader ， 【npm uninstall less-loader】，\r安装指定低版本的less-loader 【npm install less-loader@4.1.0 --save】\r webpack Cannot read property \u0026lsquo;tap\u0026rsquo; of undefined ?  解决：\r这个报错是webpack依赖重复引入导致的，由于已经有依赖中引入的webpack，然后有自己引入的webpack。\r下面是生产的依赖，将\r“webpack”: “^4.0.0-beta.3”,\r“webpack-dev-server”: “2.7.1”,\r“webpack-manifest-plugin”: “1.2.1”,\r删掉，移除node_modules。重新npm install 。再启动项目，就搞定了\r 使用webpack打包报ERROR in TypeError: Cannot read property ‘tap‘ of undefined  降低版本 webpack\r假如降为4.44.2 则\rnpm install webpack@4.44.2 -g 全局\rnpm install webpack@4.44.2 -D 局部\r less-loader模块 TypeError: this.getOptions is not a function  原因： less-loader安装的版本过高\r解决方案： 1.npm uninstall less-loader\r2.npm install less-loader@6.0.0\r less-loader模块 Module not found: Error: Can\u0026rsquo;t resolve \u0026lsquo;less-loader\u0026rsquo;报错解决  npm install less less-loader --save-dev\r webpack打包css报错：UnhandledPromiseRejectionWarning: TypeError: this.getResolve is not a function  出错原因：\rcss-loader 和 style-loader 版本过高\r解决办法：在package.json文件中降低 css-loader 和 style-loader 版本\r extract-text-webpack-plugin 打包css报错的解决  降低webpack版本\r  如\n  webpack.config.js\n  const path = require(\u0026#39;path\u0026#39;); const ExtractTextPlugin = require(\u0026#34;extract-text-webpack-plugin\u0026#34;); module.exports = { entry: \u0026#39;./src/index.js\u0026#39;, output: { path: path.resolve(__dirname, \u0026#39;dist\u0026#39;), publicPath: \u0026#39;/dist/\u0026#39;, filename: \u0026#39;bundle.js\u0026#39; }, mode: \u0026#39;production\u0026#39;, module: { rules: [ { test: /\\.css$/, //loader: [\u0026#39;style-loader\u0026#39;,\u0026#39;css-loader\u0026#39;]  use: ExtractTextPlugin.extract({ fallback: \u0026#34;style-loader\u0026#34;, use: \u0026#34;css-loader\u0026#34; }) }, { test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/, loader: \u0026#39;url-loader\u0026#39;, options: { limit: 10000*4, name: \u0026#39;[name].[ext]?[hash]\u0026#39; } } ] }, plugins: [ new ExtractTextPlugin(\u0026#34;styles.css\u0026#34;), ] };  package.json  { \u0026#34;devDependencies\u0026#34;: { \u0026#34;css-loader\u0026#34;: \u0026#34;^0.28.7\u0026#34;, \u0026#34;extract-text-webpack-plugin\u0026#34;: \u0026#34;^4.0.0-beta.0\u0026#34;, \u0026#34;file-loader\u0026#34;: \u0026#34;^1.1.4\u0026#34;, \u0026#34;style-loader\u0026#34;: \u0026#34;^0.23.1\u0026#34;, \u0026#34;url-loader\u0026#34;: \u0026#34;^0.5.8\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^4.12.0\u0026#34; } } "});index.add({'id':103,'href':'/life/docs/%E8%84%9A%E6%9C%AC/my-plugins/','title':"webpack 应用自己插件 ",'section':"脚本",'content':" webpack.config.js  const ConsoleLogOnBuildWebpackPlugin = require(\u0026#34;./src/console_log_on_build_webpack_plugin.js\u0026#34;); module.exports = { entry: { index: \u0026#34;./src/index.js\u0026#34; }, mode: \u0026#39;development\u0026#39;, plugins: [ new ConsoleLogOnBuildWebpackPlugin() ] };  package.json  { \u0026#34;name\u0026#34;: \u0026#34;demo08\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34; : \u0026#34;webpack\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;webpack\u0026#34;: \u0026#34;^5.44.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^4.7.2\u0026#34; } }  src console_log_on_build_webpack_plugin.js index.js  // console_log_on_build_webpack_plugin.js const pluginName = \u0026#39;ConsoleLogOnBuildWebpackPlugin\u0026#39;; class ConsoleLogOnBuildWebpackPlugin { apply(compiler) { compiler.hooks.run.tap(pluginName, compilation =\u0026gt; { console.log(\u0026#34;webpack 构建过程开始！\u0026#34;); }); } } module.exports = ConsoleLogOnBuildWebpackPlugin; //index.js console.log(\u0026#34;print \u0026#34;+ Math.random()) ;  命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo08\u0026gt;npm add -D webpack webpack-cli npm WARN demo08@1.0.0 No description npm WARN demo08@1.0.0 No repository field. + webpack-cli@4.7.2 + webpack@5.45.1 added 121 packages from 155 contributors in 6.969s 16 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\study\\webpack\\demo08\u0026gt;npm run build \u0026gt; demo08@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo08 \u0026gt; webpack webpack 构建过程开始！ asset index.js 1.22 KiB [emitted] (name: index) ./src/index.js 38 bytes [built] [code generated] webpack 5.45.1 compiled successfully in 75 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo08\u0026gt;node dist/index.js print 0.9374784084603167 D:\\IdeaProjects\\cycle\\study\\webpack\\demo08\u0026gt; "});index.add({'id':104,'href':'/life/docs/databases/mysql/mysql%E5%87%BD%E6%95%B0/','title':"mysql函数",'section':"mysql学习笔记",'content':"日期函数 #    返回当前日期，只包含年月日 select curdate()\n  返回当前时间，只包含时分秒 select curtime()\n  返回当前的日期和时间，年月日时分秒全都包含 select now()\n  提取具体日期类型 #   year() yearweek() ,hour(),month()等等   select year(now()) as \u0026lsquo;年\u0026rsquo;,yearweek(now()) as \u0026lsquo;年,周\u0026rsquo;,hour(now()) as \u0026lsquo;周\u0026rsquo;,minute(now()) as \u0026lsquo;小时\u0026rsquo;,month(now()) \u0026lsquo;月\u0026rsquo;,monthname(now()) \u0026lsquo;月名字\u0026rsquo;,dayofmonth(now()) as \u0026lsquo;当月多少日\u0026rsquo;   EXTRACT() 函数用于返回日期/时间的单独部分，比如年、月、日、小时、分钟等等。   (select extract(year from now()),extract(month from now()),extract(day from now()),extract(hour from now()),extract(minute from now()))  日期格式 #   DATE_FORMAT(date,fmt)函数：按字符串 fmt 格式化日期 date 值 (select date_format(now(),'%Y-%m-%d'))  日期运算 #    date_add(date,interval number dateType) example (select date_add(now(),interval 2 year) as \u0026lsquo;add 2 year date\u0026rsquo;) (select date_add(now(),interval -2 hour) as \u0026lsquo;add 2\u0026rsquo;)也可以传入负数即回到过去某个时间\n  date_sub(date,interval number dateType) example (select date_sub(now(),interval 2 year))\n  datediff(date,date) 计算两个日期之间相差的天数 (select datediff(now(),date_add(now(),interval 2 month)) as \u0026lsquo;计算两个日期之间相差天数\u0026rsquo;)\n  流程函数 #   if 函数  create table salary (userid int,salary decimal(9,2));\rinsert into salary values(1,1000),(2,2000), (3,3000),(4,4000),(5,5000), (1,null);\r (select if(s.salary\u0026gt;2000,\u0026lsquo;high\u0026rsquo;,\u0026lsquo;low\u0026rsquo;),s.salary from salary s)   IFNULL(value1,value2)函数：这个函数一般用来替换 NULL 值的，我们知道 NULL 值是不能参与数值运算的   (select ifnull(s.salary,0),s.salary from salary s)当检测到值的时候用0代替  数值函数 #   ABS(x)函数：返回 x 的绝对值   select abs(-56),abs(round(rand()*10))   cell(x)函数 返回大于 x 的最大整数值 相当于向上取   SELECT ceil(0.6),ceiling(0.3),ceil(round(rand()))   floor()返回小于 x 的最大整数值 相当于向下取   SELECT floor(0.6),floor(0.3),floor(round(rand()))   mod(x,y) 返回 x/y 的模   SELECT mod(5,3)   rand() 返回 0 到 1 内的随机值 ROUND(x,y) 返回参数 x 的四舍五入的有 y 位小数的值   SELECT round(2.5,3)   sum()函数   select sum(f.f_price) as \u0026lsquo;总价格\u0026rsquo; from fruits f  字符串函数 #   CANCAT(S1,S2,…Sn) 连接 S1,S2,…Sn 为一个字符串   SELECT concat(\u0026lsquo;hello\u0026rsquo;,\u0026lsquo;wrold\u0026rsquo;),concat(curdate(),' \u0026lsquo;,curtime())   INSERT(str,x,y,instr) 将字符串 str 从第 x 位置开始，y 个字符长的子串替换为字符串 instr(可以用作修改和删除以及增加)   SELECT insert(\u0026lsquo;Highlights of Premier Li'\u0026rsquo;s news conference\u0026rsquo;,11,0,'\u0026mdash;') 在index=11 取0个字符串替换为xxx   REPEAT(str,x) 返回 str 重复 x 次的结果   select REPEAT(\u0026lsquo;Tech aims to help restless sleepers \\n\u0026rsquo;,3) 字符串重复3次   REPLACE(str,a,b)函数：用字符串 b 替换字符串 str 中所有出现的字符串 a。   select replace(\u0026lsquo;hello_world!\u0026rsquo;,'_\u0026rsquo;,' \u0026lsquo;) 把下划线替换为空格   SUBSTRING(str,x,y)函数：返回从字符串 str 中的第 x 位置起 y 个字符长度的字串。此函数经常用来对给定字符串进行字串的提取(ps也可以用作随机字符串)   select substring(\u0026lsquo;Century-old folding fan store attracts foreign apprentice\u0026rsquo;,12,8) 截取字符串函数   length() 获取字符串长度 select length(''+uuid_short()) as uuidShort , length(uuid()) 这里使用了mysql的uuid  "});index.add({'id':105,'href':'/life/docs/%E8%84%9A%E6%9C%AC/webpack%E7%83%AD%E6%9B%B4%E6%96%B0/','title':"webpack 热更新 ",'section':"脚本",'content':" package.json  { \u0026#34;name\u0026#34;: \u0026#34;demo09\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;webpack-dev-server\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;html-webpack-plugin\u0026#34;: \u0026#34;^5.3.2\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^5.45.1\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^3.3.12\u0026#34;, \u0026#34;webpack-dev-server\u0026#34;: \u0026#34;^3.11.2\u0026#34; } }  webpack.config.js  const path = require(\u0026#34;path\u0026#34;); const webpack = require(\u0026#34;webpack\u0026#34;); const HtmlWebpackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;); module.exports = { entry: { \u0026#34;index\u0026#34;: \u0026#34;./src/index.js\u0026#34; }, mode: \u0026#34;development\u0026#34;, output: { path: path.resolve(__dirname, \u0026#39;dist\u0026#39;) }, plugins: [ new HtmlWebpackPlugin({ title : \u0026#34;hot module replacement\u0026#34; }), new webpack.HotModuleReplacementPlugin() ], devServer: { contentBase: path.join(__dirname, \u0026#39;dist\u0026#39;), compress: true, port: 9000, hot:true } }  src/index.js  function randomString(e) { e = e || 32; var t = \u0026#34;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678\u0026#34;, a = t.length, n = \u0026#34;\u0026#34;; for (i = 0; i \u0026lt; e; i++) n += t.charAt(Math.floor(Math.random() * a)); return n; } console.log(\u0026#34;---\u0026#34; + randomString(22) + \u0026#34;----\u0026#34;); const el = document.createElement(\u0026#34;div\u0026#34;) ; el.innerText = randomString(20) ; document.body.append(el) ;  命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm init -y Wrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\\package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo09\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm install --save-dev html-webpack-plugin npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN html-webpack-plugin@5.3.2 requires a peer of webpack@^5.20.0 but none is installed. You must install peer dependencies yourself. npm WARN demo09@1.0.0 No description npm WARN demo09@1.0.0 No repository field. + html-webpack-plugin@5.3.2 added 37 packages from 56 contributors in 4.007s 10 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm add -D webpack webpack-cli npm WARN demo09@1.0.0 No description npm WARN demo09@1.0.0 No repository field. + webpack@5.45.1 + webpack-cli@4.7.2 added 117 packages from 155 contributors in 8.096s 26 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm add -D webpack-dev-server npm WARN deprecated chokidar@2.1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies. npm WARN deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2. npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated npm WARN deprecated querystring@0.2.0: The npm WARN demo09@1.0.0 No description npm WARN demo09@1.0.0 No repository field. npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026#34;os\u0026#34;:\u0026#34;darwin\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;any\u0026#34;} (current: {\u0026#34;os\u0026#34;:\u0026#34;win32\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;x64\u0026#34;}) + webpack-dev-server@3.11.2 added 366 packages from 222 contributors in 22.282s 38 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm i --save-dev npm WARN demo09@1.0.0 No description npm WARN demo09@1.0.0 No repository field. npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026#34;os\u0026#34;:\u0026#34;darwin\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;any\u0026#34;} (current: {\u0026#34;os\u0026#34;:\u0026#34;win32\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;x64\u0026#34;}) up to date in 1.964s 38 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;webpack asset index.js 40.2 KiB [emitted] (name: index) asset index.html 243 bytes [emitted] runtime modules 25.8 KiB 9 modules ./src/index.js 412 bytes [built] [code generated] webpack 5.45.1 compiled successfully in 136 ms D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;  到目前为止未出现任何问题\n  执行运行开发服务器命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm run dev \u0026gt; demo09@1.0.0 dev D:\\IdeaProjects\\cycle\\study\\webpack\\demo09 \u0026gt; webpack-dev-server internal/modules/cjs/loader.js:905 throw err; ^ Error: Cannot find module \u0026#39;webpack-cli/bin/config-yargs\u0026#39; Require stack: - D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\\node_modules\\webpack-dev-server\\bin\\webpack-dev-server.js at Function.Module._resolveFilename (internal/modules/cjs/loader.js:902:15) at Function.Module._load (internal/modules/cjs/loader.js:746:27) at Module.require (internal/modules/cjs/loader.js:974:19) at require (internal/modules/cjs/helpers.js:92:18) at Object.\u0026lt;anonymous\u0026gt; (D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\\node_modules\\webpack-dev-server\\bin\\webpack-dev-server.js:65:1) at Module._compile (internal/modules/cjs/loader.js:1085:14) at Object.Module._extensions..js (internal/modules/cjs/loader.js:1114:10) at Module.load (internal/modules/cjs/loader.js:950:32) at Function.Module._load (internal/modules/cjs/loader.js:790:14) at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:76:12) { code: \u0026#39;MODULE_NOT_FOUND\u0026#39;, requireStack: [ \u0026#39;D:\\\\IdeaProjects\\\\cycle\\\\study\\\\webpack\\\\demo09\\\\node_modules\\\\webpack-dev-server\\\\bin\\\\webpack-dev-server.js\u0026#39; ] } npm ERR! code ELIFECYCLE npm ERR! errno 1 npm ERR! demo09@1.0.0 dev: `webpack-dev-server` npm ERR! Exit status 1 npm ERR! npm ERR! Failed at the demo09@1.0.0 dev script. npm ERR! This is probably not a problem with npm. There is likely additional logging output above. npm ERR! A complete log of this run can be found in: npm ERR! C:\\Users\\dell\\AppData\\Roaming\\npm-cache\\_logs\\2021-07-18T08_20_36_958Z-debug.log   找到解决办法就是降低webpack-cli版本\n  接下来的命令\n  D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm uninstall webpack-cli npm WARN demo09@1.0.0 No description npm WARN demo09@1.0.0 No repository field. npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026#34;os\u0026#34;:\u0026#34;darwin\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;any\u0026#34;} (current: {\u0026#34;os\u0026#34;:\u0026#34;win32\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;x64\u0026#34;}) removed 40 packages in 2.099s 33 packages are looking for funding run `npm fund` for details D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm install webpack-cli@3 -D npm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself. npm WARN demo09@1.0.0 No description npm WARN demo09@1.0.0 No repository field. npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026#34;os\u0026#34;:\u0026#34;darwin\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;any\u0026#34;} (current: {\u0026#34;os\u0026#34;:\u0026#34;win32\u0026#34;,\u0026#34;arch\u0026#34;:\u0026#34;x64\u0026#34;}) + webpack-cli@3.3.12 added 42 packages from 27 contributors in 5.207s 33 packages are looking for funding run `npm fund` for details  运行  D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt;npm run dev \u0026gt; demo09@1.0.0 dev D:\\IdeaProjects\\cycle\\study\\webpack\\demo09 \u0026gt; webpack-dev-server i ｢wds｣: Project is running at http://localhost:9000/ i ｢wds｣: webpack output is served from / i ｢wds｣: Content not from webpack is served from D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\\dist i ｢wdm｣: asset index.js 407 KiB [emitted] (name: index) asset index.html 243 bytes [emitted] runtime modules 25.9 KiB 10 modules cacheable modules 339 KiB modules by path ./node_modules/webpack-dev-server/client/ 20.9 KiB 10 modules modules by path ./node_modules/html-entities/lib/*.js 61 KiB 5 modules modules by path ./node_modules/webpack/hot/*.js 4.3 KiB 4 modules modules by path ./node_modules/url/ 37.4 KiB ./node_modules/url/url.js 22.8 KiB [built] [code generated] ./node_modules/url/node_modules/punycode/punycode.js 14.3 KiB [built] [code generated] ./node_modules/url/util.js 314 bytes [built] [code generated] modules by path ./node_modules/querystring/*.js 4.51 KiB ./node_modules/querystring/index.js 127 bytes [built] [code generated] ./node_modules/querystring/decode.js 2.34 KiB [built] [code generated] ./node_modules/querystring/encode.js 2.04 KiB [built] [code generated] ./node_modules/webpack/hot/ sync nonrecursive ^\\.\\/log$ 170 bytes [built] [code generated] webpack 5.45.1 compiled successfully in 424 ms i ｢wdm｣: Compiled successfully.   链接http://localhost:9000/得到结果\n  结束 webpack-dev-server\n  ctrl + c 终止批处理操作吗(Y/N)? Y D:\\IdeaProjects\\cycle\\study\\webpack\\demo09\u0026gt; "});index.add({'id':106,'href':'/life/docs/think/not_control/','title':"失控",'section':"思维",'content':" 失控  "});index.add({'id':107,'href':'/life/docs/databases/mysql/mysql%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/','title':"mysql存储引擎",'section':"mysql学习笔记",'content':"MySQL 存储引擎概述 #   MySQL 5.0 支持的存储引擎包括 MyISAM、 InnoDB、 BDB、 MEMORY、 MERGE、 EXAMPLE、 NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED 等，其中 InnoDB 和 BDB 提供事务安 全表，其他存储引擎都是非事务安全表。\n  查看当前引擎 show ENGINES  MyISAM存储引擎 #   不支持事务、也不支持外键，优势是访问速度快，对事务完整性没有 要求或者以select，insert为主的应用基本上可以用这个引擎来创建表\n  支持3种不同的存储格式，分别是：静态表；动态表；压缩表   静态表：表中的字段都是非变长字段，这样每个记录都是固定长度的，优点存储非常迅速，容易缓存，出现故障容易恢复；缺点是占用的空间通常比动态表多（因为存储时会按照列的宽度定义补足空格）ps：在取数据的时候，默认会把字段后面的空格去掉，如果不注意会把数据本身带的空格也会忽略。 动态表：记录不是固定长度的，这样存储的优点是占用的空间相对较少；缺点：频繁的更新、删除数据容易产生碎片，需要定期执行OPTIMIZE TABLE或者myisamchk-r命令来改善性能 压缩表：因为每个记录是被单独压缩的，所以只有非常小的访问开支\n  动态表：记录不是固定长度的，这样存储的优点是占用的空间相对较少；缺点：频繁的更新、删除数据容易产生碎片，需要定期执行OPTIMIZE TABLE或者myisamchk-r命令来改善性能\n  压缩表：因为每个记录是被单独压缩的，所以只有非常小的访问开支\n InnoDB存储引擎 #   nnoDB 存储表和索引有两种方式\n  使用共享表空间存储，这种方式创建的表的表结构保存在.frm 文件中，数据和索引 保存在 innodb_data_home_dir 和 innodb_data_file_path 定义的表空间中，可以是 多个文件。 使用多表空间存储，这种方式创建的表的表结构仍然保存在.frm 文件中，但是每个 表的数据和索引单独保存在.ibd 中。如果是个分区表，则每个分区对应单独的.ibd 文件，文件名是“表名+分区名” ，可以在创建分区的时候指定每个分区的数据文件 的位置，以此来将表的 IO 均匀分布在多个磁盘 多表空间的数据文件没有大小限制，不需要设置初始大小，也不需要设置文件的最大限 制、扩展大小等参数。 对于使用多表空间特性的表，可以比较方便地进行单表备份和恢复操作，但是直接复 制.ibd 文件是不行的，因为没有共享表空间的数据字典信息，直接复制的.ibd 文件和.frm 文 件恢复时是不能被正确识别的，但可以通过以下命令：  ALTER TABLE tbl_name DISCARD TABLESPACE;\rALTER TABLE tbl_name IMPORT TABLESPACE;\rMEMORY存储引擎 #   Memory存储引擎使用存在于内存中的内容来创建表。每个memory表只实际对应一个磁盘文件，格式是.frm。 memory类型的表访问非常的快，因为它的数据是放在内存中的，并且默认使用HASH索引，但是一旦服务关闭，表中的数据就会丢失掉。 MEMORY存储引擎的表可以选择使用BTREE索引或者HASH索引，两种不同类型的索引有其不同的使用范围\n  Hash索引优点： Hash 索引结构的特殊性，其检索效率非常高，索引的检索可以一次定位，不像B-Tree 索引需要从根节点到枝节点，最后才能访问到页节点这样多次的IO访问，所以 Hash 索引的查询效率要远高于 B-Tree 索引。 Hash索引缺点： 那么不精确查找呢，也很明显，因为hash算法是基于等值计算的，所以对于“like”等范围查找hash索引无效，不支持；\n  Memory类型的存储引擎主要用于哪些内容变化不频繁的代码表，或者作为统计操作的中间结果表，便于高效地对中间结果进行分析并得到最终的统计结果，。 对存储引擎为memory的表进行更新操作要谨慎，因为数据并没有实际写入到磁盘中，所以一定要对下次重新启动服务后如何获得这些修改后的数据有所考虑。\n MERGE存储引擎 #   Merge存储引擎是一组MyISAM表的组合，这些MyISAM表必须结构完全相同，merge表本身并没有数据，对merge类型的表可以进行查询，更新，删除操作，这些操作实际上是对内部的MyISAM表进行的。\n "});index.add({'id':108,'href':'/life/docs/%E8%84%9A%E6%9C%AC/webpack-other-loader/','title':"webpack 其他 loader ",'section':"脚本",'content':"url-loader file-loader #   package.json  { \u0026#34;name\u0026#34;: \u0026#34;demo10\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;webpack.config.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;webpack-dev-server\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;css-loader\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;file-loader\u0026#34;: \u0026#34;^6.2.0\u0026#34;, \u0026#34;html-webpack-plugin\u0026#34;: \u0026#34;^5.3.2\u0026#34;, \u0026#34;less\u0026#34;: \u0026#34;^4.1.1\u0026#34;, \u0026#34;less-loader\u0026#34;: \u0026#34;^10.0.1\u0026#34;, \u0026#34;style-loader\u0026#34;: \u0026#34;^3.1.0\u0026#34;, \u0026#34;url-loader\u0026#34;: \u0026#34;^2.2.0\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^5.45.1\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^3.3.12\u0026#34;, \u0026#34;webpack-dev-server\u0026#34;: \u0026#34;^3.11.2\u0026#34; } }  webpack.config.js  const path = require(\u0026#34;path\u0026#34;); const webpack = require(\u0026#34;webpack\u0026#34;); const HtmlWebpackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;); module.exports = { entry: { \u0026#34;index\u0026#34;: \u0026#34;./src/main.js\u0026#34; }, mode: \u0026#34;development\u0026#34;, output: { path: path.resolve(__dirname, \u0026#39;dist\u0026#39;), // publicPath: \u0026#39;dist/\u0026#39; ,  assetModuleFilename: \u0026#39;images/[hash][ext][query]\u0026#39; , // filename: \u0026#39;[name].js\u0026#39;,  }, module : { rules: [ { test: /.css$/, use: [\u0026#34;style-loader\u0026#34;, \u0026#34;css-loader\u0026#34;] , }, { test: /.less$/, use: [\u0026#34;style-loader\u0026#34;, \u0026#34;css-loader\u0026#34;,\u0026#34;less-loader\u0026#34;] , }, { test: /\\.(png|jpg|gif)$/,//匹配png/jpg/gif格式图片  use: [ { loader: \u0026#39;url-loader\u0026#39;, options: { limit: 8192,//图片小于8KB时候将图片转成base64字符串，大于8KB需要使用file-loader  name: \u0026#39;[name].[hash:8].[ext]\u0026#39;//img表示文件父目录，[name]表示文件名,[hash:8]表示将hash截取8位[ext]表示后缀  } } ] } ] } , plugins: [ new HtmlWebpackPlugin({ title : \u0026#34;hot module replacement\u0026#34; }), new webpack.HotModuleReplacementPlugin() ], devServer: { contentBase: path.join(__dirname, \u0026#39;dist\u0026#39;), compress: true, port: 9000, hot:true } }  目录  ▸\\demo10\r▸ \\demo10\\dist\r▸ \\demo10\\dist\\beautifulGirl.ee61b496.jpg\r▸ \\demo10\\dist\\big.95b47a61.jpg\r▸ \\demo10\\dist\\index.html\r▸ \\demo10\\dist\\index.js\r▸ \\demo10\\dist\\small.af5d0583.jpg\r▸ \\demo10\\package.json\r▸ \\demo10\\src\r▸ \\demo10\\src\\css\r▸ \\demo10\\src\\css\\normal.css\r▸ \\demo10\\src\\css\\special.less\r▸ \\demo10\\src\\img\r▸ \\demo10\\src\\img\\beautifulGirl.jpg\r▸ \\demo10\\src\\img\\big.jpg\r▸ \\demo10\\src\\img\\small.jpg\r▸ \\demo10\\src\\js\r▸ \\demo10\\src\\js\\utils.js\r▸ \\demo10\\src\\main.js\r▸ \\demo10\\webpack.config.js\r 命令  D:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm init -y\rWrote to D:\\IdeaProjects\\cycle\\study\\webpack\\demo10\\package.json:\r{\r\u0026quot;name\u0026quot;: \u0026quot;demo10\u0026quot;,\r\u0026quot;version\u0026quot;: \u0026quot;1.0.0\u0026quot;,\r\u0026quot;description\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;main\u0026quot;: \u0026quot;webpack.config.js\u0026quot;,\r\u0026quot;scripts\u0026quot;: {\r\u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot;\r},\r\u0026quot;keywords\u0026quot;: [],\r\u0026quot;author\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;license\u0026quot;: \u0026quot;ISC\u0026quot;\r}\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D webpack webpack-cli@3.3.12\rnpm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated\rnpm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated\rnpm notice created a lockfile as package-lock.json. You should commit this file.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\r+ webpack@5.45.1\r+ webpack-cli@3.3.12\radded 259 packages from 205 contributors in 10.071s\r11 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D webpack webpack-cli\rnpm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated\rnpm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\r+ webpack-cli@3.3.12\r+ webpack@5.45.1\rupdated 2 packages in 6.122s\r1 package is looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D css-loader style-loader less-loader\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN less-loader@10.0.1 requires a peer of less@^3.5.0 || ^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\r+ less-loader@10.0.1\r+ css-loader@6.1.0\r+ style-loader@3.1.0\radded 18 packages from 49 contributors in 2.728s\r15 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D file-loader\rnpm WARN less-loader@10.0.1 requires a peer of less@^3.5.0 || ^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\r+ file-loader@6.2.0\radded 3 packages from 5 contributors in 2.354s\r16 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D html-webpack-plugin\rnpm WARN less-loader@10.0.1 requires a peer of less@^3.5.0 || ^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\r+ html-webpack-plugin@5.3.2\radded 33 packages from 19 contributors in 3.392s\r26 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D webpack-dev-server\rnpm WARN deprecated chokidar@2.1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.\rnpm WARN deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2.\rnpm WARN deprecated querystring@0.2.0: The\rnpm WARN less-loader@10.0.1 requires a peer of less@^3.5.0 || ^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\rnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents):\rnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026quot;os\u0026quot;:\u0026quot;darwin\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;any\u0026quot;} (current: {\u0026quot;os\u0026quot;:\u0026quot;win32\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;x64\u0026quot;})\r+ webpack-dev-server@3.11.2\radded 204 packages from 137 contributors in 13.658s\r38 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm i --save-dev\rnpm WARN less-loader@10.0.1 requires a peer of less@^3.5.0 || ^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\rnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents):\rnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026quot;os\u0026quot;:\u0026quot;darwin\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;any\u0026quot;} (current: {\u0026quot;os\u0026quot;:\u0026quot;win32\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;x64\u0026quot;})\rup to date in 1.955s\r38 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D url-loader@2.2.0\rnpm WARN less-loader@10.0.1 requires a peer of less@^3.5.0 || ^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN url-loader@2.2.0 requires a peer of webpack@^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\rnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents):\rnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026quot;os\u0026quot;:\u0026quot;darwin\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;any\u0026quot;} (current: {\u0026quot;os\u0026quot;:\u0026quot;win32\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;x64\u0026quot;})\r+ url-loader@2.2.0\radded 3 packages from 3 contributors in 2.921s\r39 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D less\rnpm WARN url-loader@2.2.0 requires a peer of webpack@^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\rnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents):\rnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026quot;os\u0026quot;:\u0026quot;darwin\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;any\u0026quot;} (current: {\u0026quot;os\u0026quot;:\u0026quot;win32\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;x64\u0026quot;})\r+ less@4.1.1\radded 11 packages from 13 contributors in 3.771s\r39 packages are looking for funding\rrun `npm fund` for details\r//\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm add -D css-loader@3.0.0\rnpm WARN url-loader@2.2.0 requires a peer of webpack@^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN webpack-cli@3.3.12 requires a peer of webpack@4.x.x but none is installed. You must install peer dependencies yourself.\rnpm WARN css-loader@3.0.0 requires a peer of webpack@^4.0.0 but none is installed. You must install peer dependencies yourself.\rnpm WARN demo10@1.0.0 No description\rnpm WARN demo10@1.0.0 No repository field.\rnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\fsevents):\rnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {\u0026quot;os\u0026quot;:\u0026quot;darwin\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;any\u0026quot;} (current: {\u0026quot;os\u0026quot;:\u0026quot;win32\u0026quot;,\u0026quot;arch\u0026quot;:\u0026quot;x64\u0026quot;})\r+ css-loader@3.0.0\radded 13 packages from 10 contributors and removed 35 packages in 3.166s\r38 packages are looking for funding\rrun `npm fund` for details\rD:\\IdeaProjects\\cycle\\study\\webpack\\demo10\u0026gt;npm run build\r\u0026gt; demo10@1.0.0 build D:\\IdeaProjects\\cycle\\study\\webpack\\demo10\r\u0026gt; webpack\rassets by status 160 KiB [cached] 2 assets\rassets by path . 82.9 KiB\rasset index.js 82.7 KiB [emitted] (name: index)\rasset index.html 243 bytes [compared for emit]\rruntime modules 26.6 KiB 12 modules\rcacheable modules 20.8 KiB\rmodules by path ./src/ 12.6 KiB\rmodules by path ./src/css/ 5.44 KiB\rmodules by path ./src/css/*.css 2.85 KiB 2 modules\rmodules by path ./src/css/*.less 2.59 KiB 2 modules\rmodules by path ./src/img/*.jpg 6.43 KiB 3 modules\r./src/main.js 517 bytes [built] [code generated]\r./src/js/utils.js 257 bytes [built] [code generated]\rmodules by path ./node_modules/ 8.13 KiB\rmodules by path ./node_modules/style-loader/dist/runtime/*.js 5.02 KiB 6 modules\rmodules by path ./node_modules/css-loader/dist/runtime/*.js 3.11 KiB\r./node_modules/css-loader/dist/runtime/api.js 2.61 KiB [built] [code generated]\r./node_modules/css-loader/dist/runtime/getUrl.js 511 bytes [built] [code generated]\rwebpack 5.45.1 compiled successfully in 437 ms\r 重要文件内容  css/normal.css\rbody{\r/* background-color: red; */\rbackground: url(\u0026quot;../img/small.jpg\u0026quot;);\r/*background: url(\u0026quot;../img/big.jpg\u0026quot;);*/\r}\rbody {background-image:url(../img/big.jpg);}\rcss/special.less\r@fontSize:50px;//定义变量字体大小\r@fontColor:orange;//定义变量字体颜色\rbody{\rfont-size: @fontSize;\rcolor: @fontColor;\r}\rjs/utils.js\rexport default function randomString(e) {\re = e || 32;\rvar t = \u0026quot;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678\u0026quot;,\ra = t.length,\rn = \u0026quot;\u0026quot;;\rfor (i = 0; i \u0026lt; e; i++) n += t.charAt(Math.floor(Math.random() * a));\rreturn n;\r}\rmain.js\rimport img from './img/beautifulGirl.jpg';\rimport utils from './js/utils';\r//依赖css文件\rrequire('./css/normal.css');\r//依赖less文件\rrequire('./css/special.less');\r// console.log(\u0026quot;---\u0026quot; + utils.randomString(22) + \u0026quot;----\u0026quot;);\rconst el = document.createElement(\u0026quot;div\u0026quot;) ;\r// el.innerText = utils.randomString(20) ;\rel.innerText = \u0026quot;sdhsdhhds\u0026quot; ;\rdocument.body.append(el) ;\rconst elimg = document.createElement(\u0026quot;img\u0026quot;) ;\rdocument.body.append(elimg) ;\relimg.setAttribute(\u0026quot;src\u0026quot;,img) ;\rimg/beautifulGirl.jpg big.jpg small.jpg\r"});index.add({'id':109,'href':'/life/docs/databases/mysql/mysql_procedure/','title':"mysql存储过程",'section':"mysql学习笔记",'content':"MySQL mysql存储过程概述 #   存储过程是存储在数据库的一组SQL语句集，用户可以通过存储过程名和传参多次调用的程序模块。\n 特点： #   使用灵活，可以使用流控制语句，自定义变量等完成复杂的业务逻辑。 提高数据安全性，屏蔽应用程序直接对表的操作，易于进行审计。 减少网络传输。 提高代码维护的复杂度，实际使用中要评估场景是否适合。  存储过程-基本语法： (非常重要) #  CREATE\r[DEFINER = { user | CURRENT_USER }]\rPROCEDURE sp_name ([proc_parameter[,...]])\r[characteristic ...] routine_body\rproc_parameter:\r[ IN | OUT | INOUT ] param_name type\rtype:\rAny valid MySQL data type\rcharacteristic:\rCOMMENT 'string'\r| [NOT] DETERMINISTIC\rroutine_body:\rValid SQL routine statement\r-- $ 可以改为分号 假如你直接是在控制台那么建议用$\rdelimiter $ --将sql语句结束符号修改为$,这样只有sql遇到$时才开始执行\rcreate procedure 存储过程名(参数列表)\rbegin\rsql语句集合\rend$\rdelimiter ; --将结束符修改为默认的分号 例子 #  -- 创建一个表 CREATE TABLE `t_user` ( `USER_ID` int NOT NULL AUTO_INCREMENT, `USER_NAME` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, `USER_PASSWORD` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, `USER_EMAIL` char(80) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, PRIMARY KEY (`USER_ID`), KEY `IDX_NAME` (`USER_NAME`) ) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8; -- 插入2000条数据  DROP PROCEDURE IF EXISTS proc_initData;--如果存在此存储过程则删掉 DELIMITER $ CREATE PROCEDURE proc_initData() BEGIN DECLARE i INT DEFAULT 1; WHILE i\u0026lt;=2000 DO INSERT INTO t_user(USER_NAME,USER_PASSWORD,USER_EMAIL) VALUES(MD5(UUID()),MD5(UUID()), CONCAT(substring(UUID(),1,7) , \u0026#39;@\u0026#39;, substring(UUID(),4,8) ,\u0026#39;.com\u0026#39;) ); SET i = i+1; END WHILE; END $ CALL proc_initData(); -- 执行完成后 到 mysql函数中可以查到proc_initData这个函数 实际上存储过程也是一种函数  -- $ 可以用分号代替  DROP PROCEDURE IF EXISTS proc_initData;--如果存在此存储过程则删掉 DELIMITER ; CREATE PROCEDURE proc_initData() BEGIN DECLARE i INT DEFAULT 1; WHILE i\u0026lt;=3 DO INSERT INTO t_user(USER_NAME,USER_PASSWORD,USER_EMAIL) VALUES(MD5(UUID()),MD5(UUID()), CONCAT(substring(UUID(),1,7) , \u0026#39;@\u0026#39;, substring(UUID(),4,8) ,\u0026#39;.com\u0026#39;) ); SET i = i+1; END WHILE; END ; CALL proc_initData(); 查看存储结构 #  SHOW CREATE PROCEDURE proc_initData ; SHOW PROCEDURE STATUS LIKE \u0026#39;%pro%\u0026#39;; 删除存储过程 #  Drop procedure [if exists] sp_name; 例子 #  drop procedure if exists pro_insert_user; 修改存储过程 (实际无法修改 修改的是存储特征) #  -- ALTER PROCEDURE 存储过程名 [ 特征 ... ] Alter procedure proc_name[characteristic…]  特征指定了存储过程的特性，可能的取值有：\n  CONTAINS SQL 表示子程序包含 SQL 语句，但不包含读或写数据的语句。 NO SQL 表示子程序中不包含 SQL 语句。 READS SQL DATA 表示子程序中包含读数据的语句。 MODIFIES SQL DATA 表示子程序中包含写数据的语句。 SQL SECURITY { DEFINER |INVOKER } 指明谁有权限来执行。 DEFINER 表示只有定义者自己才能够执行。 INVOKER 表示调用者可以执行。 COMMENT \u0026lsquo;string\u0026rsquo; 表示注释信息。  例子 #  -- 创建 delimiter ; Alter procedure pro_t11(IN param1 varchar(255), IN param2 varchar(255), OUT result varchar(2000)) begin set result = concat(param1, \u0026#39;_---_\u0026#39;,param2); end; call pro_t11(uuid(), md5(uuid()), @param); select @param; -- 修改 ALTER PROCEDURE pro_t11 MODIFIES SQL DATA SQL SECURITY INVOKER; -- 结果 ALTER PROCEDURE pro_t11 MODIFIES SQL DATA SQL SECURITY INVOKER \u0026gt; OK \u0026gt; 时间: 0.077s 传递参数 #   语法结构\n create procedure 存储过程名([in/out/inout] 参数名 参数类型)\r...\r IN : 该参数可以作为输入，也就是需要调用方传入值 , 默认 OUT: 该参数作为输出，也就是该参数可以作为返回值 INOUT: 既可以作为输入参数，也可以作为输出参数  IN #   in类型传参示例：对于之前创建的查看db1数据库中有哪些存储过程的get_project_plan_details_count，我们可以给get_project_plan_details_count一个输入参数，实现查看项目任务数量。\n --创建table CREATE TABLE `tb_project_plan_details` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT \u0026#39;id\u0026#39;, `project_work_stage_id` int(11) DEFAULT NULL COMMENT \u0026#39;工作阶段编号\u0026#39;, `plan_id` int(11) DEFAULT NULL COMMENT \u0026#39;项目计划编号\u0026#39;, `project_id` int(11) DEFAULT NULL COMMENT \u0026#39;项目编号\u0026#39;, `project_phase_id` int(11) DEFAULT NULL COMMENT \u0026#39;任务节点编号\u0026#39;, `project_phase_details_id` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;工作内容编号\u0026#39;, `project_phase_name` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;工作事项\u0026#39;, `plan_start_date` datetime DEFAULT NULL COMMENT \u0026#39;计划开始日期\u0026#39;, `plan_end_date` datetime DEFAULT NULL COMMENT \u0026#39;计划结束日期\u0026#39;, `plan_hours` decimal(18,2) DEFAULT NULL COMMENT \u0026#39;计划工时\u0026#39;, `plan_remarks` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;计划说明\u0026#39;, `execute_user_account` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;执行人\u0026#39;, `execute_department_id` int(11) DEFAULT NULL COMMENT \u0026#39;执行部门编号\u0026#39;, `bis_enable` bit(1) DEFAULT b\u0026#39;1\u0026#39; COMMENT \u0026#39;是否启用\u0026#39;, `proportion` decimal(18,2) DEFAULT \u0026#39;100.00\u0026#39; COMMENT \u0026#39;权重占比\u0026#39;, `sorting` int(11) DEFAULT \u0026#39;1\u0026#39; COMMENT \u0026#39;排序\u0026#39;, `pid` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;上级编号\u0026#39;, `first_pid` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;第一级上级，如果为第一级则为0\u0026#39;, `bis_start` bit(1) DEFAULT b\u0026#39;0\u0026#39; COMMENT \u0026#39;任务是否已开始\u0026#39;, `process_ins_id` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;流程实例编号\u0026#39;, `task_submit_time` datetime DEFAULT NULL COMMENT \u0026#39;最终成果提交时间\u0026#39;, `task_remarks` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;工作成果描述\u0026#39;, `actual_hours` decimal(18,2) DEFAULT NULL COMMENT \u0026#39;实际工时\u0026#39;, `bis_all_submit` bit(1) DEFAULT b\u0026#39;0\u0026#39; COMMENT \u0026#39;是否整体提交\u0026#39;, `bis_again_submit` bit(1) DEFAULT b\u0026#39;0\u0026#39; COMMENT \u0026#39;是否是多次提交\u0026#39;, `status` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT \u0026#39;running\u0026#39; COMMENT \u0026#39;流程状态\u0026#39;, `bis_partake` bit(1) DEFAULT b\u0026#39;1\u0026#39; COMMENT \u0026#39;是否参与\u0026#39;, `return_details_id` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;退回前任务编号\u0026#39;, `return_process_ins_id` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;退回流程实例编号\u0026#39;, `bis_new` bit(1) DEFAULT b\u0026#39;1\u0026#39; COMMENT \u0026#39;是否最新任务\u0026#39;, `sign_filed` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;用户标识，无其它用途\u0026#39;, `bis_last_layer` bit(1) DEFAULT b\u0026#39;1\u0026#39; COMMENT \u0026#39;是否最后一个层级\u0026#39;, `return_details_reason` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;退回说明\u0026#39;, `creator` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;创建人\u0026#39;, `gmt_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT \u0026#39;创建时间\u0026#39;, `gmt_modified` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;最后更新时间，记录变化后会自动更新时间戳\u0026#39;, `project_work_stage_key` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;阶段KEY\u0026#39;, `bis_finish` bit(1) DEFAULT NULL COMMENT \u0026#39;任务是否完成\u0026#39;, `task_status` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;任务状态\u0026#39;, `select_project_tree_node` json DEFAULT NULL COMMENT \u0026#39;选择的项目树任务,json\u0026#39;, `submit_count` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;提交统计(提交了多少次-任务重做了几次)\u0026#39;, `bis_supplement` bit(1) DEFAULT b\u0026#39;0\u0026#39; COMMENT \u0026#39;是否是补充任务\u0026#39;, `other_remark` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;其他说明\u0026#39;, `new_report_number` bit(1) DEFAULT b\u0026#39;0\u0026#39; COMMENT \u0026#39;如果是报告任务，是否需要重新获取文号\u0026#39;, `task_model` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;任务类型\u0026#39;, `form_code` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;表单编号\u0026#39;, `other_task_user` json DEFAULT NULL COMMENT \u0026#39;其他任务责任人\u0026#39;, `material_class_id` int(11) DEFAULT NULL COMMENT \u0026#39;资料分类\u0026#39;, `service_bean_name` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT \u0026#39;自定义服务bean名称\u0026#39;, `track_audit_class_id` int(11) DEFAULT NULL COMMENT \u0026#39;审计事项分类\u0026#39;, `simple_task` bit(1) DEFAULT b\u0026#39;0\u0026#39; COMMENT \u0026#39;是否简单任务方式填写\u0026#39;, PRIMARY KEY (`id`) USING BTREE, KEY `index_plan_id` (`plan_id`) USING BTREE, KEY `work_stage_id_index` (`project_work_stage_id`) USING BTREE, KEY `phase_id_index` (`project_phase_id`) USING BTREE, KEY `project_id_index` (`project_id`) USING BTREE, KEY `un_index` (`submit_count`,`status`,`sorting`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=14273 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC; --准备数据 INSERT INTO `pmcc_costs`.`tb_project_plan_details`(`id`, `project_work_stage_id`, `plan_id`, `project_id`, `project_phase_id`, `project_phase_details_id`, `project_phase_name`, `plan_start_date`, `plan_end_date`, `plan_hours`, `plan_remarks`, `execute_user_account`, `execute_department_id`, `bis_enable`, `proportion`, `sorting`, `pid`, `first_pid`, `bis_start`, `process_ins_id`, `task_submit_time`, `task_remarks`, `actual_hours`, `bis_all_submit`, `bis_again_submit`, `status`, `bis_partake`, `return_details_id`, `return_process_ins_id`, `bis_new`, `sign_filed`, `bis_last_layer`, `return_details_reason`, `creator`, `gmt_created`, `gmt_modified`, `project_work_stage_key`, `bis_finish`, `task_status`, `select_project_tree_node`, `submit_count`, `bis_supplement`, `other_remark`, `new_report_number`, `task_model`, `form_code`, `other_task_user`, `material_class_id`, `service_bean_name`, `track_audit_class_id`, `simple_task`) VALUES (50, 8, 59, 14, 13, 0, \u0026#39;收集资料\u0026#39;, \u0026#39;2018-06-20 00:00:00\u0026#39;, \u0026#39;2018-06-20 00:00:00\u0026#39;, 1.00, \u0026#39;1\u0026#39;, \u0026#39;luohong\u0026#39;, 8, b\u0026#39;1\u0026#39;, 20.00, 1, 0, 0, b\u0026#39;0\u0026#39;, \u0026#39;362948\u0026#39;, \u0026#39;2018-06-20 18:21:19\u0026#39;, \u0026#39;1\u0026#39;, 1.00, b\u0026#39;0\u0026#39;, b\u0026#39;0\u0026#39;, \u0026#39;finish\u0026#39;, b\u0026#39;1\u0026#39;, 0, NULL, b\u0026#39;1\u0026#39;, NULL, b\u0026#39;1\u0026#39;, NULL, NULL, \u0026#39;2019-10-08 16:18:28\u0026#39;, \u0026#39;2019-10-08 16:18:28\u0026#39;, NULL, NULL, NULL, NULL, 0, b\u0026#39;0\u0026#39;, NULL, b\u0026#39;0\u0026#39;, NULL, NULL, NULL, NULL, NULL, NULL, b\u0026#39;0\u0026#39;); INSERT INTO `pmcc_costs`.`tb_project_plan_details`(`id`, `project_work_stage_id`, `plan_id`, `project_id`, `project_phase_id`, `project_phase_details_id`, `project_phase_name`, `plan_start_date`, `plan_end_date`, `plan_hours`, `plan_remarks`, `execute_user_account`, `execute_department_id`, `bis_enable`, `proportion`, `sorting`, `pid`, `first_pid`, `bis_start`, `process_ins_id`, `task_submit_time`, `task_remarks`, `actual_hours`, `bis_all_submit`, `bis_again_submit`, `status`, `bis_partake`, `return_details_id`, `return_process_ins_id`, `bis_new`, `sign_filed`, `bis_last_layer`, `return_details_reason`, `creator`, `gmt_created`, `gmt_modified`, `project_work_stage_key`, `bis_finish`, `task_status`, `select_project_tree_node`, `submit_count`, `bis_supplement`, `other_remark`, `new_report_number`, `task_model`, `form_code`, `other_task_user`, `material_class_id`, `service_bean_name`, `track_audit_class_id`, `simple_task`) VALUES (54, 9, 60, 14, 19, 0, \u0026#39;招标施工图\u0026#39;, \u0026#39;2018-06-20 00:00:00\u0026#39;, \u0026#39;2018-06-20 00:00:00\u0026#39;, 1.00, \u0026#39;1\u0026#39;, \u0026#39;luohong\u0026#39;, 8, b\u0026#39;1\u0026#39;, 10.00, 5, 0, 0, b\u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, NULL, NULL, NULL, b\u0026#39;0\u0026#39;, b\u0026#39;0\u0026#39;, \u0026#39;running\u0026#39;, b\u0026#39;1\u0026#39;, 0, NULL, b\u0026#39;1\u0026#39;, NULL, b\u0026#39;1\u0026#39;, NULL, NULL, \u0026#39;2019-10-08 16:18:28\u0026#39;, \u0026#39;2021-05-13 14:27:51\u0026#39;, NULL, NULL, NULL, NULL, 0, b\u0026#39;0\u0026#39;, NULL, b\u0026#39;0\u0026#39;, NULL, NULL, NULL, NULL, NULL, NULL, b\u0026#39;0\u0026#39;); INSERT INTO `pmcc_costs`.`tb_project_plan_details`(`id`, `project_work_stage_id`, `plan_id`, `project_id`, `project_phase_id`, `project_phase_details_id`, `project_phase_name`, `plan_start_date`, `plan_end_date`, `plan_hours`, `plan_remarks`, `execute_user_account`, `execute_department_id`, `bis_enable`, `proportion`, `sorting`, `pid`, `first_pid`, `bis_start`, `process_ins_id`, `task_submit_time`, `task_remarks`, `actual_hours`, `bis_all_submit`, `bis_again_submit`, `status`, `bis_partake`, `return_details_id`, `return_process_ins_id`, `bis_new`, `sign_filed`, `bis_last_layer`, `return_details_reason`, `creator`, `gmt_created`, `gmt_modified`, `project_work_stage_key`, `bis_finish`, `task_status`, `select_project_tree_node`, `submit_count`, `bis_supplement`, `other_remark`, `new_report_number`, `task_model`, `form_code`, `other_task_user`, `material_class_id`, `service_bean_name`, `track_audit_class_id`, `simple_task`) VALUES (58, 9, 60, 14, 20, 0, \u0026#39;施工图\u0026#39;, \u0026#39;2018-06-20 00:00:00\u0026#39;, \u0026#39;2018-06-20 00:00:00\u0026#39;, 1.00, \u0026#39;2\u0026#39;, \u0026#39;luohong\u0026#39;, 8, b\u0026#39;1\u0026#39;, 30.00, 9, 0, 0, b\u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;2018-06-21 11:25:08\u0026#39;, \u0026#39;1\u0026#39;, 1.00, b\u0026#39;0\u0026#39;, b\u0026#39;0\u0026#39;, \u0026#39;finish\u0026#39;, b\u0026#39;1\u0026#39;, 0, NULL, b\u0026#39;1\u0026#39;, NULL, b\u0026#39;1\u0026#39;, NULL, NULL, \u0026#39;2019-10-08 16:18:28\u0026#39;, \u0026#39;2019-10-08 16:18:28\u0026#39;, NULL, NULL, NULL, NULL, 0, b\u0026#39;0\u0026#39;, NULL, b\u0026#39;0\u0026#39;, NULL, NULL, NULL, NULL, NULL, NULL, b\u0026#39;0\u0026#39;); -- 开始  DROP PROCEDURE IF EXISTS get_project_plan_details_count; DELIMITER ; CREATE PROCEDURE get_project_plan_details_count( in custom_id int(20)) BEGIN SELECT count(id) as count FROM `tb_project_plan_details` where `project_id` = custom_id ; END ; CALL get_project_plan_details_count(14); OUT #   out类型传参示例：根据传入的身高变量，获取当前身高的所属的身材类型\n DROP PROCEDURE IF EXISTS pro_t4; create procedure pro_t4(in height int , out description varchar(100)) begin if height \u0026gt;= 180 then set description=\u0026#39;高挑\u0026#39;; elseif height \u0026gt;= 170 and height \u0026lt; 180 then set description=\u0026#39;标准\u0026#39;; else set description=\u0026#39;一般\u0026#39;; end if; end; -- 调用 call pro_t4(180,@res); select @res ; -- 在变量前添加@符号的变量叫做用户会话变量，这种的作用于是整个会话过程。 INOUT #  -- 带INOUT的存储过程  DROP PROCEDURE IF EXISTS sp_inout; DELIMITER ; CREATE PROCEDURE sp_inout(INOUT p_num INT) BEGIN SET p_num=p_num*10; END ; -- 调用并输出结果 SET @p_num=2; call sp_inout(@p_num); SELECT @p_num; 随机练习 #  -- 练习1 drop procedure if exists pro_t10 ; DELIMITER ; create procedure pro_t10(INOUT param int) begin set param = param*10; end; set @param = 2; call pro_t10(@param); select @param ; -- 练习2 drop procedure if exists pro_t11; delimiter ; create procedure pro_t11(in param1 varchar(255), in param2 varchar(255), out result varchar(2000)) begin set result = concat(param1, \u0026#39;---\u0026#39;,param2); end; call pro_t11(uuid(), md5(uuid()), @param); select @param; 存储过程体 (非常重要) #   存储过程体中可以使用各种sql语句和过程式语句的组合，来封装数据库应用中复杂的业务逻辑和处理规则，以实现数据库应用的灵活编程。下面主要介绍几个用于构造存储过程体的常用语法元素。\n 局部变量 #   在存储过程体中可以声明局部变量，用来存储存储过程体中临时结果\n DECLARE var_name[,…] type [DEFAULT value] Var_name:指定局部变量的名称 Type:用于声明局部变量的数据类型 default子句:用于为局部变量指定一个默认值。若没有指定，默认为null.\r 例如 Declare cid int(10);  使用说明 #   局部变量只能在存储过程体的begin…end语句块中声明。 局部变量必须在存储过程体的开头处声明。 局部变量的作用范围仅限于声明它的begin..end语句块，其他语句块中的语句不可以使用它。 局部变量不同于用户变量，两者区别：局部变量声明时，在其前面没有使用@符号，并且它只能在begin..end语句块中使用；而用户变量在声明时，会在其名称前面使用@符号，同时已声明的用户变量存在于整个会话之中。  例子 #  drop procedure if exists pro_add_t1; delimiter ; create procedure pro_add_t1(in a1 int,in a2 int ,out result int ) begin declare x int default 0; set x = a1 + a2; set result = x; -- 虽然可以 result = a1 + a2 但是我们为了用上局部变量还是多走一步  end; call pro_add_t1(1,2,@result) ; select @result ; set语句 #   使用set语句为局部变量赋值\n  Set var_name=expr Set cid=910;  例子 #  drop procedure if exists pro_set_example_t1; delimiter ; create procedure pro_set_example_t1(in a1 int(12),in text_v1 longtext,in f_float float(12,7),in d_double double(14,6),out result longtext) begin declare spl varchar(200) default \u0026#39; \u0026#39; ; set result = concat(a1,spl,text_v1,spl,f_float,spl,d_double) ; end; call pro_set_example_t1(1,uuid(),rand(),rand(),@result) ; select @result ; 流程控制语句 #  (1)条件判断语句 #   If语句  If search_condition then statement_list [elseif search_condition then statement_list]… [else statement_list] End if -- 参考\rif 满足条件 then\r执行语句\relseif 满足条件 then\r执行语句\relse 执行语句\rend if;\r例子 #  drop procedure if exists pro_if_example_t ; delimiter ; create procedure pro_if_example_t(in input double,inout text_value longtext) begin declare remark_ varchar(200) default \u0026#39;学生\u0026#39; ; if input \u0026gt;= 90 then set text_value = concat(\u0026#39;a+\u0026#39; ,remark_) ; elseif input\u0026lt;90 and input \u0026gt;= 80 then set text_value = concat(\u0026#39;a\u0026#39; ,remark_) ; elseif input\u0026lt;80 and input \u0026gt;= 70 then set text_value = concat(\u0026#39;a-\u0026#39; ,remark_) ; elseif input \u0026gt;= 60 and input \u0026lt; 70 then set text_value = concat(\u0026#39;b+\u0026#39; ,remark_) ; else set text_value = concat(\u0026#39;c\u0026#39; ,remark_) ; end if; end; set @input = 100*rand(); call pro_if_example_t(@input,@result) ; select @result ; -- 不能字符串和数字相加 如 \u0026#39;b+\u0026#39; + remark_ 可以考虑 concat(\u0026#39;b+\u0026#39; ,remark_) (2)循环语句 #   While语句、repeat语句和loop语句。\n while #  [begin_label:] while search_condition do Statement_list End while [end_label]\rwhile 满足的条件 do\r执行sql语句\rend while;\r例子 #  drop procedure if exists pro_example_while_t; delimiter ; create procedure pro_example_while_t(in len int,out result longtext) begin declare i int default 0; declare v_text longtext default \u0026#39;\u0026#39; ; while i \u0026lt;= len do set v_text = concat(v_text,\u0026#39;,\u0026#39;,i) , i = i+1; end while ; set result = v_text ; end ; call pro_example_while_t(200,@result) ; select @result ; -- 其他 drop procedure if exists pro_example_while_t3; delimiter ; create procedure pro_example_while_t3(in len int,out result int) begin declare total int default 0; declare i int default 0; while i \u0026lt; len do set i = i +1; set total = total + i ; end while ; set result = total ; end; call pro_example_while_t3(100,@result) ; select @result ; repeat结构 #  repeat\r执行sql语句\runtil 不满的条件\rend repeat;\r例子 #  drop procedure if exists pro_example_repeat_t; delimiter ; create procedure pro_example_repeat_t(in len_value int,out result_value longtext) begin declare i int default 0; declare v_text longtext default \u0026#39;\u0026#39; ; repeat set i = i +1; set v_text = concat( v_text,i,\u0026#39;-\u0026#39;) ; until i \u0026gt;= len_value end repeat; set result_value = v_text ; end ; call pro_example_repeat_t(200,@result) ; select @result; loop和leave语句 #  [loop标签名:] loop\r执行sql语句(sql语句中应该包括，退出循环的命令：leave loop标签名;如果没有将会造成死循环)\rend loop [loop标签名];\r例子 #  drop procedure if exists pro_loop_example_t; delimiter ; create procedure pro_loop_example_t(in len_value int, inout result int) begin declare i int default 0; declare total int default 0; label_loop:loop if i \u0026gt;= len_value then leave label_loop; end if; set i = i + 1; set total = total + i; end loop label_loop; set result = total; end; call pro_loop_example_t(100,@result) ; select @result; (3)Case 语句 #  case when 条件 then\r执行sql语句\rwhen 条件 then\r执行sql语句\r...\relse\r执行sql语句\rend case;\rdrop procedure if exists pro_case_example_t2; delimiter ; create procedure pro_case_example_t2(in number_value double, out result longtext) begin declare temp_value longtext; case when number_value \u0026gt;= 90 then set temp_value = \u0026#39;非常优秀\u0026#39;; when number_value \u0026lt; 90 and number_value \u0026gt;= 80 then set temp_value = \u0026#39;优秀\u0026#39;; when number_value \u0026lt; 80 and number_value \u0026gt;= 70 then set temp_value = \u0026#39;良\u0026#39;; when number_value \u0026lt; 70 and number_value \u0026gt;= 60 then set temp_value = \u0026#39;及格\u0026#39;; when number_value \u0026lt; 60 then set temp_value = \u0026#39;未及格\u0026#39;; end case; set result = temp_value; end; set @input = rand() * 100 + rand() * 100; call pro_case_example_t2(@input, @result); select @result; select … into 语句 (通过select … into 方式进行赋值操作) #   把选定列的值直接存储到局部变量中，语法格式\n  说明:存储过程体中的select…into语句返回的结果集只能有一行数据。\n Select col_name[,…] into var_name[,…] table_expr Col_name:用于指定列名 Var_name:用于指定要赋值的变量名 Table_expr:表示select语句中的from字句及后面的语法部分 drop procedure if exists pro_select_into_example_t2; delimiter ; create procedure pro_select_into_example_t2(out result longtext) begin declare name_value longtext; declare password_value longtext; select USER_NAME , USER_PASSWORD into name_value , password_value from `t_user` where USER_ID=\u0026#39;2019\u0026#39;; set result = concat(name_value,\u0026#39;-\u0026#39;,password_value); end; call pro_select_into_example_t2( @result); select @result; 定义处理程序 #   是事先定义程序执行过程中可能遇到的问题。并且可以在处理程序中定义解决这些问题的办法。这种方式可以提前预测可能出现的问题，并提出解决方法\n DECLARE handler_type HANDLER FOR condition_value[,…] sp_statement handler_type:CONTINUE | EXIT | UNDO Condition_value:Sqlwarning | not found | sqlexception\r handler_type(自定义程序类型)   为错误处理方式，参数取值有三个\n  CONTINUE continue 表示遇到错误不处理，继续执行 EXIT 退出 UNDO undo 撤销   表示遇到错误后，撤销之前的操作，MysqL中，暂时不支持这样的操作\n  Condition_value  drop table if EXISTS test2.t ; CREATE TABLE test2.t (s1 int,primary key (s1)); drop procedure if exists pro_handler_example_t1; delimiter ; CREATE PROCEDURE pro_handler_example_t1() BEGIN DECLARE CONTINUE HANDLER FOR SQLSTATE \u0026#39;23000\u0026#39; SET @x2 = 1; SET @x = 1; INSERT INTO test2.t VALUES (10); SET @x = 2; INSERT INTO test2.t VALUES (20); SET @x = 3; END; call pro_handler_example_t1() ; SELECT @x; 游标（光标） #   游标又称光标是用来存储查询结果集的数据类型，在存储过程和函数中可以使用光标对结果集进行循环的处理。类似高级编程语言中的集合类型。 光标的使用包括光标的声明、open、fetch和 close，其语法分别如下\n  声明光标  declare 光标名称 cursor for sql语句;\r 打开光标  open 光标名;\r 获取光标(将光标当前数据存储到变量中)  fetch 光标名 into 变量名[,变量名...];\r 关闭光标  close 光标名;\r 简单例子  drop procedure if exists pro_cursor_example_t2; delimiter ; create procedure pro_cursor_example_t2() begin declare name_value longtext; declare password_value longtext; -- 定义光标  declare get_user_data_list cursor for select USER_NAME, USER_PASSWORD from `t_user`; -- 打开光标  open get_user_data_list; -- 获取光标  fetch get_user_data_list into name_value, password_value; -- 打印 获取到的数据  select concat(\u0026#39;name: \u0026#39;,name_value,\u0026#39; password: \u0026#39;,password_value) as print_data; -- 关闭光标  close get_user_data_list; end; call pro_cursor_example_t2(); 参考1(重点)\n参考2\n参考3\n参考4\n"});index.add({'id':110,'href':'/life/docs/databases/mysql/mysql_procedure_function/','title':"mysql存储函数",'section':"mysql学习笔记",'content':"参考1(重点)\n参考2\n"});index.add({'id':111,'href':'/life/docs/databases/mysql/mysql_operation_maintenance/','title':"mysql运维",'section':"mysql学习笔记",'content':"一: 备份 #  1: 备份内容 #    数据 (数据文件或文本格式数据)\n  操作日志(binlog) (数据库变更日志)\n  2:冷备份与热备份 #    冷备份 (关闭数据库服务，完整拷贝数据文件)\n  热备份 (在不影响数据库读写服务的情况下备份数据库)\n  3:本地备份与远程备份 #    本地备份 (在数据库服务器本地进行备份)\n  远程备份 (远程连接数据库进行备份)\n  4:全量备份与增量备份 #    全量备份 (备份完整的数据库)\n  增量备份 (只备份上一次备份以来发生修改的数据)\n  5:备份周期 #   考虑因素： 数据库大小(决定备份时间) 恢复速度要求(快速or慢速) 备份方式(全量or增量)  6:常用工具及用法 #   mysqldump - 逻辑备份，热备 xtrabackup - 物理备份， 热备 Lvm/zfs snapshot - 物理备份 mydumper - 逻辑备份，热备 cp - 物理备份，冷备  常用工具及用法 - mysqldump #  -- 备份全部数据库的数据库结构 mysqldump -h localhost -p3307 -uroot -p123456 -A -d \u0026gt; D:\\data\\mysql_all.sql -- 备份全部数据库的数据和结构 mysqldump -h localhost -p3307 -uroot -p123456 -A \u0026gt; D:\\data\\mysql_all_2.sql -- 备份单个数据库的结构和数据 mysqldump -h localhost -p3307 -uroot -p123456 --databases test3 \u0026gt; D:\\data\\test3_all.sql -- 备份单个数据库的结构(当你需要备份结构和数据同时的时候移除-d 参数即可) mysqldump -h localhost -p3307 -uroot -p123456 --databases test3 -d \u0026gt; D:\\data\\test3_all_1.sql -- 备份单个数据库的数据 mysqldump -h localhost -p3307 -uroot -p123456 --databases test3 -t \u0026gt; D:\\data\\test3_data_1.sql -- 备份单个数据库的结构 mysqldump -h localhost -p3307 -uroot -p123456 test3 -d \u0026gt; D:\\data\\test3_jiegou.sql -- 备份单个数据库的结构和数据 mysqldump -h localhost -p3307 -uroot -p123456 --databases test3 \u0026gt; D:\\data\\test3.sql -- 登录数据库 mysql -h localhost -p3307 -uroot -p123456 "});index.add({'id':112,'href':'/life/docs/%E8%84%9A%E6%9C%AC/javascript/','title':"javascript ",'section':"脚本",'content':"目录 #   ECMAScript 6  "});index.add({'id':113,'href':'/life/docs/javadir/groovy/','title':"groovy 学习与使用 ",'section':" Java技术栈",'content':" Groovy是一种面向对象的动态类型语言，跟Java一样运行在JVM上。\n（注：给Java静态世界带来动态能力的语言）\n 目录 #    groovy中对象的比较以及非空判断\n  groovy使用场景\n  groovy变量\n  groovy变量和数据类型加强\n  groovy基本概念\n  groovy学习\n  groovy数据类型\n  如何在groovy中获取以另一个变量命名的变量的值\n  "});index.add({'id':114,'href':'/life/docs/javadir/tooldoc/','title':"Java公共库文档总结 ",'section':" Java技术栈",'content':"目录 #   Apache Commons 工具类介绍及简单使用 org.apache.commons.io.FilenameUtils 操作 dom4j 处理 xml Guava 基于java1.6的类库集合的扩展项目 常用 Console 调试命令 jsoup学习文档 spring工具 spring常用的工具类  "});index.add({'id':115,'href':'/life/docs/javadir/middleware/','title':"中间件 ",'section':" Java技术栈",'content':"目录 #   Redis 学习与使用  "});index.add({'id':116,'href':'/life/docs/databases/mysql_163%E8%AF%BE%E5%A0%82/%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%BE%E5%A0%82mysql_chapter1/','title':"MySQL数据库基础",'section':"网易云课堂MySQL微专业学习笔记",'content':"MySQL数据库基础 #  1.1-认识MySQL #  什么是数据库 #   计算机处理和存储的一切信息都是数据。 计算机系统中一种用于存取数据的程序。 一种：  计算机系统中有很多种能够存取数据的程序 它们各有特征和长处，有自己的适用范围。   存取：  能够保存数据避免丢失。 能够按照需求找到符合条件的数据。    为什么要使用数据库 #  数据库帮助我们解决一下数据存取难题：\n 较大数据量 网络控制 并发访问 高性能要求 事务控制 持久化和数据安全 查询数据需求逻辑复杂  数据库分类 #    关系型数据库\n MySQL Oracle SQL Server PostgreSQL    非关系型数据库\n hadoop：存放大数据 mongoDB： 文档型数据库 redis：键值型数据库 Cassandra：分布式数据库    最显著的区别：是否使用结构化查询语句（SQL）\n为什么学习MySQL #  MySQL：The world\u0026rsquo;s most popular open source database\n  最流行\n  开源\n  并不是最先进\n  前三强中唯一的开源数据库。\n  在互联网企业中占据绝对主流地位。\n  基于GPL协议开放源代码\n  社区版完全免费\n  代码允许自由的进行修改\n  易于学习：\n MySQL具备关系型数据库核心功能但是特性并不繁多。 架构设计上趋于精简。 非常适合新手学习关系型数据库，入门后可向其他数据库发展。    谁需要学习MySQL #   应用开发者 DBA  学习目标 - 应用开发者 #  有助于利用MySQL开发出性能优异的应用程序\n学习目标 - DBA #  为企业提供可靠的数据库技术保障\n1.2-轻松安装MySQL #  轻松部署MySQL #   Windows下安装MySQL  图形化工具安装， MySQL Installer   Linux（Ubuntu）下安装MySQL  包管理安装，apt-get    Windows安装时在安装中间starting server时报错解决办法是手动进入服务管理把MySQL服务的登录方式改为用本地账户且允许与桌面交互\n在Ubuntu下可以用apt-cache search mysql-server查看可用的软件包\n使用sudo apt-get install mysql-server-5.6安装MySQL5.6\n启动与停止MySQL服务：\n# 启动 sudo /etc/init.d/mysql start # 或者 sudo service mysql start # 停止 sudo /etc/init.d/mysql stop # 或者 sudo service mysql stop # 重启 sudo service mysql restart # 查看状态 sudo /etc/init.d/mysql status 1.3-MySQL数据库连接 #  工作中常用到的三种连接方式 #   Java App + JDBC client（其他语言也有，比如Python的MySQLdb） MySQL client \u0026ldquo;MySQL\u0026rdquo; utility  使用应用程序连接MySQL #   应用程序使用驱动（connector/driver）客户端连接MySQL MySQL驱动程序涵盖各种主流语言  使用命令行连接MySQL #   安装MySQL客户端软件包 设置环境变量（Linux）  如何安装MySQL-client #   从软件源安装sudo apt-get install mysql-client  验证MySQL的安装 #  mysql -V\n命令行连接MySQL的两种方式 #   Socket连接（本地连接） TCP/IP连接（远程连接）  使用Socket连接 #  # 需要指定socket文件和用户名、密码 mysql -S/tmp/mysql.sock -uroot -p 远程连接 #  # 需要指定IP和端口 mysql -h127.0.0.1 -P3306 -uroot -p 本地连接VS远程连接 #   本地连接只能在MySQL服务器上创建，常用作为MySQL状态检查，或程序和MySQL部署在一台机器上。 远程连接在MySQL服务器内外都能生效，适合应用服务器和MySQL部署在不同机器上的场景。  在Windows下用命令行连接MySQL #  mysql -hlocalhost -P3306 -uroot -p 连接进入之后可以做什么 #  # 数据库状态 status; # 展示当前连接 show processlist; 使用命令行连接MySQL的注意事项 #   socket一般存储路径为：/tmp/mysql.sock  # 如果找不到文件可以通过tcp连接进来然后通过如下命令查找 show global variables like \u0026#39;socket\u0026#39;;  socket文件的权限必须是777 不要将密码直接输入在命令行里，存在安全风险！  命令行连接MySQL的特点 #   MySQL命令行里有丰富的扩展参数 DBA运维管理工具大多使用命令行方式 多台机器可以同时操作，对于DBA来说非常有效率  使用图形客户端连接MySQL #   常用的图形客户端工具  Navicat MySQLWorkBench    图形GUI工具的优势 #   操作简单易于上手 支持图形化的导入、导出 可视化界面输出，输出可视化  总结 #   应用程序需要使用API接口连接MySQL 开发工程师可以使用图形工具连接MySQL 命令行客户端才是DBA的最爱  1.4-SQL语言入门 #  关系型数据库 #   数据存放在表中 表的每一行被称为记录 表中所有记录都有相同的字段（列）  SQL是什么 #   Structured Query Language 是一种特殊目的的编程语言，用于关系型数据库中的标准数据存取操作 与数据库进行沟通的钥匙  SQL语言与数据库 #   用SQL创建表，定义表中的字段 用SQL向表中增加，删除，修改记录 用SQL从表中查询到想要的记录 用SQL操作数据库的一切  SQL语句的分类 #     SQL语句的分类 大致用途     DDL(Data Definition Language) 创建表，删除表，修改表……   DML(Data Manipulation Language) 向表中插入记录，修改或者删除表中的记录……   select 根据条件从表中查询出想要得到的记录   DCL(Data Control Language) 控制数据库的访问权限等设置   TCL(Transaction Control Language) 控制事务进展     DDL  CREATE TABLE DROP TABLE ALTER TABLE   DML  SELECT FROM TABLE INSERT INTO TABLE UPDATE TABLE SET DELETE FROM TABLE   DCL  GRANT REVOKE   TCL  COMMIT ROLLBACK    example:\n# 查看当前有哪些数据库 show databases; # 使用名为test的数据库 use test; # 创建一张学生表 create table stu( id int(10), name varchar(20), age int(10), primary key(id)); # 每一张表都需要包含一个主键，主键唯一标识一条记录，唯一的字段，不可重复不能为空，通过`primary key`关键字来定义。 # 查看创建好的表 show create table stu; # 新加一个字段 alter table stu add column gender varchar(20); # 修改一个字段 alter table stu modify column gender varchar(40); # 删除一个字段 alter table stu drop column gender; # 删除表 drop table stu; # 查看当前数据库中的表 show tables; # 向表中插入数据 insert into stu(id,name,age) values(1,\u0026#39;pw\u0026#39;,28); # 插入全部字段时可以只写表名 insert into stu values(2,\u0026#39;nss\u0026#39;,29); # 查看刚才添加的数据,\u0026#34;*\u0026#34;代表查询全部字段 select * from stu; # 如果只想查询两个字段，则只写要查询的字段名 select name, age from stu; # 也可以根据某个条件进行查询，比如只查询id为1的记录 select name age from stu where id=1; # 更新语句 update stu set age=29 where id=1; # 删除表中的数据 delete from stu where id=1; 1.5-认识DBA #  什么是DBA #  DBA是数据库管理员，就像是足球队的守门员，是业务最后一道屏障，是业务稳定运行的基石，可以提供更畅快的用户体验\n为什么需要DBA #   小公司  没有专职DBA 但肯定有懂数据库的人   大公司  专职DBA 数据存储技术专家    互联网业务有以下严格要求：\n 高性能（数据库是重要的一环） 高可用（需要业务不中断的运行） 可扩展（支撑海量数据和业务，数据库拓展） 安全性（核心业务数据敏感）  没有DBA，就没有稳定的数据库，请求变慢，数据丢失，安全问题，用户投诉，无穷无尽\nDBA要做哪些工作 #   基础运维工作  安装部署 监控 故障处理   安全运维工作  数据备份与恢复 安全访问、安全漏洞 审计   性能调优  数据库优化 容量评估、软硬件升级   开发支持工作  存储方案制定 数据库设计 数据库变更、SQL Review   流程与培训  数据库开发规范 运维流程标准化 业务培训    DBA需要哪些技能 #   专业技能  数据库原理 Linux与Shell 计算机体系结构 网络原理 数据库系统与操作 服务器硬件 业务架构设计   软技能  责任心、执行力 坚韧、抗压 学习与沟通能力 正直、诚信 耐心，注重细节 分析能力 团队协作    DBA如何发展 #   小公司or大公司 发展通道：  DBA -\u0026gt; 业务架构师 DBA -\u0026gt; 运维专家 DBA -\u0026gt; 数据库研发    小结 #   认识DBA 管理好数据库 DBA工作很重要 专业技能与软技能并重 不错的发展前景 互联网公司很缺优秀的DBA  "});index.add({'id':117,'href':'/life/docs/databases/mysql_163%E8%AF%BE%E5%A0%82/%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%BE%E5%A0%82mysql_chapter2/','title':"MySQL数据库对象与应用",'section':"网易云课堂MySQL微专业学习笔记",'content':"MySQL数据库对象与应用 #  2.1-MySQL数据类型 #  Number不止一种 #   整形 浮点型  整形 #   INT SMALLINT MEDIUMINT BIGINT     type Storage Minumun Value Maximum Value      (Bytes) (Signed/Unsigned) (Signed/Unsigned)   TINYINT 1 -128 127     0 255   SMALLINT 2 -32768 32767     0 65535   MEDIUMINT 3 -8388608 8388607     0 16777215   INT 4 -2147483648 2147483647     0 4294967295   BIGINT 8 -9223372036854775808 9223372036854775807     0 18446744073709551615    老生常谈的问题 #  int(11) VS int(21) 存储空间，还是存储范围有区别？\n答案是：两者完全一样，只是在显示的时候补全0的位数不一样。\n可以通过下面的例子来验证：\ncreate table t(a int(11) zerofill, b int(21) zerofill); insert into t values (1, 1); select * from t; MySQL默认是不带0补全的。\n只是在一些特殊情况下两者显示有区别，其本质完全一样。\n浮点型 #   FLOAT(M, D) DOUBLE(M, D)     属性 存储空间 精度 精确性     Float 4 bytes 单精度 非精确   Double 8 bytes 双精度 比Float精度高    精度丢失问题 #   精度丢失  一个例子：\ncreate table t(a int(11), b float(7, 4)); insert into t values (2, 123.12345); select * from t; 定点数-更精确的数字类型 #   DECIMAL  高精度的数据类型，常用来存储交易相关的数据 DECIMAL(M,N).M代表总精度，N代表小数点右侧的位数（标度） 1 \u0026lt; M \u0026lt; 254, 0 \u0026lt; N \u0026lt; 60; 存储空间变长    性别、省份信息 #  一般使用tinyint、char(1)、enum类型。\n经验之谈 #   存储性别、省份、类型等分类信息时选择TINYINT或者ENUM BIGINT存储空间更大，INT和BIGINT之间通常选择BIGINT 交易等高精度数据选择使用DECIMAL  存储用户名的属性 #   CHAR VARCHAR TEXT  CAHR与VARCHAR #   CHAR和VARCHAR存储的单位都是字符 CHAR存储定长，容易造成空间的浪费 VARCHAR存储变长，节省存储空间  字符与字节的区别 #     编码\\输入字符串 网易 netease     gbk(双字节) varchar(2)/4 bytes varchar(7)/7 bytes   utf8(三字节) varchar(2)/6 bytes varchar(7)/7 bytes   utf8mb4(四字节) varchar(2) ? varchar(7)/7 bytes    对于utf8mb4号称占用四字节但是并不绝对。如果在utf8可以覆盖到的范围则仍然占用3字节。\nutf8mb4最有优势的应用场景是用于存储emoji表情\nemoji表情 #   MySQL版本 \u0026gt; 5.5.3 JDBC驱动版本 \u0026gt; 5.1.13 库和表的编码设为utf8mb4  TEXT与CHAR和VARCHAR的区别 #   CHAR和VARCHAR存储单位为字符 TEXT存储单位为字节，总大小为65535字节，约为64KB CHAR数据类型最大为255字符 VARCHAR数据类型为变长存储，可以超过255个字符 TEXT在MySQL内部大多存储格式为溢出页，效率不如CHAR  一个例子：\ncreate table t (a char(256)); create table t (a varchar(256)); 存储头像 #   BLOB BINARY  性能太差，不推荐\n经验之谈 #   CHAR与VARCHAR定义的长度是字符长度不是字节长度 存储字符串推荐使用VARCHAR(N),N尽量小 虽然数据库可以存储二进制数据，但是性能低下，不要使用数据库存储文件音频等二进制数据  存储生日信息 #   DATE TIME DATETIME TIMESTAMP BIGINT  时间类型的区别在哪里 #    存储空间上的区别\n DATE三字节，如：2015-05-01 TIME三字节，如：11:12:00 TIMESTAMP，如：2015-05-01 11::12:00 DATETIME八字节，如：2015-05-01 11::12:00    存储精度的区别\n DATE精确到年月日 TIME精确到小时分钟和秒 TIMESTAMP、DATETIME都包含上述两者    TIMESTAMP VS DATETIME #   存储范围的区别  TIMESTAMP存储范围：1970-01-01 00::00:01 to 2038-01-19 03:14:07 DATETIME的存储范围：1000-01-01 00:00:00 to 9999-12-31 23:59:59    MySQL在5.6.4版本之后，TimeStamp和DateTime支持到微妙\n 字段类型与市区的关联关系  TIMESTAMP会根据系统时区进行转换，DATETIME则不会    字段类型和时区的关系 #   国际化的系统  一个例子：\ncreate table test (a datetime, b timestamp); select now(); insert into test values (now(), now()); select * from test; set time_zone = \u0026#39;+00:00\u0026#39;; select * from test; BIGINT如何存储时间类型 #   应用程序将时间转换为数字类型  2.2-MySQL数据对象 #  MySQL常见的数据对象有哪些 #   DataBase/Schema Table Index View/Trigger/Function/Procedure  库、表、行层级关系 #   一个DataBase对应一个Schema 一个Schema包含一个或多个表 一个表里面包含一个或多个字段 一个表里包含一条或多条记录 一个表包含一个或多个索引  多DataBase用途 #   业务隔离 资源隔离  表上有哪些常用的数据对象 #   索引 约束 视图、触发器、函数、存储过程  什么是数据库索引 #   读书的时候如何快速定位某一章节  查找书籍目录 在自己喜欢的章节加书签，直接定位   索引就是数据库中的数据的目录（索引和数据是分开存储的）  索引和数据是两个对象 索引主要是用来提高数据库的查询效率 数据库中数据变更同样需要同步索引数据的变更    如何创建索引（一） #  CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name [index_type] ON tbl_name (index_col_name,...) [index_option] [algorithm_option | lock_option] ... index_col_name: col_name [(length)] [ASC | DESC] index_type: USING {BTREE | HASH} 如何创建索引（二） #  ALTER [IGNORE] TABLE tbl_name [alter_specification [, alter_specification] ...] [partition_options] alter_specification: table_options | ADD [COLUMN] col_name column_definition [FIRST | AFTER col_name] ADD [COLUMN] (col_name column_definition,...) ADD {INDEX|KEY} [index_name] [index_type] (index_col_name,...) [index_option] ... | ADD [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name,...) [index_option] ... | ADD [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY] [index_name] 约束 #   生活中的约束有哪些  每个人的指纹信息必须唯一 每个人的身份证要求唯一 网上购物需要先登录才能下单   唯一约束  对一张表的某个字段或者某几个字段设置唯一键约束，保证在这个表里对应的数据必须唯一，如：用户ID、手机号、身份证等。    创建唯一约束 #   唯一约束是一种特殊的索引 唯一约束可以是一个或者多个字段 唯一约束可以在创建表的时候建好，也可以后面再补上 主键也是一种唯一约束  唯一约束 #  以如下这张表为例\nCREATE TABLE `order` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, `orderid` int(10) unsigned NOT NULL, `bookid` int(10) unsigned NOT NULL DEFAULT \u0026#39;0\u0026#39;, `userid` int(10) unsigned NOT NULL DEFAULT \u0026#39;0\u0026#39;, `number` tinyint(3) unsigned NOT NULL DEFAULT \u0026#39;0\u0026#39;, `address` varchar(128) NOT NULL DEFAULT \u0026#39;\u0026#39;, `postcode` varchar(128) NOT NULL DEFAULT \u0026#39;\u0026#39;, `orderdate` datetime NOT NULL DEFAULT \u0026#39;0000-00-00 00:00:00\u0026#39;, `status` tinyint(3) unsigned zerofill DEFAULT \u0026#39;000\u0026#39;, PRIMARY KEY (`id`), UNIQUE KEY `idx_orderid` (`orderid`), UNIQUE KEY `idx_uid_orderid` (`userid`, `orderid`), KEY `bookid` (`bookid`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8  索引有哪些  主键索引 ID 单键索引 orderid 单键索引 bookid 组合索引 (userid + orderid)   唯一约束有哪些  主键约束 (ID) 单键唯一索引 (orderid) 组合唯一索引 (userid + orderid)    添加唯一约束 #   添加主键  alter table `order` add primary key (id);   添加唯一索引  alter table `order` add unique key idx_uk_orderid (orderid);    外键约束 #   外键指两张表的数据通过某种条件关联起来  创建外键约束 #   将用户表和订单表通过外键关联起来  alter table `order` add CONSTRAINT constraint_uid FOREIGN KEY (userid) REFERENCES user(userid);   使用外键的注意事项  必须是INNODB表，Myisam和其他引擎不支持外键 相互约束的字段类型必须要求一样 主表的约束字段要求有索引 约束名称必须要唯一，即使不在一张表上    View #   产品需求  假如有其他部门的同事想查询我们数据库里的数据，但是我们并不想暴露表结构，并且只提供给他们部分数据    View的作用 #   视图将一组查询语句构成的结果集，是一种虚拟结构，并不是实际数据 视图能简化数据库的访问，能够将多个查询语句结构化为一个虚拟结构 视图可以隐藏数据库后端表结构，提高数据库安全性 视图也是一种权限管理，只对用户提供部分数据  创建View #   创建已完成订单的视图  create view order_view as select * from `order` where status=1;    Trigger #   产品需求  随着客户个人等级的提升， 系统需要自动更新用户的积分，其中一共有两张表，分别为：用户信息表和积分表   Trigger俗称触发器，指可以在数据写入表A之前或者之后可以做一些其他动作 使用Trigger在每次更新用户表的时候出发更新积分表  除此之外还有哪些 #   Function Procedure  2.3-MySQL权限管理 #  连接MySQL的必要条件 #   网络要通畅 用户名和密码要正确 数据库需要加IP白名单 更细粒度的验证（库、表、列权限类型等等）  数据有哪些权限 #  show privileges命令可以查看全部权限\n权限粒度 #   Data Privileges  DATA: SELECT, INSERT, UPDATE, DELETE   Definition Privileges  DataBase: CREATE, ALTER, DROP Table: CREATE, ALTER, DROP VIEW/FUNCTION/TRIGGER/PROCEDURE: CREATE, ALTER, DROP   Administrator Privileges  Shutdown DataBase Replication Slave Replication Client File Privilege    MySQL赋权操作 #  GRANT priv_type [(column_list)] [, priv_type [column_list]] ... ON [object_type] priv_level TO user_specification [, user_specification] ... [REQUIRE {NONE | ssl_option [[AND] ssl_option] ...}] [WITH with_option ...] GRANT PROXY ON user_specification TO user_specification [, user_specification] ... [WITH GRANT OPTION] 如何新建一个用户并赋权 #   使用MySQL自带的命令  CREATE USER 'netease'@'localhost' IDENTIFIED BY 'netease163'; GRANT SELECT ON *.* TO 'netease'@'localhost' WITH GRANT OPTION;    其他方法 #   更改数据库记录  首先向User表里面插入一条记录，根据自己的需要选择是否向db和table_pirv表插入记录 执行flush privileges命令，让权限信息生效    更简单的办法 #   GRANT语句会判断是否存在该用户，如果不存在则新建  GRANT SELECT ON *.* TO 'NETEASE'@'localhost' IDENTIFIED BY 'netease163' WITH GRANT OPTION;    查看用户的权限信息 #   查看当前用户的权限  show grants;   查看其它用户的权限  show grants for netease@'localhost';    如何更改用户的权限 #   回收不需要的权限  revoke select on *.* from netease@'localhost';   重新赋权  grant insert on *.* to netease@'localhost';    如何更改用户密码 #   用新密码，grant语句重新授权 更改数据库记录，Update User表的Password字段  注意：用这种办法，更改完需要flush privileges刷新权限信息，不推荐    删除用户 #  DROP USER user [, user] ... With Grant Option #   允许被授予权利的人把这个权利授予其他的人  MySQL权限信息存储结构 #   MySQL权限信息是存在数据库表中 MySQL账号对应的密码也加密存储在数据库表中 每一种权限类型在元数据里都是枚举类型，表明是否有该权限  有哪些权限相关的表 #   user db table_pirv columns_pirv host  权限验证流程 #  查询时从user-\u0026gt;db-\u0026gt;table_pirv-\u0026gt;columns_pirv依次验证，如果通过则执行查询。\n小结 #   MySQL权限信息都是以数据记录的形式存储在数据库的表中。 MySQL的权限验证相比网站登录多了白名单环节，并且粒度更细，可以精确到表和字段。  MySQL权限上有哪些问题 #   使用Binary二进制安装管理用户没有设置密码 MySQL默认的test库不受权限控制，存在安全风险  mysql_secure_installation #   You can set a Password for root accounts. You can remove root accounts that are accessible from outside the localhost. You can remove anonymous-user accounts. You can remove the test database.  小结 #   权限相关的操作不要直接操作表，统一使用MySQL命令。 使用二进制安装MySQL安装后，需要重置管理用户(root)的密码。 线上数据库不要留test库  实践课：数据库对象 #  何为表结构设计 #   表结构设计需要在正式进行开发之前完成 根据产品需求将复杂的业务模型抽象出来  设计表的时候需要注意哪些 #   理解各个表的依赖关系 理解各个表的功能特点  字段之间的约束、索引 字段类型、字段长度    收集表属性 #   昵称 生日 性别 手机号码 住宅号码 邮编 住宅地址 注册地址 登录IP 上一次登录时间 邮件地址  理解表的功能特点——数据用途 #  create table tb_account( account_id int not null auto_increment primary key, nick_name varchar(20), true_name varchar(20), sex char(1), mail_address varchar(50), phone1 varchar(20) not null, phone2 varchar(20), password varchar(30) not null, create_time datetime, account_state tinyint, last_login_time datetime, last_login_ip varchar(20) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 create table tb_goods( good_id bigint not null auto_increment primary key, goods_name varchar(100) not null, pic_url varchar(500) not null, store_quantity int not null, goods_note varchar(4096), producer varchar(500), category_id int not null ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 create table tb_goods_category( category_id int not null auto_increment primary key, category_level smallint not null, category_name varchar(500), upper_category_id int not null ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 create table tb_order( order_id bigint not null auto_increment primary key, account_id int not null, create_time datetime, order_amount decimal(12,2), order_state tinyint, update_time datetime, order_ip varchar(20), pay_method varchar(20), user_notes varchar(500) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 create table tb_order_item( order_item_id bigint not null auto_increment primary key, order_id bigint not null, goods_id bigint not null, goods_quantity int not null, goods_amount decimal(12,2), uique key uk_order_goods(order_id, goods_id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 数据类型——命名规范 #   所有表名，字段名全部使用小写字母 不同业务，表名使用不同前缀区分。 生成环境表名字段名要有实际意义 单个字段尽量使用字段全名；多个字段之间用下划线分隔  字段设计规范 #   字段类型选择，尽量选择能满足应用要求的最小数据类型 尽量使用整形代替字符型。整形在字段长度、索引大小等方面开销小效率更高，如邮编字段，手机号码等 注释，每个字段必须以comment语句给出字段的作用 经常访问的大字段需要单独放到一张表中，避免降低sql效率，图片、电影等大文件数据禁止存数据库 新业务统一建议使用utf8mb4字符集  用户赋权 #   理解用户到底需要什么权限  普通用户只有数据读写权限 系统管理员具有super权限   权限粒度要做到尽可能的细  普通用户不要设置with grant option属性 权限粒度：系统层面\u0026gt;库层面\u0026gt;表层面\u0026gt;字段层面   禁止简单密码  线上密码要求随机    2.4-SQL语言进阶 #  本课程涉及建表SQL\n-- ---------------------------- -- Table structure for `play_fav` -- ---------------------------- DROP TABLE IF EXISTS `play_fav`; CREATE TABLE `play_fav` ( `userid` bigint(20) NOT NULL COMMENT \u0026#39;收藏用户id\u0026#39;, `play_id` bigint(20) NOT NULL COMMENT \u0026#39;歌单id\u0026#39;, `createtime` bigint(20) NOT NULL COMMENT \u0026#39;收藏时间\u0026#39;, `status` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;状态，是否删除\u0026#39;, PRIMARY KEY (`play_id`,`userid`), KEY `IDX_USERID` (`userid`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=\u0026#39;歌单收藏表\u0026#39;; -- ---------------------------- -- Records of play_fav -- ---------------------------- INSERT INTO play_fav VALUES (\u0026#39;2\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_fav VALUES (\u0026#39;116\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1430223383\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_fav VALUES (\u0026#39;143\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_fav VALUES (\u0026#39;165\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_fav VALUES (\u0026#39;170\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_fav VALUES (\u0026#39;185\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_fav VALUES (\u0026#39;170\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_fav VALUES (\u0026#39;170\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;); -- ---------------------------- -- Table structure for `play_list` -- ---------------------------- DROP TABLE IF EXISTS `play_list`; CREATE TABLE `play_list` ( `id` bigint(20) NOT NULL COMMENT \u0026#39;主键\u0026#39;, `play_name` varchar(255) DEFAULT NULL COMMENT \u0026#39;歌单名字\u0026#39;, `userid` bigint(20) NOT NULL COMMENT \u0026#39;歌单作者账号id\u0026#39;, `createtime` bigint(20) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;歌单创建时间\u0026#39;, `updatetime` bigint(20) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;歌单更新时间\u0026#39;, `bookedcount` bigint(20) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;歌单订阅人数\u0026#39;, `trackcount` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;歌曲的数量\u0026#39;, `status` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;状态,是否删除\u0026#39;, PRIMARY KEY (`id`), KEY `IDX_CreateTime` (`createtime`), KEY `IDX_UID_CTIME` (`userid`,`createtime`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=\u0026#39;歌单\u0026#39;; -- ---------------------------- -- Records of play_list -- ---------------------------- INSERT INTO play_list VALUES (\u0026#39;1\u0026#39;, \u0026#39;老男孩\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1430223383\u0026#39;, \u0026#39;1430223383\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_list VALUES (\u0026#39;2\u0026#39;, \u0026#39;情歌王子\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;1430223384\u0026#39;, \u0026#39;1430223384\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_list VALUES (\u0026#39;3\u0026#39;, \u0026#39;每日歌曲推荐\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;1430223385\u0026#39;, \u0026#39;1430223385\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_list VALUES (\u0026#39;4\u0026#39;, \u0026#39;山河水\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;1430223386\u0026#39;, \u0026#39;1430223386\u0026#39;, \u0026#39;5\u0026#39;, null, \u0026#39;0\u0026#39;); INSERT INTO play_list VALUES (\u0026#39;5\u0026#39;, \u0026#39;李荣浩\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1430223387\u0026#39;, \u0026#39;1430223387\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;10\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO play_list VALUES (\u0026#39;6\u0026#39;, \u0026#39;情深深\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;1430223388\u0026#39;, \u0026#39;1430223389\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;); -- ---------------------------- -- Table structure for `song_list` -- ---------------------------- DROP TABLE IF EXISTS `song_list`; CREATE TABLE `song_list` ( `id` bigint(20) NOT NULL COMMENT \u0026#39;主键\u0026#39;, `song_name` varchar(255) NOT NULL COMMENT \u0026#39;歌曲名\u0026#39;, `artist` varchar(255) NOT NULL COMMENT \u0026#39;艺术节\u0026#39;, `createtime` bigint(20) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;歌曲创建时间\u0026#39;, `updatetime` bigint(20) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;歌曲更新时间\u0026#39;, `album` varchar(255) DEFAULT NULL COMMENT \u0026#39;专辑\u0026#39;, `playcount` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;点播次数\u0026#39;, `status` int(11) DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;状态,是否删除\u0026#39;, PRIMARY KEY (`id`), KEY `IDX_artist` (`artist`), KEY `IDX_album` (`album`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=\u0026#39;歌曲列表\u0026#39;; -- ---------------------------- -- Records of song_list -- ---------------------------- INSERT INTO song_list VALUES (\u0026#39;1\u0026#39;, \u0026#39;Good Lovin\\\u0026#39; Gone Bad\u0026#39;, \u0026#39;Bad Company\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;Straight Shooter\u0026#39;, \u0026#39;453\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO song_list VALUES (\u0026#39;2\u0026#39;, \u0026#39;Weep No More\u0026#39;, \u0026#39;Bad Company\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;Straight Shooter\u0026#39;, \u0026#39;280\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO song_list VALUES (\u0026#39;3\u0026#39;, \u0026#39;Shooting Star\u0026#39;, \u0026#39;Bad Company\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;Straight Shooter\u0026#39;, \u0026#39;530\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO song_list VALUES (\u0026#39;4\u0026#39;, \u0026#39;大象\u0026#39;, \u0026#39;李志\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1701\u0026#39;, \u0026#39;560\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO song_list VALUES (\u0026#39;5\u0026#39;, \u0026#39;定西\u0026#39;, \u0026#39;李志\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1701\u0026#39;, \u0026#39;1023\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO song_list VALUES (\u0026#39;6\u0026#39;, \u0026#39;红雪莲\u0026#39;, \u0026#39;洪启\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;红雪莲\u0026#39;, \u0026#39;220\u0026#39;, \u0026#39;0\u0026#39;); INSERT INTO song_list VALUES (\u0026#39;7\u0026#39;, \u0026#39;风柜来的人\u0026#39;, \u0026#39;李宗盛\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;作品李宗盛\u0026#39;, \u0026#39;566\u0026#39;, \u0026#39;0\u0026#39;); -- ---------------------------- -- Table structure for `stu` -- ---------------------------- DROP TABLE IF EXISTS `stu`; CREATE TABLE `stu` ( `id` int(10) NOT NULL DEFAULT \u0026#39;0\u0026#39;, `name` varchar(20) DEFAULT NULL, `age` int(10) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=latin1; -- ---------------------------- -- Records of stu -- ---------------------------- -- ---------------------------- -- Table structure for `tbl_proc_test` -- ---------------------------- DROP TABLE IF EXISTS `tbl_proc_test`; CREATE TABLE `tbl_proc_test` ( `id` int(11) NOT NULL AUTO_INCREMENT, `num` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8; -- ---------------------------- -- Records of tbl_proc_test -- ---------------------------- INSERT INTO tbl_proc_test VALUES (\u0026#39;11\u0026#39;, \u0026#39;1\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;12\u0026#39;, \u0026#39;2\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;13\u0026#39;, \u0026#39;6\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;14\u0026#39;, \u0026#39;24\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;15\u0026#39;, \u0026#39;120\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;16\u0026#39;, \u0026#39;720\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;17\u0026#39;, \u0026#39;5040\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;18\u0026#39;, \u0026#39;40320\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;19\u0026#39;, \u0026#39;362880\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;20\u0026#39;, \u0026#39;3628800\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;21\u0026#39;, \u0026#39;1\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;22\u0026#39;, \u0026#39;2\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;23\u0026#39;, \u0026#39;6\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;24\u0026#39;, \u0026#39;24\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;25\u0026#39;, \u0026#39;1\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;26\u0026#39;, \u0026#39;2\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;27\u0026#39;, \u0026#39;6\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;28\u0026#39;, \u0026#39;24\u0026#39;); INSERT INTO tbl_proc_test VALUES (\u0026#39;29\u0026#39;, \u0026#39;120\u0026#39;); -- ---------------------------- -- Table structure for `tbl_test1` -- ---------------------------- DROP TABLE IF EXISTS `tbl_test1`; CREATE TABLE `tbl_test1` ( `user` varchar(255) NOT NULL COMMENT \u0026#39;主键\u0026#39;, `key` varchar(255) NOT NULL, `value` varchar(255) NOT NULL, PRIMARY KEY (`user`,`key`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=\u0026#39;行列转换测试\u0026#39;; -- ---------------------------- -- Records of tbl_test1 -- ---------------------------- INSERT INTO tbl_test1 VALUES (\u0026#39;li\u0026#39;, \u0026#39;age\u0026#39;, \u0026#39;18\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;li\u0026#39;, \u0026#39;dep\u0026#39;, \u0026#39;2\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;li\u0026#39;, \u0026#39;sex\u0026#39;, \u0026#39;male\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;sun\u0026#39;, \u0026#39;age\u0026#39;, \u0026#39;44\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;sun\u0026#39;, \u0026#39;dep\u0026#39;, \u0026#39;3\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;sun\u0026#39;, \u0026#39;sex\u0026#39;, \u0026#39;female\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;wang\u0026#39;, \u0026#39;age\u0026#39;, \u0026#39;20\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;wang\u0026#39;, \u0026#39;dep\u0026#39;, \u0026#39;3\u0026#39;); INSERT INTO tbl_test1 VALUES (\u0026#39;wang\u0026#39;, \u0026#39;sex\u0026#39;, \u0026#39;male\u0026#39;); -- ---------------------------- -- Procedure structure for `proc_test1` -- ---------------------------- DROP PROCEDURE IF EXISTS `proc_test1`; DELIMITER ;; CREATE DEFINER=`root` PROCEDURE `proc_test1`(IN total INT,OUT res INT) BEGIN DECLARE i INT; SET i = 1; SET res = 1; IF total \u0026lt;= 0 THEN SET total = 1; END IF; WHILE i \u0026lt;= total DO SET res = res * i; INSERT INTO tbl_proc_test(num) VALUES (res); SET i = i + 1; END WHILE; END ;; DELIMITER ; 说明 #   本课程介绍以MySQL SQL语法为基础，不同数据库SQL语法存在差异，并未完全遵照ANSI标准。 本课程结合一个实际项目（云音乐），介绍各种SQL语言在实际应用中如何实现业务功能。  SQL进阶语法——order by #  场景1：歌单按时间排序\n-- 查看全部歌单 select * from play_list; -- 按创建时间排序 select * from play_list order by createtime; -- MySQL默认升序，如果按降序排列，则使用如下语句。 select * from play_list order by createtime desc; -- 也可以按照多个字段来排序 select * from play_list order by bookedcount, trackcount; SQL进阶语法——distinct #  场景2：统计云音乐创建歌单的用户\n-- 有重复 select userid from play_list; -- 去重 select distinct userid from play_list; -- 多个字段 select distinct userid, play_name from play_list;  distinct用于返回唯一不同的值 可以返回多列的唯一组合 底层实现使用排序，如果数据量大会消耗较多的IO和CPU  SQL进阶语法——group by #  场景3-1：统计云音乐创建歌单的用户列表和每人创建歌单的数量。\n-- 每个用户歌单的最大订阅数 select userid, max(bookedcount) from play_list group by userid; -- 每个用户歌单的数量 select userid, count(*) from play_list group by userid;  group by 根据单列或多列对数据进行分组，通常结合聚合函数使用，如count(*).  SQL进阶语法——group by having #  场景3-2：统计云音乐创建歌单的用户列表和每人创建歌单的数量，并且只显示歌单数量排序大于等于2的用户\nselect userid, count(*) from play_list group by userid having count(*) \u0026gt;= 2;  having 是对结果进行过滤  SQL进阶语法-like\nselect * from play_list where play_name like \u0026#39;%男孩%\u0026#39;;    通配符 描述     % 代替一个或多个字符   _ 代替单个字符   [charlist] 中括号中的任何一个字符   [^charlist] 或者 [!charlist] 不在中括号中的任何单一字符     除了百分号在最右面的情况以外，他会对这个表中所有的记录进行一次查询匹配，而没办法使用索引，效率较低。大表中需要慎用like。可以使用全文检索的手段。  SQL进阶语法-limit, offset #  场景4：查询一个月内创建歌单（从第6行开始显示10条记录）\nselect * from play_list where (createtime between 1427791323 and 1430383307) limit 10 offset 6;  offset后的值不建议太大，需要消耗的IO较大  case when #   case when 实现类似编程语言的if else功能，可以对SQL的输出结果进行选择判断。  场景5：对于未录入歌曲的歌单(trackcount = null)，输出结果时歌曲数返回0.\nselect case when play_name, trackcount is null then 0 else trackcount end from play_list; select相关进阶语法 #  SELECT [DISTINCT] select_expr [, select_expr ...] [FROM table_references [WHERE where_condition] [GROUP BY {col_name | expr | position} [ASC | DESC], ... [WITH ROLLUP]] [HAVING where_condition] [ORDER BY {col_name | expr | position} [ASC | DESC], ...] [LIMIT { [offset, ] row_count | row_count OFFSET offset}] [FOR UPDATE | LOCK IN SHARE MODE]] 连接-Join #  连接的作用是用一个SQL语句把多个表中相互关联的数据查出来\n场景6：查询收藏“老男孩”歌单的用户列表\nselect * from play_list, play_fav where play_list.id=play_fav.play_id; select play_fav.userid from play_list, play_fav where play_list.id=play_fav.play_id and play_list.play_name=\u0026#39;老男孩\u0026#39;; -- 另一种写法 select f.userid from play_list lst join play_fav f on lst.id=f.play_id where lst.play_name = \u0026#39;老男孩\u0026#39;; 子查询 #   MySQL还有另一种写法，可以实现同样的功能。  select userid from play_fav where play_id=(select id from play_list where play_name = \u0026#39;老男孩\u0026#39;); 子查询：内层查询的结果作为外层的比较条件。一般子查询都可以转换成连接，推荐使用连接。\n 不利于MySQL的查询优化器进行优化，可能存在性能问题 连接的实现是嵌套循环，选择一个驱动表，遍历驱动表，查询内层表，依次循环。驱动表会至少查询一边，如果有索引等，内层表可以非常快，查询优化器会选择数据小的表作为驱动表。 子查询由人为规定驱动表和内层表  连接- left Join #  select lst.play_name from play_list lst left join play_fav f on lst.id = f.play_id where f.play_id is null;  LEFT JOIN从左表(play_list)返回所有的行，即使在右表中(play_fav)中没有匹配的行。 与LEFT JOIN相对应的有RIGHT JOIN关键字，会从右表那里返回所有的行，即使在左表中没有匹配的行。  场景7：查询出没有用户收藏的歌单\nSQL进阶语法-union #  场景8：老板想看创建和收藏歌单的所有用户，查询play_list和play_fav两表中所有的userid\nselect userid from play_list union select userid from play_fav; -- 默认会去重， 不想去重的话使用union all代替union。 DML进阶语法 #   多值插入： insert into table values(\u0026hellip;.),(\u0026hellip;.)  可以一次插入多行数据，减少与数据库的交互提高效率 eg： insert into A values(4, 33), (5, 33);   覆盖插入： replace into table values (\u0026hellip;.)  可以简化业务逻辑的判断   忽略插入： insert ignore into table value (\u0026hellip;.)  可以简化业务逻辑的判断   查询插入： insert into table_a select * from table_b  常用于导表操作   insert主键重复则update  INSERT INTO TABLE tbl VALUES (id, col1, col2) ON DUPLICATE KEY UPDATE col2=....; eg: insert into A values(2, 40) on duplicate key update age=40; 可以简化前端业务逻辑的判断   连表update  A表：id, age B表：id, name, age A表id与B表id关联，根据B表的age值更新A表的age。 eg: update A,B set A.age=B.age where A.id=B.id;   连表删除  A表：id, age B表：id, name, age A表id与B表id关联，根据B表的age值删除A表的数据。 eg: delete A from A,B where A.id=B.id and B.name='pw';    总结 #   select查询进阶语法  order by/distinct/group by having (聚合函数) /like (%前缀后缀)   连接语法  内连接、左连接、右连接、 Union [ALL]   DML进阶语法  insert/连表update/连表delete    2.5-内置函数 #  聚合函数 #   聚合函数面向一组数据，对数据进行聚合运算后返回单一的值。 MySQL聚合函数的基本语法：SELECT function(列) from 表 常用聚合函数：     函数 描述     AVG() 返回列的平均值   COUNT(DISTINCT) 返回列去重后的行数   COUNT() 返回列的行数   MAX() 返回列的最大值   MIN() 返回列的最小值   SUM() 返回列的总和   GROUP_CONCAT() 返回一组值的连接字符串(MySQL独有)    实例还是上节中的那些表\n场景1：查询每张专辑总的点播次数和每首歌的平均点播次数。\nselect album, sum(playcount), avg(playcount) from song_list group by album; 场景2：查询全部歌曲中的最大的播放次数和最小的播放次数。\nselect max(playcount), min(playcount) from song_list; 场景2续：查询播放次数最多的歌曲\n-- 错误查法 select song_name, max(playcount) from song_list; -- 正确查法 select song_name, playcount from song_list order by playcount desc limit 1;  select count(*) from song_list; select count(1) from song_list; select count(song_name) from song_list;  count(*)和count(1)基本一样，没有明显的性能差异。 count(*)和count(song_name)差别在于count(song_name)会除去song_name is null的情况\n场景3：显示每张专辑的歌曲列表\nselect album, GROUP_CONCAT(song_name) from song_list group by album; -- 默认最大只能连接1024个字符，但是可以通过改数据库参数来改变。 使用聚合函数做数据库行列转换 #  select user, max(case when \u0026#39;key\u0026#39;=\u0026#39;age\u0026#39; then value end) age, max(case when \u0026#39;key\u0026#39;=\u0026#39;sex\u0026#39; then value end) sex, max(case when \u0026#39;key\u0026#39;=\u0026#39;dep\u0026#39; then value end) dep, from tbl_test1 group by user; 预定义函数 #   预定义函数面向单值数据，返回一对一的处理结果(聚合函数可以理解成多对一)。 预定义函数基本语法： select function(列) from 表; select * from 表 where 列 = function(value) ...   预定义函数-字符串函数 #     函数 描述     LENGTH() 返回列的字节数   CHAR_LENGTH() 返回列的字符数   TRIM()/RTRIM()/LTRIM() 去除两边空格/去除右边空格/去除左边空格   SUBSTRING(str, pos, [len]) 从pos位置截取字符串str，截取len长度   LOCATE(substr, str, [pos]) 返回substr在str字符串中的位置   REPLACE(str, from_str, to_str) 将str字符串中的from_str替换成to_str   LOWER(), UPPER() 字符串转换为小写/大写     字符串函数 - 实例  SELECT SUBSTRING(\u0026#39;abcdef\u0026#39;, 3); -- \u0026#39;cdef\u0026#39; SELECT SUBSTRING(\u0026#39;abcdef\u0026#39;, -3); -- \u0026#39;def\u0026#39; SELECT SUBSTRING(\u0026#39;abcdef\u0026#39;, 3, 2); -- \u0026#39;cd\u0026#39; SELECT LOCATE(\u0026#39;bar\u0026#39;, \u0026#39;foobarbar\u0026#39;); -- 4 SELECT LOCATE(\u0026#39;xbar\u0026#39;, \u0026#39;foobar\u0026#39;); -- 0 SELECT LOCATE(\u0026#39;bar\u0026#39;, \u0026#39;foobarbar\u0026#39;, 5); -- 7 预定义函数-时间处理函数 #     函数 描述     CURDATE() 当前日期   CURTIME() 当前时间   NOW() 显示当前时间日期(常用)   UNIX_TIMESTAMP() 当前时间戳   DATE_FORMAT(date, format) 按指定格式显示时间   DATE_ADD(date, INTERVAL unit) 计算指定日期向后加一段时间的日期   DATE_SUB(date, INTERVAL unit) 计算指定日期向前减一段时间的日期     实例：  SELECT NOW() + INTERVAL 1 MONTH; SELECT NOW() - INTERVAL 1 WEEK; 预定义函数-数字处理函数 #     函数 描述     ABS() 返回数值的绝对值   CEIL() 对小数向上取整 CEIL(1.2)=2   ROUND() 四舍五入   POW(num, n) num的n次幂 POW(2, 2)=4   FLOOR() 对小数向下取整 CELL(1.2)=1   MOD(N, M) 取模(返回n除以m的余数)=N % M   RAND() 取0~1之间的一个随机数    算数、逻辑运算 #   比较运算     函数 描述     IS, IS NOT 判定布尔值 IS True, IS NOT False, IS NULL   \u0026gt;, \u0026gt;= 大于，大于等于   \u0026lt;, \u0026lt;= 小于，小于等于   = 等于   !=, \u0026lt;\u0026gt; 不等于   BETWEEN M AND N 取M和N之间的值   IN, NOT IN 检查是否在或不在一组值之中    实例：查询一个月内userid为1,3,5的用户创建的歌单\nselect * from play_list where (createtime between 1427791323 and 1430383307) and userid in (1,3,5);  *,/,DIV,%,MOD,-,+ NOT, AND, \u0026amp;\u0026amp;, XOR, OR, ||  2.6-触发器与存储过程 #  触发器 #   是什么  触发器是加在表上的一个特殊程序，当表上出现特定的事件(INSERT/UPDATE/DELETE)时触发该程序执行。   做什么  数据订正；迁移表；实现特定的业务逻辑。    触发器-基本语法 #  CREATE [DEFINER = { user | CURRENT_USER }] TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_body t trigger_time: { BEFORE | AFTER } trigger_event: { INSERT | UPDATE | DELETE } 触发器-实例 #  学生表：\nCREATE TABLE `stu` ( `name` varchar(50), `course` varchar(50), `score` int(11), PRIMARY KEY (`name`) ) ENGINE=InnoDB; 用于更正成绩的触发器：\nDELIMITER // CREATE TRIGGER trg_upd_score BEFORE UPDATE ON `stu` FOR EACH ROW BEGIN IF NEW.score \u0026lt; 0 THEN SET NEW.score = 0; ELSEIF NEW.score \u0026gt; 100 THEN SET NEW.score = 100; END IF; END; // DELIMITER ; 注意事项 #   触发器对性能有损耗，应慎重使用。 同一类事件在一个表中只能创建一次。 对于事务表，触发器执行失败则整个语句回滚。 Row格式的主从复制，触发器不会在从库上执行。 使用触发器时应防止递归执行。  存储过程 #   定义：存储过程是存储在数据库的一组SQL语句集，用户可以通过存储过程名和传参多次调用的程序模块。 特点：  使用灵活，可以使用流控制语句，自定义变量等完成复杂的业务逻辑。 提高数据安全性，屏蔽应用程序直接对表的操作，易于进行审计。 减少网络传输。 提高代码维护的复杂度，实际使用中要评估场景是否适合。    存储过程-基本语法 #  CREATE [DEFINER = { user | CURRENT_USER }] PROCEDURE sp_name ([proc_parameter[,...]]) [characteristic ...] routine_body proc_parameter: [ IN | OUT | INOUT ] param_name type type: Any valid MySQL data type characteristic: COMMENT \u0026#39;string\u0026#39; | [NOT] DETERMINISTIC routine_body: Valid SQL routine statement 存储过程-实例 #  CREATE PROCEDURE proc_test1 (IN total INT, OUT res INT) BEGIN DECLARE i INT; SET i = 1; SET res = 1; IF total \u0026lt;= 0 THEN SET total = 1; END IF; WHILE i \u0026lt;= total DO SET res = res * i; INSERT INTO tbl_proc_test(num) VALUES (res); SET i = i + 1; END WHILE; END; 存储过程-流控制语句 #     流控制 描述     IF IF search_condition THEN statement_list [ELSEIF search_condition THEN statement_list][ELSE statement_list] END IF   CASE CASE case_value WHEN when_value THEN statement_list [ELSE statement_list] END CASE   WHILE WHILE search_condition DO statement_list END WHILE   REPEAT REPEAT statement_list UNTIL search_condition END REPEAT    存储过程-调用 #  set @total=10; set @res=1; call proc_test1(@total, @res); select @res; 自定义函数 #   自定义函数与存储过程类似，但是必须带有返回值(RETURN)。 自定义函数与sum(), max()等MySQL原生函数使用方法类似： SELECT func(val); SELECT * from tbl where col=func(val);  由于自定义函数可能在遍历数据中使用，要注意性能损耗  自定义函数-基本语法 #  CREATE [DEFINER = { user | CURRENT_USER}] FUNCTION sp_name ([func_parameter[,...]]) RETURNS type [characteristic ...] routine_body func_parameter: param_name type type: Any valid MySQL data type characteristic: COMMENT \u0026#39;string\u0026#39; | [NOT] DETERMINISTIC routine_body: Valid SQL routine statement 自定义函数-实例 #  CREATE FUNCTION func_test1 (total INT) RETURNS INT BEGIN DECLARE i INT; DECLARE res INT; SET i = 1; SET res = 1; IF total \u0026lt;= 0 THEN SET total = 1; END IF; WHILE i \u0026lt; total DO SET res = res * i; SET i = i + 1; END WHILE; RETURN res; END; 自定义函数-调用 #  select func_test1(4); 小结 #   知识点：触发器、存储过程、自定义函数 互联网场景：触发器和存储过程不利于水平扩展，多用于统计和运维操作中。  2.7-MySQL字符集 #  字符集基础 #   字符集：数据库中的字符集包含两层含义  各种文字和符号的集合，包括各国家文字、标点符号、图形符号、数字等。 字符的编码方式，即二进制数据与字符的映射规则。    字符集-分类 #   ASCII：美国信息互换标准编码；英语和其他西欧语言；单字节编码，7位表示一个字符，共128字符。 GBK：汉字内码扩展规范；中日韩汉字、英文、数字；双字节编码；共收录了21003个汉字，GB2312的扩展。 UTF-8:Unicode标准的可变长度字符编码；Unicode标准（统一码），业界统一标准，包括世界上数十种文字的系统；UTF-8使用一至四个字节为每个字符编码。 其他常见字符集：UTF-32，UTF-16，Big5，latin1  MySQL字符集 #   查看字符集  SHOW CHARACTER SET;  新增字符集  # 编译时加入： --with-charset= ./configure --prefix=/usr/local/mysql3 --with-plugins=innobase --with-charset=gbk 字符集与字符序 #   charset和collation  collation：字符序，字符的排序与比较规则，每个字符集都有对应的多套字符序。 不同的字符序决定了字符串在比较排序中的精度和性能不同。    查看字符序\nshow collation; mysql的字符序遵从命名惯例：以_ci(表示大小写不敏感)，以_CS(表示大小写敏感)，以_bin(表示用编码值进行比较)。\n字符集设置级别 #   charset和collation的设置级别：  服务器级 \u0026raquo; 数据库级 \u0026raquo; 表级 \u0026raquo; 列级   服务器级  系统变量(可动态设置)：  character_set_server：默认的内部操作字符集 character_set_system：系统元数据(各字段名等)字符集      字符集设置级别 #   服务器级  配置文件\r[mysqld]\rcharacter_set_server=utf8\rcollation_server=utf8_general_ci\r 数据库级  CREATE DATABASE db_name CHARACTER SET latin1 COLLATE latin1_swedish_ci;  character_set_database：当前选中数据库的默认字符集  主要影响load data等语句的默认字符集，CREATE DATABASE的字符集如果不设置，默认使用character_set_server的字符集。\n 表级  CREATE TABLE tbl1 (....) DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_bin;  列级  CREATE TABLE tbl1 (col1 VARCHAR(5) CHARACTER SET latin1 COLLATE latin1_german1_ci); 字符集设置级别 #   数据存储字符集使用规则：  使用列集的CHARACTER SET设定值； 若列级字符集不存在，则使用对应表级的DEFAULT CHARACTER SET设定值； 若表级字符集不存在，则使用数据库级的DEFAULT CHARACTER SET设定值； 若数据库级字符集不存在，则使用服务器级character_set_server设定值。    -- 查看字符集 show [global] variables like \u0026#39;character%\u0026#39;; show [global] variables like \u0026#39;collation%\u0026#39;; -- 修改字符集 set global character_set_server=utf8; -- 全局 alter table xxx convert to character set xxx; -- 表 客户端连接与字符集 #   连接与字符集  character_set_client：客户端来源数据使用的字符集。 character_set_connection：连接层字符集。 character_set_results：查询结果字符集。    mysql \u0026gt; set names utf8;\r配置文件设置：\r[mysql]\rdefault-character-set=utf8\r 字符转换过程  client \u0026gt; character_set_client \u0026gt; character_set_connection \u0026gt; Storage \u0026gt; character_set_results \u0026gt;client\n推荐使用统一的字符集\n  常见乱码原因：\n 数据存储字符集不能正确编码(不支持)client发来的数据：client(utf8)-\u0026gt;Storage(latin1) 程序连接使用的字符集与通知mysql的character_set_client等不一致或不兼容。    使用建议\n 创建数据库/表时显式的指定字符集，不使用默认。 连接字符集与存储字符集设置一致，推荐使用utf8。 驱动程序连接时显式指定字符集(set names XXX).    mysql CAPI:初始化数据库句柄后马上用mysql_options设定MYSQL_CHARSET_NAME属性为utf8.\n  mysql php API:连接到数据库以后显式用SET NAMES语句设置一次连接字符集。\n  mysql JDBC: url=\u0026ldquo;jdbc:mysql://localhost:3306/blog_dbo?user=xx\u0026amp;password=xx\u0026amp;userUnicode=true\u0026amp;characterEncoding=utf8\u0026rdquo;\n  小结 #   字符集：表示的字符集和/字符编码方式 字符的设置级别：服务器/数据库/表/列 客户端字符集：乱码产生的原因与解决方式  2.8程序连接MySQL #  程序连接MySQL基本原理 #  JDBC客户端应用 -\u0026gt; java.sql.*或javax.sql.* -\u0026gt; 驱动程序 -\u0026gt; SQLserver/Oracle/MySQL\nJava代码示例 #  结构：\nDriverManager -\u0026gt; Driver(是驱动程序对象的接口，指向具体数据库驱动程序对象)=DriverManager.getDriver(String URL) -\u0026gt; Connectinon(是连接对象接口，指向具体数据库连接对象)=DriverManager.getConnection(String URL) -\u0026gt; Statement(执行静态SQL语句接口)=Connection.CreateStatement() -\u0026gt; ResultSet(是指向结果集对象的接口)=Statement.excuteXXX()\nimport java.sql.*; /** * 使用JDBC连接MySQL */ public class DBTest { public static Connection getConnection() throws SQLException, java.lang.ClassNotFoundException { //第一步：加载MySQL的JDBC的驱动  Class.forName(\u0026#34;com.mysql.jdbc.Driver\u0026#34;); //设置MySQL连接字符串,要访问的MySQL数据库 ip,端口,用户名,密码  String url = \u0026#34;jdbc:mysql://localhost:3306/blog\u0026#34;; String username = \u0026#34;blog_user\u0026#34;; String password = \u0026#34;blog_pwd\u0026#34;; //第二步：创建与MySQL数据库的连接类的实例  Connection con = DriverManager.getConnection(url, username, password); return con; } public static void main(String args[]) { Connection con = null; try { //第三步：获取连接类实例con，用con创建Statement对象类实例 sql_statement  con = getConnection(); Statement sql_statement = con.createStatement(); /************ 对数据库进行相关操作 ************/ //如果同名数据库存在，删除  sql_statement.executeUpdate(\u0026#34;drop table if exists user;\u0026#34;); //执行了一个sql语句生成了一个名为user的表  sql_statement.executeUpdate(\u0026#34;create table user (id int not null auto_increment,\u0026#34; + \u0026#34; name varchar(20) not null default \u0026#39;name\u0026#39;, age int not null default 0, primary key (id) ); \u0026#34;); //向表中插入数据  System.out.println(\u0026#34;JDBC 插入操作:\u0026#34;); String sql = \u0026#34;insert into user(name,age) values(\u0026#39;liming\u0026#39;, 18)\u0026#34;; int num = sql_statement.executeUpdate(\u0026#34;insert into user(name,age) values(\u0026#39;liming\u0026#39;, 18)\u0026#34;); System.out.println(\u0026#34;execute sql : \u0026#34; + sql); System.out.println(num + \u0026#34; rows has changed!\u0026#34;); System.out.println(\u0026#34;\u0026#34;); //第四步：执行查询，用ResultSet类的对象，返回查询的结果  String query = \u0026#34;select * from user\u0026#34;; ResultSet result = sql_statement.executeQuery(query); /************ 对数据库进行相关操作 ************/ System.out.println(\u0026#34;JDBC 查询操作:\u0026#34;); System.out.println(\u0026#34;------------------------\u0026#34;); System.out.println(\u0026#34;userid\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;name\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;age \u0026#34;); System.out.println(\u0026#34;------------------------\u0026#34;); //对获得的查询结果进行处理，对Result类的对象进行操作  while (result.next()) { int userid = result.getInt(\u0026#34;id\u0026#34;); String name = result.getString(\u0026#34;name\u0026#34;); int age = result.getInt(\u0026#34;age\u0026#34;); //取得数据库中的数据  System.out.println(\u0026#34; \u0026#34; + userid + \u0026#34; \u0026#34; + name + \u0026#34; \u0026#34; + age); } //关闭 result,sql_statement  result.close(); sql_statement.close(); //使用PreparedStatement更新记录  sql = \u0026#34;update user set age=? where name=?;\u0026#34;; PreparedStatement pstmt = con.prepareStatement(sql); //设置绑定变量的值  pstmt.setInt(1, 15); pstmt.setString(2, \u0026#34;liming\u0026#34;); //执行操作  num = pstmt.executeUpdate(); System.out.println(\u0026#34;\u0026#34;); System.out.println(\u0026#34;JDBC 更新操作:\u0026#34;); System.out.println(\u0026#34;execute sql : \u0026#34; + sql); System.out.println(num + \u0026#34; rows has changed!\u0026#34;); //关闭PreparedStatement  pstmt.close(); //流式读取result，row-by-row  query = \u0026#34;select * from user\u0026#34;; PreparedStatement ps = (PreparedStatement) con.prepareStatement (query,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY); ps.setFetchSize(Integer.MIN_VALUE); result = ps.executeQuery(); /************ 对数据库进行相关操作 ************/ System.out.println(\u0026#34;JDBC 查询操作:\u0026#34;); System.out.println(\u0026#34;------------------------\u0026#34;); System.out.println(\u0026#34;userid\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;name\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;age \u0026#34;); System.out.println(\u0026#34;------------------------\u0026#34;); //对获得的查询结果进行处理，对Result类的对象进行操作  while (result.next()) { int userid = result.getInt(\u0026#34;id\u0026#34;); String name = result.getString(\u0026#34;name\u0026#34;); int age = result.getInt(\u0026#34;age\u0026#34;); //取得数据库中的数据  System.out.println(\u0026#34; \u0026#34; + userid + \u0026#34; \u0026#34; + name + \u0026#34; \u0026#34; + age); } //关闭 result,ps  result.close(); ps.close(); con.close(); } catch(java.lang.ClassNotFoundException e) { //加载JDBC错误,所要用的驱动没有找到  System.err.print(\u0026#34;ClassNotFoundException\u0026#34;); //其他错误  System.err.println(e.getMessage()); } catch (SQLException ex) { //显示数据库连接错误或查询错误  System.err.println(\u0026#34;SQLException: \u0026#34; + ex.getMessage()); } } } JDBC使用技巧 #   Statement与PreparedStatement的区别 connection, Statement与ResultSet关闭的意义 jdbc连接参数的使用 ResultSet游标的使用(setFetchSize)  Statement与PreparedStatement的区别 #   PreparedStatement在数据库端预编译，效率高，可以防止SQL注入。 对数据库执行一次性存取的时候，用Statement对象进行处理。 线上业务推荐使用PreparedStatement.  PreparedStatement背后的故事 #  PREPARE -\u0026gt; EXECUTE -\u0026gt; DEALLOCATE PREPARE\nPREPARE stmt1 FROM \u0026#39;SELECT productCode, productName From products WHERE productCode = ?\u0026#39;; SET @pc = \u0026#39;S10_1678\u0026#39;; EXECUTE stmt1 USING @pc; DEALLOCATE PREPARE stmt1; connection, Statement与ResultSet关闭的意义 #   MySQL数据库端为connection与ResultSet维护内存状态，一直不关闭会占用服务端资源。 MySQL最大连接数受max_connections限制，不能无限创建连接，所以用完要及时关闭。 JDBC connection关闭后ResultSet, Statement会自动关闭。但是如果使用连接池将不会关闭，因此推荐主动关闭。  jdbc连接参数的使用 #   字符集设置：  url=\u0026ldquo;jdbc:mysql://localhost:3306/blog_dbo?userUnicode=true\u0026amp;characterEncoding=utf8\u0026rdquo;;\n 超时设置：  url=\u0026ldquo;jdbc:mysql://localhost:3306/blog_dbo?connectionTimeout=1000\u0026amp;socketTimeout=30000\u0026rdquo;;\nResultSet游标的使用 #   默认的ResultSet对象不可更新，仅有一个向前移动的指针。因此，只能迭代它一次，并且只能按从第一行到最后一行的顺序进行。可以生成可滚动和/或可更新的ResultSet对象。 setFetchSize()是设置ResultSet每次向数据库取的行数，防止数据返回量过大将内存爆掉。  Python连接MySQL #   Python：脚本语言，无需编译、易开发 DBA使用Python的一般场景是编写自动化运维工具、报表、数据迁移 Python MySQL驱动：python-mysqldb  import MySQLdb # 建立和mysql数据库的连接 conn = MySQLdb.connect(host=\u0026#39;localhost\u0026#39;, port=3306,user=\u0026#39;bloguser\u0026#39;,passwd=\u0026#39;xxxx\u0026#39;) # 获取游标 curs = conn.cursor() # 选择数据库 conn.select_db(\u0026#39;blog\u0026#39;) # 执行SQL，创建一个表 curs.execute(\u0026#34;create table blog (id int, name varchar(200))\u0026#34;) # 插入一条记录 value = [1, \u0026#39;user1\u0026#39;] curs.execute(\u0026#34;insert into blog values(%s, %s)\u0026#34;, value) # 插入多条记录 values = [(2, \u0026#34;user2\u0026#34;), (3, \u0026#34;user3\u0026#34;)] curs.executemany(\u0026#34;insert into blog values(%s, %s)\u0026#34;, values) # 提交 conn.commit() # 关闭游标 curs.close() # 关闭连接 conn.close() 2.9-DAO框架的使用 #  DAO框架 #   在应用程序中使用数据访问对象(DAO),使我们可以将底层数据访问逻辑与业务逻辑分离开来。DAO框架构建了为每一个数据源提供CRUD(创建、读取、更新、删除)操作的类。 DAO模式是标准J2EE设计模式之一。开发人员用这种模式将底层数据访问操作与高层业务逻辑分离开。一个典型的DAO框架实现有以下组操作：  一个DAO工厂类 一个DAO接口(select/insert/delete/update) 一个实现了DAO接口的具体类 数据传输对象    DAO框架的特点 #   屏蔽底层数据访问细节，实现业务逻辑和数据访问逻辑的分离。 简化代码开发，提高代码复用率。 相较于原生的SQL可能会带来额外的 性能损耗(利用反射机制封装对象，SQL转换等)  MyBatis简介 #   MyBatis是一个主流的DAO框架，是apache的一个开源项目iBatis的升级版。 MyBatis支持普通SQL查询，存储过程和高级映射，消除就几乎所有JDBC代码和参数的手工设置以及结果集的检索。 接口丰富、使用简单 相较于hibernate更加轻量级，支持原生的sql语句。 支持查询缓存  MyBatis代码示例 #   环境搭建，数据源于映射配置文件的编写 单值、多值查询 增删改数据 连表查询  示例代码在sorence/DAO框架代码示例.rar\nMyBatis工作流程 #   加载配置并初始化，内部生成MappedStatement对象。 调用MyBatis提供的API(SqlSession.select/insert\u0026hellip;.)，将SQL ID与数据对象传递给处理层。 处理层解析MappedStatement对象，获取MySQL的连接，执行相应的SQL语句，接收返回结果。 MyBatis将接收到的返回结果封装成对应的数据对象返回。  MyBatis使用技巧 #   区分#{}和${}的不同应用场景： #{}会生成预编译SQL，会正确的处理数据的类型，而${}仅仅是文本替换。 注意MyBatis封装数据时的性能损耗： 只返回需要的行数和字段。 使用MyBatis自带的连接池功能： \u0026lt;dataSource type=\u0026quot;POOLED\u0026quot;\u0026gt;  "});index.add({'id':118,'href':'/life/docs/databases/mysql_163%E8%AF%BE%E5%A0%82/%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%BE%E5%A0%82mysql_chapter3/','title':"MySQL事务与存储引擎",'section':"网易云课堂MySQL微专业学习笔记",'content':"MySQL事务与存储引擎 #  3.1-数据库事务 #  什么是事务 #   一系列有序的数据库操作：  要么全部成功 要么全部回退到操作前的状态 中间状态对其他连接不可见   事务的基本操作：    基本操作 说明     start transaction 开始事务   commit 提交(全部完成)   rollback 回滚(回到初始状态)      -- 开启一个事务 start transaction; -- 或者使用(非标准sql) begin; insert into t values (1, 1, 1); -- 事务结束，插入成功 commit; begin; insert into t values (2, 1, 1); insert into t values (3, 1, 1); insert into t values (4, 1, 1); -- 事务结束，没有插入数据 rollback; begin; insert into t values (1, 1, 1); savepoint a1; insert into t values (2, 1, 1); -- 回滚到指定的保存点 rollback to a1; commit; 自动提交 #   autocommit可以在session级别设置 每个DML操作都自动提交 DDL永远都是自动提交，无法通过rollback回滚  事务的四个基本属性(ACID) #   原子性(Atomicity) 一致性(Consistency) 隔离性(Isolation) 持久性(Durability)  事务的原子性 #   包含在事务中的操作要么全部被执行，要么都不执行 中途数据库或应用发生异常，未提交的事务都应该被回滚  事务的一致性 #   数据的正确性，合理性，完整性 数据一致性应该符合应用需要规则：  余额不能是负数 交易对象必须先有账号 用户账号不能重复   事务的结果需要满足数据的一致性约束  事物的持久性 #   提交完成的事务对数据库的影响必须是永久性的  数据库异常不会丢失事务更新 通常认为成功写入磁盘的数据即为持久化成功    事务的持久化的实现 #   数据文件持久化  随机同步刷新(慢)   事务日志持久化与实例恢复  顺序同步刷新(快) -\u0026gt; 事务日志 随机异步刷新 -\u0026gt; 磁盘 事务日志 -\u0026gt; 磁盘(实例恢复)    事务的隔离性 #   数据库事务在提交完成前，中间的任何数据变化对其他的事务都是不可见的。  数据库隔离现象 #     隔离现象 描述     脏读(Dirty Read) 事务B读到事务A尚未提交的数据变更   不可重复读(NonRepeatable Read) 事务B读取前后两次读取一条记录之间该记录被事务A修改并提交，于是事务B读到了不一样的结果   幻读(Phantom Read) 事务B按条件匹配到了若干行记录并修改。但是由于修改过程中事务A新插入了符合条件记录，导致B更新完成后发现仍有符合条件却未被更新的记录。    数据库隔离等级 #     隔离等级 脏读 不可重复读 幻读     未提交读 可能 可能 可能   已提交读 不可能 可能 可能   可重复读 不可能 不可能 可能   可串行化读 不可能 不可能 不可能    MySQL的事务隔离级别 #   InnoDB默认标记为可重复读 InnoDB并不是标准定义上的课重复读 InnoDB默认在可重复读的基础上避免幻读  MySQL事务隔离级别设置 #   可在global/session/下个事务，级别分别进行设置 建议使用Read committed(同Oracle) 或者建议使用默认的Repeatable read  set tx_isolation = \u0026#39;\u0026#39; -- 设置隔离级别 事务与并发写 #   某个正在更新的记录再提交或回滚前不能被其他事务同时更新  事务回滚的实现 #   回滚段(rollback segment)与数据前像  3.2-存储引擎概述 #  MySQL程序层次架构 #  MySQL存储引擎 #   有多种可选方案，可插拔，可修改存储引擎 基于表选择使用何种存储引擎  主要存储引擎 #     存储引擎 常用度 支持事务     InnoDB 主要，推荐 是   MyISAM 古老，偶尔有用，系统表 否   MEMORY 偶尔临时表有用，纯内存 否   BLACKHOLE 不用来存放数据，个别特殊用处 否   TokuDB 新颖，个别特殊场景有奇效 是   Cluster 新颖，分布式，内存，线上不要用 是    InnoDB存储引擎 #   索引组织表 支持事务 支持行级锁 数据块缓存 日志持久化 稳定可靠，性能好，线上尽量使用InnoDB  MyISAM存储引擎 #   堆表 不支持事务 只维护索引缓存池，表数据缓存交给操作系统 锁粒度较大 数据文件可以直接拷贝，偶尔可能会用上 不建议线上业务数据使用  MWMORY存储引擎 #   数据全内存存放，无法持久化 性能较高 不支持事务 适合偶尔作为临时表使用 create temporary table tmp (id int) engine = memory ;  BLACKHOLE存储引擎 #   数据不作任何存储 利用MySQL Replicate，充当日志服务器 在MySQL Replicate环境中充当代理主  TokuDB #   分形树存储结构 支持事务 行锁 压缩效率较高 适合大批量insert的场景  MySQL Cluster #   多主分布式集群 数据节点间冗余，高可用 支持事务 设计上易于扩展 面向未来，线上慎用  改变表的存储引擎 #  alter table m ENGINE=innodb;\n3.3-InnoDB存储引擎 #  InnoDB存储引擎体系架构 #  InnoDB相关的磁盘文件 #     文件 名称 数量 位置     系统表空间 ibdata1 一个实例一个 innodb_data_home_dir   日志文件 ib_logfile0/1 一个实例两个(可配置) innodb_log_group_home_dir   表定义文件 表名.frm 每张表一个 Schema目录下   表数据文件 表名.ibd 如果innodb_file_per_table = 1, 则每张表一个 Schema目录下    InnoDB系统表空间文件 #   ibdata1里存放了什么:  回滚段 所有InnoDB表元数据信息 Double Write, Insert buffer dump等等\u0026hellip;.   自动扩展机制  InnoDB与磁盘文件有关的参数 #     参数 样例值 备注     innodb_data_home_dir /data/mysql/node_1 数据主目录   innodb_log_group_home_dir /data/mysql/node_1 一般同上   innodb_data_file_path ibdata1:512M:autoextned 请开启autoextned   innodb_autoextend_increment 128 MB,勿太大或太小   innodb_file_per_table 1 强烈建议开启   innodb_log_file_size 100MB 性能相关   innodb_log_files_in_group 2 性能相关    InnoDB数据文件存储结构 #   索引组织表(聚簇表) 根据表逻辑主键排序 数据节点每页16K 根据主键寻址速度很快 主键值递增的insert插入效率较好 主键值随机insert插入效率差 因此，InnoDB表必须指定主键，建议使用自增数字  InnoDB数据块缓存池 #   数据的读写需要经过缓存 数据以整页(16K)为单位读取到缓存中 缓存中的数据以LRU策略换出 IO效率高，性能好  InnoDB Buffer Pool相关参数 #     参数 样例值 备注     innodb_buffer_pool_size 10G 根据总物理内存设置    InnoDB数据持久化与事务日志 #   事务日志实时持久化 内存变化数据(脏数据)增量异步刷出到磁盘 实例故障靠重放日志恢复 性能好，可靠，恢复快  InnoDB日志持久化相关参数 #     参数 样例值 备注     innodb_flush_log_at_trx_commit 1 可选：0：每隔1s写入并持久化一次日志。1：每次commit都写入并持久化日志。2：每次提交日志写到内存，每1s持久化一次    InnoDB行级锁 #   写不阻塞读 不同行间的写互相不阻塞 并发性能好  InnoDB与事务ACID #   事务ACID特性完整支持  回滚段失败回滚 支持主外键约束 事务版本+回滚段=MVCC 事务日志持久化   默认可重复读隔离级别，可以调整  3.4-InnoDB事务锁 #  什么是计算机程序锁 #   计算机程序锁  控制对共享资源进行并发访问 保护数据的完整性和一致性    数据库中的锁 #   分为两个大类      lock latch/mutex     对象 事务 线程   保护 数据库逻辑内容 内存数据结构   持续时间 事务过程中 临界资源争抢     我们主要关心的是事务锁  数据库事务并发 #   对同一行记录的修改必须串行化  事务锁粒度 #   行锁  InnoDB, Oracle   页锁  SQL Server   表锁  MyISAM, Memory   锁升级  InnoDB存储引擎中的锁模式与粒度 #   四种基本锁模式  共享锁(S) - 读锁 - 行锁 排他锁(X) - 写锁 - 行锁 意向共享锁(IS) - 表级 意向排他锁(IX) - 表级   意向锁  意向锁总是自动先加，并且意向锁自动加自动释放 意向锁提示数据库这个session将要在接下来施加何种锁 意向锁和X/S锁级别不同，除了阻塞全表级别的X/S锁外其他任何锁    InnoDB锁模式互斥 #  数据库加锁操作 #   一般的select语句不加任何锁，也不会被任何事物锁阻塞  读的隔离性由MVCC确保   S锁  手动：select * from tb_test lock in share mode; 自动：insert前   X锁  手动：select * from tb_test lock for update; 自动：update，delete前    InnoDB行锁的实现 #   通过索引项加锁实现  只有条件走索引才能实现行级锁 索引上有重复值，可能锁住多个记录 查询有多个索引可以走，可以对不同索引加锁 是否对索引加锁实际上取决于MySQL执行计划   自增主键做条件更新，性能最好  没有索引的话会对整张表加锁。\nInnoDB的gap lock #   什么是幻读 gap lock消灭幻读  InnoDB消灭幻读仅仅为了确保statement模式replicate的主从一致性   小心gap lock 自增主键做条件更新，性能最好  死锁 #    什么是死锁\n A、B两个事务，A先更新t1，同时B更新t2，A再更新t2，B再更新t1就发生了死锁。    死锁数据库自动解决\n 数据库挑选冲突事务中回滚代价较小的事务回滚    死锁预防\n 单表死锁可以根据批量更新里的更新条件排序 可能冲突的跨表事务尽量避免并发 尽量缩短事务长度    业务逻辑加锁 #    业务流程中的悲观锁\n 任何的并发修改都有可能造成我们的业务逻辑最终的错误，在事务流程中一开始就加锁，最后释放    如何缩短锁的时间\n  "});index.add({'id':119,'href':'/life/docs/databases/mysql_163%E8%AF%BE%E5%A0%82/%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%BE%E5%A0%82mysql_chapter4/','title':"MySQL应用优化",'section':"网易云课堂MySQL微专业学习笔记",'content':"MySQL应用优化 #  4.1-MySQL索引优化与设计 #  什么是索引 #   索引的意义 —— 快速定位要查找的数据  数据库索引查找 #   全表扫描 VS 索引查找  如何根据首字母找到所在行 #   二分查找 B+tree  InnoDB表聚簇索引 #  索引中只放着排序字段和ID\n创建索引 #   单列索引  create index idx_test1 on tb_student (name);  联合索引  create index idx_test2 on tb_student (name, age);  索引中先根据name排序，name相同的情况下，根据age排序  索引维护 #   索引维护由数据库自动完成 插入/修改/删除每一个索引行都会变成一个内部封装的事务 索引越多，事务越长，代价越高 索引越多对表的插入和索引字段修改就越慢 控制表上索引的数量，切忌胡乱添加无用索引  如何使用索引 #   依据WHERE查询条件建立索引  select a, b from tab_a where c=? ; idx_c (c) select a, b from tab_a where c=? and d=?; idx_cd (c, d)  排序order by, group by, distinct字段添加索引  select * from tb_a order by a; select a, count(*) from tb_a group by a; idx_a (a) select * from tb_a order by a, b; idx_a_b (a, b) select * from tb_a order where c=? by a; idx_c_a (c, a) 索引与字段选择性 #    某个字段其值的重复程度\n  选择性很差的字段通常不适合创建单列索引\n 男女比例相仿的列表中性别不适合创建单列索引 如果男女比例极不平衡，要查询的又是少数方(理工院校查女生)可以考虑使用索引    联合索引中选择性好的字段应该排在前面\n  select * from tab_a where gender=? and name=?; idx_a1 (name, gender) 联合索引与前缀查询 #   联合索引能为前缀单列，复列查询提供帮助  idx_smp (a, b, c) where a=? ; where a=? and b=? ; where a=? and c=? ;(部分ok)  合理创建联合索引，避免冗余 (a) , (a, b) , (a, b, c) X (a, b, c) ok  长字段上的索引 #   在非常长的字段上建立索引影响性能 InnoDB索引单字段(utf8)只能取前767 bytes 对长字段处理的方法  Email类，建立前缀索引  Mail_addr varchar(2048) idx_mailadd (Mail_addr(30)) ok  住址类，拆分字段  Home_address varchar(2048) idx_mailadd (Mail_addr(30)) ? -- 很可能前半段都是相同的省市区街道名称 Province varchar(1024), City varchar(1024), District varchar(1024), Local_address varchar(1024) ... -- 建立联合索引或单列索引   索引覆盖扫 #   最核心SQL考虑索引覆盖 select Name from tb_user where UserID=? Key idx_uid_name(UserID, Name)  不需要回表获取name字段，IO最小，效率最高  无法使用索引的情况 #   索引列进行数学运算或函数运算 where id+1=10; X where id = (10-1); ok year(col) \u0026lt; 2007; X col \u0026lt; \u0026#39;2007-01-01\u0026#39;; ok  未含符合索引的前缀字段 Idx_abc (a, b, c): where b=? and c=?; X (b, c) ok  前缀通配,'_\u0026lsquo;和\u0026rsquo;%\u0026lsquo;通配符 Like \u0026#39;%xxx%\u0026#39;; X Like \u0026#39;xxx%\u0026#39;; ok  where 条件使用NOT, \u0026lt;\u0026gt;, != 字段类型匹配  并不绝对，但是无法预测地会造成问题，不要使用  a int(11), idx_a (a) where a = \u0026#39;123\u0026#39;; X where a = 123 ; ok   利用索引排序 #  idx_a_b (a, b)\n 能够使用索引帮助排序的查询：  order by a a = 3 order by b order by a, b order by a desc, b desc a \u0026gt; 5 order by a  不能使用索引帮助排序的查询：  order by b a \u0026gt; 5 order by b a in (1, 3) order by b order by a asc, b desc 如何确定一个查询走没走索引，走了哪个索引 #   explain是确定一个查询如何走索引最简便有效的方法 explain select * from tb_test ; 关注的项目  type:查询access的方式 key:本次查询最终选择使用哪个索引，NULL为未使用索引 key_len:选择的索引使用的前缀长度或者整个长度 rows:可以理解为查询逻辑读，需要扫描过的记录行数 extra:额外信息，主要指的fetch data的具体方式    4.2-MySQL数据库设计 #  什么是Schema设计 #   设计数据库的表，索引，以及表和表的关系  在数据模型的基础上将关系模型转化为数据库表 满足业务模型需要基础上根据数据库和应用特点优化表结构    为什么Schema需要设计 #   Schema关系到应用程序功能与性能  满足业务功能需要 同性能密切相关 数据库扩展性 满足周边需求(统计，迁移等)   关系型数据库修改Schema经常是高危操作  Schema设计要体现一定的前瞻性    完全由开发者主导的Schema设计 #   着眼于实现当前功能 完全基于功能的设计可能存在一些隐患  不合理的表结构或索引设计造成性能问题 没有合理评估到数据量的增长造成空间紧张而且难以维护 需求频繁修改造成表结构经常变更 业务重大调整导致数据经常需要重构订正    基于性能的表设计 #   根据查询需要设计好索引 根据核心查询需求，适当调整表结构 基于一些特殊业务需求，调整实现方式  索引 #   正确使用索引 更新尽可能使用主键或唯一索引 主键尽可能使用自增ID字段 核心查询覆盖扫描  用户登录需要根据用户名返回密码用于验证create index idx_uname_passwd on tb_user (username, password); 建立联合索引避免回表取数据    反范式，冗余必要字段 #   针对核心SQL保留查询结果所必须的冗余字段，避免频繁join  例：消息表中冗余了每次读消息必须返回的nickname字段，避免每次读消息都变成join操作。代价是用户修改nickname成本变高。    拆分大字段 #   拆分大字段到单独表中，避免范围扫描代价大  例：博文表拆分两份，标题表只保留标题和内容缩略部分，用于快速批量返回标题列表，正文表保存大段博文内容，用于点开文章单个读取    避免过多字段或过长行 #   根据SQL必要返回设计字段，有必要就拆表，避免过多字段 一次没有必要获取那么多列数据 行过长导致表数据页记录变少，范围扫描性能降低 更新数据也代价增加 16K也最少放2行，可能出现行迁移  分页查询 #   避免limit + offset过大 应该使用自增主键ID模拟分页  第一页，直接查 得到第一页的max(id)=123(一般是最后一条记录) 第二页，带上id\u0026gt;123查询：where id\u0026gt;123 limit 100 这样每次只需要扫描100条数据   要求业务上禁止查询XX页之后的数据  热点读数据特殊处理 #   根据数据获取的频率或数量不同对热点数据做特殊处理  例1：论坛系统中置顶帖、公告贴，可以单独拆分存储，由于每次访问都要全部读出来，单独放在一起，避免每次都到普通表中随机找出来    热点写数据特殊处理 #   根据数据获取的频率或数量不同对热点数据做特殊处理  例2：微博系统中对于大量关注的热点账号消息从\u0026quot;推\u0026quot;改为\u0026quot;拉\u0026quot;，避免过量insert操作。    准实时统计 #   对不需要精确结果的计数等统计要求，建立定期更新结果表  例：首页要求展示动态成交总金额，维护一个计数表，每分钟根据原表注册时间获取增量sum值更新计数表，避免每次用户刷新都要扫描交易全记录表    实时统计改进1 - 触发器实时统计 #   对需要精确统计的计数利用数据库触发器维护计数表  例：用户量冲亿活动要求实时统计，用户表上加触发器，每次有新用户插入就同时在计数表+1    实时统计改进2 - 缓存实时统计 #   对需要精确统计的计数利用前端缓存实时维护计数  例：用户量冲亿活动要求实时统计，注册数量在缓存中实时维护，每注册一个就+1，完全避免数据库读写操作。缓存万一故障失效，可从数据库整体count重新获取。    实时统计改进2 - 最大自增ID获取总数 #   很多逻辑可以利用自增ID主键最大值直接作为总数  例：用户量冲亿活动要求实时统计，用户表加上自增ID作为主键，只要取当时max(ID)就可以得到用户总数    课拓展性设计 #   可拓展性  硬件资源增长有极限的情况下处理尽可能久的线上业务   数据分级，冷数据归档与淘汰  可以不断释放空间供新数据使用   为数据分布式做准备  分库分表 水平拆分 牺牲一定的关系模型支持    分区表与数据淘汰 #   range分区 适合数据需要定期过期的大表 单个分区扫描迁移数据到历史库避免全表扫描IO开销 删除单个分区非常高效  分区表与垂直分区 #   list分区 适合将来可能要基于地区，类目等方式垂直拆分数据的方式 清理节点上不要的数据非常高效  分区表与水平分区 #   hash分区 适合将来需要做水平拆分的表 清理节点上不要的数据非常高效  MySQL分区表的局限 #   主键或唯一键必须包含在分区字段内 分区字段必须是整数类型，或者加上返回整数的函数  满足周边需求 #   为周边需求额外增加表设计  为后台统计任务增加特殊索引 为数据迁移或统计需求增加时间戳    统计和后台需求 #   统计运行SQL往往和线上有很大不同  利用MySQL——主多从，主从可以建不同索引的特性将统计分流到特定从库 包括一些特殊用户批量查询等，所有对线上有IO压力的查询都要读写分离    自动更新时间戳 #   统计需求经常要求从线上读走增量数据 表的第一个timestamp类型字段再写入时如果不填值，会自动写入系统时间戳 表的第一个timestamp类型字段每次记录发生更新后都会自动更新 在update_time字段上建索引用于定时导出增量数据  Schema设计与前瞻性 #   基于历史经验教训，预防和解决同类问题 把折腾DBA够呛的所有Schema改造的原因记录并分析总结 例： 业务为例用户信息加密做了大改造  数据库结果大量改动，增加了加密字段，验证策略表，所有表重新订正数据等等 是否所有用到用户信息管理的应用都要去上线就用密文？   程序bug误删数据，线上风险大  改造业务流程，不再删除数据，加入is_deleted标记位，经常给各种表加 今后的类似表是否一上线就都用标记位的方式，并加上修改原因字段？   支付类应用后期做了风控改造  对线上订单大表改造，加了限额，终端类型等字段 遇到支付类应用，是否一上线就提示业务是否需要考虑风控并留好相关字段？    4.3-MySQL容量评估 #  性能容量评估 #   分析线上业务场景 评估数据库服务器所需性能指标 预估可能成为瓶颈的服务器资源 帮助数据库性能调优  数据库服务器硬件性能指标 #   磁盘IO性能 内存容量 CPU 网络吞吐量 磁盘容量  数据库业务特点关键词 #   OLTP/OLAP类型 并发请求 读写比例 数据量 冷热数据比 数据分级存储  OLTP/OLAP #   T = Transaction 面向广大用户，高并发，较短事务操作 互联网应用绝大部分属于OLTP OLTP看重服务器CPU，内存，写事务较多或内存不够则依赖磁盘IO A = Analytical 通常面向内部人员，大规模复查询 OLAP看重磁盘扫描的IO能力，部分依赖内存排序  并发请求 - 衡量线上业务繁忙程度 #   业务高峰时数据库的每秒并发访问量是多少 通过应用服务器数量，连接池配置判断 通过产品估算初上线用户规模和用户增长速度判断 通过实际业务业务类型判断 并发量相关资源：CPU  读写比例 - 描述应用程序如何使用数据库 #   线上业务select只读与update/delete/insert写操作比例 delete/update通常都是先读再写 insert需要区分数据写入时持续insert还是大量导入数据 根据业务实际场景分析 多读场景相关资源：内存 多写场景相关资源：磁盘IO  数据量 - 总量 #   数据库服务器存储设备可扩容能力的上限 根据估算的业务量，写入模式，分析数据增长量 预估一个硬件升级周期内数据库可存放数据的总量，上线时要留好余量 数据总量相关资源：磁盘容量  冷数据与热数据 - 有用数据的实时集合 #   热数据，线上最新一定周期内将被反复访问的数据 冷数据，线上保存着的，最近不会被在线用户用到的数据 估算活跃用户量，数据增长量等预估热数据量 内存大小尽可能足够存放线上实时热数据 热数据相关资源：内存  线上数据分层存储 - 缓解线上磁盘空间压力 #   最新热数据确保放在内存中 还可能访问到的较早数据存放在线上库磁盘中 更早的不会常规访问的数据定期迁移至历史库中 区分哪些数据时效性强可以迁移  服务器资源选型 - 将可选方案列出来 #     资源指标 可选方案     磁盘IO性能 单盘 -\u0026gt; 盘阵; SATA -\u0026gt; SAS; HDD -\u0026gt; SSD   内存容量 较小内存 -\u0026gt; 较大内存   CPU 普通 -\u0026gt; 多核，超线程   网络吞吐量 千兆 -\u0026gt; 万兆; 单网卡 -\u0026gt; 多路;   磁盘容量 单盘 -\u0026gt; 盘阵; 单盘 -\u0026gt; LVM    案例一，网易云音乐曲库数据库服务器评估 #   用于存放线上数千万歌曲信息 确定属于OLTP线上类型数据库 并发请求量  50台应用服务器，每台最大连接数100 可能峰值5000qps，并发请求量较大   CPU需求高 读写比例  访问模式以用户列出歌单和播放歌曲时查询歌曲信息为主，用户只有只读查询 写数据发生在录入新歌或修改歌曲信息时后台操作，写比例小，且为批量导入 读写比100:1   数据总量  估算每首歌信息8K，总计5000万，总量400G 数据总量增长相对缓慢   冷热数据  5000万歌曲中大约40%可能被访问，10%属于热点歌曲 热数据大约\u0026lt;=40G   数据分级存储需求  由于没有用户产生的数据，歌曲信息无法分级存储   内存需求一般，\u0026gt;=40G 磁盘IO能力需求一般 网络流量要求，8k*2500/1024 ≈ 20MB/S，一般     资源指标 可选方案     磁盘IO性能 两块SAS做RAID1   内存容量 96G内存   CPU 2c8core超线程 相当于32核   网络吞吐量 千兆双网卡bunding   磁盘容量 900G    案例二，网易理财销售数据库服务器评估 #   用于存放理财用户线上订单 确定属于OLTP线上类型数据库 业务场景有明显特征  特定高息产品秒杀销售时间窗有大量并发订单写入 平时只有少量订单查询和请求，和较低的常规产品购买请求   评估应以满足最关键的业务高峰为基准 并发请求量  秒杀期间持续时间短，但是并发量预估30台应用服务器约2000tps   读写比例  高峰时写订单是主要开销操作   CPU要求高 磁盘IO要求很高 数据总量  根据业务分析，订单属于写入瞬时量大，总量较小，单笔金额较高 总量预估一年成交百万级别，增长较稳定 判断数据存储需求小于200G   冷热数据  峰值写入为主，内存要求存放热点期间产生的脏数据即可   数据分级存储需求  用户订单业务约定页面展示最近半年订单，半年前的需要到历史查询页面专门查询 因此可以做分级存储，迁移所有半年前的订单至历史库   内存需求一般， \u0026gt;= 30G 磁盘空间需求一般， \u0026gt;=200G 磁盘IO能力需求很高 网络要求较高  并发流量较高 响应速度要求高       资源指标 可选方案     磁盘IO性能 两块SSD做RAID1   内存容量 64G内存   CPU 2c8core超线程 相当于32核   网络吞吐量 万兆双网卡bunding   磁盘容量 600G    4.4-MySQL性能测试 #  为什么需要性能测试 #   对线上产品缺乏心理预估 重现线上异常 规划未来的业务增长 测试不同硬件软件配置  性能测试的分类 #   设备层的测试 业务层的测试 数据库层的测试  设备层的测试 #   关注的指标  服务器、磁盘性能 磁盘坏块率 服务器寿命    业务层测试 #   针对业务进行测试  数据库层测试 #   什么情况下要做MySQL的测试  测试不同的MySQL分支版本 测试不同的MySQL版本 测试不同的MySQL参数搭配    MySQL测试分类 #   CPU Bound IO Bound  写入测试 更新测试 纯读测试 混合模式\n常用的测试工具 #   开源的MySQL性能测试工具  sysbench tpcc-mysql mysqlslap   针对业务编写性能测试工具  blogbench    性能测试衡量指标 #   服务吞吐量(TPS, QPS) 服务响应时间 服务并发性  Sysbench #   业界较为出名的性能测试工具 可以测试磁盘、CPU、数据库 支持多种数据库：Oracle, DB2, MySQL 需要自己下载编译安装 建议版本：sysbench0.5  编译安装Sysbench #   下载sysbench  git clone https://github.com/akopytov/sysbench.git   编译\u0026amp;安装  ./autogen.sh ./configure make \u0026amp;\u0026amp; make install    Sysbench流程 #   常见的做法  初始化数据 -\u0026gt; 运行测试 -\u0026gt; 清理数据\nPrepare语法 #  sysbench --test=parallel_prepare.lua --oltp_tables_count=1 --rand-init=on --oltp-table-size=500000000 --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=sys --mysql-password=netease --mysql-db=sbtest --max-requests=0 prepare    参数 含义     \u0026ndash;test=parallel_prepare.lua 运行导数据的脚本   \u0026ndash;oltp_tables_count 测试需要几张表   \u0026ndash;oltp-table-size 每张表的大小   \u0026ndash;mysql-host MySQL Host   \u0026ndash;mysql-port MySQL Port   \u0026ndash;mysql-db MySQL DB   \u0026ndash;mysql-user MySQL User   \u0026ndash;mysql-password MySQL Password   \u0026ndash;rand-init 是否随机初始化数据   \u0026ndash;max-requests 执行多少个请求之后停止   prepare 执行导数据    Sysbench表结构 #  create table \u0026#39;sbtest1\u0026#39;( \u0026#39;id\u0026#39; int(10) unsigned not null AUTO_INCREMENT, \u0026#39;k\u0026#39; int(10) unsigned not null DEFAULT \u0026#39;0\u0026#39;, \u0026#39;c\u0026#39; char(120) not null DEFAULT \u0026#39;\u0026#39;, \u0026#39;pad\u0026#39; char(60) not null DEFAULT \u0026#39;\u0026#39;, PRIMARY KEY (\u0026#39;id\u0026#39;), KEY \u0026#39;k_1\u0026#39; (\u0026#39;k\u0026#39;) ) ENGINE=InnoDB AUTO_INCREMENT=3000000001 DEFAULT CHARSET=utf8 MAX_ROWS=1000000 Run语法 #  sysbench --test=oltp.lua --oltp_tables_count=1 --num-threads=100 --oltp-table-size=500000000 --oltp-read-only=off --report-interval=10 --rand-type=uniform --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=sys --mysql-password=netease --mysql-db=sbtest --max-time=1000 --max-requests=0 run    参数 含义     \u0026ndash;test=oltp.lua 需要运行的lua脚本   \u0026ndash;oltp_tables_count 测试需要几张表   \u0026ndash;oltp-table-size 每张表的大小   \u0026ndash;num-threads 测试并发线程数   \u0026ndash;oltp-read-only 是否为只读测试   \u0026ndash;report-interval 结果输出间隔   \u0026ndash;rand-type 数据分布模式，热点数据或者随机数据   \u0026ndash;max-time 最大运行时间   \u0026ndash;max-requests 执行多少个请求之后停止   prepare 开始测试    特殊情况 #   写入测试  写入数据进行测试 -\u0026gt; 清理数据\ncleanup #   手动drop掉表和database 使用sysbench提供的cleanup命令  sysbench --test=parallel_prepare.lua --oltp_tables_count=1 --rand-init=on --oltp-table-size=500000000 --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=sys --mysql-password=netease --mysql-db=sbtest --max-requests=0 cleanup Tpcc-mysql #    TPC-C是专门针对联机交易处理系统(OLTP系统)的规范\n  Tpcc-mysql由percona根据规范实现\n  下载Tpcc-mysql\n bzr branch lp:~percona-dev/perconatools/tpcc-mysql    编译安装\n  使用Tpcc-mysql的步骤 #  创建表结构和索引 -\u0026gt; 导数据 -\u0026gt; 运行测试 -\u0026gt; 数据清理\n创建表结构 #   create_table.sql add_fkey_idx.sql  Tpcc-load #  tpcc_load [server] [DB] [user] [pass] [warehouse]\n   函数 含义     server 数据库IP   DB DB名称   user 用户名   pass 密码   warehouse 仓库数量    Tpcc-start #  tpcc_start -h server_host -P port -d database_name -u mysql_user -p mysql_password -w warehouse -c connections -r warmup_time -I running_time -i report-interval -f report-file    函数 含义     warehouse 仓库数量   connections 并发线程数   warmup_time 预热时间   running_time 运行时间   report_interval 输出时间间隔   report_file 输出文件    总结 #   IO Bound测试数据量要远大于内存、CPU Bound测试数据量要小于内存 测试时间建议大于60分钟，减小误差 Sysbench更倾向于测试MySQL性能、TPCC更接近于业务 运行测试程序需要同时监控机器负载，MySQL各项监控指标  "});index.add({'id':120,'href':'/life/docs/databases/mysql_163%E8%AF%BE%E5%A0%82/%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%BE%E5%A0%82mysql_chapter5/','title':"MySQL运维实践",'section':"网易云课堂MySQL微专业学习笔记",'content':"MySQL运维实践 #  5.1-MySQL日志系统 #  什么是日志 #   日志(log)是一种顺序记录事件流水的文件 记录计算机程序运行过程中发生了什么 多种多样的用途  帮助分析程序问题 分析服务请求的特征、流量等 判断工作是否成功执行 等等……    MySQL日志的分类 #   服务器日志  记录进程启动运行过程中的特殊事件，帮助分析MySQL服务遇到的问题 根据需求抓取特定的SQL语句，追踪性能可能存在的问题的业务SQL   事务日志  记录应用程序对数据的所有更改 可用于数据恢复 可用于实例间数据同步       分类 日志名称     服务器日志 服务错误日志   服务器日志 慢查询日志   服务器日志 综合查询日志   事务日志 存储引擎事务日志   事务日志 二进制日志    服务错误日志 #   记录实例启动运行过程中重要消息 配置参数  log_error = /data/mysql_data/node-1/mysql.log   内容并非全是错误消息 如果mysqld进程无法正常启动首先查看错误日志  慢查询日志 #   记录执行时间超过一定阈值的SQL语句 配置参数  slow_query_log = 1 slow_query_log_file = /data/mysql_data/node-1/mysql-slow.log long_query_time = 5  用于分析系统中可能存在性能问题的SQL  综合查询日志 #   如果开启将会记录系统中所有SQL语句 配置参数  general_log = 1 general_log_file = /data/mysql_data/node-1/mysql-slow.log  偶尔用于帮助分析系统问题，对性能有影响  查询日志的输出与文件切换 #   日志输出参数  log_output={file|table|none}\n 如果日志文件过大，可以定期截断并切换新文件  flush log;\n存储引擎事务日志 #   部分存储引擎拥有重做日志(redo log) 如InnoDB, TokuDB等WAL(Write Ahead Log)机制存储引擎 日志随着事务commit优先持久化，确保异常恢复不丢数据 日志顺序写性能较好  InnoDB事务日志重用机制 #   InnoDB事务日志采用两组文件交替重用  二进制日志binlog #   binlog (binary log) 记录数据引起数据变化的SQL语句或数据逻辑变化的内容 MySQL服务层记录，无关存储引擎 binlog的主要作用：  基于备份恢复数据 数据库主从同步 挖掘分析SQL语句    开启binlog #   主要参数  log_bin = c:/tmp/mylog/mysql-bin\rsql_log_bin = 1\rsync_binlog = 1\r 查看binlog  show binary logs;\nbinlog管理 #   主要参数  max_binlog_size = 100MB\rexpire_logs_days = 7\r  binlog始终生成新文件，不会重用\n  手工清理binlog\n  purge binary logs to 'mysql-bin.000009';\rpurge binary logs before '2016-4-2 21:00:40'\r查看binlog内容 #   日志  show binlog events in 'mysql-bin.000011';\rshow binlog events in 'mysql-bin.000011' from 60 limit 3;\r mysqlbinlog工具  mysqlbinlog c:/tmp/mylog/mysql-bin.000001\r--start-datetime | --stop-datetime\r--start-position | --stop-position\rbinlog格式 #   主要参数  binlog_format = {ROW|STATEMENT|MIXED}\n 查看row模式的binlog内容  mysqlbinlog --base64-output=decode-rows -v c:/tmp/mylpg/mysql-bin.000001\n5.2-MySQL数据备份 #  基本指数 - 备份用途 #   数据备灾  应对硬件故障数据丢失 应对人为或程序bug导致数据删除   制作镜像库以供服务  需要将数据迁移、统计分析等用处 需要为线上数据建立一个镜像    基本知识 - 备份内容 #   数据  数据文件或文本格式数据   操作日志(binlog)  数据库变更日志    基本知识 - 冷备份与热备份 #   冷备份  关闭数据库服务，完整拷贝数据文件   热备份  在不影响数据库读写服务的情况下备份数据库    基本知识 - 物理备份与逻辑备份 #   物理备份  以数据页的形式拷贝数据   逻辑备份  导出为裸数据或者SQL(insert)语句    基本知识 - 本地备份与远程备份 #   本地备份  在数据库服务器本地进行备份   远程备份  远程连接数据库进行备份    基本知识 - 全量备份与增量备份 #   全量备份  备份完整的数据库   增量备份  只备份上一次备份以来发生修改的数据    基本知识 - 备份周期 #  考虑因素：\n 数据库大小(决定备份时间) 恢复速度要求(快速or慢速) 备份方式(全量or增量)  常用工具及用法 #   mysqldump - 逻辑备份，热备 xtrabackup - 物理备份， 热备 Lvm/zfs snapshot - 物理备份 mydumper - 逻辑备份，热备 cp - 物理备份，冷备  常用工具及用法 - mysqldump #  MySQL官方自带的命令行工具\n主要示例：\n 演示使用mysqldump备份表、库、实例  # 备份所有数据库 mysqldump -uroot -p123456 --socket=/var/run/mysqld/mysqld.sock --all-databases \u0026gt; /dbbackup/all_db.sql # 备份指定的数据库 mysqldump -uroot -p123456 --socket=/var/run/mysqld/mysqld.sock --databases db2 \u0026gt; /dbbackup/db2.sql # 备份单个表 mysqldump -uroot -p123456 --socket=/var/run/mysqld/mysqld.sock db2 t1 \u0026gt;/dbbackup/db2_t1.sql # 还原表 mysql \u0026gt; source /dbbackup/db2_t1.sql  演示使用mysqldump制作一致性备份  mysqldump --single-transaction -uroot -p123456 --all-databases \u0026gt; /dbbackup/add_db_2.sql  演示使用mysqldump远程备份一个数据库  mysqldump -utest -ptest -h192.168.0.68 -P3306 --all-databases \u0026gt; /dbbackup/remote_bakall.sql  演示使用mysqldump导出数据为csv格式  mysqldump -uroot -p123456 --single-transaction --fields-terminated-by=, db1 -T /tmp 常用工具及用法 - xtrabackup #  特点：\n 开源，在线备份InnoDB表 支持限速备份，避免对业务造成影响 支持流备 支持增量备份 支持备份文件压缩与加密 支持并行备份与恢复，速度快  xtrabackup备份原理 #   基于InnoDB的crash-recovery功能 备份期间允许用户读写，写请求产生redo日志 从磁盘上拷贝数据文件 从InnoDB redo log file实时拷贝走备份期间产生的所有redo日志 恢复的时候 数据文件 + redo日志 = 一致性数据  实用脚本innobackupex #   开源Perl脚本，封装调用xtrabackup及一系列相关工具与OS操作，最终完成备份过程 支持备份InnoDB和其他引擎的表 备份一致性保证  innobackupex备份基本流程 #  start xtrabackup_log -\u0026gt; copy .ibd; ibdata1 -\u0026gt; FLUSH TABLE WITH READ LOCK -\u0026gt; copy .FRM; MYD; MYI; misc files -\u0026gt; Get binary log position -\u0026gt; UNLOCK TABLES -\u0026gt; stop and copy xtrabackup_log\ninnobackupex使用 #  主要示例：\n 全量备份  innobackupex --user=root --password=123456 --defaults-file=/etc/mysql/my.cnf /dbbackup  增量备份  innobackupex --user=root --password=123456 --defaults-file=/etc/mysql/my.cnf --incremental --incremental-dir /dbbackup/2016-4-3_13:24:32 /dbbackup  流方式备份  innobackupex --user=root --password=123456 --defaults-file=/etc/mysql/my.cnf --stream=xbstream /dbbackup/ \u0026gt; /dbbackup/stream.bak  并行备份  innobackupex --user=root --password=123456 --defaults-file=/etc/mysql/my.cnf --parallel=4 /dbbackup/  限流备份  innobackupex --user=root --password=123456 --defaults-file=/etc/mysql/my.cnf --throttle=10 /dbbackup/  压缩备份  innobackupex --user=root --password=123456 --defaults-file=/etc/mysql/my.cnf --compress --compress-thread 4 /dbbackup/ 如何制定备份策略 #  需要考虑的因素\n 数据库是不是都是innodb引擎表 -\u0026gt; 备份方式，热备or冷备 数据量大小 -\u0026gt; 逻辑备份or物理备份，全量or增量 数据库本地磁盘空间十分充足 -\u0026gt; 备份到本地or远程 需要多块恢复 -\u0026gt; 备份频率 小时or天  5.3-MySQL数据恢复 #  什么时候需要恢复数据 #   硬件故障(如磁盘损坏) 人为删除(如误删除数据、被黑) 业务回滚(如游戏bug需要回档) 正常需求(如部署镜像库、查看历史某时刻数据)  数据恢复的必要条件 #   有效备份 完整的数据库操作日志(binlog)  数据恢复思路 #   最新一次备份 + binlog恢复到故障时间点(适用于各种数据丢失场景) 挖掘最后一次备份到故障点之间的binlog获取相关SQL语句，构造反转SQL语句并应用到数据库(只是用于记录丢失，且binlog必须是row格式)  反转SQL语句 #  例：\nt1(id primary key, a int)\n反转SQL语句：\ninsert into t(id, a) values(1, 1) -\u0026gt; delete t1 where id=1 and a=1 update t1 set a=5 where id=1 -\u0026gt; update t1 set a=1 where id=1 delete from t1 where id=1 -\u0026gt; insert into t(id, a) values(1, 1)\n数据库恢复工具与命令 #   mysqldump备份 -\u0026gt; source恢复 xtrabackup备份 -\u0026gt; xtrabackup恢复 binlog备份 -\u0026gt; mysqlbinlog恢复  详细示例讲解 #   恢复某几条误删数据 恢复误删表、库 将数据库恢复到指定时间点  恢复误删除数据 #  case：误操作，删除数据忘记带完整条件，执行delete from user where age \u0026gt; 30 [and sex=male]\n需求：将被删除的数据还原\n恢复前提：完整的数据库操作日志(binlog)\ndelete from user where sex=\u0026#39;female\u0026#39;; # 首先需要找到binlog里的信息 mysqlbinlog -vv mysql-bin.000001 # 找出sql语句，然后写出反转sql语句 恢复误删表、库 #  case：业务被黑，表被删除了(drop teble user)\n需求：将表恢复\n前提：备份 + 备份以来完整binlog\ninnobackupex --apply-log /dbbackup/filename # 查看binlog的位置点 cat xtrabackup_binlog_info # 查看结束点 mysqlbinlog -vv filename mysqlbinlog -vv --start-position=2556990 -- stop-position=2776338 mysqlbinlog -vv --start-position=2556990 -- stop-position=2776338 | mysql -uroot -p123456 --sock=/dbbackup/mysql_3309/mysqld.sock 课程小结 #   恢复是已经非常苦逼的差事，尽量避免做。我们要做数据卫士而不是救火队员。(线上应该严格把控权限，数据变更操作应事先测试，操作时做好备份) 有效备份(+binlog)是重中之重，对数据库定期备份是必须的 备份是一切数据恢复的基础  5.4-MySQL线上部署 #  MySQL线上部署 #  考虑因素：\n 版本选择， 5.1、5.5还是5.6？ 分支选择，官方社区版？ percona server？ Mariadb？ 安装方式，包安装？二进制包安装？源码安装？ 路径配置，参数配置(尽量模板化、标准化) 一个实例多个库 or 多个实例单个库？  二进制安装MySQL #   下载软件包 解压放到指定目录(比如/usr/local) 将MySQL目录放到PATH中 初始化实例，编辑配置文件并启动 账户安全设置  编译安装MySQL #   下载MySQL源码安装包 安装必要包(make cmake bison-devel ncurses-devel build-essential) Cmake配置MySQL编译选项，可以定制需要安装的功能 make \u0026amp;\u0026amp; make install 初始化实例，编辑配置文件并启动 账户安全设置  MySQL升级 #   下载MySQL5.6安装包并配置MySQL5.6安装包安装路径 关闭MySQL5.5实例，修改部分参数，使用MySQL5.6软件启动 执行MySQL5.6路径下mysql_upgrade脚本 验证是否成功升级  MySQL多实例安装 #   部署好mysql软件 编辑多个配置文件，初始化多个实例 启动MySQL实例  MySQL多实例部署 #  为啥多实例部署？\n 充分利用系统资源 资源隔离 业务、模块隔离  MySQL线上安装小结 #   根据需求选择合适的版本以及分支，建议使用或升级到较高版本5.5或5.6 如果需要定制MySQL功能的话，可以考虑编译安装，否则的话建议使用二进制包安装，比较省事 根据机器配置选择部署多个MySQL实例还是单个实例，机器配置非常好的话，建议部署多实例  5.5-MySQL主从复制 #  MySQL主从复制 #   一主一从 主主复制 一主多从 多主一从 联级复制  MySQL主从复制用途 #   实时灾备，用于故障切换 读写分离，提供查询服务 备份，避免影响业务  MySQL主从复制部署 #  主从部署必要条件\n 主库开启binlog日志(设置log-bin参数) 主从server-id不同 从库服务器能连通主库  主从部署步骤：\n 备份还原(mysqldump或xtrabackup) 授权(grant replication slave on .) 配置复制，并启动(change master to) 查看主从复制信息(show slave status\\G)  MySQL复制存在的问题 #  存在的问题\n 主机宕机后，数据可能丢失 从库只有一个sql thread，主库写压力大，复制很可能延时  解决方法：\n 半同步复制 并行复制  MySQL semi-sync(半同步复制) #  半同步复制\n 5.5集成到MySQL，以插件形式存在，需要单独安装 确保事务提交后binlog至少传输到一个从库 不保证从库应用完这个事务的binlog 性能有一定的降低，响应时间更长 网络异常或从库宕机，卡住主库，直到超时或从库恢复  MySQL异步复制 #  MySQL semi-sync(半同步复制) #  配置MySQL半同步复制 #  只需一次：\n主库：\nINSTALL PLUGIN rpl_semi_sync_master SONAME 'semisync_master.so';\n从库：\nINSTALL PLUGIN rpl_semi_sync_slave SONAME 'semisync_slave.so';\n动态设置：\n主库：\nSET GLOBAL rpl_semi_sync_master_enabled=1; SET GLOBAL rpl_semi_sync_master_timeout=N; master 延迟切异步\n从库：\nSET GLOBAL rpl_semi_sync_slave_enabled=1;\n配置MySQL并行复制 #  并行复制\n 社区版5.6中新增 并行是指从库多线程apply binlog 库级别并行应用binlog，同一个数据库更改还是串行的(5.7版并行复制基于事务组)  设置\nset global slave_parallel_workers=10; 设置sql线程数为10\n联级复制 #  A -\u0026gt; B -\u0026gt; C\nB中添加参数： log_slave_updates B将把A的binlog记录到自己的binlog日志中\n复制监控 #  查询从库状态：\nshow slave status\\G\n复制出错处理 #  常见：1062(主键冲突) 1032(记录不存在) 解决：手动处理 或： 跳过复制出错 set global sql_slave_skip_counter=1\n总结 #   MySQL主从复制是MySQL高可用性、高性能(负载均衡)的基础 简单、灵活，部署方式多样，可以根据不同业务场景部署不同复制结构 MySQL主从复制目前也存在一些问题，可以根据需要部署复制增强功能来解决问题 复制过程中应该时刻监控复制状态，复制出错或延时可能给系统造成影响 MySQL复制是MySQL数据库工程师必知必会的一项基本技能  5.6-MySQL日常运维 #  DBA运维工作 #  日常\n 导数据、数据修改、表结构变更 加权限、问题处理 其他 数据库选型部署、设计、监控、备份、优化等  导数据及注意事项 #   数据最终形式(csv、sql文本 还是直接导入某库中) 导数据方法(mysqldump、select into outfile) 导数据注意事项  导出为csv格式需要file权限，而且只能数据库本地导 避免锁库锁表(mysqldump使用——single-transaction选项不锁表) 避免对业务造成影响，尽量在镜像库做    数据修改及注意事项 #   修改前切记做好备份 开事务做，修改完检查好了再提交 避免一次 修改大量数据，可以分批修改 避免业务高峰期做  表结构变更注意事项 #   在低峰期做 表结构变更是否会有锁？(5.6包含online ddl功能) 使用pt-online-schema-change完成表结构变更  可以避免主从延时 可以避免负载过高，可以限速    加权限及注意事项 #   只给符合需求的最低权限 避免授权时修改密码 避免给应用账号super权限  问题处理(数据库慢？) #   数据库慢在哪？ show processlist查看mysql连接信息 查看系统状态(iostat, top, vmstat)  小结 #   日常工作比较简单，但是任何一个操作都可能影响线上服务 结合不同环境，不同要求选择最合适的方法处理 日常工作应该求稳不求快，保障线上稳定是DBA的最大责任  5.7-MySQL参数调优 #  为什么要调整参数 #   不同服务器之间的配置、性能不一样 不同业务场景对数据的需求不一样 MySQL的默认参数只是个参考值，并不适合所有的应用场合  优化之前我们需要知道什么 #   服务器相关的配置 业务相关的情况 MySQL相关的配置  服务器上需要关注哪些 #   硬件情况 操作系统版本 CPU、网卡节电模式 服务器numa设置 RAID卡缓存  磁盘调度策略-write back #   数据写入cache既返回，数据异步的从cache刷入存储介质  磁盘调度策略-write through #   数据同时写入cache和存储介质才返回写入成功  Write Back VS Write Through #   write Back 性能优于 Write Through Write Through 比 Write Back安全性高  RAID #   RAID Redundant Array of Independent Disks  生产环境里一般不太会用裸设备，通常会使用RAID卡对一块盘或多块盘做RAID RAID卡会预留一块内存，来保证数据高效存储与读取 常见的RAID类型有:RAID1、RAID0、RAID10和RAID5    RAID0 VS RAID1 #   RAID 0 - Block Striped. No Mirror. No Parity. RAID 1 - Block Mirrored. No Stripe. No Parity.  RAID5 VS RAID10 #   RAID 5 - Block Striped. Distributed Parity.(至少三块盘，每块里有两个数据块和一个校验块) RAID 10 - Block Mirrored.(每两块盘做RAID1，然后再按组做RAID0，至少四块盘)  RAID如何保证数据安全 #   BBU(Backup Battery Unit)  BBU保证在WB策略下，即使服务器发生掉电或者宕机，也能够将缓存数据写入到磁盘，从而保证数据的安全    MySQL有哪些注意事项 #   MySQL的部署安装 MySQL的监控 MySQL参数调优  部署MySQL的要求 #   推荐的MySQL版本: \u0026gt;= MySQL5.5 推荐的MySQL存储引擎: InnoDB  系统调优的依据：监控 #   实时监控MySQL的slow log 实时监控数据库服务器的负载情况 实时监控MySQL内部状态值  通常关注哪些MySQL Status #   Com_Select/Update/Delete/Insert Bytes_received/Bytes_sent Buffer Pool Hit Rate Threads_connected/Threads_created/Threads_running  MySQL参数调优 #   为什么要调整MySQL的参数  MySQL是通用数据库，但业务是多变的，默认参数无法满足所有业务需求 MySQL内部一些参数是在MySQL一些很老的版本时候做的，可能之前是做限流和保护用的，但随着机器性能的提高，这些保护类的参数可能会成为性能瓶颈    读优化 #   合理利用索引对MySQL查询性能至关重要 适当的调整参数也能提升查询性能  innodb_buffer_pool_size #   InnoDB存储引擎自己维护一块内存区域完成新老数据的替换 内存越大越能缓存更多的数据  innodb_thread_concurrency #   innoDB内部并发控制参数，设置为0代表不做控制 如果并发请求较多，参数设置较小，后进来的请求将会排队  写优化 #   表结构设计上使用自增字段作为表的主键 只对合适的字段加索引，索引太多影响写入性能 监控服务器磁盘IO情况，如果写延迟较大则需要扩容 选择正确的MySQL版本，合理设置参数  哪些参数有助于提高写入性能 #   innoDB_flush_log_at_trx_commit \u0026amp;\u0026amp; sync_binlog innodb log file size innodb_io_capacity innodb insert buffer  主要影响MySQL写性能的两个参数 #   innoDB_flush_log_at_trx_commit sync_binlog  innoDB_flush_log_at_trx_commit #   控制InnoDB事务的刷新方式，一共有三个值：0,1,2  N=0 - 每隔一秒，把事务日志缓存区的数据写到日志文件中，以及把日志文件的数据刷新到磁盘上(高效，但不安全) N=1 - 每个事务提交时候，把事务日志从缓存区写到日志文件中，并且刷新日志文件的数据到磁盘上，优先使用此模式保障数据安全性(低效，非常安全) N=2 - 每事务提交的时候，把事务日志数据从缓存区写到日志文件中；每隔一秒，但不一定刷新到磁盘上，而是取决于操作系统的调度(高效，但不安全)    sync_binlog #   控制每次写入Binlog，是否都需要进行一次持久化  如何保证事务的安全 #   innoDB_flush_log_at_trx_commit 和 sync_binlog都设为1 事务要和Binlog保证一致性  (加锁)-\u0026gt; xa_prepare, Fsync -\u0026gt; Write And Fsync Binlog -\u0026gt; InnoDB Commit, Fsync -\u0026gt;(释放锁)\n串行有哪些问题 #   SAS盘一般每秒只能有150~200个Fsync。 换算到数据库每秒只能执行50~60个事务  社区和官方的改进 #   MariaDB提出改进，即使这两个参数都是1也能做到合并效果，性能得到了大幅提高。 官方吸收了MariaDB的思想，并在此基础上进行了改进，性能再次得到了提高  Tips:\n 官方在MySQL5.6版本之后才做了这个优化 Percona和MariaDB版本在MySQL5.5已经包含了这个优化  InnoDB Redo log #   Write ahead Log  Redo log的作用 #   Redo log用在数据库崩溃会的故障恢复  Redo log有哪些问题 #   如果写入频繁导致Redo log里对应的最老的数据脏页还没有刷新到磁盘，此时数据库将卡住，强制刷新脏页到磁盘 MySQL默认配置两个文件才10M，非常容易写满，生产环境中应适当调整大小。  innodb_io_capacity #   InnoDB每次刷多少个脏页，决定InnoDB存储引擎的吞吐能力。 在SSD等高性能存储介质下，应该提高该参数以提高数据库的性能。  Insert Buffer #   顺序读写 VS 随机读写 随机请求性能远小于顺序请求  尽可能多的随机请求合并为顺序请求才是提高数据库性能的关键\n MySQL从5.1版本开始支持Insert Buffer MySQL5.5版本之后同时支持update和delete的merge Insert Buffer只对二级索引且非唯一索引有效  总结 #   服务器配置要合理(内核版本、磁盘调度策略、RAID卡缓存) 完善的监控系统，提前发现问题 数据库版本要跟上，不要太新，也不要太老 数据库性能优化：  查询优化：索引优化为主，参数优化为辅 写入优化：业务优化为主，参数优化为辅    "});index.add({'id':121,'href':'/life/docs/databases/mysql/mysql_%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/','title':"数据库设计的规范",'section':"mysql学习笔记",'content':"数据库设计的规范 #   数据库表和字段都大写 表都要加业务后缀，例如_C客户表 _B基础表 _P权限表 必须有主键，主键是表名去掉业务后缀，加_ID，大多表的主键使用UUID 字段多个单词时，全大写，用下划线隔开 类型INT/LONG/DOUBLE/TIMESTAMP/CHAR/VARCHAR2 尽量化在这几个类型中，这样数据库设计相当简单 排序号定死名称ORDER_NO 权限两个字段CREATE_BY创建人，CREATE_DEPT创建部门 记录创建时间CREATE_TIME  "});index.add({'id':122,'href':'/life/docs/databases/mysql/mysql%E6%9F%A5%E8%AF%A2/','title':"mysql查询",'section':"mysql学习笔记",'content':"mysql学习(下面所有都是针对mysql而言) #  sql排序语句 #   升序   (select f.* from fruits f WHERE s_id IN (101,102) order by f_name)==(select f.* from fruits f WHERE s_id IN (101,102) order by f_name asc)   对于sql的升序而言,当使用了order by之后如果不添加desc那么默认是升序 order by f_name 和 order by f_name ASC 效果一致 降序   (select f.* from fruits f WHERE s_id not IN (101,102) order by f_name DESC )   order by之后加上DESC结果集就是降序   上面结合了 关键字in可以看到 in (101,102)和not in (101,102)\n 带between and 的范围查询 #   (select f.* from fruits f WHERE f.f_price between 2.00 and 14.00)查询价格在2.00元到14.00元之间的数据,这样也可以(select f.* from fruits f WHERE f.f_price\u0026gt;2.00 and f.f_price\u0026lt;12.67)  带like的字符串匹配查询 #   (select f.* from fruits f WHERE f.f_name like \u0026lsquo;%g%')查询f_name包含g的记录 (select f.* from fruits f WHERE f.f_name like \u0026lsquo;b%')查询以b开头的记录,同理结尾的字符也是一样原理  查询null值 #   (select c.* from customers c WHERE c.c_email is null)查询email为null的数据  带and 的多条件查询 #   (select f.* from fruits f WHERE f.s_id=\u0026lsquo;101\u0026rsquo; and f.f_price\u0026gt;=5)  带or 的多条件查询 #   (select f.* from fruits f WHERE f.s_id=\u0026lsquo;101\u0026rsquo; or f.s_id=\u0026lsquo;102\u0026rsquo;)  查询结果不重复 #   (select distinct f.* from fruits f)添加了过滤字段distinct  分组查询 #   (select f.s_id,count(*) as total from fruits f group by f.s_id) (select f.s_id,count(*) as total,group_concat(f.f_name) as g_name from fruits f group by f.s_id) 这里使用了一个函数group_concat (select f.s_id,count(*) as total,group_concat(f.f_name) as g_name,sum(f.f_price) as price from fruits f group by f.s_id)  HAVING #   [在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与合计函数一起使用]   (select f.s_id,count(*) as total,group_concat(f.f_name) as g_name,sum(f.f_price) as price from fruits f group by f.s_id having sum(f.f_price)\u0026gt;20)  合并使用 #  SELECT count( project_work_stage_id ) project_work_stage_id, count( project_phase_id ) project_phase_id_count, sum( actual_hours ) actual_hours_sum, AVG( actual_hours ) actual_hours_avg, GROUP_CONCAT( id ) ids, project_id FROM tb_project_plan_details WHERE 1 = 1 GROUP BY project_id # 以项目编号分组 HAVING # having的好处是可以把列中查询用作比较 \tproject_phase_id_count \u0026gt;= 3 # 工作事项数量必须大于等于3 ORDER BY project_phase_id_count DESC #确定最大数 \tLIMIT 1; #确定最大数 分页查询 #   (select f.* from fruits f LIMIT 10,5) ||(3-1)*5,5  连接查询(多表) #   (select c.,o. from customers c,orders o where c.c_id=o.c_id)普通查询 (select c.,o. from customers c inner join orders o on o.c_id=c.c_id)内连接查询,这里需要注意的是内连接查询的是公共部分,必须是两者都有相同的记录 外连接包括左外连接和右外连接 (select c.,o. from customers c right join orders o on o.c_id=c.c_id)右连接是orders table和customers table的公共部分+orders表记录 (select c.,o. from customers c left join orders o on o.c_id=c.c_id)左连接是orders table和customers table的公共部分+customers表记录 (由于mysql不支持全连接full join,所以必须采用其它方法)//select * from orders full join customers on orders.c_id=customers.c_id  索引 #  create table myUser(\rid VARCHAR(255) NOT NULL PRIMARY KEY ,\rname VARCHAR(255),\rcreateTime TIMESTAMP,\rINDEX indexName (name(244))\r)ENGINE=InnoDB DEFAULT CHARSET=utf8\r (show INDEX from myUser)查看所在表的索引  DROP TABLE IF EXISTS user_test;\rCREATE TABLE user_test(\rid int AUTO_INCREMENT PRIMARY KEY,\ruser_name varchar(30) NOT NULL,\rsex bit(1) NOT NULL DEFAULT b'1',\rcity varchar(50) NOT NULL,\rage int NOT NULL\r) ENGINE=InnoDB DEFAULT CHARSET=utf8\r 创建一个组合索引： ALTER TABLE user_test ADD INDEX idx_user(user_name , city , age) 匹配最左前缀是指优先匹配最左索引列，如：上面创建的索引可用于查询条件为：（user_name ）、（user_name, city）、（user_name , city , age）  注：满足最左前缀查询条件的顺序与索引列的顺序无关，如：（city, user_name）、（age, city, user_name）\n"});index.add({'id':123,'href':'/life/docs/databases/mysql/mysql_regexp/','title':"mysql正则表达式",'section':"mysql学习笔记",'content':"一:数据准备 #  CREATE TABLE `t_user` ( `USER_ID` int NOT NULL AUTO_INCREMENT, `USER_NAME` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, `USER_PASSWORD` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, `USER_EMAIL` char(80) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, PRIMARY KEY (`USER_ID`), KEY `IDX_NAME` (`USER_NAME`) ) ENGINE=InnoDB AUTO_INCREMENT=209 DEFAULT CHARSET=utf8mb3; -- 如果存在此存储过程则删掉 DROP PROCEDURE IF EXISTS proc_initData; DELIMITER ; CREATE PROCEDURE proc_initData() BEGIN DECLARE i INT DEFAULT 1; WHILE i\u0026lt;=6000 DO INSERT INTO t_user(USER_NAME,USER_PASSWORD,USER_EMAIL) VALUES(MD5(UUID()),MD5(UUID()), CONCAT(substring(UUID(),1,7) , \u0026#39;@\u0026#39;, substring(UUID(),4,8) ,\u0026#39;.com\u0026#39;) ); SET i = i+1; END WHILE; END ; CALL proc_initData(); 二:符号介绍 #  模式\t描述（具体匹配什么）\r^\t匹配字符串的开始位置。\r$\t匹配字符串的结束位置。\r.\t匹配除 \u0026quot;\\n\u0026quot; 之外的任何单个字符。\r[...]\t匹配所包含的任意一个字符。\r[^...]\t匹配未包含的任意字符。\r?\t匹配它前面的零个或一个子表达式（字符串）。\r*\t匹配它前面的零个或多个子表达式（字符串）。\r+\t匹配它前面的一个或多个子表达式（字符串）。\r[abc]\t匹配方括号之间列出的任何字符。\r[^abc]\t匹配方括号之间未列出的任何字符。\r[A-Z]\t匹配任何大写字母。\r[a-z]\t匹配任何小写字母。\r[0-9]\t匹配从0到9的任何数字。\r[[:\u0026lt;:]]\t匹配单词的开头。\r[[:\u0026gt;:]]\t匹配单词的结尾。\r[:class:]\t匹配字符类，即[：alpha：]匹配字母，[：space：]匹配空格，[：punct：]匹配标点符号，[：upper：] 匹配上层字母。\rp1|p2|p3\t匹配任何模式，p1或 p2或p3\r{n}\t匹配n前面元素的子表达式\r{m,n}\t匹配m到前面元素的n个子表达式\rselect * from t_user; -- 包含8的正则匹配 select * from t_user where USER_NAME REGEXP \u0026#39;8\u0026#39;; -- 包含8或者9的正则匹配 or select * from t_user where USER_NAME REGEXP \u0026#39;8|9\u0026#39;; -- 以8开头的正则匹配 SELECT * from t_user where USER_NAME REGEXP \u0026#39;^8\u0026#39; ; -- 以1结尾的正则匹配 SELECT * from t_user where USER_NAME REGEXP \u0026#39;1$\u0026#39; ; -- 以8或者9开头的正则匹配 SELECT * from t_user where USER_NAME REGEXP \u0026#39;^[8-9]\u0026#39; ; -- 以a-z开头的正则匹配 并且第二位是数字8的正则匹配 SELECT * from t_user where USER_NAME REGEXP \u0026#39;^[a-z]8\u0026#39; ; -- 转义符号 由于.是特殊符号 那么要找包含.的字符必须转义 SELECT * from t_user where USER_PASSWORD REGEXP \u0026#39;\\\\.\u0026#39; ; -- ^[8]* 以8开头有0个或者多个 [a-z]+ 有1个或者多个 0? 有0个或者1个匹配 [:alpha:]{1,4} 任意字符1到4个 SELECT * from t_user where USER_NAME REGEXP \u0026#39;^[8]*[a-z]+0?[:alpha:]{1,4}\u0026#39; ; SELECT CONCAT(USER_ID,\u0026#39;-\u0026#39;,USER_PASSWORD,\u0026#39; USER_NAME:\u0026#39;,USER_NAME) as new_name from t_user where USER_NAME REGEXP \u0026#39;^[8]*[a-z]+0?[:alpha:]{1,4}\u0026#39; ; "});index.add({'id':124,'href':'/life/docs/databases/mysql/mysql%E7%94%A8%E6%88%B7%E4%B8%8E%E6%9D%83%E9%99%90/','title':"mysql用户与权限",'section':"mysql学习笔记",'content':" mysql.version=5.7 (必须注意版本)\n 创建用户 #   ( CREATE USER \u0026lsquo;bob\u0026rsquo;@'%' IDENTIFIED BY \u0026lsquo;07fa533360d9\u0026rsquo;; ) 创建bob用户 密码:07fa533360d9 ( CREATE USER \u0026ldquo;test\u0026rdquo;@\u0026ldquo;localhost\u0026rdquo; IDENTIFIED BY \u0026lsquo;123456\u0026rsquo; )创建test用户　密码123456 ( CREATE USER \u0026ldquo;test\u0026rdquo;@\u0026ldquo;192.168.87.26\u0026rdquo; IDENTIFIED BY \u0026lsquo;123456\u0026rsquo; )创建test用户　密码123456   参数说明:'%\u0026lsquo;表示所有情况都能访问;\u0026lsquo;localhost\u0026rsquo;表示本机才能访问;\u0026lsquo;192.168.87.26\u0026rsquo; 某个具体 ip 才能访问\n 授权命令 (GRANT privileges ON databasename.tablename TO \u0026lsquo;username\u0026rsquo;@\u0026lsquo;host\u0026rsquo; ) #  GRANT SELECT,INSERT privileges on spring.* to \u0026lsquo;alice\u0026rsquo;@\u0026lsquo;localhost\u0026rsquo; identified by \u0026lsquo;123456\u0026rsquo;\n 参数说明:databasename表示数据库名字;tablename数据库表的名字;username用户名;host表示链接地址如本机localhost,远程任意%,具体ip192.168.87.26\n 授权test用户拥有testDB数据库的所有权限 #  create database testDB;\rgrant all privileges on testDB.* to \u0026quot;test\u0026quot;@\u0026quot;localhost\u0026quot; identified by '123456'\r指定部分权限给用户 #  grant select,update on testDB.* to \u0026quot;blake\u0026quot;@\u0026quot;localhost\u0026quot; identified by '123456';\rGRANT SELECT, INSERT ON spring.user TO 'alice'@'localhost'; 撤销权限 #  REVOKE privilege ON databasename.tablename FROM 'username'@'host'; #撤销\rREVOKE grant option ON databasename.tablename FROM 'username'@'host'; #收回\r修改用户密码 #  update mysql.user set authentication_string=password('123456') where User='blake' and Host='localhost';\r 关于修改密码也可以这样 1:select password(\u0026lsquo;1234\u0026rsquo;); 得到string 如1234==\u0026gt;*A4B6157319038724E3560894F7F932C8886EBFCF\n update mysql.user set authentication_string=\u0026quot;*A4B6157319038724E3560894F7F932C8886EBFCF\u0026quot; where User='bob' and Host='localhost';\r 关于远程访问修改\n UPDATE user SET Host='%' WHERE User='alice' AND Host='localhost' LIMIT 1;\rUPDATE user SET Host='192.168.87.26' WHERE User='alice' AND Host='%' LIMIT 1;\r删除用户bob #  delete from user WHERE User='bob'\r刷新系统权限表 #  flush privileges; 查看权限 #  show grants for 'blake'@'localhost';\r"});index.add({'id':125,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/git_andsower/','title':"git出现的问题",'section':"解决问题",'content':"收集 git 出现的问题\n"});index.add({'id':126,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/idea/','title':"idea出现的问题",'section':"解决问题",'content':"收集 idea出现的问题\n"});index.add({'id':127,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/maven/','title':"maven出现的问题",'section':"解决问题",'content':"收集 maven出现的问题\n"});index.add({'id':128,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/visual_studio_code/','title':"visual_studio_code",'section':"解决问题",'content':"visual studio code\n"});index.add({'id':129,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/','title':"解决问题",'section':"自我提升",'content':"学习的最好方式是解决问题\n"});index.add({'id':130,'href':'/life/docs/databases/mysql/mysql%E7%B4%A2%E5%BC%95/','title':"mysql索引",'section':"mysql学习笔记",'content':"索引 #   所有 MySQL 列类型都可以被索引，对相关列使用索引是提高 SELECT 操作性能的最佳途 径.根据存储引擎可以定义每个表的最大索引数和最大索引长度， 每种存储引擎 （如 MyISAM、 InnoDB、BDB、MEMORY 等）对每个表至少支持 16 个索引，总索引长度至少为 256 字节。 大多数存储引擎有更高的限制。\n  MyISAM 和 InnoDB 存储引擎的表默认创建的都是 BTREE 索引。MySQL 目前还不支持函 数索引，但是支持前缀索引，即对索引字段的前 N 个字符创建索引。前缀索引的长度跟存 储引擎相关，对于 MyISAM 存储引擎的表，索引的前缀长度可以达到 1000 字节长，而对于 InnoDB 存储引擎的表，索引的前缀长度最长是 767 字节。请注意前缀的限制应以字节为单 位进行测量，而 CREATE TABLE 语句中的前缀长度解释为字符数。\n  MySQL 中还支持全文本（FULLTEXT）索引，该索引可以用于全文搜索。但是当前最新版 本中（5.0）只有 MyISAM 存储引擎支持 FULLTEXT 索引，并且只限于 CHAR、 VARCHAR 和 TEXT 列。索引总是对整个列进行的，不支持局部（前缀）索引\n  默认情况下，MEMORY 存储引擎使用 HASH 索引，但也支持 BTREE 索引\n "});index.add({'id':131,'href':'/life/docs/databases/mysql/mysql%E6%95%B4%E7%90%86/','title':"mysql整理",'section':"mysql学习笔记",'content':"mysql整理 #  跨库更新数据 #  UPDATE pmcc_assess.tb_project_info aTable INNER JOIN ( SELECT id as data_id, uuid as data_uuid FROM pmcc_contract.tb_cms_contract bTable ) bTable ON aTable.contract_id = bTable.data_uuid SET aTable.contract_uuid = bTable.data_uuid , aTable.contract_id = null where 1=1 and aTable.contract_uuid is null and aTable.contract_id is not null and aTable.id = 596; UPDATE pmcc_assess.tb_project_info aTable INNER JOIN ( SELECT id as data_id, uuid as data_uuid FROM pmcc_contract.tb_cms_contract bTable ) bTable ON aTable.contract_uuid = bTable.data_uuid SET aTable.contract_id = bTable.data_id where 1=1 and aTable.contract_id is null and aTable.contract_uuid is not null and aTable.id = 596; 步长 #  SHOW VARIABLES LIKE \u0026#39;auto_inc%\u0026#39;; SET @@auto_increment_increment=3; -- 将自增长步长设置为3  SET @@auto_increment_offset=4; -- 将自增长开始值设置为4  SHOW VARIABLES LIKE \u0026#39;auto_inc%\u0026#39;; alter table `user` drop column id; alter table `user`add id BIGINT; alter table `user` change id id BIGINT not null auto_increment primary key; 统计sql #  # 处理 uuid重复问题 UPDATE tb_data_block SET uuid = CONCAT( MD5(UUID()) ,\u0026#39;_\u0026#39;,UUID_SHORT(),\u0026#39;_\u0026#39;, MD5(curtime()) ) WHERE uuid is null ; UPDATE tb_data_automatic_position SET uuid = CONCAT( MD5(UUID()) ,\u0026#39;_\u0026#39;,UUID_SHORT(),\u0026#39;_\u0026#39;, MD5(RAND()) ) WHERE uuid is null ; #查询当天的记录 select count(1) from tableName where TO_DAYS(timeField) = TO_DAYS(NOW()) # 从今天开始退回几天的实体数量 假如是1那么就是昨天 select count(1) from tb_basic_building where 1=1 and TO_DAYS(NOW()) - TO_DAYS(gmt_created) = 4 ; # 统计 当周的实体数量  SELECT count(1) FROM tableName WHERE YEARWEEK(date_format(timeField,\u0026#39;%Y-%m-%d\u0026#39;),1) = YEARWEEK(now(),1); # 统计 当月的实体数量 SELECT count(1) FROM tableName WHERE 1=1 AND DATE_FORMAT( timeField, \u0026#39;%Y%m\u0026#39; ) = DATE_FORMAT( CURDATE( ) , \u0026#39;%Y%m\u0026#39; ) /*最近一周*/ SELECT count(1) as count_num FROM tb_basic_building WHERE DATE_SUB(CURDATE(),INTERVAL 1 WEEK) \u0026lt;= DATE(gmt_created); /*某个年份下*/ SELECT sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;1\u0026#39; THEN 1 ELSE 0 END ) AS january, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;2\u0026#39; THEN 1 ELSE 0 END ) AS february, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;3\u0026#39; THEN 1 ELSE 0 END ) AS march, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;4\u0026#39; THEN 1 ELSE 0 END ) AS april, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;5\u0026#39; THEN 1 ELSE 0 END ) AS may, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;6\u0026#39; THEN 1 ELSE 0 END ) AS june, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;7\u0026#39; THEN 1 ELSE 0 END ) AS july, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;8\u0026#39; THEN 1 ELSE 0 END ) AS august, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;9\u0026#39; THEN 1 ELSE 0 END ) AS september, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;10\u0026#39; THEN 1 ELSE 0 END ) AS october, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;11\u0026#39; THEN 1 ELSE 0 END ) AS november, sum( CASE MONTH ( a.gmt_created ) WHEN \u0026#39;12\u0026#39; THEN 1 ELSE 0 END ) AS december FROM tb_basic_building a WHERE YEAR ( a.gmt_created ) = 2021; /*按自然周统计(所有)*/ SELECT DATE_FORMAT(gmt_created,\u0026#39;%y年%u周\u0026#39;) as week_name,min(gmt_created) as week_check_start_time,count(*) as count_num FROM tb_basic_building GROUP BY DATE_FORMAT(gmt_created,\u0026#39;%y%u\u0026#39;) ORDER BY week_name asc; /*某年某月下的每周统计数量*/ SELECT DATE_FORMAT(gmt_created,\u0026#39;%y年%u周\u0026#39;) as w,min(gmt_created) as st,count(*) as count_num FROM tb_basic_building where 1=1 and month(gmt_created)=9 and YEAR(gmt_created) = 2021 GROUP BY DATE_FORMAT(gmt_created,\u0026#39;%y%u\u0026#39;) ORDER BY w asc; /*按月统计(所有)*/ SELECT DATE_FORMAT(gmt_created,\u0026#39;%y年%m月\u0026#39;) as m,count(*) as count_num FROM tb_basic_building GROUP BY DATE_FORMAT(gmt_created,\u0026#39;%y%m\u0026#39;) ORDER BY m asc /*按季度统计*/ SELECT FLOOR((DATE_FORMAT(gmt_created,\u0026#39;%m\u0026#39;)-1)/3)+1 as quarter_num,min(gmt_created) as quarter_check_start_time,count(*) as count_num FROM tb_basic_building WHERE DATE_FORMAT(gmt_created,\u0026#39;%Y\u0026#39;) = 2021 GROUP BY FLOOR((DATE_FORMAT(gmt_created,\u0026#39;%m\u0026#39;)-1)/3)+1 ORDER BY quarter_num asc; /*按年统计*/ SELECT DATE_FORMAT(gmt_created,\u0026#39;%Y\u0026#39;) as year_name,count(*) as count_num FROM tb_basic_building GROUP BY DATE_FORMAT(gmt_created,\u0026#39;%Y\u0026#39;) ORDER BY year_name asc; /*按天统计*/ SELECT count(id) count_num, DATE(gmt_created) day_name FROM tb_basic_building GROUP BY DATE(gmt_created) ORDER BY DATE(gmt_created) DESC; /*按周统计*/ SELECT count(id) count_num, WEEK(gmt_created) week_name FROM tb_basic_building GROUP BY WEEK(gmt_created) ORDER BY WEEK(gmt_created) DESC; /*按月统计*/ SELECT count(id) count_num, MONTH(gmt_created) month_name FROM tb_basic_building GROUP BY MONTH(gmt_created) ORDER BY MONTH(gmt_created) DESC; 添加字段 #  alter table tb_project_plan_details add `bis_mobile` bit(1) DEFAULT b\u0026#39;0\u0026#39; COMMENT \u0026#39;是否为移动端创建\u0026#39;; "});index.add({'id':132,'href':'/life/docs/databases/mysql/mysq_advanced_optimization/','title':"mysql优化",'section':"mysql学习笔记",'content':"索引优化 #  缓存 #  全文 #  "});index.add({'id':133,'href':'/life/docs/databases/mysql/mysql_select/','title':"mysql新查询",'section':"mysql学习笔记",'content':"一:创建计算字段 #  -- 将 fruits.f_name 和 suppliers.s_city创建为了一个新字段连在一起来计算查询 select fruits.f_name as name ,suppliers.s_city as city from suppliers left join fruits on fruits.s_id = suppliers.s_id where 1=1 and CONCAT(fruits.f_name,\u0026#39;-\u0026#39;,suppliers.s_city) = \u0026#39;apple-Tianjin\u0026#39; ; -- 员工的部门和名称组合为新字段 select CONCAT_WS(\u0026#39;-\u0026#39;,dept.d_name,employee.e_name) as name from employee left join dept on dept.d_no = employee.dept_no 二:函数 #   聚集函数 预定义函数-字符串函数 预定义函数-时间处理函数 预定义函数-数字处理函数 算数、逻辑运算  1:聚集函数 (聚合函数可以理解成多对一) #   什么是聚合函数   聚合函数作用于一组数据，并对一组数据返回一个值\n  常用聚合函数：     函数 描述     AVG() 返回列的平均值   COUNT(DISTINCT) 返回列去重后的行数   COUNT() 返回列的行数   MAX() 返回列的最大值   MIN() 返回列的最小值   SUM() 返回列的总和   GROUP_CONCAT() 返回一组值的连接字符串(MySQL独有)     例子一  -- 计算表中数量,最小值,最大值,平均值,平均值,累加值 select count(*) as count_value ,MIN(f_price) as min_value,MAX(f_price) as max_value,AVG(f_price) as avg_value ,SUM(f_price) as sum_value from fruits  例子二  SELECT c_name,GROUP_CONCAT(grade), sum(grade) as total_grade ,avg(grade) as avg_grade FROM score GROUP BY c_name 2:预定义函数-字符串函数 #     函数 描述     LENGTH() 返回列的字节数   CHAR_LENGTH() 返回列的字符数   TRIM()/RTRIM()/LTRIM() 去除两边空格/去除右边空格/去除左边空格   SUBSTRING(str, pos, [len]) 从pos位置截取字符串str，截取len长度   LOCATE(substr, str, [pos]) 返回substr在str字符串中的位置   REPLACE(str, from_str, to_str) 将str字符串中的from_str替换成to_str   LOWER(), UPPER() 字符串转换为小写/大写     例子  SELECT `USER_NAME`, LENGTH( `USER_NAME` ) AS name_length, CHAR_LENGTH( USER_NAME ) AS string_length, LOWER( USER_NAME ) AS LOWER_NAME, UPPER( USER_NAME ) AS UPPER_NAME, REPLACE ( USER_NAME, \u0026#39;0\u0026#39;, \u0026#39;O\u0026#39; ) AS REPLACE_NAME, SUBSTRING( USER_NAME, \u0026#39;0\u0026#39;, 5 ) AS SUBSTRING_NAME, TRIM( `USER_NAME` ) AS TRIM_NAME FROM `t_user` LIMIT 2,40 3:预定义函数-数字处理函数 #     函数 描述     ABS() 返回数值的绝对值   CEIL() 对小数向上取整 CEIL(1.2)=2   ROUND() 四舍五入   POW(num, n) num的n次幂 POW(2, 2)=4   FLOOR() 对小数向下取整 CELL(1.2)=1   MOD(N, M) 取模(返回n除以m的余数)=N % M   RAND() 取0~1之间的一个随机数     例子一  select ABS(-22.4) as ABS_VALUE,CEIL(1.4)as CEIL_VALUE,ROUND(1.49)as ROUND_VALUE,FLOOR(1.4) as FLOOR_VALUE,POW(2,3) AS POW_VALUE,RAND()*10 AS RAND_VALUE,MOD(8,3) AS MOD_VALUE ;  例子二  SELECT ABS( `f_price` ) AS ABS_VALUE, CEIL( `f_price` ) AS CEIL_VALUE, ROUND( `f_price` ) AS ROUND_VALUE, FLOOR( `f_price` ) AS FLOOR_VALUE, POW( `f_price`, 3 ) AS POW_VALUE, RAND( ) * `f_price` AS RAND_VALUE, MOD ( `f_price`, 3 ) AS MOD_VALUE FROM `fruits`; 4:预定义函数-时间处理函数 #     函数 描述     CURDATE() 当前日期   CURTIME() 当前时间   NOW() 显示当前时间日期(常用)   UNIX_TIMESTAMP() 当前时间戳   DATE_FORMAT(date, format) 按指定格式显示时间   DATE_ADD(date, INTERVAL unit) 计算指定日期向后加一段时间的日期   DATE_SUB(date, INTERVAL unit) 计算指定日期向前减一段时间的日期     例子1  -- 使用临时日期函数来创建查询 基本全部用到了上面的函数  SELECT CURDATE( ) AS CURDATE, CURTIME( ) AS CURTIME, NOW( ) AS NOW, DATE_ADD( NOW( ), INTERVAL 1 MONTH ) AS DATE_ADD_ONE_MONTH, DATE_SUB( NOW( ), INTERVAL 1 MONTH ) AS DATE_SUB_ONE_MONTH, UNIX_TIMESTAMP( ) AS UNIX_TIMESTAMP, DATE_FORMAT( NOW( ), \u0026#39;%Y-%m-%d %H-%i-%S\u0026#39; ) AS DATE_FORMAT;   例子2 这里我们结合实际来说\n  需要准备数据 来查询 这里我们使用存储过程来创建特定的日期表\n  -- 创建表  CREATE TABLE `temp_date` ( `id` int NOT NULL AUTO_INCREMENT, `age` float(14,2) DEFAULT NULL COMMENT \u0026#39;age\u0026#39;, `name` varchar(255) DEFAULT NULL, `birthday` date DEFAULT NULL COMMENT \u0026#39;生日\u0026#39;, `gmt_created` datetime DEFAULT CURRENT_TIMESTAMP, `gmt_modified` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=\u0026#39;临时用户表\u0026#39;; -- 存储过程创建数据  -- 创建生成指定范围的随机数字 DROP PROCEDURE IF EXISTS proc_random_num; DELIMITER ; CREATE PROCEDURE proc_random_num(in custom_start_value double(12,2),in custom_end_value double(12,2),out result_value double(12,2)) BEGIN DECLARE start_value_p1 double(12,2) DEFAULT 0; DECLARE end_value_p1 double(12,2) DEFAULT 0; DECLARE num double DEFAULT 0; DECLARE num_value double DEFAULT 0; DECLARE range_value_t double DEFAULT 0; DECLARE random_value_t double DEFAULT 0; set `start_value_p1` = `custom_start_value` ; set `end_value_p1` = `custom_end_value` ; set range_value_t = `custom_end_value` - `custom_start_value` ; set random_value_t = RAND(); set num_value = `custom_start_value` + ROUND(random_value_t * range_value_t) ; set result_value = num_value ; -- SELECT start_value_p1,`end_value_p1` ; END ; -- 创建生成指定范围的随机日期  DROP PROCEDURE IF EXISTS proc_random_date;--如果存在此存储过程则删掉 DELIMITER ; CREATE PROCEDURE proc_random_date(in custom_start_year int(20),in custom_end_year int(20),in custom_start_month int(20),in custom_end_month int(20),in custom_start_day int(20),in custom_end_day int(20),out result_string LONGTEXT) BEGIN DECLARE a1 int default 0; DECLARE a2 int default 0; DECLARE a3 int default 0; DECLARE string_value LONGTEXT DEFAULT \u0026#39;\u0026#39; ; -- 调用生成指定范围的数字存储过程 \tCALL proc_random_num(`custom_start_year` , `custom_end_year` , a1) ; CALL proc_random_num(`custom_start_month` , `custom_end_month` , a2) ; CALL proc_random_num(`custom_start_day` , `custom_end_day` , a3) ; set string_value = CONCAT_WS( \u0026#39;-\u0026#39;, a1 , a2 , a3) ; set result_string = string_value ; END ; CALL proc_random_date(1890,2022,1,12,1,31,@result); select @result; -- 插入指定数量的日期  -- 创建插入数据的存储过程  DROP PROCEDURE IF EXISTS proc_insert_into_temp_date;--如果存在此存储过程则删掉 DELIMITER ; CREATE PROCEDURE proc_insert_into_temp_date(in custom_value int(20)) BEGIN DECLARE i INT DEFAULT 1; DECLARE num_value INT DEFAULT 0; DECLARE date_value_param VARCHAR(255) ; SET num_value = custom_value ; WHILE i\u0026lt;=num_value DO CALL proc_random_date(1890,2022,1,12,1,31,date_value_param); INSERT INTO temp_date(`name`,`age`,`birthday`) VALUES(MD5(UUID()),CEILING(RAND()*100),date_value_param); SET i = i+1; END WHILE; END ; set @result_num = 1000; CALL proc_insert_into_temp_date(@result_num); -- 完成数据准备  -- 开始查询  三:创建联结 #  使用表别名 #   student 取名为 tb_stu\n select concat(tb_stu.department,\u0026#39;-\u0026#39;,tb_stu.name) as name from student as tb_stu;  当在一次查询中 不止一次地引用相同的表\n 自联结 #   当你知道某个童鞋的分数是98你想查看和98分数相同科目的其他童鞋的分数\n -- 不适用联结查询的方法 select c_name ,grade from score where c_name = (select c_name from score where grade = 98 ) -- 使用联结的查询方法 (清晰很多) select tb1.c_name ,tb1.grade from score tb1, score tb2 where 1=1 and tb1.c_name = tb2.c_name and tb2.grade = 98; 自然联结 #   当对多个表联结查询或者对一个表进行两次引用查询 这个时候有相同的列可能要出现 这个时候我们手动控制某些列出现某些列不出现\n -- fruits 中s_id和suppliers中s_id是相同的列名称  select fruits.*,suppliers.s_name as s_name , suppliers.s_city as s_city from fruits ,suppliers where suppliers.s_id = fruits.s_id 外部联结 #   将一个表中的行与另一个表中的行关联，但有时候需要包含那些没有关联的行\n select customers.cust_id,orders.order_num from customers left outer join orders on customers.cust_id = orders.cust_id 使用带聚集函数的联结 #  四:分组查询、过滤 #  五:全文搜索 #  六:行转列\u0026amp;列转行 #  行转列 #   数据准备  -- 创建表  -- ---------------------------- -- Table structure for user_column_row -- ---------------------------- DROP TABLE IF EXISTS `user_column_row`; CREATE TABLE `user_column_row` ( `id` int(0) NOT NULL AUTO_INCREMENT, `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT \u0026#39;姓名\u0026#39;, `features` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT \u0026#39;特征\u0026#39;, `value` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT \u0026#39;数值\u0026#39;, PRIMARY KEY (`id`) USING BTREE ) ENGINE = MyISAM AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic; -- ---------------------------- -- Records of user_column_row -- ---------------------------- INSERT INTO `user_column_row` VALUES (2, \u0026#39;小明\u0026#39;, \u0026#39;身高\u0026#39;, \u0026#39;172.00\u0026#39;); INSERT INTO `user_column_row` VALUES (3, \u0026#39;小明\u0026#39;, \u0026#39;体重\u0026#39;, \u0026#39;48kg\u0026#39;); INSERT INTO `user_column_row` VALUES (4, \u0026#39;小明\u0026#39;, \u0026#39;年龄\u0026#39;, \u0026#39;23\u0026#39;); INSERT INTO `user_column_row` VALUES (5, \u0026#39;小红\u0026#39;, \u0026#39;身高\u0026#39;, \u0026#39;161.00\u0026#39;); INSERT INTO `user_column_row` VALUES (6, \u0026#39;小红\u0026#39;, \u0026#39;体重\u0026#39;, \u0026#39;40kg\u0026#39;); INSERT INTO `user_column_row` VALUES (7, \u0026#39;小红\u0026#39;, \u0026#39;年龄\u0026#39;, \u0026#39;19\u0026#39;); INSERT INTO `user_column_row` VALUES (8, \u0026#39;小花\u0026#39;, \u0026#39;身高\u0026#39;, \u0026#39;153.00\u0026#39;); INSERT INTO `user_column_row` VALUES (9, \u0026#39;小花\u0026#39;, \u0026#39;体重\u0026#39;, \u0026#39;42kg\u0026#39;); INSERT INTO `user_column_row` VALUES (10, \u0026#39;小花\u0026#39;, \u0026#39;年龄\u0026#39;, \u0026#39;17\u0026#39;); INSERT INTO `user_column_row` VALUES (11, \u0026#39;小明\u0026#39;, \u0026#39;身高\u0026#39;, \u0026#39;172.33\u0026#39;); INSERT INTO `user_column_row` VALUES (12, \u0026#39;小军\u0026#39;, \u0026#39;身高\u0026#39;, NULL); INSERT INTO `user_column_row` VALUES (13, \u0026#39;小军\u0026#39;, \u0026#39;体重\u0026#39;, NULL); INSERT INTO `user_column_row` VALUES (14, \u0026#39;小军\u0026#39;, \u0026#39;年龄\u0026#39;, NULL); INSERT INTO `user_column_row` VALUES (15, \u0026#39;小胖\u0026#39;, NULL, NULL); INSERT INTO `user_column_row` VALUES (16, \u0026#39;小胖\u0026#39;, NULL, NULL); INSERT INTO `user_column_row` VALUES (17, \u0026#39;小胖\u0026#39;, NULL, NULL);   例子\n  进行之前 先说一个语句 mysql case…when…then 这个经常用来处理行转列\n  CASE WHEN features = \u0026lsquo;体重\u0026rsquo; THEN value ELSE \u0026lsquo;0kg\u0026rsquo; END 表示 匹配到体重就使用value 假如匹配不到就使用0kg\n  -- 第一次\rSELECT\rtb_user.id,tb_user.NAME , ( CASE WHEN `features` = '体重' THEN `value` ELSE '0kg' END ) AS weight ,\r( CASE WHEN `features` = '身高' THEN `value` ELSE '0cm' END ) AS height,\r( CASE WHEN `features` = '年龄' THEN `value` ELSE 0 END ) AS age FROM user_column_row tb_user GROUP BY tb_user.NAME;\r-- 结果\rid name weight height age\r2\t小明\t0kg\t172.00\t0\r5\t小红\t0kg\t161.00\t0\r8\t小花\t0kg\t153.00\t0\r12\t小军\t0kg\t0\r15\t小胖\t0kg\t0cm\t0\r-- 可以看到根本没有达到目的\r-- 第二次\rSELECT\rtb_user.id,tb_user.NAME , ( CASE WHEN `features` = '体重' THEN `value` ELSE '0kg' END ) AS weight ,\r( CASE WHEN `features` = '身高' THEN `value` ELSE '0cm' END ) AS height,\rmax( CASE WHEN `features` = '年龄' THEN `value` ELSE 0 END ) AS age FROM user_column_row tb_user GROUP BY tb_user.NAME;\r-- 结果\r2\t小明\t0kg\t172.00\t23\r5\t小红\t0kg\t161.00\t19\r8\t小花\t0kg\t153.00\t17\r12\t小军\t0kg\t0\r15\t小胖\t0kg\t0cm\t0\r-- 对年龄进行取最大倒是满足了 但是不是所有的行数据都是数字啊 所以还是不靠谱\r-- 第三次\rSELECT\rtb_user.id,tb_user.NAME ,\rgroup_concat(CASE WHEN `features` = '体重' THEN `value` ELSE '0kg' END) AS weight,\rgroup_concat(CASE WHEN `features` = '身高' THEN `value` ELSE '0cm' END) AS height,\rgroup_concat(CASE WHEN `features` = '年龄' THEN `value` ELSE ' 0 ' END) AS age FROM user_column_row tb_user GROUP BY tb_user.NAME order by tb_user.id;\r-- 结果\rid NAME weight height age\r2\t小明\t0kg,48.0kg,0kg,0kg\t172.00,0cm,0cm,172.33\t0 , 0 ,23, 0 5\t小红\t0kg,40.0kg,0kg\t161.00,0cm,0cm\t0 , 0 ,19\r8\t小花\t0kg,42.0kg,0kg\t153.00,0cm,0cm\t0 , 0 ,17\r12\t小军\t0kg,0kg\t0cm,0cm\t0 , 0 15\t小胖\t0kg,0kg,0kg\t0cm,0cm,0cm\t0 , 0 , 0 -- 可以看到已经全部取出组合而来 虽然结果值很乱 但是这是最靠谱的 把结果处理下就行啦,比如可以考虑代码直接处理或者存储过程处理\r-- 第四次 (优化第三次)\rSELECT\rtb_user.id,tb_user.NAME ,\rgroup_concat(DISTINCT CASE WHEN `features` = '体重' and `value` != '0kg' THEN `value` ELSE null END ) AS weight,\rgroup_concat(DISTINCT CASE WHEN `features` = '身高' and `value` != '0cm' THEN `value` ELSE null END) AS height,\rgroup_concat(DISTINCT CASE WHEN `features` = '年龄' and `value` != '0' THEN `value` ELSE null END) AS age FROM user_column_row tb_user GROUP BY tb_user.NAME order by tb_user.id;\r-- 结果\rid NAME weight height age\r2\t小明\t48kg\t172.00,172.33\t23\r5\t小红\t40kg\t161.00\t19\r8\t小花\t42kg\t153.00\t17\r12\t小军\t15\t小胖\t列转行 #   数据准备  CREATE TABLE `user2` ( `id` int NOT NULL AUTO_INCREMENT, `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT \u0026#39;名称\u0026#39;, `age` double(11,2) DEFAULT NULL COMMENT \u0026#39;年龄\u0026#39;, `height` double(11,2) DEFAULT NULL COMMENT \u0026#39;身高\u0026#39;, `weight` double(11,2) DEFAULT NULL COMMENT \u0026#39;体重\u0026#39;, PRIMARY KEY (`id`) ) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; -- ---------------------------- -- Table structure for user2 -- ---------------------------- DROP TABLE IF EXISTS `user2`; CREATE TABLE `user2` ( `id` int(0) NOT NULL AUTO_INCREMENT, `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT \u0026#39;名称\u0026#39;, `age` double(11, 2) NULL DEFAULT NULL COMMENT \u0026#39;年龄\u0026#39;, `height` double(11, 2) NULL DEFAULT NULL COMMENT \u0026#39;身高\u0026#39;, `weight` double(11, 2) NULL DEFAULT NULL COMMENT \u0026#39;体重\u0026#39;, PRIMARY KEY (`id`) USING BTREE ) ENGINE = MyISAM AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic; -- ---------------------------- -- Records of user2 -- ---------------------------- INSERT INTO `user2` VALUES (2, \u0026#39;小明\u0026#39;, 22.00, 48.00, 178.40); INSERT INTO `user2` VALUES (3, \u0026#39;小胖\u0026#39;, 25.00, 50.00, 168.00);  列转行关键点：   union，使用\u0026rsquo;年龄' as 特征、\u0026lsquo;身高\u0026rsquo; as 特征、\u0026lsquo;体重\u0026rsquo; as 特征 来确定图5第3列的列名与每行数据该列的值，使用age as 数值、height as 数值、weight as 数值来确定图5第4列的列名与每行数据该列的值，3个select 查询出3张表格，再通过union连接成一张表格\n  union注意点   使用union连接表时需要注意表的字段一致，此处我们3个select 查询出3张表格字段是一致的\n  例子  select id , name ,\u0026#39;年龄\u0026#39; as features,age as value from user2 union select id , name ,\u0026#39;体重\u0026#39; as features,weight as value from user2 union select id , name ,\u0026#39;身高\u0026#39; as features,height as value from user2 -- 这里面有一个常设值 比如 \u0026#39;年龄\u0026#39; as features , \u0026#39;体重\u0026#39; as features 直接挂到列上的 除了这个就没有其它难点了 七:行锁(悲观锁),表锁 #  八:事务 #  九:重要函数单独说明 #  count 函数 #   问题：用count(*)，count(1)，count(不存在NULL的列名)谁好呢?   其实，对于MyISAM引擎的表是没有区别的(O(1))。这种引擎内部有一计数器在维护着行数。 Innodb引擎的表用count(*),count(1)直接读行数，复杂度是O(n)，因为innodb真的要去数一遍。但好于具体的count(列名)。\n  问题：能不能使用count(列名)替换count(*)?   不要使用 count(列名)来替代 count() ， count() 是 SQL92 定义的标准统计行数的语法，跟数 据库无关，跟 NULL 和非 NULL 无关。\n  count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。\n  解决MySQL5.7版本之后使用GROUP BY语句时报错   1、先使用SQL查询sql_mode  select @@global.sql_mode  2、重新设置sql_mode，删除ONLY_FULL_GROUP_BY  set @@global.sql_mode =\u0026#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\u0026#39; 批量插入 #  mysql 出现 truncated incorrect double value （已解决） #   当 int 类型 与 字符串 相连的时候 用 + 就会报错 使用CONCAT(）函数来连接即可 列如 CONCAT(1,‘王’）代替 1 + ‘王’  MySQL 1064 You have an error in your SQL syntax 错误解决办法 #   　这是因为数据库表中的字段名引用了关键字，例如上面报错字段“desc 写sql语句时，引用到与mysql关键字重名的字段时，加上`` 如: set start_value_p1 = custom_start_value ;  "});index.add({'id':134,'href':'/life/docs/english_study/','title':"英语学习",'section':"Docs",'content':"收集一些英语学习技巧\n  If at the outset I brave, ending is different\n  如果当初我勇敢，结局是不是不一样。\n  Perseverance can sometimes equal genius in its results\n  毅力在效果上有时能同天才相比。\n  A man is not old until regrets take the place of dreams.\n  当后悔取代了梦想，一个人才算老了。\n  When I thought I couldn’t go on, I forced myself to keep going. My success is based on persistence, not luck.\n  当我以为我无法继续走下去时，我强迫自己要继续前进。我的成功是基于我的坚持，并非运气。\n  The early bird catches the worm\n  早起的鸟儿有虫吃\n  "});index.add({'id':135,'href':'/life/docs/about/','title':"关于程序员",'section':"Docs",'content':"一、编码 #   如果还没想清楚，就用蛮力算法。——Ken Thompson 不要使用反正弦和反余弦函数——你总能用优美的恒等式，或者是计算向量点积来更好地解决问题。—— Jim Conyngham 在存储日期中的年份的时候，请使用四位数字。—— David Martin 避免使用不对称结构。—— Andy Huber 代码写的越急，程序跑得越慢。—— Roy Carlson 你用英语都写不出来的东西就别指望用代码写了。—— Peter Halpern 如果代码和注释不一致，那很可能两者都错了。—— Norm Schryer 如果你发现特殊情况太多，那你肯定是用错方法了。—— Carig Zerouni 先把数据结构搞清楚，程序的其余部分自现。—— David Jones  二、用户界面 #   尽可能让用户界面风格保持一致和可预测。—— 匿名用户 计算机生成的输入通常会让一个原本设计接受手工输入的程序不堪重负。—— Dennis Ritchie 手工填写的表单里有20%都包含坏数据。—— Vic Vyssotsky 80%的表单会要你回答没有必要的问题。—— Mike Garey 不要让用户提供那些系统已经知道的信息。—— Rick Lemons 所有数据集的80%中，有95%的信息量都可以用清晰的图表示。—— William Cleveland  三、调试 #   在我所有的程序错误中，80%是语法错误，剩下20%里，80%是简单的逻辑错误，在剩下4%里，80%是指针错误，只有余下的0.8%才是困难的问题。—— Marc Donner 在系统测试阶段找出并修正错误，要比开发者自己完成这一工作多付出2倍的努力。而当系统已经交付使用之后找出并修正错误，要比系统测试阶段多付出9倍的努力。因此，请坚持让开发者进行单元测试吧。—— Larry Bernstain 不要站着调试程序，那会使得你的耐心减半，你需要的是全神贯注。—— Dave Storer 别在注释里陷得太深——注释很可能会误导你，你要调试的只是代码。—— Dave Storer 测试只能证明程序有错误，而不能证明程序没有错误。—— Edsger Dijkstra 新系统的每一个新用户都可能发现一类新的错误。—— Brian Kernighan 东西没坏，就别乱修。 —— Ronald Reagan 如果我们没能力修好它，我们就会告诉你它根本没坏。—— Walt Weir 修正程序错误的第一步是要重现这个错误。—— Tom Duff  四、性能 #   程序优化第一法则：不要优化。程序优化第二法则：还是不要优化。—— Michael Jackson 对于那些快速算法，我们总是可以拿一些速度差不多但是更容易理解的算法来替代它们。—— Douglas Jones 在一些机器上，间接寻址比基址寻址要慢，所以请把结构体或者记录中最常用的成员放在最前面。—— Mike Morton 在一个非IO密集型程序中，超过一半的运行时间是花在不足4%的代码上的。—— Don Knuth 在优化一个程序之前，请先用性能监视工具找到程序的“热点”。—— Mike Morton 当你为了加速，把一页代码变成几条简单的指令时，请不要忘了增加注释，以使源码的行数保持为一个常量。—— Mike Morton 如果程序员自己模拟实现了一个构造比编译器本身实现的那个构造还要快，那编译器的作者也太失败了。—— Guy Steele 要加速一个IO密集型程序，请首先考虑所有的IO，消除那些不必要的或冗余的IO，并使余下的部分尽可能地块。—— David Martin 最快的IO就是不IO。—— Nils-Peter Nelson 那些最便宜、最快而且可靠性最高的计算机组件压根就不存在。—— Gordon Bell 把一个本来就错了的程序变得更糟糕绝不是你的错。—— Bill McKeeman Lisp程序员知道所有东西的值，却不知道那些东西的计算成本。—— Alan Perlis  五、文档 #   如果一句话反过来就必然不成立，那就根本没必要把这句话放进文档。—— Bob Martin 当你试图解释一条命令、一个语言特性或者是一种硬件的时候，请首先说明它要解决什么问题。 —— David Martin 一个 { 规格说明、设计、过程、测试计划 } 如果不能在一页A4纸上写明白，那么这个东西别人就没法理解。—— Mark Ardis 纸上的工作没结束，整个工作也就还没结束。—— 匿名  六、软件管理 #   系统的结构反映出构建该系统的组织的结构。—— Richard Fairley 别坚持做没用的事情。—— 匿名 前90%的代码占用了90%的预定开发时间，余下的10%代码又花费了90%的预定开发时间。——Tom Cargill 只有不到10%的代码用于完成这个程序表面上的目的，余下的都在处理输入输出、数据验证、数据结构维护等家务活。—— Mary Shaw 正确的判断来源于经验，然而经验来源于错误的判断。—— Fred Brooks 如果有人基本上做出了你想要的东西，你就没必要自己写一个新程序，就算你非写不可，也请尽可能地利用现有的代码。—— Richard Hill 代码能借用就借用。—— Tom Duff 与客户保持良好的关系可以使生产率加倍。—— Larry Bernstain 把一个现有成熟程序转移到一种新语言或者新平台，只需要原来开发的十分之一的时间、人力、成本。—— Douglas Jones 那些用手做就很快了的事情，就不要用计算机去做了。—— Richard Hill 那些能用计算机迅速解决的问题，就别用手做了。—— Tom Duff 我想写的不只是程序，而且是会写程序的程序。—— Dick Sites 计划好抛弃一个原型，这是迟早的事情。—— Fred Brooks 如果开始就打算抛弃一个原型，那恐怕你得抛弃两个。—— Craig Zerouni 原型方法可以将系统开发的工作量减少40%。—— Larry Bernstain 拼命干活无法取代理解。—— H William  "});index.add({'id':136,'href':'/life/docs/car_study/','title':"汽车教学",'section':"Docs",'content':"科目一 科目二 科目三\n"});index.add({'id':137,'href':'/life/docs/compilation_principle/','title':"编译原理",'section':"Docs",'content':"一、 编译程序 #    1、 编译器是一种翻译程序，它用于将源语言（即用某种程序设计语言写成的）程序翻译为目标语言（即用二进制数表示的伪机器代码写成的）程序。后者在windows操作系统平台下，其文件的扩展名通常为.obj。该文件通常还要经过进一步的连接，生成可执行文件（机器代码写成的程序，文件扩展名为.exe）。通常有两种方式进行这种翻译，一种是编译，另一种是解释。后者并不生成可执行文件，只是翻译一条语句、执行一条语句。这两种方式相编译比解释运行的速度要快得多。\n  2、 编译过程的5个阶段：词法分析；语法分析；语义分析与中间代码产生；优化；目标代码生成。\n  3、 在这五个阶段中，词法分析的任务是识别源程序中的单词是否有误，编译程序中实现这种功能的部分一般称为词法分析器。在编译器中，词法分析器通常仅作为语法分析程序的一个子程序以便在它需要单词符号时调用。在这一编译阶段中发现的源程序错误，称为词法错误。\n  4、 语法分析阶段的目的是识别出源程序的语法结构（即语句或句子）是否错误，所以有时又常为句子分析。编译程序中负责这一功能的程序称为语法分析器或语法分析程序。在这一阶段中发现的错误称为语法错误。\n  5、 C语言的（源）程序必须经过编译才能生成目标代码，再经过链接才能运行。PASCAL语言、FORTRAN语言的源程序也要经过这样的过程。通常将C、PASCAL、FORTRAN这样的语言统称为高级语言。而将最终的可执行程序称为机器语言程序。\n  6、 在编译C语言程序的过程中，发现源程序中的一个标识符过长，超过了编译程序允许的范围，这个错误应在词法分析阶段发现，这种错误通常被称作词法错误。\n 词法分析器的任务是以词法规则为依据对输入的源程序进行单词及其属性的识别，识别出一个个单词符号。\n 词法分析的输入是源程序，输出是一个个单词的特殊符号，称为Token（标记或符号）。\n 语法分析器的类型有:自下而上、自上而下。常用的语法分析器有：递归下降分析方法是一种自上而下分析方法, 算符优先分析法属于自下而上分析方法，LR分析法属于自下而上分析方法等等。\n 通常用正规文法或正规式来描述程序设计语言的词法规则，而使用上下文无关文法来描述程序设计语言的语法规则。\n 语法分析阶段中，处理的输入数据是来自词法分析阶段的单词符号。它们是词法分析阶段的终结符。\n  7、 编译程序总框\n  8、 在计算机发展的早期阶段，内存较小的不能一次完成程序的编译。这时通常将编译过程分成若干遍来完成。每一遍完成一部分功能，称为多遍编译。 与采用高级程序设计语言写的词法分析器相比，用汇编语言写的词法分析通常分析速度要快些。\n  二. 词法与语法 #    1、 程序语言主要由语法和语义两个方面来定义。\n  2、 任何语言的程序都可看成是某字符集上的一个长字符串。\n  3、 语言的语法：是指这样的一组规则（即产生式），用它可以生成和产生一个良定的程序。这些规则的一部分称为词法规则，另一部分称为语法规则。\n  4、 词法规则：单词符号的形成规则；语法规则：语法单位（句子）的形成规则。语义规则：定义程序句子的意义。\n  5、 一个程序语言的基本功能是描述数据和对数据的运算。\n  6、 高级语言的分类：强制式语言；应用式语言；基于规则的语言；面向对象的语言。\n  7、 一个语言的字母表为{a,b}，则字符串ab的前缀有a、ε，其中ε不是真前缀。\n  8、 字符串的连接运算一般不满足交换率。\n  9、 文法G是一个四元组，或者说由四个元素构成，即非终结符集合VN、非终结符号集合VT 、开始符号S、产生式集合P，它可以形式化地表示成G =（VN，VT，S，P）。 按照文法的定义，这4个元素中终结符号集合是这个文法所规定的语言的字母表，产生式集合代表文法所规定的语言语法实体的集合。对上下文无关文法，通常我们只需要写出这个文法的产生式集合就可以确定这个文法的其他所有元素。其中，第一条产生式的左部符号为开始符号，而所有产生式的左部符号构成的集合就是该文法的非终结符集合。\n   文法的例子： 设文法G=（VN，VT， S，P），其中P为产生式集合，它的每个元素的形式为产生式。\n  10、如果文法G的一个句子存在两棵不同的最左语法分析树，则这个文法是无二义的。\n  11、如果文法G的一个句子存在两棵不同的最右语法分析树，则这个文法是无二义的。\n  12、如果文法G的一个句子存在两棵不同的语法分析树，则这个文法是无法判断是否是二义的。\n  13、A为非终结符，如果文法存在产生式 ，则称 可以推导出 ；反之，称 可归约为 。\n  14、乔姆斯基（Chomsky）将文法分为四类，即0型文法、1文法、2文法、3文法。 按照乔姆斯基对方法的分类，上下文无关文法是2型文法，2型文法的描述能力最强，3型文法又称为正规文法。\n  15、产生式S→Sa | a产生的语言为L(G) = {an | n ≥ 1}。\n  16、确定有限自动机DFA是非确定有限自动机NFA的特例；对任一非确定有限自动机能找到一个与之等价的确定有限自动机。\n  17、DFA和NFA的主要区别有三点：一、DFA初态唯一，NFA初态不唯一；二、DFA弧标记为Σ上的元素，NFA弧标记为Σ*上的元素；三、DFA的函数为单射，NFA函数不是单射。\n  18、有限自动机中两个状态S1和S2是等价的是指，无论是从S1还是S2出发，停于终态时，所识别的输入字的集合相同。\n  19、自下而上的分析方法，是一个不断归约的过程。\n  20、递归下降分析器：当一个文法满足LL(1)条件时，我们就可以为它构造一个不带回溯的自上而下分析程序。这个分析程序是由一组递归过程组成的，每个过程对应文法的一个非终结符。 这个产生式中含有的左递归是直接左递归。递归下降分析法中，必须要消除所有的左递归。递归下降分析法中的试探分析法之所以要不断用一个产生式的多个候选式进行逐个试探，最根本的原因是这些候选式有公共左因子。\n  21、算符优先分析法是一种自下而上的分析方法，它适合分析各种程序设计语中的表达式，并宜于手工实现。目前最广泛的无回溯的“移进—归约”方法是自下而上分析方法。\n  22、在表驱动预测分析器中，\n  1）读入一个终结符a，若该终结符与栈项的终结符相同，并且不是结束标志$，则此时栈顶符号出栈；\n  2）若此时栈项符号是终结符并且是，并且读入的终结符不是，并且读入的终结符不是，说明源程序有语法错误；\n  3）若此时栈顶符号为，并且读入的终结符也是，并且读入的终结符也是，则分析成功。\n  23、算符优先分析方法不存在使用形如 这样的产生式进行的归约，即只要求终结符的位置与产生式结构一致，从而使得分析速度比LR分析法更快。\n  24、LR(0)的例子：\n  产生式E→ E+T对应的LR（0）项目中，待归约的项目是E→ E+∙T，移进项目是E→ E∙+T，还有两个项目为E→ ∙E+T和E→ E+T∙。 当一个LR(0)项目集中含有两个归约项目时，称这个项目集中含有归约-归约冲突。\n  25、LL(1)文法的产生式中一定没有公共左因子，即LL(1)文法中一定没有左递归。为了避免回溯，在LL(1)文法的预测分析表中，一个表项中至多只有一个产生式。 预测分析方法（即LL(1)方法），由一个栈，一个总控程序和一个预测分析表组成。其中构造出预测分析表是该分析方法的关键。\n  26、LR(0)与SLR(1)两种分析方法相比，SLR(1)的能力更强。\n  27、静态语义检查一般包括以下四个部分，即类型检查、控制流检查、名字匹配检查、一致性检查。C语言编译过程中下述常见的错误都属于检查的范围：\n  a） 将字符型指针的值赋给结构体类型的指针变量：类型检查。 b）switch语句中，有两个case语句中出现了相同的常量：一致性检查。 c）break语句在既不是循环体内、又不是break语句出现的地方出现：控制流检查。 d）goto语句中的标号在程序的函数中没有找到：一致性检查。 e）同一个枚举常量出现在两个枚举类型的定义当中：相关名字检查。\n 28、循环优化中代码外提是指对循环中的有些代码，如果它产生的结果在循环过程中是不变的，就把它提到循环体外来；而强度削弱是指把程序中执行时间较长的运算替换为执行时间较短的运算。 （完）  "});index.add({'id':138,'href':'/life/docs/computer_composition_principle/','title':"计算机组成原理",'section':"Docs",'content':"一、计算机的组成及学习大纲 #  1. 计算机的组成 #  计算机的三大件 ：CPU、内存、主板 #  （1）CPU，中央处理器，计算机最核心的配件，负责所有的计算。\n（2）内存，你编写的程序、运行的游戏、打开的浏览器都要加载到内存中才能运行，程序读取的数据、计算的结果也都在内存中，内存的大小决定了你能加载的东西的多少。\n（3）主板，存放在内存中数据需要被CPU读取，CPU计算完成后，还要把数据写入到内存中，然而CPU不能直接插在内存上，这就需要主板出马了，主板上很多个插槽，CPU和内存都是插在主板上，主板的芯片组和总线解决了CPU和内存之间的通讯问题，芯片组控制数据传输的流转，决定数据从哪里流向哪里，总线是实际数据传输的告诉公里，总线速度决定了数据的传输速度。\n（4）输入/输出设备，其实有了以上三大件之后，计算机就可以跑起来了。我们日常使用的话还需要键盘、鼠标、显示器等输入/输出设备，而很多云服务器通过SSH远程登录就可以访问，就不需要配显示器、鼠标、键盘这些东西，节省成本且方便维护。\n（5）硬盘，有了硬盘数据才能长久的保存下来，大部分还会给自己的机器配上机箱和风扇，解决灰尘和散热问题，不过这些也不是必须的，用纸板和电风扇替代也一样可以用。\n（6）显卡，显卡里有GPU图形处理器，主要负责图形渲染，使用图形界面操作系统的计算机，显卡是必不可少的。现在的主板都带了内置的显卡，如果想玩游戏、做图形渲染，一般需要一张单独的显卡，插在主板上。\n2. 冯·诺依曼体系 #  现代计算机的硬件基础架构都是依赖于冯诺依曼提出的冯诺依曼体系结构，现代计算机的核心架构可以抽象为五个基础组件：运算器、控制器、存储器、输入设备和输出设备。\n具体到现代计算机，运算器和控制器组成了现代计算机的CPU，存储器对应着内存和硬盘，主板控制着CPU、内存、硬盘、输出/输出设备之间的通讯。\n冯诺依曼体系结构也叫做存储程序计算机，即可编程、可存储的计算机。\n任何一台计算机的任何一个部件都可以归到运算器、控制器、存储器、输入设备和输出设备中，而所有的现代计算机也都是基于这个基础架构来设计开发的。\n冯诺依曼体系结构确立了我们现代计算机的硬件基础架构，学习计算机组成原理，就是学习和拆解冯诺依曼体系。\n学习组成原理，就是学习以下内容：\n CPU（运算器+控制器）怎么工作，为什么这么设计； 内存和硬盘的工作原理； CPU是怎么和内存、硬盘、输入设备、输出设备通讯的； 从电路这样的硬件到最终开发给软件的接口是怎么运作的，为什么要这么设计，以及在软件开发层面怎么尽可能的用好它；  3. 计算机组成原理学习大纲 #  计算机组成原理知识地图\n学习大纲： #   计算机的基本组成：冯诺依曼体系结构的五大基本组件：运算器、控制器、存储器、输入设备和输出设备；计算机的两个核心指标：性能和功耗。 计算机的指令和计算：高级语言是怎么跑起来的，怎么通过编译器和汇编器变成机器指令的；操作系统怎么链接、装载、执行程序的；指令的执行是怎么控制的（控制器）。 运算器，数据在计算机中的表示（二进制和编码）；计算机是怎么实现加法、乘法等基本运算功能的。 CPU的设计：我们为什么需要CPU时钟；寄存器和内存怎么组成的；整个计算机的数据通路是如何构造的；CPU的流水线设计；数据和控制冒险；分支预测；CPU的异常和中断机制；指令的并行执行；CPU怎么通过SIMD来支持并行计算。 存储器的原理：CPU高速缓存、内存、SSD硬盘和机械硬盘的工作原理，及它们之间的性能差异；CPU和存储器之间怎么通讯的；什么是IO_WAIT；如何通过DMA提升程序性能；如何保证存储器里的数据不丢失；如何通过RAID、Erasure Code、ECC、HDFS，这些不同的技术来确保数据的完整性和访问性能。  总结：计算机组成原理是整个计算机科学的纲要，这门课程的很多知识点深挖下去都会变成一个核心课程。\n例如：\n 计算是怎么实现的，对应着数字电路课程。 CPU和存储器系统的优化，对应着计算机体系结构课程。 程序通过编译器和汇编器变成机器指令的编译过程，对应着编译原理课程。 操作系统是怎么链接、装载、执行程序的，对应着操作系统课程。  二、下面我们根据课程大纲，大致过一遍组成原理 #  1. 性能 #  衡量计算机的性能，主要有两个指标：响应时间和吞吐率。\n 响应时间，就是执行一个程序花费的时间，花的时间越短，性能就越好。 吞吐率，就是一定时间内，到底能处理多少数据和指令，处理的越多，性能就越好。  我们一般把性能定义为响应时间的倒数，也就是：性能 = 1 / 响应时间\n响应时间也就是CPU执行我们程序的时间，我们对时间这个指标进行拆解，把程序的CPU执行时间变成CPU时钟周期数和时钟周期时间的乘积。\n程序的CPU执行时间 = CPU时钟周期数 x 时钟周期时间\n程序的CPU执行时间 = 指令数 x 每条指令的平均时钟周期数 x 时钟周期时间\n所以优化性能，就要从这三者入手了：\n 指令数，代表执行我们的程序到底需要多少条指令，一般都是编译器去做。 每条指令的平均时钟周期数，就是执行一条指令需要的CPU周期数。 时钟周期时间，也就是计算机主频，摩尔定律就在提高我们计算机的主频，例如：主频为2.8GHz，简单理解就是1秒钟可以执行2.8G条指令。  2. 功耗 #  从上面可以看出，想要提升性能，可以通过减少响应时间的方法来提升，减少响应时间又有三条路可以走：减少指令数、减少周期数、提升主频。\n过去相当长的时间里，工程师们都在目光集中在提升计算机主频，在CPU中增加晶体管密度，提升晶体管“打开”和“关闭”的速度，这两者都会带来耗电和散热的问题。\nCPU的功耗 = 1/2 x 负载电容 x 电压的平方 x 开关频率 x 晶体管数量\n为了平衡性能和功耗，工程师们想尽办法把晶体管的制程从28nm缩小到7nm，让CPU中可以更多晶体管，同时呢又降低电压，这让我们的CPU性能也一直提升。\n但是，这种做法终有极限，所以工程师们又开始通过提升吞吐率来提升性能，而不是响应时间，所以我们现在的CPU慢慢的由单核发展成了2核、4核、8核的CPU，让更多的核心同时工作，通过并行来提升性能。\n总结\n无论是通过提升主频，还是增加更多的CPU核心数量并行处理，都有其瓶颈所在，仅仅通过“堆硬件“的方式，今天已经不能很好的满足我们对于性能的期望了，这就需要我们从其他方面入手了：\n 加速大概率事件 通过流水线提升性能，把CPU指令执行进行合理的拆分、细化。 通过预测提升性能，提前预测下一步做什么，提前进行响应的操作。  3. 计算机指令 #  从软件层面看，CPU就是一个执行各种计算机指令的机器，计算机指令就是指计算机能听懂的语言，我们把它叫做机器语言。\n不同的CPU由于架构不同，能听懂的语言也不同，也拥有不同的计算机指令集。\n也就是说，CPU不同-\u0026gt;指令集不同-\u0026gt;机器语言不同-\u0026gt;汇编语言不同\n那么，我们平常用的高级语言是怎么变成机器语言的呢？\n高级语言，需要编译成汇编语言，然后通过汇编器翻译成机器代码，才能让CPU去执行。\n"});index.add({'id':139,'href':'/life/docs/life_and_life/','title':"生活就是生活",'section':"Docs",'content':" 生活就是生活\n   当你的视野足够高你就能看得更远，但是看得虽远但是未必有能力去到你看得更远的地方\n  一生何求 无非基本衣食无忧而已!这对于普通来说已经是最高奢求了\n  中国当下的尽头最好的出路 无他之路就是公务员和事业单位而已\n  "});index.add({'id':140,'href':'/life/docs/memory/','title':"记忆技巧",'section':"Docs",'content':""});index.add({'id':141,'href':'/life/docs/reduce_fat/','title':"减肥减脂技巧",'section':"Docs",'content':"每天总能量 - 每天消耗能量 = 每天剩余能量 #    每天剩余能量 为负数那么你今天减脂有效果\n  每天剩余能量 如果为正数那么不好意思你不仅没瘦下来反正还胖了\n  每天剩余能量 如果为0则不偏不倚\n  消耗的能量的方式有哪些呢? #   1:减少摄入能量   早上吃好，午饭吃饱，晚饭吃少\n  可以的话晚饭尽量吃一碗饭，再加一个水果,再加上一定的运动\n  2:增加运动量  减肥运动方式 #   8个最好的减肥运动方法\n    快走/步行/走路    \r快走是减肥的最佳方法之一，因为对于初学者新手小白来说，这是最方便又轻松的方法，如果你对健身一点儿都不懂，不会感到不知所措，更不用购买设备。不过，这是一种对减肥影响较小的运动，对关节造成的压力没有跑步大。\r据哈佛健康统计，一个70公斤的人每步行30分钟，可以燃烧167卡路里的热量（6.4公里/小时的速度，即中速稳健的步伐5）。\r一项针对20位肥胖女性的12周研究发现，每周快走步行50-70分钟，每周3次，可以使体内脂肪率减少1.5％，腰围平均减少2.8厘米。\r如果你是新手小白，可以把步行轻松融入您的日常活动中。要想在一天中增加步数，可以在午餐后时间散步，不坐电梯，趴公司楼梯，或带狗散步。具体来说，你的目标是每周步行3至4次，每次30分钟，然后可以随着身体的适应能力逐渐增加，以增加步行的时间或频率。\r总结：对于初学者来说，快走或步行是一项不错的运动，可以在任何地方进行，不需要设备，并且对关节的压力很小。建议在日常活动中增加步行或快走，能不坐车就不坐车，能不坐电梯就不坐电梯，爬楼梯。不过减肥效果与其他训练方式相比，是最差的。\r  慢跑或跑步    慢跑和跑步也是一个不错的训练方式，虽然不是最高效的减肥训练方式，但是，作为健身新手和初学者，甚至很少运动的人，可以帮助你在开始的1-2周内减肥减脂。\r慢跑和跑步尽管看上去很相似，但主要的区别在于：慢跑的速度通常在6.4-9.7公里/小时之间，而跑步的速度一般是快于9.7公里/小时的。\r据哈佛大学健康学院（Harvard Health）统计，如果以8公里/小时的速度慢跑，一个70公斤的人，每30分钟会燃烧约298卡路里的热量，如果以9.7公里/小时的速度，每30分钟会燃烧372卡路里的热量。\r此外研究还发现，慢跑或跑步可以帮助燃烧有害的内脏脂肪，通常称为腹部脂肪。这种类型的脂肪会包裹在你的内部器官周围，并会导致各种慢性疾病（例如心脏病和糖尿病）产生的风险。\r慢跑和跑步可以在任何地方进行，并且很容易融入到您的日常活动中。所以，如果你想开始跑步的话，可以定目标为每周跑3-4次，每次慢跑20–30分钟。当然了，这是最好的状态，但是，大可不必追求完美，每次跑3分钟，每周跑3次，也是可以的，做了总比不做强。培养习惯是关键，而不是在于运动多少，只要每次运动哪怕一分钟，你也是胜利了。长期保持，每天坚持比每次运动量更重要。别忘了，完美是拖延症的元凶。如果你有膝盖不适，膝关节酸痛，也许在户外跑步不是最佳的选择，可以在草地等较软的地面上跑步或慢跑。此外，许多跑步机都具有内置缓冲功能，这会让你的膝关节更容易适应。\r总结：慢跑和跑步是减肥减重的训练方式之一，很容易融入你每天的日常生活中，虽然不是最高效的减肥训练方式，但是也可以帮助燃烧腹部脂肪。\r 3.骑车或动感单车  动感单车或骑车是一种流行的运动方式，可以改善你的健康状况并帮你减肥。尽管传统上在户外骑自行车，但许多体育馆和健身中心都有固定自行车，以及动感单车，可在室内骑自行车。 哈佛大学健康学院（Harvard Health）估计，一个70公斤的人以中等速度（19–22.4 km / h）骑固定自行车，每30分钟燃烧约260卡路里热量。 骑车不仅可以减肥，而且研究发现，与那些不定期骑自行车的人相比，经常骑自行车的人具有更好的整体健康状况，更高的胰岛素敏感性以及更低的心脏病、癌症和死亡风险。 从初学者到专业运动员，骑自行车对各种健康水平的人都非常有用。而且，这是一种非负重，低冲击的运动，因此不会对关节造成太大的压力。但是，当然低冲击也就意味着，骑单车的减肥效果没有下面要提到的负重训练（力量训练）好。 总结：骑自行车对所有健康水平的人都非常有用，可以在户外骑自行车或在室内骑固定动感单车。它与多种健康益处相关，包括提高胰岛素敏感性和降低某些慢性疾病的风险。但是，减肥效果没有负重训练好。   负重训练（力量训练，无氧训练，抗阻训练，举铁）    负重训练是希望减肥的人最好的选择。根据哈佛健康统计，每进行一次30分钟的负重训练或力量训练，一个70公斤的人燃烧大约112卡路里的热量。 此外，负重训练还可以帮助您增强力量并促进肌肉生长，加速燃脂，从而提高你的静息代谢率（RMR），也就是说，增加你的身体在静止时燃烧的卡路里热量。一项为期6个月的研究表明，每周进行3次负重训练，每次只需11分钟，就可使代谢率提高平均7.4％，相当于每天坐着不动就可以多燃烧125卡路里的热量。另一项研究发现，进行24周的负重训练，可以使男性的新陈代谢率提高9％，相当于每天多燃烧140卡路里热量。女性的新陈代谢率可增加近4％，相当于每天即便不运动，也可以多燃烧50卡路里的热量。此外，大量研究还表明，与有氧运动相比，在进行负重训练后数小时，您的身体内仍继续在燃烧卡路里，就算是睡觉，看电视，看手机，躺着不动，身体内部也在告诉燃烧热量中。 总结：负重训练可以在训练时和训练后，通过身体内部加速燃烧卡路里来帮助您减肥减重。此外，负重训练还可以帮助你增加肌肉，从而提高你的静息代谢率，即增加身体在静止时燃烧的卡路里热量。   无氧间歇训练/HIIT/高强度间歇训练    无氧间歇训练，通常称为高强度间歇训练或HIIT，其实这是一个广义术语，是指短暂剧烈的运动与休息交替的训练方式。通常，无氧间歇HIIT训练持续3–30分钟，并且会燃烧大量卡路里热量。 在针对9位经常健身的男性的一项研究发现，做HIIT训练，每分钟燃烧的卡路里比其他类型的锻炼（包括负重训练，骑自行车和在跑步机上跑步）多消耗25–30％。这意味着HIIT可以帮助你燃烧更多的卡路里，同时减少运动时间。 但是，这种训练方式不能持续太长时间，如果真的尽自己最大努力完成，一般10分钟就已经是极限了，如果能做30分钟以上，说明并没有努力做。所以，消耗的总体热量还是没有负重训练高（负重训练的减肥效果是最好的），非常适合想做一些运动，但是实在没时间的人。 用这种方式来减肥减脂，还是比有氧运动要高效。此外，大量研究表明，HIIT在燃烧腹部脂肪方面特别有效，而腹部脂肪与许多慢性疾病有关。最重要的是，HIIT很容易融入您每天的当中去。 你需要做的只是选择一种运动类型，例如俯卧撑，跑步，跳跃或骑自行车或负重训练，以及设定好运动和休息的交替时间，如选择训练30秒，休息30秒等。例如，以最快速度骑单车30秒，然后以慢速骑车30秒，重复重复10分钟。 总结：无氧间歇训练是一种有效的减肥策略，可适用于许多不同类型的训练，包括跑步，跳跃，骑自行车等。在你的日常活动中加入无氧间歇训练，可以帮助你在更少的时间内燃烧更多的卡路里。不过总体减肥效果，还是没有负重训练好。   游泳    游泳是减肥和保持体形的一种很好方式。据哈佛大学健康学院（Harvard Health）估计，一个70公斤的人游泳半小时，燃烧约233卡路里的热量。 您的游泳方式会决定您燃烧多少卡路里。比如，每30分钟，一个70公斤的人在仰泳时，可以燃烧298卡路里，在蛙泳时燃烧372卡路里，在蝶泳时燃烧409卡路里，自由泳时消耗372卡路里。 一项针对24名中年妇女的12周研究发现，每周游泳3次，每次60分钟，可显着减少体内脂肪，提高柔韧性，并减少多种心脏病的危险因素，包括高总胆固醇和血液甘油三酸酯。 游泳的另一个优点是：对身体的冲击力小，这意味着您的关节更轻松。对于受伤或有关节疼痛的人来说，这是一个很好的选择。不过，正是由于对身体的冲击力小，游泳属于有氧运动，减肥减脂效果没有负重训练好。 总结：对于希望减肥的人来说，游泳是一种效率较低的运动。不过，它可以帮助您提高身体灵活性，并减少各种疾病的风险因素。   瑜伽    瑜伽是缓解压力的一种流行方法。虽然瑜伽通常不被认为是一种减肥运动，但它可以燃烧一定量的卡路里（看你做瑜伽的强度），并有许多其他健康益处，可帮助减肥。\r据哈佛大学健康学院（Harvard Health）估计，每练习30分钟瑜伽，一个70公斤的人可燃烧大约149卡路里的热量。一个对60位肥胖女性进行的为期12周的研究发现，与对照组相比，每周参加两次90分钟的瑜伽课程，她们的腰围平均减少了3.8厘米。此外，瑜伽小组被试人的身心压力健康得到了改善。\r除了燃烧卡路里外，研究还表明，瑜伽可以教人正念，帮助理性控制思维，可以帮助你抵抗不健康的食物，控制暴饮暴食，并更好地了解身体的饥饿信号。\r瑜伽课全城皆是，而且您可以在任何地方练习瑜伽，包括在家中舒适的环境，以及线上有很多指导教程和瑜伽app。\r总结：瑜伽是一项低强度的减肥运动，几乎可以在任何地方进行。不仅燃烧卡路里，还教会您正念和自控力，以帮助您抵抗食物的渴望。\r  普拉提    普拉提是一项针对新手和初学者的运动，可以帮助您在一定程度上减轻体重。\r根据美国运动委员会赞助的一项研究发现，一个体重64公斤的人在初学普拉提课上，30分钟可以燃烧108卡路里的热量。不过，进行负重训练等高级训练运动会燃烧168卡路里。\r尽管普拉提可能不会像跑步等有氧运动那样燃烧掉更多卡路里，但许多人发现它很有趣不枯燥，可能坚持起来比跑步会更容易。\r一项针对37名中年女性的为期8周的研究发现，与同期未进行运动的女性对照组相比，每周进行3次普拉提运动，每次运动90分钟，可明显减少腰部、腹部和臀部的围度。\r除了减肥以外，普拉提还可减轻腰痛，并改善您的力量、平衡、柔韧性、耐力和整体健康水平。\r您可以在家做普拉提运动或去专门提供普拉提课程的专业健身房。而且为了进一步增加普拉提的减肥效果，可以将其与健康的饮食习惯或其他形式的训练相结合，例如负重训练，减肥效果会更好。\r总结：普拉提是一种初学者运动，可以帮助您减轻体重，同时改善身体其他方面的力量，以及平衡性、柔韧性和耐力。\r"});index.add({'id':142,'href':'/life/docs/%E7%94%B5%E8%A7%86%E5%89%A7%E6%95%B4%E7%90%86/','title':"电视剧整理",'section':"Docs",'content':"收集电视剧经典对话\n"});index.add({'id':143,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/','title':"自我提升",'section':"Docs",'content':"时间管理、精力管理、情绪管理 #  1、时间管理 #  改变自己从认识自己开始，管理时间也是从认识时间开始。 一开始，最好的方法就是记录时间，把每天花费的时间记录下来。 就像理财一样，先记录钱花在哪里，才知道哪些钱不该花，或者少花。记事本或者手写都行，怎么方便怎么来。\n第一阶段 #  可以这样简单记录，看看大块时间用在哪里。开会（0.5）吃饭（1.0）写作（2.0）刷抖音（3.0）写代码（4.0）你看，明显是刷抖音时间长，这个可以尽量减少或避免。\n第二阶段 #  记录具体时间和具体事件。 6:00 ~ 7:00 晨练 7:00 ~ 8:00 读书写作 8:00 ~ 9:00 去上班 9:00 ~ 11:00 工作 12:00 ~ 14:00 午休 14:00 ~ 16:00 梳理积分商城 16:00 ~ 16:30 休息 16:30 ~ 19:00 综合分析竞品商场 19:30 ~ 整理主要目的，看看哪个时间做了哪些事，具体花费多少时间，后边有大用。\n第三阶段 #  清晨安排三件事很多人不喜欢记录，太麻烦，记来记去也没什么改变。任何工具如果使用起来太复杂，就会有90%的人放弃。 清晨三件事，非常简单，也是我一直在用的。每天早晨起来，就按照重要程度，把当天最需要干完的三件事完成。 我今天最需要做完的三件事： 1.工作报告整理，各个项目组进度把控，协调资源。 2.跟客户谈具体合作事项。 3.公众号文章一篇，知乎问答一篇。工作时间，把前两项搞定，业余时间把最后一项搞定。 如果还剩下时间，我就会做一些长期规划的事，明天、后天，以及未来一个月需要准备做的事。做好以上这些，就能极大提升工作效率吗，不能。 你一定遇到过这种情况，时间很充足，坐在那里，啥也干不进去。比如，一下午过去了，报告一个字没有写，有时间，没状态。遇到这种情况，不是时间出了问题，而是你的精力出了问题。\n2、精力管理 #  有一本书《精力管理》，讲了精力来源的四个方面：体能、思维、情感、意志。我跟进自己的实践和观察，体能和思维对我影响很大。 体能也是精力最基本的来源。我记得上高中那会，早上为了节省饭钱，只吃馒头和方便面。那几天上早自习感觉特别累，总爱打瞌睡。 后来，吃了两个星期实在扛不住了，又去食堂吃饭了。那时候感觉特别饿，没精神，没有想过饮食这么重要。刚刚工作那会也是，早上不吃饭，死磕一上午，中午吃得又多犯困。 整个人一天的工作状态不是特别好，还好那会年轻，用精神力扛着。现在作息规律，早上跑步、读书，吃早饭。上午一般脑子清楚，一般做一些分析类工作。 午餐之后，会溜达一会，消消食，然后午睡。下午脑子不那么灵光，有一些疲倦，会做一些总结和整理工作。 晚上吃完饭，也有一个不错的状态，会做一些有创意的工作。一句话，你一定要在状态最好的时候，做最难最复杂的事。注意自己的精神状态，太疲惫了就休息一会，磨刀不误砍柴工。死磕的状态不能持续，要养成固定的习惯。\n3、情绪管理 #  做到以上两点，已经可以称为高手了。能够利用自己的情绪，高效率完成工作更是高手中的高手。有时间、精力充沛，但还是遇到一些工作，干不下去。 人人有七情六欲，当你发现自己不喜欢一项工作的时候，怎么都干不下去。这时候心里一直抵触，然后开始怀疑自己，是不是不适合做这个；欺骗自己，明天做也没关系。如果这件事对你很重要，就一定要逼自己做下去。 有一个小技巧：给自己1个小时的放空时间，在这个时间不带着情绪做事，不考虑要做的事有没有意义，有没有帮助，能够得到什么结果。把情绪放在做事上，不放在心里，在这一刻你可以把自己暂时当作没有情感的机器。 先不要急着否定我，你可以去试试，如果真的不好用，你可以来找我。我最开始写作的时候，最多能写500字，我看别人的文章动辄几千，心态直接就不好了。坐在椅子上，一直在想1000字太长了，根本写不出来，完不成。 没有把情绪用在内容上，而是用在否定自己上，情绪低落，心态消极。\n"});index.add({'id':144,'href':'/life/docs/think/','title':"思维",'section':"Docs",'content':"批判性思维\n金字塔原理\n失控\n"});index.add({'id':145,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%AE%B0%E5%BF%86/','title':"记忆方法",'section':"自我提升",'content':"记忆方法 #   提高记忆的关键，在于想象和创意 编故事有助于提高记忆力  通过编故事，再加上逻辑或地点（后者更多一些）; 编故事是加强了记忆桩之间的联系 记忆和创造力 #   记忆本身与创造力密不可分 ， 训练记忆力在很大程度上取决于你的创造力  要想记住毫不相关的信息和扑克牌， 首先就要把它们变成图像。 通过这种方式， 那些零散的信息才可能会建立某种联系 联想 #  利用事物间的联系通过联想进行记忆的方法。 联想是由当前感知或思考的事物想起有关的另一事物， 或者由头脑中想起的一件事物，又引起想到另一件事物。 由于客观事物是相互联系的，各种知识也是相互联系的，因而在思维中， 联想是一种基本的思维形式，是记忆的一种方法。 联想，就是当人脑接受某一剌激时，浮现出与该刺激有关的事物形象的心理过程。 一般来说，互相接近的事物、相反的事物、相似的事物之间容易产生联想。 用联想来增强记忆是一种很常用的方法。 记忆的一种主要机能就是在有关经验中建立联系，思维中的联想越活跃，经验的联系就越牢固。 如能经常形成联想和运用联想，就可增强记忆的效果。 联想是有规律可循的，联想的规律有接近律、类似律、对比律、因果律等，有接近联想、类似联想、对比联想、因果联想。   联想不仅快速，而且它还不是一个简单、一维的东西。首先，你在联想中会加入一些情感因素，甚至还没回想起一段经历，就已经产生了某种情绪。\n  一旦学会动用感情和感官，还有逻辑和创造力，来与不同事物间建立联系，你的记忆能力就会大大提高。除此之外，你还会慢慢习惯放松大脑，以最快的速度在不同事物之间建立联系。瞬间联想之所以对提高记忆力如此重要，是因为一个人在瞬间建立的联系往往是最牢靠的\n  如何在两个并无联系的单词之间建立联系\u0026ndash;记忆的关键，就在于将二者结合到一起。\n  如果没有过去的某些参照物作为参考，你就不能在两个概念( 包括单词、物体、活动等)之间建立联系。你的过去为你提供了某种经验，而正是这种经验可以帮助你由一个概念想到另一件概念。你的生活中发生的一切都像是积木中的模块，正是这一个个模块帮助你搭建了自己的人生大厦。要想在两个模块之间尽快建立联系，你需要用尽可能少的连接物来实现过渡。也就是说，要想从一件事情想到另外一件事情，最快的方式就是直接找到二者之间的联系\n   比如说我想记住两个单词：墙壁和小鸡。 每个单词都能激发我丰富的联想，我必须找到某种连接物将两个单词连接起来。 比如说： 墙壁会让我想到一个相册，想找到我小时候放学后经常爬的墙等。 随着联想越来越细致、快速，我突然想到了一个最明显的连接：一首叫\u0026lt;\u0026lt;小胖鸡\u0026gt;\u0026gt;的儿歌。 好极了！小胖鸡坐着墙壁上，它是一个鸡蛋----而鸡蛋又是小鸡下的。 这时我就会展开联想，想象一只小鸡坐在墙下下蛋。 为了让这个联想更加生动，我想起了小时候我在唱歌时的样子， 然后自然而然地想到了自己看着小鸡下蛋时吃吃发笑的情形。 虽然我并不记得发生过这件事，但它却足以激发我的联想。 这个过程听起来可能有些复杂、繁琐，但事实上，这在大脑中只是一瞬间发生的事情。 链条法 #   如何使用链条法记住5个单词 小提琴、武士、箱子、项链、雪球  首先想想你突然听到小提琴发出的悠扬乐声。 然后看到一个武士在演奏小提琴， 你甚至可以清楚地看到他把小提琴放到下巴下面--这武士满副盔甲，很是搞笑。 然后你看到他脚边放了一个箱子，可能颜色很鲜艳，也可能已经很破旧了。 你打开箱子，发现里面有一挂价值连城的钻石项链，钻石反射阳光，分外耀眼。 最后你转过头去，突然一个雪球砸中你的脸颊，你甚至感觉到右脸有些发疼。 记住，你越练习动用五官来加强想象，你的大脑就会越熟悉这种练习，你也就越容易记住自己想象的场景。   要要记住五个单词以及单词之间的顺序，需要在单词之间建立联系\n  使用链条法，关键在于上下文，我们可以把本来毫不关联的信息连接起来，将其放到一个场景中，这样它们就会变得很容易记住了。\n  你想象的东西一定要合理，或者至少应该符合逻辑。它们可以有些出奇，甚至古怪，但从理论上一定是合理或可能的。\n  在使用链条法记忆时，一定要注意你所想象的故事顺序。最简单的办法是按照顺序用这些单词编一个故事，故事本身应当有一定的逻辑性，只有这样，你才能记住单词的顺序。在回忆时忘记任何一个单词，都说明你编的故事不够清晰。如果真是这样，建议换个故事试试。\n  路径记忆法 #    例子\n  第一个记忆桩：前门\n  第二个记忆桩：隔壁邻居家的房子\n  第三个记忆桩：公共汽车站\n  第四个记忆桩：商店\n  第五个记忆桩：停车场\n  在设计了固定的路径，并为每张扑克设定了一个具体的物体代码之后，我要做的就是把扑克放在路径中适当的记忆桩。 比如说翻开的前5张牌是:方块6、黑桃3、梅花5、红桃8、方块4。记忆方式如下: 我想象一架飞机(方块6)停在我家门口; 邻居家门外有段木头(黑桃3)靠在篱笆墙上; 在公共汽车站，我的小狗(梅花5)正在跳上跳下，冲着路过的汽车狂吠; 商店里面，我(红桃8)正在买一份报纸; 停车场里有一捆现金(方块4)。   重要:把要记忆的数据变换后放入路径中适当的记忆桩,相当于把数据嵌入记忆桩中,这也是为什么说联想是记忆中最重要的一点\n  这下我不会再记混顺序了，因为这段路径已经把每件事物都排好了位置。我用20张扑克进行测试，完全成功！连一个错误都没有。于是我决定延长这段路径，从我家大门开始，穿过村子，经过酒吧，穿过板球场，沿着一条可以看到大片绿色草坪的小路\u0026hellip;\u0026hellip;最后我的整个路径包括了52个记忆桩，正好是一幅扑克牌。\n  一条成功的路径必须满足三个条件:\n   1:记忆桩必须多样; 2:记忆桩之间的差异必须明显; 3:我与这些记忆桩必须有明显的互动。    地点就像是记忆中的锚\u0026ndash;它们可以成为我们回忆往事的参照点。我相信，如果没有这些地点，我们的思想，尤其是我们的记忆，就会变成一团乱麻，凌乱无序。\n  提高记忆能力的关键有三个:联想、地点、和想象\n  创建记忆路径库的5个秘诀\n   1:选择你非常熟悉的路径 2:选择对你比较有意义的路径 3:选择比较富于变化的路径 4:用特点路径来记忆特点事物 5:选择视角最佳的路径  想象感官训练(2) #   建议每天练习，直到确信自己可以在两个看似毫不相关的事物间建立生动具体的联系  方案一:\t想象你手里正拿着个足球，它散发出新鲜橘子味， 慢慢把这两个感觉汇集到一起。好了，然后想象足球是果冻做的在 像时钟一样滴答走动，尝起来味道像巧克力。别着急，让这个形象至少在脑海里停留5分钟，尽量让它们鲜活起来。如果感觉大脑开始走神，立刻从头开始重复整个练习。 然全熟悉第一套方案后，再进入下面的练习 方案二: 想象一头身上有粉点的灰色大象，它会像只猫咪一样喵喵叫， 味道像块生姜，皮肤像是一根根刺人的荨麻，浑身散发出一股 新鲜咖啡豆的味道。还是老样子，别着急，让这个形象在脑海里至少停留5分钟，尽量鲜活起来。 记忆\u0026quot;自由玩耍\u0026quot; (3) #   词汇能引发记忆。迅速浏览一下下面的词汇，看看它们能让你想到什么。每个单词只要看一两秒即可，尽量不要去左右自己的想法，只是看着它们能让你想起什么就可以了。然后尽量去感受你所想到的形象、念头、情绪和感觉等\u0026mdash;-这可能只是一瞬间的事，也可能需要花上好几分钟。接着看下一个单词。这项训练的目的只是让你熟练使用自由联想，学会激发你的情绪和感觉。  kitten (猫咪) rainbow (彩虹) toy (玩具) birthday (生日) ice cream (冰淇淋) snow (雪) church (教堂) cushion (靠垫) sand (沙子) toe nail (脚趾甲)  该项练习不仅能帮你回忆事件，还能帮你记住一些想法，以及伴随这些想法的情绪和感受。刚开始不要在意速度，你练习越久，速度就越快。  建立联系 (4) #   看看下面的单词，尽量用它们在你脑中激发出的第一反应在每一对单词之间建立联想。千万不要对这些联想做任何修改\u0026mdash;你只要放松大脑，在二者之间建立联系就可以了。这就是记忆两条不相关的信息，叫做链条法  你的第一段路径(练习N) #    1：围绕你的住所设计一个由12个记忆桩组成的路径\n  2: 在大脑中反复重复这条路径，直到你烂熟于心。如果可能，你甚至可以亲自走一趟\n  3:确定自己很熟悉这条路径之后，你可以用我前面提到的方法记住12件物品(蛋糕、马、报纸、水壶、鞭子、加农炮、香蕉、电话、猫王、天文望远镜、钟、咖啡)。你的想象要尽量鲜活\u0026ndash;记住，你可以动用逻辑、创造性，以及你所有的感官和情绪。\n  4: 接着盖着清单，看看你能按照正确的顺序记住多少。\n  5:顺序倒过来呢?\n  "});index.add({'id':146,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E5%86%A5%E6%83%B3/','title':"冥想",'section':"自我提升",'content':"冥想 #  呼吸冥想法 #    1:坐好，后背挺直，然后闭上眼睛\n  2:关注你自己呼吸时的感觉,吸气，吸气，选择一个感受突出的地方，通常是你的鼻子或者耳朵、腹部然后集中注意力，关注你自己呼吸时的感觉。吸气，吸气，用嘴呼吸（最好关注腹部，因为我们大部分人都是腹部呼吸法）\n  3:一旦你开始这样做了脑子会乱想,你需要关注你到什么时候走神的，那么走神后重新调整后重新开始集中注意力开始冥想。\n  "});index.add({'id':147,'href':'/life/docs/%E8%84%9A%E6%9C%AC/packing/','title':"uniapp打包",'section':"脚本",'content':"android本地打包 #  参考1 参考2 参考3\nuniapp创建keystore jks 参考\n 这里是因为创建密匙文件有多种方式  第一步 下载 Android Studio 配置必要的数据 #     配置 android sdk 选用google 可以官网下载也可以使用工具下载    配置 jdk ( java jdk建议)    假如你没有手机或者手机不在打包环境那么你需要配置模拟android平台    第二部(重要) #   我也是在网上找了下，发现网上的有残缺吧\n  1:HBuilderX版本 必须和 sdk一致  uniapp本地打包下载地址\n  2: Android Studio导入HBuilder-Integrate-AS\n  3:删除 HBuilder-Integrate-AS_c\\simpleDemo\\src\\main\\assets\\apps 下的 生成的包\n  4: 生成签名\n  C:\\Windows\\system32\u0026gt;c: C:\\Windows\\system32\u0026gt;cd C:\\Program Files\\Java\\jdk1.8.0_102\\bin C:\\Program Files\\Java\\jdk1.8.0_102\\bin\u0026gt;keytool -genkey -alias test -keyalg RSA -keysize 2048 -validity 36500 -keystore test.keystore 输入密钥库口令: 再次输入新口令: 您的名字与姓氏是什么? [Unknown]: z 您的组织单位名称是什么? [Unknown]: z 您的组织名称是什么? [Unknown]: z 您所在的城市或区域名称是什么? [Unknown]: z 您所在的省/市/自治区名称是什么? [Unknown]: z 该单位的双字母国家/地区代码是什么? [Unknown]: z CN=z, OU=z, O=z, L=z, ST=z, C=z是否正确? [否]: y 输入 \u0026lt;test\u0026gt; 的密钥口令 (如果和密钥库口令相同, 按回车): C:\\Program Files\\Java\\jdk1.8.0_102\\bin\u0026gt;keytool -list -v -keystore test.keystore 输入密钥库口令: 密钥库类型: JKS 密钥库提供方: SUN 您的密钥库包含 1 个条目 别名: test 创建日期: 2021-12-4 条目类型: PrivateKeyEntry 证书链长度: 1 证书[1]: 所有者: CN=z, OU=z, O=z, L=z, ST=z, C=z 发布者: CN=z, OU=z, O=z, L=z, ST=z, C=z 序列号: 1af7ad82 有效期开始日期: Sat Dec 04 12:30:35 CST 2021, 截止日期: Mon Nov 10 12:30:35 CST 2121 证书指纹: MD5: 66:3B:24:19:6D:84:19:1E:A3:FC:A1:55:18:36:12:1F SHA1: E1:E7:F7:EB:13:81:87:E1:31:AF:67:40:B8:9C:6C:71:77:69:7D:84 SHA256: 92:00:0B:D4:7A:40:11:16:80:B9:70:D9:3E:02:C8:0A:8F:CF:B7:1A:04:16:AC:AC:D5:E8:50:31:92:68:33:2D 签名算法名称: SHA256withRSA 版本: 3 扩展: #1: ObjectId: 2.5.29.14 Criticality=false SubjectKeyIdentifier [ KeyIdentifier [ 0000: 7F C3 B2 D4 0B 79 96 A0 54 1C D7 49 FE 1A BE 87 .....y..T..I.... 0010: BB 9B A3 A3 .... ] ] ******************************************* *******************************************   5 将 jdk环境下生成的test.keystore找到并复制到HBuilder-Integrate-AS_c\\simpleDemo\\test.keystore\n  6: 回到刚才的黑窗子，查看sha1的指纹\n  7:生成appKey https://dev.dcloud.net.cn/ 去生成\n  需要 APPID 如__UNI__6A9874D 必须一致 需要 Android 包名 如com.android.simple 必须和Android Studio中项目一致不能乱填 需要 Android 证书签名SHA1 必须一致   8 到HBuilderX中打包 原生app本地打包 得到打包文件后将web包拷贝到HBuilder-Integrate-AS_c\\simpleDemo\\src\\main\\assets\\apps 下\n  9 需要修改的地方\n  dcloud_control.xml 中 \u0026lt;hbuilder\u0026gt; \u0026lt;apps\u0026gt; \u0026lt;app appid=\u0026quot;__UNI__6A9874D\u0026quot; appver=\u0026quot;\u0026quot;/\u0026gt; \u0026lt;/apps\u0026gt; \u0026lt;/hbuilder\u0026gt; AndroidManifest.xml 中 \u0026lt;meta-data android:name=\u0026quot;dcloud_appkey\u0026quot; android:value=\u0026quot;3f4b0a2ece1e41eb2a6e25cbf36e8f8c\u0026quot; /\u0026gt; build.gradle 中 signingConfigs { config { keyAlias 'test' keyPassword '123456' storeFile file('test.keystore') storePassword '123456' v1SigningEnabled true v2SigningEnabled true } }  10完毕 点击打包apk  github地址\n服务端打包 #  ios本地打包 #  "});index.add({'id':148,'href':'/life/posts/2021/oneday/','title':"2021-06-15",'section':"Blog",'content':"  努力\n  英语越来越重要了\n  "});index.add({'id':149,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/dns%E6%B1%A1%E6%9F%93/','title':"DNS 污染",'section':"解决问题",'content':"中国国内访问 GitHub 为什么很慢很卡甚至访问不了？如何加速访问 GitHub 网站？ #  个人总结：强扭的瓜不甜，修改 hosts 也就片刻好光景，要不了多久就变得比没改 hosts 之前更慢。所以还是顺其自然就好，不要白费力气去修改 hosts。 #    摘要\n  网站分发加速网络的域名遭到 DNS 污染，DNS 不能直接找到那个最快的 IP！ 通过修改系统 hosts 文件的办法，绕过国内 DNS 解析，直接访问 GitHub 的 CDN 节点，从而达到加速的目的！\n  如何检验效果\n  操作之前先 ping 一下 github.com，两个请求超时，两个 93ms。\n  操作之后再 ping 一下 github.com，没有丢失，四个 287ms。\n  一、国内访问 GitHub 为什么很慢？ #   GitHub 的 CDN 域名遭到 DNS 污染，导致无法连接使用 GitHub 的加速分发服务器，才使得国内访问速度很慢。  二、如何解决 DNS 污染？ #   通过修改 Hosts 文件，将域名解析直接指向 IP 地址来绕过 DNS 的解析，以此解决污染问题。  三、具体操作步骤 #    1、打开 https://www.ipaddress.com/ 这个全球最好的 IP 地址查询工具网站来查询出域名当前对应的最优 IP。（不要用 ip168.com 这类国内的 IP 探针，其获取的国外域名的 ip 也是被 DNS 污染过的）\n  查询下面 3 个网址对应的 IP 地址\n  github.com : 140.82.113.4\n  assets-cdn.github.com : 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153\n  github.global.ssl.fastly.net : 199.232.69.194\n  2、修改本地电脑系统 hosts 文件\n  Windows 系统中的文件路径： C:\\WINDOWS\\system32\\drivers\\etc\n  Linux 系统中的文件路径 /etc/hosts\n  直接在最后面加入以下代码\n  192.30.253.112 github.com\r140.82.113.4 github.com\r185.199.108.153 assets-cdn.github.com\r199.232.69.194 github.global.ssl.fastly.net\r 说明：在 Windows 系统中，包括 XP、Win7、Win8 、Win10 系统中，hosts 文件的位置都是一样的。如果 etc 文件夹中并没有 hosts 文件，那么可能是该文件隐藏了，可以设置一下，让其显示出来即可。\n   3、 更新dns缓存\n  修改后会直接生效，无需刷新 DNS 缓存，因为 hosts 的优先级大于 DNS 域名解析，添加完 hosts 之后，再访问对应的域名，已经就与 DNS 没关系了。如果未生效，重启操作系统或用命令刷新。\n  Windows 系统：ipconfig /flushdns\n  Linux 系统：systemctl restart nscd\n  Mac 系统：sudo dscacheutil -flushcache或sudo killall -HUP mDNSResponder\n  "});index.add({'id':150,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/githubpages%E7%BB%91%E5%AE%9A%E6%9D%A5%E8%87%AA%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D/','title':"GitHubPages绑定来自阿里云的域名",'section':"解决问题",'content':"  原教程但是由于他使用的github的用户名做的域名映射器,这样不好的地方是有可能你使用自定义的方式建立github仓库名比如 English study,还有一个是他使用的阿里云的域名映射解析这些是老版本的\n  GitHub Pages 绑定来自阿里云的域名==原博客教程\n  我的使用 #  github url ==\u0026gt; https://github.com/noatnu/studyDoc , 买的域名 http://www.zhouchenghua.com/ #   解析第一个设置   创建A记录，请将您的顶点域指向GitHub Pages的IP地址 https 解析ip,上面的192.30.252.153是http解析方式现在官方已经宣布过时了,选择下面任意一个都可以  185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153  解析第二个设置    github 要做的事\n  创建 CNAME文件,写入www.zhouchenghua.com\n   这个是我设置github project 设置截图   ping 地址  C:\\Users\\noatn\u0026gt;ping www.github.com 正在 Ping github.com [13.250.177.223] 具有 32 字节的数据: 请求超时。 请求超时。 请求超时。 请求超时。 13.250.177.223 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 0，丢失 = 4 (100% 丢失)， C:\\Users\\noatn\u0026gt;ping www.github.com.noatnu.studyDoc 正在 Ping www.github.com.noatnu.studyDoc [223.87.179.156] 具有 32 字节的数据: 来自 223.87.179.156 的回复: 字节=32 时间=872ms TTL=54 来自 223.87.179.156 的回复: 字节=32 时间=10ms TTL=54 来自 223.87.179.156 的回复: 字节=32 时间=7ms TTL=54 来自 223.87.179.156 的回复: 字节=32 时间=8ms TTL=54 223.87.179.156 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)， 往返行程的估计时间(以毫秒为单位): 最短 = 7ms，最长 = 872ms，平均 = 224ms   223.87.179.156这是我的静态博客地址 223.87.179.156\n  192.30.252.153 还可以改为223.87.179.156 ,不过不建议改 因为我们自己查出的ip不是固定ip 而 92.30.252.153是Github Pages服务器指定的IP地址，访问该IP地址即表示访问Github Pages\n  现在ipv4已经分配完了,虽然北美，日本，欧洲，韩国，香港等地的企业商 还有ipv4申请但是其实是他们以前申请保留下来的\n  按照我上面的截图设置即可 ,然后把我的github project url 下载下来看一下\n  所以设置完毕会等一段时间,大概至少会超过1个小时,因为这里面牵扯到阿里云的解析是否解析了你的域名映射,当然这不包括你的域名购买时间，注册以及实名认证这些时间,虽然官方说的时间是挺短的,当你做这些才会一声叹息啊\n  "});index.add({'id':151,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/git_andsower/git%E5%A4%84%E7%90%86/','title':"git处理网络和权限问题",'section':"git出现的问题",'content':" Push master to origin/master was rejected by remote  有三种原因 1:push的这个工程是其他人新建的，找她开通master权限后，再次push 2:git 工程错误 git pull git pull origin master git pull origin master --allow-unrelated-histories 3:github 设置原因 勾选了Keep my email addresses private 解决办法2种 第一种 通知账户人员取消勾选 第二种 重新设置你的全局用户E-mail git config --list 查看这个时候一定不对 因此重新设置全局email 重置上次提交的作者信息 git commit --amend --reset-author git config --global user.name \u0026quot;zch\u0026quot; git config --global user.email \u0026quot;sdhshd@163.com\u0026quot; ok 对了你如果使用的不是idea而是git 那么抛出的错误非常明显 如果抛出 git报错--\u0026gt;! [remote rejected] master -\u0026gt; master (push declined due to email privacy restrictions) 那么一定是这个原因  git clone时报RPC failed; curl 18 transfer closed with outstanding read data remaining 错误  原因1：缓存区溢出 git config http.postBuffer 524288000 执行上面命令如果依旧clone失败，考虑可能原因2：网络下载速度缓慢 解决方法：命令行输入 git config --global http.lowSpeedLimit 0 git config --global http.lowSpeedTime 999999 如果依旧clone失败，则首先浅层clone，然后更新远程库到本地 git clone --depth=1 http://gitlab.xxx.cn/yyy/zzz.git git fetch --unshallow  error: RPC failed； curl 28 OpenSSL SSL_read: Connection was reset, errno 10054 fatal: expected  git config --global http.sslVerify \u0026quot;false\u0026quot;   Failed to connect to 127.0.0.1 port 1080: Connection refused\n  这是由于设置了动态代理(最好下面方法都试一遍\u0026hellip;因为可能设置了不只一次o(╥﹏╥)o);\n  git查看\n  查询动态代理 git config --global http.proxy git config --global https.proxy  若是有返回值  取消代理 git config --global --unset http.proxy git config --global --unset httpx.proxy   git配置文件查看 打开c:\\Users\\当前用户里的.gitconfig文件(这个默认是隐藏文件), 将里面关于proxy的行删掉\n  环境变量查看 打开环境变量,查看查看用户变量和系统变量(两个都要看\u0026hellip;.我就是两个都设置了o(╥﹏╥)o),将里面的http_proxy(也可能不是这个名字,但是看值是127.0.0.1:1080这种的就是了,或者有proxy),把这一行删掉就行\n  Failed to connect to github.com port 443: Timed out\n  D:\\IdeaProjects\\motorcycle\u0026gt;git config --global --unset http.proxy D:\\IdeaProjects\\motorcycle\u0026gt;git config --global --unset https.proxy D:\\IdeaProjects\\motorcycle\u0026gt;   remote: HTTP Basic:Access denied fatal:Authentication failed for\n  最终解决方法，控制面板 \u0026gt; 用户账户\n   然后找到 凭据管理器 选择Windows凭据   如图删除掉之前使用者留下的 凭据再次执行pull 就会弹出一个对话框来让你输入该 仓库的用户名和密码了  "});index.add({'id':152,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/idea/idea/','title':"idea 解决working directory 设置到 target",'section':"idea出现的问题",'content':" idea 解决working directory 设置到 target  test ng D:\\IdeaProjects\\java-se-study run config $MODULE_DIR$ "});index.add({'id':153,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/maven/idea%E8%A7%A3%E5%86%B3/','title':"idea 问题解决",'section':"maven出现的问题",'content':" idea导入项目出现Unable to import maven project: See logs for details提示\n 第一种解决办法 #    删除项目根目录下.idea文件夹\n  关闭idea工具，重新打开选择File-\u0026gt;New-\u0026gt;Project from the existing source ,选择刚才的项目根目，下一步：\n  一直点next，最后点击主工程的pom.xml 完成！\n  第二种 #    打开idea 的日志文件如果发现【Error】com.google.inject.CreationException: Unable to create injector\n  那么自定义配置Maven3.6.2报错 或者更高版本maven\n  原因：Maven3.6.2的版本兼容问题。\n  解决方法：重新下载较低版本Maven3.6.1及以下版本可以顺利解决。\n  用maven无论是新建项目还是导入没有下载到本地仓库的jar。出现了Unable to import maven project\n  打开cmd，ping localhost，显示一般故障\n  在左边控制栏，关闭防火墙，再开启防火墙 再次ping localhost，成功\n  对了 假如出现文件权限问题 那么更改maven的本地仓库地址\n  "});index.add({'id':154,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/visual_studio_code/visualstudiocode%E9%97%AE%E9%A2%98/','title':"Visual Studio Code 问题解决方案",'section':"visual_studio_code",'content':"Visual Studio Code 过滤文件 不显示某些文件 #  效果 #   过滤工程中显示的文件 不显示某些类型的文件或文件夹  菜单 #   File/Preferences/ 搜索file exclude 选中workspack页签 添加一个过滤规则 如图:   "});index.add({'id':155,'href':'/life/docs/english_study/word/','title':"单词记忆技巧",'section':"英语学习",'content':" 经验总结  记忆有四个过程:识记、保持、再认、回忆 #  识记:我们用一定的方法，经过努力将单词放进脑子里的这个过程就是在识记 #  保持:这些单词在脑子里会有一个积累，储存和巩固的动态过程。简单来说就是你识记在脑子里的单词是会被遗忘的。 #  再认:再认就是你背过的单词再次出现时能够识别出来的过程。 #  回忆:回忆是你将单词在头脑中独立地再现出来的过程。 #    回忆和再认，本质上都是我们根据需要对自己脑海中的信息进行检索的过程，但是再认要比回忆简单的多。在你写作文时，回想单词怎么写的过程，就是回忆。例如，之前背过的那些高级词汇不管怎么想就是想不起来，整个作文都是because、but、good、so。在你做阅读理解时，回想这个单词是什么意思的过程，就是再认。例如，你那些高级词汇在阅读理解中出现，一下就认出来了。\n  很多时候，我们背单词只达到保持和再认的阶段，并没有真正达到可以回忆出来的程度。更有趣的是，当你背单词处于保持甚至是识记的过程的时候，就有了背过了的错觉。产生这种错觉可能会有以下几方面的原因:\n  ①在你重复性的读背一个单词的时候，会给你一个瞬时性记忆，让你感觉对这个词很熟悉了，你就错以为自己已经会了，但其实并没有记住。\n  ②在记忆的保持过程中，被遗忘了，自己没有发觉。\n  ③对于背单词app的不正确使用，熟悉了app上的单词，到了纸上就不认识了。\n  总得来说，之所以一到做题就忘了单词，就是因为背的单词没有达到可以回忆出来的程度。现在网上背单词的方法太多了，什么自然拼读法、词根词缀法、比较法、联想法等等实在是太多了，希望大家能找到一个适合自己的方法。\n  但是我还是想给大家提供一点建议: #    ①不管用什么方法背单词，一定要边写边读。\n  ②在不同的场合上认识单词，比如说，背单词app，词汇卡，试卷\n  ③经常性地复习，反复的记忆才能让记忆成为永久性记忆，达到回忆出来的程度。\n  ④最重要的一点就是要坚持下去，加油！\n  其它经验总结 #   直接被句子，文章。自然会把意思记得更牢固，我们的老师是一个博士，他就是这么说的  为什么背过的单词在做题时遇到仍然不认识 #  第一，背的不熟，如果真的熟练了你起码会觉得“面熟” 第二，没有真正理解词汇的意思和用法。仅仅背一个词的意义肯定印象不会深，你还应该同时了解这个词的用法，会出现在什么语境中等等。 其实这还是对单词不熟悉。词汇不能仅仅从单词书上背诵，更重要的是放在文章里记忆和理解，这样既能了解单词的用法和词义，还能帮助巩固词汇量。试着改变一下背单词的方法，或许你能记住更多的单词。 只是背单词不行，最好是通过阅读一些自己喜欢的英语短文或者故事来记忆单词，看到多了自然就记住了。 背过后要常巩固，要学会运用，背过了就不再看几天就忘了，常看常新。 "});index.add({'id':156,'href':'/life/docs/english_study/maimemo/','title':"墨墨背单词",'section':"英语学习",'content':" 使用技巧  第一步：选择一本单词书，如下图，它有很多分类，我就拿考研的来举例了。 #  第二步：在第四个角标“设置”里头选择每日学习目标量 #  免费送600词汇量，在签到和分享过程中也会一直赠送的，虽然量不多，至少是送了！ 不够就买起来，这里确实会有一些朋友觉得单词收费略微昂贵，但是你想想如果你是app开发人或者是其中的工作人员之一， 会不会也希望以某一些方式来获益，而且你买了单词其实就是一种知识付费和你买单词书是一样的， 它比单词书好的地方是： 1⃣️能送你单词量，也就是只要你坚持打卡分享你的免费单词量是会越来越多； 2⃣️词书多即选择多，还能随时搜索忘记的单词； 3⃣️根据你的学习来提醒你复习（超级人性化，也不用另外去看表格想我今天该复习哪个单元了，该复习多少词汇量了） 4⃣️动力动力，花钱了还不学，钱太多啊！刚开始建议少一点， 因为这个app是根据艾宾浩斯遗忘曲线来学习和复习的，因此你每次学习完它都会根据你之前的学习情况来给你安排学习任务，也就是说， 比如我图上330个词其中276个是我之前学习过了的单词，而剩下的54个就是我今天需要新学的单词！） 第三部：回到第一个“复习”界面，开始背单词啦！ #  上面会有提示文，你先看这个单词你认不认识，认识你可以自己口述一下它的意思然后点击页面进行核对，点开页面下标： 认识；模糊；不认识。 词义无误选认识（哈哈哈说什么废话）有偏差选模糊（dbq还是废话）不认识就不认识了哦！ 这里一定一定要对自己诚实，认真选择！不会多看几遍就会了！ 每个单词会出现3次，3次也会慢慢有印象的，第三次还不会也没关系明天还会再让你学！✌️ 在背词的过程中可能会出现的情况 1.你非常熟悉的单词那么就在右上角的三个小点点里头点击熟识就ok啦； 2.你学的是英（美）音也是在小点点里切换哈！ 3.词义不够（补充啊，自己上！点击词义那一行最右图标在前面输入adj、v……系统都会自动识别的哈，每个词之间记得用；隔开（中文格式哦）这样编辑完成后回到界面就是和正常的一样啦！（我们真棒 ） 4.例句不够典型，点击例句那一行的长短线段图标就可以看到更多的例句啦！把你不想要的☑️取消换成你喜欢的例句就OK！（只能有3个例子哦） 第四部：背完单词，签到签到签到！ #  一定要peng一下哦（真的很大声哈哈哈）， 然后我会在“统计”的界面看看自己今天和之前的学习情况，做一下对比～然后就是复习啦（我经常是溜之大吉哈哈哈第二天再复习）， 如果你想今天在复习也是完全可以的！点击今天的小图标， 然后会出现“查看详情”字样，点击复习， 再在右上角中选择你喜欢的复习模式就ok啦！ “奇奇怪怪”的提醒 #  1:设置页面下拉到最后的更多设置里可以免费享用7天的例句发音哦！\r2:购买单词一定要点上面的链接能多送一些单词（我快乐了）\r3:然后......没有了！哈哈哈！\r"});index.add({'id':157,'href':'/life/docs/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/%E8%8E%B7%E5%8F%96%E9%87%91%E9%92%B1/%E5%A6%82%E4%BD%95%E5%9C%A8%E6%B2%B9%E7%AE%A1youtube%E5%BC%80%E9%80%9A%E6%94%B6%E7%9B%8A%E8%B5%9A%E9%92%B1/','title':"如何在油管YouTube开通收益赚钱",'section':"获取金钱",'content':"如何在油管YouTube开通收益赚钱？ #  如果想在YouTube创业赚取美金，建议关注【YouTube运营笔记】，少走弯路，不被忽悠\n本篇主要由3个常见问题详细展开： #   如何在油管上开通获利？ 油管广告收益情况如何？ 油管除了广告还能怎么赚钱？  一、如何在YouTube开通获利？ #  第1步：你得有一个Gmail账号 #   YouTube账号是跟谷歌邮箱账号是关联的。想创建频道然后上传视频的基础条件就是，注册并登陆谷歌账号，目前一些国内手机注册会失败。   注：Gmail能登录就行，手机号码归属和注册地对后期收益不存在影响。\n 第2步：你得有一个YouTube频道 #   一般而言只要你有了谷歌账号，就默认有一个YouTube频道了，但那个频道名称头像是跟谷歌邮箱是挂钩的，建议单独创建频道。此外，一个谷歌账号是创建多个频道的。   注：创建频道前，要想清楚频道的内容定位；频道创建后，还要对频道进行装修。\n 第3步：你得有策略地上传视频 #   这一步非常重要，YouTube运营是一个技术活，不是随随便便发几个视频就有人看，也不是坚持发布就能做起来。有志要做的建议查看本专栏的其它文章，这里不细讲。   注：做YouTube成功的条件是「优质的内容+正确的方法」，缺一不可\n 第4步（重点）：你须达到获利门槛/申请开通 #   想开通获利，必须满足以下条件：   1:选择支持YouTube合作伙伴计划的国家或地区。 2:12 个月内的有效观看时长累计超过4000小时。 3:频道拥有至少1000订阅。 4:拥有可关联的 AdSense 帐号。   其中，最为关键的同时最难的条件是4000小时和1000名订阅；「国家/地区」后台设置支持的国家/地区即可；「AdSense」是在频道达到获利门槛后显示注册入口，看似简单却最容易出错，资料要仔细填写，一旦填错后续非常麻烦。《YouTube运营新手最常踩5大坑，最后1个最坑人！》 除了订阅者数量和观看次数要求外，还有内容要求。获利申请的审核是官方人工审核，如果审核者认为频道或视频不符合条件，也是容易无法通过的，审核时间快则一两天，慢的一个多月也有。《YouTube获利政策：这11类内容没有收益》  二、油管广告收益情况如何？ #   YouTube将部分广告收入（55%）分给相应的Youtuber，就能构成一个良性循环的三赢局面：广告商得到宣传，Youtuber赚钱，油管平台赚钱同时有源源不断的优质内容创作出来。平台把55%的广告收益分给视频创作者，这对自媒体从业者而言，真不算低。    YouTube的千次播放（CPM）的收益差距略大，一般在1-10美元不等。影响视频收益主要因素包括：\n  1:观看地区：发达国家cpm远高于发展中国家，如果你的观众主要来自发达国家收益则更高。\n  2:频道领域：某些领域的内容有更高的CPM，比如数码、经济类就相对高。\n  3:视频时长：超过8分钟的视频，可以无限插入广告，收益更多。\n  4:频道/视频：频道或者某个视频比较优质的，会获得更多优质广告展示。\n  另外，还会受其他重大事件影响，比如2020年受疫情影响，大部分频道的CPM大幅下跌。《新冠疫情对YouTube影响有多大？2020多数频道单价下跌20%以上》\n  三、油管除了广告还能怎么赚钱？ #    在油管做内容，广告收益是基本的收入保障，不过大部分YouTuber不会满足于只要广告收入。\n  油管除了一般广告收益方式，还有其他的变现方式。官方提供的变现方法还有：频道会员、商品搁架、超级留言和超级贴纸、YouTube Premium。这些功能需要较高的条件，同时收益不算太高。但自媒体变现总的而言离不开3大变现方式：广告、带货和打赏。\n    此外，国内常用的一些变现方法，在油管也是通用的，常见的有：\n  亚马逊联盟行销：类似国内的淘宝联盟，你帮商家带货后获取一定的佣金。\n  品牌合作推广：频道内容做得好，流量也够多，总会有商家来邀请你合作，这种方式的收益是比较高的。\n  电商带货：不同于联盟行销，联盟行销是帮别人卖自己拿佣金，而自己开店就可以获得更高的利润，当然也得投入更多的资源。\n  粉丝经济：如果你频道的粉丝粘度比较高，可以考虑做依靠粉丝赞助或者粉丝付费，此外目前兴起的直播打赏也是不错的变现方法。\n    这些是比较常见的变现方法，其实变现方法远不止这些。但是能否变现，能否获得更多的收益，其实核心还是靠内容：内容优质，流量多，那怎么变现都可以。\n  最后还想说，如果想在油管创业，最好把眼光放长远同时专心做好内容。做内容是一方面，油管还有很多旁门左道，赚大钱的自媒体团队往往不走寻常路，在此就不宜公开了。\n  如果想在YouTube创业赚钱，建议关注专栏【YouTube运营笔记】，少走弯路，不被忽悠。\n  YouTube闭坑指南：\n  文兄：90%新人必犯的7个错误\n  李大卫：YouTube收益开启全指南\n  文兄：10个错误导致99%频道走向失败\n  迷死任：YouTuber必了解Youtube审核机制\n  文兄：YouTube运营，新手最常踩5大坑！\n  文兄：油管获利政策：这11类内容无收益\n  文兄：YouTube互粉？别把频道玩坏了！\n  文兄：YouTube搬运赚钱？没那么简单\n  文兄：如何在YouTube开通收益赚钱？\n  YouTube运营攻略：\n  文兄：YouTube新频道如何快速涨粉？\n  李大卫：油管什么样的视频最多人看？\n  迷死任：爆款攻略：详解YouTube算法\n  文兄：Youtuber必备的12个网站（全）\n  李大卫：3个营销工具运营效果事半功倍\n  文兄：最全YouTube视频SEO 优化技巧\n  文兄：油管起标题6技巧，打造百万爆款\n  "});index.add({'id':158,'href':'/life/docs/hugo%E5%AD%A6%E4%B9%A0/hugo_server_faile_-to_get_json/','title':"hugo教程 hugo server Failed to get JSON",'section':"hugo教程",'content':" 今天尝试了一下静态博客 hugo , hugo的官网本身也是使用 hugo 制作的网站。安装和运行非常简单。只有两个步骤安装和运行。运行的时候出现了一个小问题，就是由于网络的原因不能启动成功。\n 粗暴的禁用网络连接相关的操作 #   就是两个 短代码 给删除了 instagram, tweet。  find . -name \u0026amp;quot;*.md\u0026amp;quot; | xargs sed -i \u0026amp;#x27;/{{\u0026amp;lt; instagram/cinstagram content\u0026amp;#x27; find . -name \u0026amp;quot;*.md\u0026amp;quot; | xargs sed -i \u0026amp;#x27;/{{\u0026amp;lt; tweet/ctwitter content\u0026amp;#x27; hugo server --bind \u0026amp;#x27;0.0.0.0\u0026amp;#x27;  print code  ERROR 2021/03/06 09:55:20 Failed to get JSON resource \u0026quot;https://api.twitter.com/1/statuses/oembed.json?id=877500564405444608\u0026amp;dnt=false\u0026quot;: Get \u0026quot;https://api.twitter.com/1/statuses/oembed.json?id=877500564405444608\u0026amp;dnt=false\u0026quot;: dial tcp 31.13.91.33:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. If you feel that this should not be logged as an ERROR, you can ignore it by adding this to your site config: ignoreErrors = [\u0026quot;error-remote-getjson\u0026quot;] Built in 21188 ms Error: Error building site: logged 1 error(s) "});index.add({'id':159,'href':'/life/docs/hugo%E5%AD%A6%E4%B9%A0/hugo_tutorials1/','title':"hugo教程1",'section':"hugo教程",'content':"教程1 #  快速开始 #   步骤1：安装Hugo  brew install hugo # or port install hugo  要验证新安装  hugo version  步骤2：建立新网站  hugo new site quickstart # 上面的代码将在名为的文件夹中创建一个新的Hugo网站quickstart。  步骤3：添加主题  # 首先，从GitHub下载主题并将其添加到您站点的themes目录中： cd quickstart git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke  然后，将主题添加到站点配置中：  echo 'theme = \u0026quot;ananke\u0026quot;' \u0026gt;\u0026gt; config.toml  步骤4：添加一些内容  hugo new posts/my-first-post.md  如果需要，请编辑新创建的内容文件，该文件将从以下内容开始：   --- title: \u0026quot;My First Post\u0026quot; date: 2019-03-26T08:47:11+01:00 draft: true ---  步骤5：启动Hugo服务器  ▶ hugo server -D | EN +------------------+----+ Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 3 Processed images | 0 Aliases | 1 Sitemaps | 1 Cleaned | 0 Total in 11 ms Watching for changes in /Users/bep/quickstart/{content,data,layouts,static,themes} Watching for config changes in /Users/bep/quickstart/config.toml Environment: \u0026quot;development\u0026quot; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop  步骤7：建立静态页面  hugo -D ./public/默认情况下，输出将位于目录中（-d/--destination标志进行更改，或publishdir在配置文件中设置） "});index.add({'id':160,'href':'/life/docs/hugo%E5%AD%A6%E4%B9%A0/hugo_tutorials2/','title':"hugo教程2",'section':"hugo教程",'content':"教程2 #   1、\t创建blog  hugo new site myblog_pub cd myblog_pub/ git submodule add https://github.com/chinanf-boy/gohugo-theme-yinwang.git themes/yinwang   2、\t修改配置\n  vi config.toml\n  root@instance-x8rtph4n:/home/go/code/hugo_dir/myblog_pub/public# more ../config.toml baseURL = \u0026quot;http://ypbsyy.github.io/\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;我是yaopeng\u0026quot; theme = \u0026quot;yinwang\u0026quot; #pygmentsCodeFences = true #pygmentsCodefencesGuessSyntax = false #pygmentsStyle = \u0026quot;dracula\u0026quot; #pygmentsOptions = ['linenos'] # 代码高亮/chroma，hugo默认自带 [params] author = \u0026quot;yaopeng\u0026quot; github = \u0026quot;yaopeng\u0026quot; # gitlab = \u0026quot;yobrave\u0026quot; #googleAnalytics = \u0026quot;****\u0026quot; # 谷歌统计gtag highlight = \u0026quot;dracula\u0026quot; # 默认样式 `github` langs = [\u0026quot;go\u0026quot;] # 默认加载 highlight.min.js，但 一些不支持的语言, 你自己添加, # 其实也可以使用hugo自带的语法高亮器设置，不过我有点懒 # single = false # 单页面的Home 按钮去除 # menus = true # 我 想加更多目录 # backgroundColor = \u0026quot;#fbf6ec\u0026quot; 加点黄黄的背景色 #    3、\t创建github\n  4、\t部署到github\n  git submodule init git submodule update hugo --buildDrafts cd public/ git init git remote rm origin git remote add origin https://github.com/ypbsyy/ypbsyy.github.io.git git add -A git commit -m \u0026quot;first commit\u0026quot; git push -u origin master 这里面实际到hugo –buildDrafts 这里就ok 剩余的是把public中的html传入静态网页中  注意文章开头必须有这几个   --- title: \u0026quot;My First Post\u0026quot; date: 2019-03-26T08:47:11+01:00 draft: true ---   baseURL = \u0026ldquo;https://swagcode-io.github.io/demo\u0026quot;\n  这里的url是自己对应的\n  git submodule add https://github.com/chinanf-boy/gohugo-theme-yinwang.git themes/yinwang\n  下载主题\n  参考网址\n  https://www.pianshen.com/article/1216214802/\n  https://zhuanlan.zhihu.com/p/105021100?utm_source=weibo\n  https://zhuanlan.zhihu.com/p/105021100?utm_source=weibo\n  "});index.add({'id':161,'href':'/life/docs/reduce_fat/%E6%97%A0%E6%B0%A7%E8%BF%90%E5%8A%A8/','title':"无氧运动",'section':"减肥减脂技巧",'content':"无氧运动 #   运动强度比较大，运动比较剧烈，开始2分钟就会明显出现喘息，需要短暂休息之后才能继续进行的运动，一般都是无氧运动。常见的无氧运动有：平板支撑、举重、百米冲刺等等。  概念 #  无氧运动的分类是从人体运动时骨骼肌的代谢过程分类衍生而来的，无氧运动的概念也都是根据无氧代谢供能系统为主演变而来，例如无氧运动是指人体肌肉在无氧供能代谢状态下进行的运动。\r但日常中我们所认为的无氧运动是指肌肉在“缺氧”的状态下高速剧烈的运动。无氧运动大部分是负荷强度高、瞬间性强的运动，所以很难持续长时间，而且疲劳消除的时间也慢。\r无氧运动是相对有氧运动而言的。在运动过程中，身体的新陈代谢是加速的，加速的代谢需要消耗更多的能量。\r人体的能量是通过身体内的糖、蛋白质和脂肪分解代谢得来的。在运动量不大时，比如慢跑、跳舞等情况下，机体能量的供应主要来源于糖的有氧代谢。\r以糖的有氧代谢为主要供应能量的运动就是我们说的有氧运动。\r当我们从事的运动非常剧烈，或者是急速爆发，例如举重、百米冲刺、摔跤等，此时机体在瞬间需要大量的能量，而在正常情况下，有氧代谢是不能满足身体此时的需求的，于是糖就进行无氧代谢，以迅速产生大量能量。\r这种状态下的运动就是无氧运动。\r功效 #   研究发现，通过无氧运动可以提高机体的肌肉力量、爆发力、增加肌肉体积，提高运动速度  常见的无氧运动项目 #   短跑、举重、投掷、跳高、跳远、拔河、俯卧撑、潜水、肌力训练（长时间的肌肉收缩）等  "});index.add({'id':162,'href':'/life/docs/reduce_fat/%E6%9C%89%E6%B0%A7%E8%BF%90%E5%8A%A8/','title':"有氧运动",'section':"减肥减脂技巧",'content':"有氧运动 #    运动强度比较低，但是能够长时间坚持的运动，一般都是有氧运动。比如我们最常见的快走、慢跑、骑行、游泳等等\n  有氧运动，在运动的过程中会消耗体内的碳水化合物和脂肪；而无氧运动只消耗碳水化合物，这也是我们很多人说有氧运动更减肥的原因。\n  排行榜 #  NO1、游泳 #   运动优点：游泳需克服水的阻力而非重力，肌肉和关节不易受损，能有效保护膝关节;冷水环境下游泳热量消耗大，属于减肥效果显著的运动；当配合节食时，效果更加显著。 适宜人群：膝关节受损；体重严重超标；减肥；增强体质的族群。 运动周期：每周3～4次，每次30～60分钟。 热量消耗：约650千卡/小时  NO2、慢跑 #   运动优点：提高睡眠质量，通过跑步，大脑的供血、供氧量可以提升20%，这样夜晚的睡眠质量也会跟着提高；“通风”作用，在跑步的过程中，肺部的容量平均从5.8L上升到6.2L，同时，血液中氧气的携带量也会大大增加；提高心脏功能，长期慢跑可使安静心率减慢、血管壁的弹性增加；解压，慢跑可以缓解紧张和焦虑，有益健康。 适宜人群：减肥，需要缓解压力，缓解亚健康，以及预防心血管疾病的族群。 运动周期：每周3～4次，每次40～60分钟。 热量消耗：约650千卡/小时  NO3、自行车 #   运动优点：延缓大脑老化，提高神经系统的敏感度；提高心肺功能，锻炼下肢肌力和增强全身耐力。骑自行车对内脏器官的耐力锻炼效果与游泳及跑步相同。自行车还可以瘦身，是周期性的有氧运动，热量消耗较多。对颈椎病、腰间盘突出等有很好的锻炼和康复效果。 适宜人群：体重严重超标，颈椎病和腰间盘突出的族群。 运动周期：每周3～4次，每次40～60分钟。 热量消耗：约420千卡/小时  健身观点 #  1.适度锻炼。 #   大运动量的健身运动有可能会慢慢损伤你的身体，比如，每周跑步超过15英里就有些过量了。建议每周锻炼4至5次，每次30分钟。库珀认为，只要适量运动，就可以有效降低患心血管病和癌症的可能性。  2.疾走健身。 #   库珀认为疾走（每英里12分钟）是一项不错的健身方式，它的效果不比慢跑（每英里9分钟）差，而且还免除了跑步对膝关节的损伤。  3.见缝插针。 #   不一定非要在体育馆里锻炼30分钟，零散时间完全可以利用起来。每天遛狗10分钟，洗车10分钟，做家务10分钟，一样有效果。  4.交替锻炼。 #   比如今天骑自行车，明天慢跑；或者跑步时速度时快时慢，增强对心脏的锻炼。  5.不以体重论健康。 #   锻炼通常能降低体重，但体重并不能说明什么。勤于健身的胖子比坐着不动的瘦子要健康得多。不要为体重超过标准而忧心忡忡。  6.多管齐下。 #   健身是一个系统工程，体育锻炼对身心健康非常必要，但并不是万能。平时还要注意饮食、戒烟去毒（品）、控制饮酒，精神不要过于紧张。  常见方法 #   见的有氧运动项目有：步行、快走、慢跑、竞走、滑冰、长距离游泳、骑自行车、打太极拳、跳健身舞、跳绳/做韵律操、球类运动如篮球、足球等等。有氧运动特点是强度低、有节奏、不中断和持续时间长。同举重、赛跑、跳高、跳远、投掷等具有爆发性的非有氧运动相比较，有氧运动是一种恒常运动，是一种恒常持续30分钟以上还有余力的运动。  准备 #   1、吃一些富含氨基酸的食物。在脂肪燃烧的同时，肌肉也会紧收而变得酸痛，而在运动前享用些类似海鲜饭团或是麻婆豆腐这样富含氨基酸的食物，就能较好地缓解肌肉的酸痛和僵硬。 2、运动前喝一杯热饮。可以有效地促进新陈代谢，使身体提前预热，在最短的运动时间里发挥出最好的效果。 3、在运动之后应该进行放松运动。 4、运动前或后建议做好准备工作，来保证有氧运动，避免缺氧带来的不适感觉。  好处 #  有氧运动的目的在于增强心肺耐力。在运动时，由于肌肉收缩而需要大量能量和氧气，氧气的需求量增加，心脏的收缩次数、每次压送出的血液量、呼吸次数、肺部的收张程度均增加。所以当运动持续，肌肉长时间收缩，心肺就必须努力地供应氧气分给肌肉，以及运走肌肉中的废物。而这持续性的需求，可提高心肺的耐力。当心肺耐力增加了，身体就可从事更长时间或更高强度的运动，而且较不易疲劳。\r汽油的燃烧离不开氧气，所以我们也可以把发动机的工作称为有氧运动。同样，人类在运动中也要燃烧燃料，人类的“燃料”是糖类、蛋白质和脂肪。人类的这些“燃料”都储存在人体的细胞中，当你运动时，就会消耗这些“燃料”以获得动力。\r与发动机燃烧汽油一样，人类在燃烧“燃料”（即氧化）的时候也需要氧气助燃。人们在运动时大口大口地呼吸，使空气中的氧气通过肺泡进入到血液循环系统之中，然后随着动脉血流向全身的组织细胞中，这是一个漫长的过程。\r低强度、长时间的运动，基本上都是有氧运动，比如，走步、慢跑、长距离慢速游泳、骑自行车、跳舞等。有氧运动能够有效地锻炼心、肺等器官，能改善心血管和肺的功能。人在利用氧气的过程中，有一个相当大的时间差，这个时间差就决定了剧烈的、短时间的运动成为了无氧运动。而当你运动的时间足够长时，氧气已经溶入到细胞中，身体内的葡萄糖得到了充分的“燃烧”，从而转化为新的能量，这样的运动就是有氧运动。\r有氧运动需要大量呼吸空气，对心、肺是很好的锻炼，可以增强肺活量和心脏功能。\r长期坚持有氧运动能增加体内血红蛋白的数量，提高机体抵抗力，抗衰老，增强大脑皮层的工作效率和心肺功能，增加脂肪消耗，防止动脉硬化，降低心脑血管疾病的发病率。减肥者如果在合理安排食物的同时，结合有氧运动，不仅减肥能成功，并且减肥后的体重也会得到巩固。有氧运动对于脑力劳动者也是非常有益的。另外，有氧运动还具备恢复体能的功效。\rⅡ型糖尿病患者、肥胖症患者以及脂肪肝患者，一定要做有氧运动，患有心律不齐、心脑动脉血管硬化的人，以及年龄大的人，也都应该做有氧运动。如果是为了强壮肌肉、健美体形，预防椎间盘突出症、颈椎病以及骨质疏松、骨质软化的人，应当做无氧运动。\r如果心率达到150～160次/分钟，此时血液对心肌供氧已不充分，便为半有氧运动。\r如果心率达到160次/分钟以上，便为无氧运动了，即血液中的氧气对心肌已是供不应求了。\r新陈代谢需要氧气的参与，有氧运动由于氧气充足，可使体内营养物质代谢彻底，即达到最终代谢——营养物质分解为二氧化碳和水。二氧化碳通过呼吸排出体外，水则“进一出四”：从口中进入，通过呼吸、汗液、小便、大便四条途径排出。\r有氧运动能够达到瘦身减肥的效果，晚饭后进行半小时的散步，就能很好地将晚饭中的脂肪进而蛋白质进行调节消耗\r"});index.add({'id':163,'href':'/life/docs/reduce_fat/%E8%85%B0%E9%83%A8%E5%87%8F%E8%82%A5/','title':"腰部减肥",'section':"减肥减脂技巧",'content':"腰部减肥 #  脂肪在身体堆积部位的不同，将人群分为三大类 #  第一类：脂肪全身分布型 #    这类人群的脂肪较为均匀的分布在全身，也就是说他们脂肪的堆积没有在身体的某一个部位特别明显，但是其实他体内的脂肪其实是很多的，只是因为脂肪的平均分布没有显现出来明显的形体问题而已；\n  你说他们不需要减脂吗？肯定是要的。\n  第二类：脂肪腿部臀部分布型 #   这类人群大多是女生，因为生理需求，女性的脂肪细胞在腿部臀部位置分布较密集，所以身体多余的脂肪会优先堆积在脂肪细胞多的部位，形成脂肪团；  第三类：腰腹部脂肪分布型 #    这类人群的脂肪主要分布在腰腹部和脂肪，就就是我们常说的“啤酒肚”。\n  其实脂肪堆积部位的不同很大程度上是由遗传基因决定的，加上男女生理需求的不同，所以不同人的体型会因为脂肪优先堆积部位的不同而不同。\n  有氧锻炼是减肥的基础 #  你的目标是需要消耗掉腹部额外的脂肪。\r即使你进行大量的腹部肌肉锻炼，如果你的腹部有一层脂肪，覆盖住腹肌，你是仍然看不到腹肌的。\r因此，你需要更多的有氧锻炼来增加热量消耗，从而促进脂肪燃烧。\r有氧运动是指在特定的时间维持一定心率的长时间耐力性锻炼，例如跑步、健身走、骑自行车、游泳、划船一类的运动。\r针对减肥的有氧运动每周要进行5次，每次至少1小时。\r间歇训练减脂效果好：间歇训练由若干短时间的高强度激烈活动组成，其间穿插休息或者低强度活动。\r研究认为同等强度下，间歇训练比较长时间锻炼能更有效的消耗脂肪。\r研究发现，一组志愿者进行自行车间歇训练，每天只进行20分钟，但强度较高，四个月以后，他们比以较慢速度骑行40分钟的志愿者平均多消耗了4磅脂肪。\r晚餐少吃是必须的 #  晚餐吃得过多是最容易在体内储存脂肪的，一方面是因为夜间以及晚上睡觉的关系，\r你的基础代谢降低，另一方面，如果晚餐吃的是高热量食物，\r或者油脂摄入过多，又或是宵夜又吃了冰淇淋等食物，\r基本上你在睡觉之前身体是不能消耗完它们的，这些多于的热量当然会变成脂肪存储起来。\r事实上许多人在睡觉前吃甜点或淀粉类食物，而不是吃蔬菜或者奶制品。\r试着在晚餐前多吃一点午餐，这样会减少晚餐前的饥饿感，\r或者在晚餐开始前一小时，来点健康加餐，新鲜水果和蔬菜是非常棒的选择，\r一小撮的坚果也会有同样的效果，它们可以增加饱腹感，从而避免你晚上正餐时吃得过多。\r在晚餐之前喝一大杯水，让你感觉胃有点充实，会适当减少正餐的摄入量。\r增肌（腹部肌肉）(针对腹部) #  动作1：仰卧起坐 #  仰卧起坐近几年备受争议，有人甚至说“练不出腹肌？因为你的仰卧起坐是体育老师教的”，\r这种说法不仅让体育老师躺枪，其实也是从一个极端走向另一个极端，言过其实。\r正确的仰卧起坐（手不拽头，不弓背，起的高度不要太高）仍然是有效的腹肌练习。\r仰卧于垫子上，屈膝，双脚平放于垫子上，双手交叉放于胸前或者耳朵处，注意手不拉头。\r找一个人压着你的脚，或者双脚放于重物下面。\r向上起时，你的下背部与肩胛骨同时离开垫面，保持背部伸直（不要弓背），起至身体约与地面成45度，然后慢慢下落。重复。\r这个动作对于你来说可能相当容易，你可以不断进阶难度。\r找一个倾斜的长椅或者负重进行锻炼。\r在负重的锻炼时候把重量放至于胸部，并不断增加负重。\r动作2：卷腹 #  仰卧垫子上，双臂置于胸部或者双手放于耳朵处（同样不要放于头后），\r膝盖弯曲。躯干慢慢起，要完全靠腹部肌肉发力，大约躯干与地面成30度就可以了。\r这个动作的关键之处就是整个背部没有完全离地，\r因为完全离地会引起背部肌肉的紧张和腰椎压力增加，增加动作幅度不会让6块腹肌得到更快的发展。\r卷腹的最重要部分是起始时腹肌收缩，肩膀离开垫面，向上时呼气，向下时吸气，此时肩膀是离开地面的。\r在卷腹的最高处保持2秒，此时更加用力地收缩腹肌（专业人士称之为顶峰收缩）。\r然后吸气，躯干缓慢有控制的下落，直到肩胛骨微微接触地面，但不要让腹肌完全放松。\r动作3：仰卧举腿 #  仰卧在垫面上，双腿伸直，双手放于身体两侧，双腿向上（不要屈膝）直到与躯干接近90度夹角，\r然后腿缓慢下落，重复做时不要让腿接触地面，始终保持肌肉张力。\r也有人说仰卧举腿动作不是一个最佳的锻炼腹肌的训练动作，\r要锻炼下腹肌，重要的是将臀部抬起，而不是完成腿的举放动作，\r并且对于有腰痛的练习者来说，这个动作有可能会加剧腰痛。\r所以，因人而异选择动作很重要。\r动作4：仰卧两头起 #  仰卧于平面上，双手放于身体两侧，维持平衡。膝盖和躯干同时抬起，在动作的做高处。\r双腿自然弯曲，让双手靠近脚踝处，然后身体慢慢下落。\r这个动作相对比较难，但是当你熟练之后，可以作为常用锻炼动作。\r还原时要慢，不要利用重力下落。\r让双手和脚缓慢回到地面。当你熟练时可以在双脚之间夹一重物，比如一个实心球或者一个小哑铃。\r动作5：动态平板支撑 #  俯卧于地面，用肘、前臂和脚尖撑地。\r尽可能收腹向上缓慢移动臀部，此时身体像一座山脉，臀部在最高峰。然后臀部缓慢下落，恢复至开始姿势。\r注意，下落时臀部不要松弛。这个动作，可以更有效地训练腹部深层肌肉。\r动作6：平板支撑 #  俯卧于地面，用肘、前臂和脚尖撑地，身体看起来成一条直线，这就是众所周知的平板支撑，可以锻炼到身体核心肌肉（包括腹部肌肉）。\r尽量以标准动作长时间保持这个姿势。\r初学者至少保持45秒，有一定经验的可以保持静止状态超过2分钟，时间过长其实是没有必要的，\r如果你能够撑上2分钟，那么你就应该增加动作难度（抬起一侧脚或者一侧上肢），而不是一味延长静力训练的时间。\r动作7：自行车卷腹 #  你可能认为腹内外斜肌（6块腹肌旁边的肌肉）在运动中不是重要的肌肉，但是它在运动中始终发挥作用。腹\r内外斜肌在腹部的两侧。有许多的锻炼方法可以锻炼到腹内外斜肌，\r包括躯干旋转，在做仰卧起坐时加旋转，也可以做同侧屈，也可以双手抱着实心球做旋转以及在健身房用旋转器械做训练等等。\r注意，许多初学者的腹内外斜肌相对于腹直肌是比较弱的，所以不要忽视腹内外斜肌的训练。\r做自行车卷腹，腿在空中交替做屈伸，同时躯干在卷腹同时加上旋转动作，也就是左边的膝盖朝向右边的肩膀，右边的膝盖朝向左边的肩膀。\r动作8：利用瑞士球进行卷腹练习 #  可以使用一个瑞士球进行很多卷腹训练。在球上进行不稳定状态下锻炼，会提高身体的平衡能力，\r同时也会动员更多腹肌参与，这会让训练显得更有乐趣。\r动作9：腹肌轮锻炼 #  双手握住腹肌轮手柄，膝盖着地。伸长手臂并缓慢推着腹肌轮远离身体。\r尽可能的下落，但是身体不能触及地面。你往前伸得越远，对于腹肌的刺激效果也就越好。\r如果想要增加动作难度，你可以选择站立位进行训练。\r动作10：引体向上（双手反握） #  引体向上看上去和腹肌没有关系，但是在做引体向上时，你会惊讶地发现腹部周围的许多肌肉都在工作。\r如果力量不够，你可以选择一个矮一点的单杠，让双脚可以着地，用脚蹬地协助进行引体向上动作。\r引体向上是一个复合型动作，他会极大增强身体素质，俯卧撑也属于这类动作，有创意的综合性动作，是你的好朋友。\r动作11：俯卧撑 #  有许多类型的俯卧撑，比如标准俯卧撑、跪姿俯卧撑、对墙俯卧撑、钻石俯卧撑、夹肘俯卧撑，量力而行，筛选一个适合你的类型。\r你可以在网上搜索这些动作进行锻炼。\r动作12：下蹲练习也可以锻炼到核心肌群 #  大众所理解的腹肌全名是“腹直肌”，一般认为腹直肌的作用就是使躯干弯曲，所以我们做了大量卷腹动作来训练腹直肌。\r其实“直肌”在拉丁文的意思是拉紧、适当的、直上的。你所不了解的是：腹直肌的主要功能并非让躯干屈，而是与背部肌肉协调工作，维持身体正确的姿势与稳定。\r一些锻炼动作能够让腹直肌在内的所有核心肌肉来传动与支撑脊柱。\r例如深蹲、硬拉，所以多练这些动作也可以间接锻炼腹肌。\r链接处\n"});index.add({'id':164,'href':'/life/docs/%E7%94%B5%E8%A7%86%E5%89%A7%E6%95%B4%E7%90%86/%E9%81%A5%E8%BF%9C%E7%9A%84%E6%95%91%E4%B8%96%E4%B8%BB/','title':"遥远的救世主",'section':"电视剧整理",'content':"遥远的救世主\n 强势文化自己干，弱势文化是救世主文化，依附于人。\n  神就是道，道就是规律。规律如来，容不得你思议，按规律办事的人就是神\n  政治文化搭台 》 民间文化搭架子 》 草根文化填内容  艺术 #    生存艺术\n  文化艺术\n  政治艺术\n   如果照顾父母，是以接受遗产为前提的话，那没遗产的父母就该扔墙头上了？讲责任本身就已经错了，说孝顺再加个美德就更错了。那应该是血缘关系的本来，本该如此。（第3集）    如果我孝顺的口碑是以我父亲的痛苦和尊严为条件的话，那这样的口碑我情愿不要。（第3集）    如果说养儿，就是为了防老，就别说母爱有多伟大了。您养来养去还是为了自己，那是交易。（第3集）    养儿防老，那父母就是你天然的债权人，而且这种感情比山高比海深，你永远想的就是还债报恩。所以这种文化就让每个人都直不起腰来。你看这个民族就是老弯着腰。而老人越是觉得养儿防老，就越容易觉得吃亏，心里就越苦。（第3集）    对传统文化的成见，已渗到骨子里去的人，自然会做出让常人看来离经叛道之事。（第3集）    从心理学的角度分析，越是头脑简单的人越是需要点缀和填充，而头脑复杂的人则对简洁有着特殊的心理需求。（第3集）    他的每个毛孔里，都渗透着对世俗文化居高临下的包容。（第5集）    是女人就有贪、嗔、痴。没有贪、嗔、痴的女人是天国的女人。（第5集）    这个年代，执着于出人头地并不难，难的是不执着于出人头地。（第5集）    透视社会依次有三个层面：技术、制度和文化。小到一个人，大到一个国家一个民族，任何一种命运归根到底都是那种文化属性的产物。支配人的价值取舍行为的那个东西就是文化属性。强势文化造就强者，弱势文化造就弱者，这是规律，不以人的意志为转移。（第7集）    强势文化就是遵循事物规律的文化，弱势文化就是依赖强者的道德期望破格获取的文化，也是期望救主的文化。（第7集）    精神拯救的暴利与毒品麻醉的暴利完全等值，而且不必像贩毒那样耍花招，没有心理成本和法律风险。    文明，对于不能以人字来界定的人无能为力.（第7集）    《圣经》的理由是：因信得救了，上天堂；因不信有罪了，下地狱。用这种哄孩子、吓孩子的方法让人去信，虽有利于基督教的实践，却也恰恰迎合了人的怕死的一面、贪婪的一面。这样的因果关系已经不给人以自觉、自醒的机会，人连追求高尚的机会都没有，又何以高尚呢？（第8集）\u0026quot;    如果神计划管理着人类历史的发展，那么饥饿、灾难、罪恶也该是神计划之中的事，所以人就有理由怀疑神是要拯救人还是要折腾人。如果神也是左手施舍的时候不让右手知道，那么全能的主就不需要这个永远的计划了，只需要以他的全能改变人性的罪性，注入人性的善性，人类就得以拯救了。但神没有这样做，神不想做无名救主，神需要报恩。（第8集）    《圣经》的教义如果不能经受逻辑学的检验，可能在实践上就会存在障碍。如果经受了逻辑学的检验，那表明神的思维即是人的思维，就会否定神性。换一种说法，神性如果附加上人性的期望值，神性就打了折扣。然而神性如果失去了人性的期望值，那么人还需要神吗？（第8集）    不因上天堂与下地狱的因果关系而具有的极高人生境界，就是窄门。（我本人比较喜欢的一句话）（第8集）    你实在，除了钱，看什么都没价值。    这就是圆融世故，不显山不露水，各得其所。可品性这东西，今天缺个角、明天裂道缝，也就离塌陷不远了。（第9集）    感情这事不能证明，证明本身就是对感情的一种亵渎。    咱们翻开历史看看，你从哪一行哪一页能找到救世主救世的记录？没有，从来就没有，从来都是救人的被救了，被救的救了人。如果一定要讲救世主的话，那么符合和代表客观规律的文化就是救世主。这个，就是你们的救世主。如果你根本就没打算自己站起来，老天爷来了都没用。（第10集）    所谓真经，就是能够达到寂空涅槃的究竟法门，可悟不可修。修为成佛，在求。悟为明性，在知。修行以行制性，悟道以性施行，觉者由心生律，修者以律制心。不落恶果者有信无证，住因住果、住念住心，如是生灭。不昧因果者无住而住，无欲无不欲，无戒无不戒，如是涅槃（第11集）    佛乃觉性，非人，人人都有觉性不等于觉性就是人。人相可坏，觉性无生无灭，即觉即显，即障即尘蔽，无障不显，了障涅槃。觉行圆满之佛乃佛教人相之佛，圆满即止，即非无量。若佛有量，即非阿弥陀佛。佛法无量即觉行无量，无圆无不圆，无满无不满，亦无是名究竟圆满。    佛教以次第而分，从精深处说是得道天成的道法，道法如来不可思议，即非文化。从浅义处说是导人向善的教义，善恶本有人相、我相、众生相，即是文化。从众生处说是以贪制贪、以幻制幻的善巧，虽不灭败坏下流，却无碍抚慰灵魂的慈悲。（第11集）    传统观念的死结就在一个\u0026rsquo;靠\u0026rsquo;字上，在家靠父母，出门靠朋友，靠上帝、靠菩萨、靠皇恩……总之靠什么都行，就是别靠自己，所以就只能在精神上跪着。（第11集）    传统文化毕竟是以皇恩浩荡为先决条件的文化，讲的都是皆空、无为、中庸的理，以抑制个性而求生求解。（第11集）    佛法究竟真理真相的辩证思维，如是不可思议。但是，佛教包括了佛法，而佛法有别于佛教。佛教以佛法证一，进而证究竟，最终是为给心找个不苦的理由，成佛，无量寿，极乐。佛教以假度真的方便法门住福相、住寿相、住果相，是以无执无我为名相的太极我执，致使佛教 具有了迷信、宿命、贪执的弱势文化特征，已然障蔽佛法。晚辈以为，如果佛教能依佛法破除自身迷障，不住不拘个人解脱，以佛法的如是不可思议究竟生产力与文明的真理真相，则佛法的佛教即出离宗教的佛教，成为觉悟众生的大乘法度。（第11集）    传统文化是皇天在上的文化，是等救世主、等着施恩的文化。如果一个民族的文化从骨子里就是弱势文化属性，怎么可能去承载强势文化的政治、经济？衡量一种文化属性不是看它积淀的时间长短，而是看它与客观规律的距离远近。五千年的文化是光辉、是灿烂，这个没有问题。但是，传统和习俗得过过客观规律的筛子。（第11集）    人家男人凭什么要养活女人？就是因为女人能让男人那个。我看过那种片子，男的使劲，女的叫唤，女人跟男人讨点吃穿还真不容易。女人为什么害怕第三者插足？就是因为她的那东西无效了，人家的那东西有效了，那东西得有效才能当吃当喝。…………你那还是嫁吃饭的观念，你认为男人靠不住，也不想为孤独去冒生存风险，吃饭毕竟比上床重要。当女人不需要通过支付性去换取生活资料的时候，当男人不需要支付生活资料而征服女人的时候，那时候你就愿意上床了。（第12集）    天是什么？天是神，是上帝，是创造万物者，是全能全知者，是遍在不可见者……一句话，天是道，是事物规律和自然法则。参禅悟道至天人合一的那种境界，就是天国。道法自然，不具美丑善恶的属性，有美丑善恶分别的是人，不是天。天国之女是觉悟到天国境界的女人，是没有人的贪嗔痴的女人。天国之恋，是唯有觉悟到天国境界的人才可能演绎出的爱情。（第13集）    不管是文化艺术还是生存艺术，有道无术，术尚可求也。有术无道，止于术。（第18集）    只要不是我觉到、悟到的，你给不了我，给了我也拿不住，叶晓明他们就是例子。只有我自己觉到、悟到的，我才有可能做到，我能做到的才是我的。（第18集）    原来能做到实事求是就是神话！原来能说老实话、能办老实事的人就是神！因此可见，让人做到实事求是有多难，让人做到说老实话、办老实事有多难，而做到的人却成了说鬼话、办鬼事，倒行逆施。这个世界怎么了？（第19集）    这世界要不是黑白颠倒，那还叫众生吗？那该叫天国了。（第19集）    当人一旦从危险里跳出来，他就不再去关注这个事物的危险了，他的目光就会全部落在这个事物的利益上，这就是人。（第20集）    她当然可以打电话向丁元英请教，但必须得是经过她思考而不得其解的时候。她觉得，她能争取到一个可以通过请教和询问帮助她判断事物的朋友就已经很幸运了，而越是这样，她就越需要让朋友对她有信心。（第20集）    \u0026ldquo;小姐，我能请您喝杯咖啡吗？\u0026ldquo;\u0026ldquo;喝杯咖啡倒也没什么，然后呢？\u0026ldquo;\u0026ldquo;然后就闲聊聊。\u0026ldquo;\u0026ldquo;然后就上床了，不然您大可以秀色可餐。您看，一杯咖啡承载着这么伟大的使命，您还是留着有的放矢吧。\u0026quot;（第20集）    她静静地坐了3个小时，3个小时之后她得出了一个判断：格律诗的生产成本对伯爵公司可能有潜在威胁，伯爵公司此举只是虚晃一枪而已，意图不在于收购，而在于接近、了解。她觉得伯爵公司给她上了一课，题目叫：居安思危。（第20集）    当生则生，当死则死，来去自如。丫头，不简单哪。（第22集）    您根本不了解小丹，而您凭借的也仅仅是血缘的权利。（第23集）41. 元英是明白人，应该知道你早晚要去找他说道说道。我要通知他，无非是让他有个应对，这对你对他都不尊重，还是让这事保持它本来的面目比较好。（第23集）    生老病死，有谁因为怕就躲过去了？（第24集）    你不缺杀我的心，缺一个杀了我还不影响你自我评价的理由。如果我说料到了，你就用开枪证明我判断的错；如果我说没料到，你就用开枪证明我撒谎的错。（第24集）    杀富富不去，救贫贫不离。救主的文化唯救主可说，救主不是人，是道，得救不是破了戒的狼吞虎咽，是觉悟。（第24集）    法律是社会道德的底线，是解决最基本、最表面的问题，不解决文化的根本问题，文化的问题只能由文化的觉悟解决。一个民族的文化属性就是这个民族的主，主宰着这个民族的文明、荣辱、兴衰。一个民族最强调道德的时候，正是这个民族道德最沦丧的时候。（第24集）    法律治标，文化治本。法律对于滋生法律的文化土壤无能为力，对于越过法律潜入文化土壤地带从事更大损害、更大掠夺的行为无能为力，法律是维持社会秩序的最后一道防线，是最软弱、最无奈的强大。法律的神圣是缘于道德文明的崩溃，关注弱势，激励强者构筑更高的道德平台和获得更大的综合效应，需要相应的社会文化。（第24集）    我们观想一个由人民政府制定了一个允许人民富起来的政策，如果这个允许人民致富的政策是这个政府对人民的恩赐，那么所有因为这个政策挣了钱的纳税人无疑应该对这个政府感恩戴德。如果这个允许人民致富的政策是这个政府本该如此作为的天职，那么所有因为这个政策 挣了钱的纳税人就无须对这个政府感恩戴德，而是满意。如果用纳税人的钱帮助弱势群体，纳税人的荣誉、价值怎么体现？弱势群体应该对谁表示感谢？这个恩德应该记在谁的账上？纳税人是应该感恩戴德，还是应该享有荣誉？纳税人有没有可能在解决了自身的生存之后再去追求更高的生命价值？（第24集）    构筑强者的道德平台是一个复杂的社会工程，道德平台太低，势必挤压弱势群体的生存空间，而过高的道德平台又必然存在两个问题： 首先是很少有人能攀援上去，没有可操作性。其次是过多的帮助不利于社会进步，弱势群体得到的输血越多，则自身的造血功能就越差，就越接近死亡。道德平台理想的高度，是优胜劣汰的法则与人人平等的道德两者之间的平衡。 主流的文化，是优胜劣汰的文化，是不给落后观念生存空间的文化。然而，如果不关爱弱势，道德还有价值吗？等级是客观存在，如果我们连等级的存在都不敢承认，社会又怎么可能去建立一种更高级的道德文化？如果没有个体的文化价值的量变，又怎么可能会产生民族的文化价值的质变？（第24集）    计划经济的弊端在于社会为弱势文化提供了生存、繁衍的温床，解决这个问题主要依靠政治理想的教育。市场经济的弊端在于产生贫富两极分化以及由此产生的社会矛盾，解决这个问题主要依靠社会利益调节机制。计划经济制度，政治是人的最高价值，获取社会财富和社会地 位的惟一通道是首先得到权力。市场经济制度，经济是人的最高价值，获取社会财富和社会地位的通道多种多样。获取平等的社会值，就必须付出惰性的代价；获取活力的社会值，就必须付出等级的代价。这是由人的自然属性决定的，这就是天道，就是客观规律，而社会利益调节机制的制定则有赖于强势群体的道德价值指标和对社会稳定的天然需要。    "});index.add({'id':165,'href':'/life/posts/uml/','title':"统一建模语言",'section':"Blog",'content':" 统一建模语言(Unified Modeling Language，UML)是一种为面向对象系统的产品进行说明、可视化和编制文档的一种标准语言，是非专利的第三代建模和规约语言。UML是面向对象设计的建模工具，独立于任何具体程序设计语言。\n UML作为一种统一的软件建模语言具有广泛的建模能力。UML是在消化、吸收、提炼至今存在的所有软件建模语言的基础上提出的，集百家之所长，它是软件建模语言的集大成者。UML还突破了软件的限制，广泛吸收了其他领域的建模方法，并根据建模的一般原理，结合了软件的特点，因此具有坚实的理论基础和广泛性。UML不仅可以用于软件建模，还可以用于其他领域的建模工作。 [1] #  UML立足于对事物的实体、性质、关系、结构、状态和动态变化过程的全程描述和反映。UML可以从不同角度描述人们所观察到的软件视图，也可以描述在不同开发阶段中的软件的形态。UML可以建立需求模型、逻辑模型、设计模型和实现模型等，但UML在建立领域模型方面存在不足，需要进行补充。 [1] #  作为一种建模语言，UML有严格的语法和语义规范。UML建立在元模型理论基础上，包括4层元模型结构，分别是基元模型、元模型、模型和用户对象。4层结构层层抽象，下一层是上一层的实例。UML中的所有概念和要素均有严格的语义规范。 [1] #  UML采用一组图形符号来描述软件模型，这些图形符号具有简单、直观和规范的特点，开发人员学习和掌握起来比较简单。所描述的软件模型，可以直观地理解和阅读，由于具有规范性，所以能够保证模型的准确、一致。 #  "});index.add({'id':166,'href':'/life/posts/project-management/','title':"项目管理",'section':"Blog",'content':"项目管理（Project Management,PM/Management by Projects,MBP） #  项目管理概述 #  项目管理是项目的管理者，在有限的资源约束下，运用系统的观点、方法和理论，对项目涉及的全部工作进行有效地管理。即从项目的投资决策开始到项目结束的全过程进行计划、组织、指挥、协调、控制和评价，以实现项目的目标。 #  按照传统的做法，当企业设定了一个项目后，参与这个项目的至少会有好几个部门，包括财务部门、市场部门、行政部门等等，而不同部门在运作项目过程中不可避免地会产生摩擦，须进行协调，而这些无疑会增加项目的成本，影响项目实施的效率。 #  而项目管理的做法则不同。不同职能部门的成员因为某一个项目而组成团队，项目经理则是项目团队的领导者，他们所肩负的责任就是领导他的团队准时、优质地完成全部工作，在不超出预算的情况下实现项目目标。项目的管理者不仅仅是项目执行者，他参与项目的需求确定、项目选择、计划直至收尾的全过程，并在时间、成本、质量、风险、合同、采购、人力资源等各个方面对项目进行全方位的管理，因此项目管理可以帮助企业处理需要跨领域解决的复杂问题，并实现更高的运营效率。 #  项目管理的应用从80年代仅限于建筑、国防、航天等行业迅速发展到今天的计算机、电子通讯、金融业甚至政府机关等众多领域。 #  人们通常认为，项目管理是第二次世界大战的产物（如：曼哈顿计划）。在1950年至1980年期间，应用项目管理的主要是国防建设部门和建筑公司。传统的观点认为，项目管理者的工作就是单纯地完成既定的任务。 #  从本世纪八十年代开始，项目管理的应用扩展到其他工业领域（行业），如制药行业、电信部门、软件开发业等。项目管理者也不再被认为仅仅是项目的执行者，要求他们能胜任其它各个领域的更为广泛的工作，同时具有一定的经营技巧。美国项目管理学会（PMI）已提出了关于一个有效的专业项目管理者必须具备的几个方面的基本能力： #   项目范围管理 项目时间管理 项目费用管理 项目质量管理 项目人力资源管理 项目沟通管理 项目风险管理 项目采购管理 项目综合管理  "});index.add({'id':167,'href':'/life/docs/javadir/groovy/groovy%E5%8F%98%E9%87%8F/','title':"Groovy变量",'section':"groovy 学习与使用 ",'content':"Groovy 变量 #   Groovy中的变量可以通过两种方式定义 - 使用数据类型的本地语法，或者使用def关键字。对于变量定义，必须明确提供类型名称或在替换中使用“def”。这是Groovy解析器需要的。\n   byte - 这用于表示字节值。例如2。\n  short - 用于表示一个短数。例如10。\n  int - 这用于表示整数。 例如1234。\n  long - 这用于表示一个长数。例如10000090。\n  float - 用于表示32位浮点数。例如12.34。\n  double - 这用于表示64位浮点数。例如12.3456565。\n  char - 这定义了单个字符文字。例如\u0026rsquo;a'。\n  Boolean - 这表示一个布尔值，可以是true或false。\n  String - 这是以字符串形式表示的文本。 例如“Hello World”。\n  Groovy还允许其他类型的变量，如数组，结构和类\n  变量声明 #   title: \u0026quot; groovy变量 \u0026quot; date: 2021-04-15 draft: false weight: 3 #    变量声明告诉编译器为变量创建存储的位置和大小。\n  下面是一个变量声明的例子 -\n  // x is defined as a variable String x = \u0026quot;Hello\u0026quot;;\r// The value of the variable is printed to the console println(x);\r 当我们运行上面的程序，我们会得到以下结果   Hello  变量命名 #   变量的名称可以由字母，数字和下划线字符组成。 它必须以字母或下划线开头。 大写和小写字母是不同的，因为Groovy，就像Java是一种区分大小写的编程语言。  // Defining a variable in lowercase int x = 5;\r// Defining a variable in uppercase int X = 6; // Defining a variable with the underscore in it's name def _Name = \u0026quot;Joe\u0026quot;; println(x); println(X); println(_Name); 5\r6\rJoe\r你好,世界 !\r 除此之外 在groovy中 定义变量也是可以不加 def 或者 基本类型   a = 125;\n"});})();